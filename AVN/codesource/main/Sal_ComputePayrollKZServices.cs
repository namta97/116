using HRM.Business.Attendance.Domain;
using HRM.Business.Attendance.Models;
using HRM.Business.Category.Domain;
using HRM.Business.Category.Models;
using HRM.Business.Evaluation.Models;
using HRM.Business.Hr.Domain;
using HRM.Business.Hr.Models;
using HRM.Business.HrmSystem.Domain;
using HRM.Business.HrmSystem.Models;
using HRM.Business.Insurance.Models;
using HRM.Business.Main.Domain;
using HRM.Business.Payroll.Models;
using HRM.Data.BaseRepository;
using HRM.Data.Entity;
using HRM.Infrastructure.Utilities;
using HRM.Infrastructure.Utilities.Helper;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity.Validation;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using VnResource.AdoHelper;
using VnResource.Helper.Ado;
using VnResource.Helper.Data;
using VnResource.Helper.Linq;
using VnResource.Helper.Setting;

namespace HRM.Business.Payroll.Domain
{
    public class Sal_ComputePayrollKZServices : BaseService
    {
        /*   
        *   Các function hay dùng khi tính lương
        *   Get dữ liệu theo profile để tính lương (Dùng riêng chức năng Tính Lương) : GetDataForComputePayrollByProfileIds 
        *   Get dữ liệu danh mục để tính lương (Dùng riêng chức năng Tính Lương): GetDataForComputePayroll
        *   Tính toán giá trị phần tử :  GetStaticValues
        *   Tính lương: ComputePayroll (ComputePayrollByProfileIDKZ: kaizen 1 nv được thêm ở build 8.7.46)
        *   Tính lương nhóm : ComputePayrollByElementGroup
        *   Tính Lương ngày : ParseElementFormulaByDay (v8.6.28.02 được thêm ở build này)
        *   Tính lương ngày - N tháng : ParseElementFormulaByDayPreMonth
        *   Lưu : AsyncSaveChangePayroll
        *   
        *   ==================================================================================
        *   CÁC DỮ LIỆU CHỈ LẤY KHI DỰ ÁN CÓ ĐẶT ENUM TRONG CÔNG THỨC TÍNH LƯƠNG
        *   dicRosterByAdPay : Dữ liệu Att_Roster, giới hạn theo:
        *                        Att_Roster.DateStart <= CutOffDuration.AdPayTo 
        *                     && Att_Roster.DateEnd >= CutOffDuration.AdPayFrom
        *                     && Att_Roster.Status == RosterStatus.E_APPROVED
        *   dicBasicSalaryAdPayTo: Dữ liệu Sal_BasicSalary, giới hạn theo:
        *                          Sal_BasicSalary.DateOfEffect <= CutOffDuration.AdPayTo
        *   dicPayrollTableReUseByMonth: Dữ liệu Sal_PayrollTableReUse, lấy lùi theo từng tháng lùi và phần tử
        *   
        */

        private Dictionary<Guid, double> dicTotalRealWagesAll = new Dictionary<Guid, double>();
        private int profileIndex = 0;
        private int profileTotal = 0;

        private int _degreeOfParallelism = 4;
        private int _patchSizeProfile = 600;

        public Sal_ComputePayrollEntity ComputePayroll(
            DateTime dateTimeComputeTotal,
            List<Hre_ProfileEntity> ListProfileResult,
            Att_CutOffDurationEntity CutOffDuration,
            Guid? PaymentPeriodID,
            string OrgStructure,
            string WorkingPlace,
            LogHelper _logger,
            List<string> listKeyLog,
            string UserLogin,
            bool Settlement = false,
            bool IsComputeForCompare = false,
            bool IsComputeByProfile = false,
            bool IsComputePayrollProfileQuit = false,
            bool IsComputeRe = false,
            Sal_CaculateHistoryDetailProfileComputeEntity detailCompute = null
            )
        {
            using (var context = new VnrHrmDataContext())
            {
                var unitOfWork = (IUnitOfWork)new UnitOfWork(context);
                Sal_CaculateHistory asynTask = new Sal_CaculateHistory()
                {
                    ID = Guid.NewGuid(),
                    CutOffDurationID = CutOffDuration.ID,
                    OrgID = OrgStructure,
                    WorkPlaceListCode = WorkingPlace,
                    UserCaculate = UserLogin,
                    Status = AsynTaskStatus.Doing.ToString(),
                    FromDate = DateTime.Now,
                    PercentCaculate = 0.01,
                    TotalEmployee = 0,
                    TotalAmount = 0,
                    NumberEmployee = 0,
                    //[09/05/2018][bang.nguyen][94712][Modify Func]
                    //luu them type vao lich su tinh khi tinh luong
                    TypeCal = TypeCalCaculateHistory.E_Payroll.ToString()
                };


                try
                {
                    #region Xét Type Cal
                    asynTask.TypeCal = TypeCalCaculateHistory.E_Payroll.ToString();
                    #region Hien.Le [04/01/2020][110996][Modify]
                    if (IsComputePayrollProfileQuit)
                    {
                        asynTask.TypeCal = TypeCalCaculateHistory.E_PayrollProfileQuit.ToString();
                    }
                    #endregion
                    else if (IsComputeRe)
                    {
                        asynTask.TypeCal = TypeCalCaculateHistory.E_RePayroll.ToString();
                    }
                    #endregion

                    var totalEmployee = ListProfileResult.Count();
                    var repoSys_AsynTask = new CustomBaseRepository<Sal_CaculateHistory>(unitOfWork);
                    asynTask.TotalEmployee = totalEmployee;

                    #region [08/01/2018][bang.nguyen][92041][Modify Func]
                    //dem nhan vien nghi viec va dang lam viec duoc tinh trong ky
                    var numberEmployeeQuit = ListProfileResult.Where(s => s.DateQuit != null && s.DateQuit < CutOffDuration.DateEnd).Count();
                    asynTask.NumberEmployeeQuit = numberEmployeeQuit;
                    asynTask.NumberEmployee = totalEmployee - numberEmployeeQuit;
                    asynTask.Description = _logger.RootFolder + "\\" + _logger.LogFileName + ".json";

                    repoSys_AsynTask.Add(asynTask);
                    unitOfWork.SaveChanges();
                    #endregion

                    #region [04052016][bang.nguyen][bug][67159] Comment

                    //TODO: chổ này không cần chunk qua làm gì, 1 lần lấy lên hết vì dữ liệu stopworking không nhiều
                    //var lstStopWorking = new List<Hre_StopWorking>().Select(s => new { s.ID, s.ProfileID, s.DateComeBack }).ToList();
                    //var lstPofileID = listProfile.Select(s => s.ID).ToList();
                    //foreach (var profileids in lstPofileID.Chunk(2000))
                    //{
                    //    lstStopWorking.AddRange(unitOfWork.CreateQueryable<Hre_StopWorking>(Guid.Empty, s => s.DateComeBack <= CutOffDuration.DateEnd
                    //                                                                                     && s.ProfileID != null && profileids.Contains(s.ProfileID.Value))
                    //                                                                                    .Select(s => new { s.ID, s.ProfileID, s.DateComeBack }).ToList());
                    //}
                    //lstStopWorking = lstStopWorking.OrderByDescending(s => s.DateComeBack).ToList();


                    //#region Loại bỏ các nhân viên không có Grade
                    ////TODO: chổ này có thể lấy = entity và select 2 field là profileid và SalaryDayClose
                    //string status = string.Empty;
                    //List<object> listModel = new List<object>();
                    //listModel = Common.AddRange(10);
                    //listModel[4] = CutOffDuration.DateStart;
                    //listModel[5] = CutOffDuration.DateEnd;
                    //List<Sal_GradeEntity> ListGrade = GetData<Sal_GradeEntity>(listModel, ConstantSql.hrm_sal_sp_get_Sal_Grade, UserLogin, ref status);

                    //List<Hre_ProfileEntity> ListProfileResult = new List<Hre_ProfileEntity>();
                    //foreach (var profile in listProfile)
                    //{
                    //    //[04/11/2015][hien.nguyen][Modify][59427]
                    //    var GradeByProfile = ListGrade.OrderByDescending(m => m.MonthStart).FirstOrDefault(m => m.ProfileID == profile.ID);
                    //    if (GradeByProfile.HasValue())
                    //    {
                    //        //[04052016][bang.nguyen][bug][67159]
                    //        DateTime? _DateComeBack = null;
                    //        var objStopWork = lstStopWorking.Where(s => s.ProfileID == profile.ID).FirstOrDefault();
                    //        if (objStopWork != null && objStopWork.DateComeBack != null)
                    //        {
                    //            _DateComeBack = objStopWork.DateComeBack;
                    //        }
                    //        if (GradeByProfile.SalaryDayClose.HasValue && (profile.DateHire.HasValue || _DateComeBack.HasValue))
                    //        {
                    //            try
                    //            {
                    //                //xu lý nếu ngày cấu hình vượt quá ngày cuối cùng trong tháng 
                    //                int totalDayInMonth = DateTime.DaysInMonth(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month);
                    //                int _dayClose = GradeByProfile.SalaryDayClose.Value;
                    //                if (_dayClose > totalDayInMonth)
                    //                {
                    //                    _dayClose = totalDayInMonth;
                    //                }
                    //                DateTime DateClose = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, _dayClose);
                    //                if ((profile.DateHire == null || profile.DateHire <= DateClose) && (_DateComeBack == null || _DateComeBack <= DateClose))
                    //                {
                    //                    ListProfileResult.Add(profile);
                    //                }
                    //            }
                    //            catch
                    //            {
                    //                //Hien.Nguyen
                    //                //Vẫn add vào trường hợp cấu hình ngày chốt là 31 nhưng tháng ko có ngày 31
                    //                ListProfileResult.Add(profile);
                    //            }
                    //        }
                    //        else
                    //        {
                    //            ListProfileResult.Add(profile);
                    //        }
                    //    }
                    //}
                    //#endregion

                    #endregion

                    #region Khởi tạo data dicTotalRealWagesAll
                    if (!dicTotalRealWagesAll.ContainsKey(asynTask.ID))
                    {
                        dicTotalRealWagesAll.Add(asynTask.ID, 0);
                    }
                    profileTotal = totalEmployee;
                    #endregion

                    if (ListProfileResult.Count > 0)
                    {
                        //load% 5% => 6%
                        asynTask.PercentCaculate += IsComputeByProfile ? 0.10 : 0.05;
                        repoSys_AsynTask.Edit(asynTask);
                        repoSys_AsynTask.SaveChanges();

                        Thread thread = new Thread(() =>
                        {
                            try
                            {
                                ComputePayrollProcess(
                                    dateTimeComputeTotal,
                                    ListProfileResult,
                                    CutOffDuration,
                                    null,
                                    _logger,
                                    listKeyLog,
                                    asynTask.ID,
                                    UserLogin,
                                    PaymentPeriodID,
                                    Settlement,
                                    IsComputeForCompare,
                                    IsComputeByProfile,
                                    IsComputeRe,
                                    false,
                                    detailCompute);
                            }
                            catch (Exception ex)
                            {
                                asynTask.Status = AsynTaskStatus.Error.ToString() + " in ComputePayroll";
                                asynTask.Description = ex.Message.ToString();
                                asynTask.ToDate = DateTime.Now;
                                asynTask.PercentCaculate = 1;
                                unitOfWork.SaveChanges();
                                GC.Collect();
                            }
                        });
                        thread.Start();
                        return new Sal_ComputePayrollEntity() { CaculateHistoryID = asynTask.ID, ThreadRun = thread, ListOrderNumber = ListProfileResult.Where(m => m.OrderNumber != null).Select(m => m.OrderNumber.Value).Distinct().ToList(), listProfileID = ListProfileResult.Select(s => s.ID).ToList() };
                    }
                    else
                    {
                        if (detailCompute != null)
                        {
                            detailCompute.FailedComputed = detailCompute.EmployeePresents;
                            asynTask.DetailProfileCompute = Newtonsoft.Json.JsonConvert.SerializeObject(detailCompute);
                        }
                        asynTask.Status = AsynTaskStatus.Error.ToString();
                        asynTask.ToDate = DateTime.Now;
                        asynTask.PercentCaculate = 1;
                        asynTask.Description = "Không tồn tại nhân viên nào !";
                        unitOfWork.SaveChanges();
                    }
                }
                catch (Exception ex)
                {
                    asynTask.Status = AsynTaskStatus.Error.ToString() + " init ComputePayroll";
                    asynTask.Description = ex.Message.ToString();
                    asynTask.ToDate = DateTime.Now;
                    asynTask.PercentCaculate = 1;
                    unitOfWork.SaveChanges();
                }

                return new Sal_ComputePayrollEntity() { CaculateHistoryID = asynTask.ID, ThreadRun = null };
            }
        }


        ///Tạo lịch sử tính lương
        public void CreateCalculatorPayrollLockObject(
            Att_CutOffDurationEntity CutOffDuration,
            string OrgStructure,
            string WorkingPlace,
            bool IsComputePayrollProfileQuit = false,
            bool IsComputeRe = false,
            bool IsComputePayBack = false,
            Sal_CaculateHistoryDetailProfileComputeEntity detailCompute = null)
        {
            using (var context = new VnrHrmDataContext())
            {
                var unitOfWork = (IUnitOfWork)new UnitOfWork(context);
                Sal_CaculateHistory asynTask = new Sal_CaculateHistory()
                {
                    ID = Guid.NewGuid(),
                    CutOffDurationID = CutOffDuration.ID,
                    OrgID = OrgStructure,
                    WorkPlaceListCode = WorkingPlace,
                    UserCaculate = UserLogin,
                    Status = AsynTaskStatus.Doing.ToString(),
                    FromDate = DateTime.Now,
                    PercentCaculate = 0.01,
                    TotalEmployee = 0,
                    TotalAmount = 0,
                    NumberEmployee = 0,
                    //[09/05/2018][bang.nguyen][94712][Modify Func]
                    //luu them type vao lich su tinh khi tinh luong
                    TypeCal = TypeCalCaculateHistory.E_Payroll.ToString()
                };
                #region Xét Type Cal
                asynTask.TypeCal = TypeCalCaculateHistory.E_Payroll.ToString();
                #region Hien.Le [04/01/2020][110996][Modify]
                if (IsComputePayrollProfileQuit)
                {
                    asynTask.TypeCal = TypeCalCaculateHistory.E_PayrollProfileQuit.ToString();
                }
                #endregion
                else if (IsComputeRe)
                {
                    asynTask.TypeCal = TypeCalCaculateHistory.E_RePayroll.ToString();
                }
                else if (IsComputePayBack)
                {
                    asynTask.TypeCal = TypeCalCaculateHistory.E_PayrollPayback.ToString();
                }
                #endregion
                asynTask.DetailProfileCompute = Newtonsoft.Json.JsonConvert.SerializeObject(detailCompute);
                var repoSys_AsynTask = new CustomBaseRepository<Sal_CaculateHistory>(unitOfWork);
                #region [08/01/2018][bang.nguyen][92041][Modify Func]
                //dem nhan vien nghi viec va dang lam viec duoc tinh trong ky

                repoSys_AsynTask.Add(asynTask);
                unitOfWork.SaveChanges();
                #endregion
            }
        }

        /// <summary>
        /// Hien.Nguyen
        /// Hàm tính lương
        /// </summary>
        /// <param name="listProfile">List Profile</param>
        /// <param name="CutOffDuration">Kỳ Lương</param> 
        /// <param name="asynTaskID">ID CaculateHistory</param>
        /// <param name="HeaderTemplateLog">Header Ghi Log</param>
        /// <param name="UserLogin">User Login</param>
        /// <param name="Settlement">Có quyết toán nghỉ việc hay không</param>
        public void ComputePayrollProcess(
        DateTime dateTimeComputeTotal,
        List<Hre_ProfileEntity> listProfile,
        Att_CutOffDurationEntity CutOffDuration,
        Att_CutOffDurationEntity CutOffDurationPayBack,
        LogHelper _logger,
        List<string> listKeyLog,
        Guid asynTaskID,
        string UserLogin,
        Guid? PaymentPeriodID,
        bool Settlement = false,
        bool IsComputeForCompare = false,
        bool IsComputeByProfile = false,
        bool IsComputeRe = false,
        bool IsComputePayBack = false,
        Sal_CaculateHistoryDetailProfileComputeEntity detailCompute = null
        )
        {
            /*
                B0: Khởi tạo các biến cần sử dụng
                B1: Khởi tạo ghi log
                B2: Get dữ liệu danh mục vào TotalData
                B3: Lấy các cấu hình tính lương
                B4: Duyệt qua theo list Profile để lấy dữ liệu và tính
            */
            using (var context = new VnrHrmDataContext())
            {

                #region Khởi tạo các biến cần sử dụng
                var unitOfWork = (IUnitOfWork)new UnitOfWork(context);
                var repoSys_AsynTask = new CustomBaseRepository<Sal_CaculateHistory>(unitOfWork);
                var repoPayrollTable = new CustomBaseRepository<Sal_PayrollTable>(unitOfWork);
                var Sys_Model = repoSys_AsynTask.FindBy(m => m.ID == asynTaskID).FirstOrDefault();
                unitOfWork.SaveChanges();

                var swatch = new System.Diagnostics.Stopwatch();

                //var DatetimeStart = new DateTime();
                //TraceLogManager FileLog = new TraceLogManager();


                var _basicSalaryService = new Sal_BasicSalaryServices();
                //Tổng số nhân viên
                int totalProfile = listProfile.Count;
                int soLanChunk600 = 0;
                if (totalProfile != 0 && this._patchSizeProfile != 0)
                {
                    if (totalProfile % this._patchSizeProfile == 0)
                        soLanChunk600 = totalProfile / this._patchSizeProfile;
                    else
                        soLanChunk600 = (totalProfile / this._patchSizeProfile) + 1;
                }
                #region Khởi tạo data dicTotalRealWagesAll
                if (!dicTotalRealWagesAll.ContainsKey(asynTaskID))
                {
                    dicTotalRealWagesAll.Add(asynTaskID, 0);
                }
                #endregion
                #endregion

                try
                {

                    #region Get dữ liệu danh mục vào TotalData
                    swatch.Restart();
                    ComputePayrollDataModelKZAll TotalDataAll = GetDataForComputePayroll(CutOffDuration, UserLogin);
                    _logger.WriteInfo("ComputePayrollProcess", "======> GET DATA GLOBAL", new
                    {
                        Time = swatch.Elapsed.ToString(),
                    });
                    #endregion

                    //Kiểm tra xem có lỗi store hay không
                    if (TotalDataAll.Status != null && TotalDataAll.Status != string.Empty)
                    {
                        Sys_Model.Status = AsynTaskStatus.Error.ToString();
                        Sys_Model.Description = TotalDataAll.Status;
                        Sys_Model.PercentCaculate = 1;
                        _logger.WriteError("ComputePayrollProcess", "======> STORE CATEGORY ERROR", new
                        {
                            exception = TotalDataAll.Status
                        });
                        unitOfWork.SaveChanges();
                    }
                    else
                    {
                        #region Khởi tạo dữ liệu 
                        //them dk để xử lý đệ qui phần tử lương 1 lần cho 1 chế độ lương
                        TotalDataAll.totalProfile = listProfile.Count;
                        TotalDataAll.dicTableGetDataCategory = new Dictionary<string, string>();

                        foreach (var item in TotalDataAll.listElement_All.Where(m => (m.GradePayrollID != null) || m.IsApplyGradeAll == true))
                        {
                            item.Formula = item.Formula.Replace("\n", "").Replace("\t", "").Trim();

                            //xử lý cho những công thức đã đặt sai (sử dụng IF) : đặt enum phần tử trong dấu ""
                            //[25/10/2017][bang.nguyen]
                            if (item.Formula.Contains("]\""))
                            {
                                item.Formula = item.Formula.Replace("\"[", "[").Replace("]\"", "]");
                            }
                        }
                        #endregion

                        #region Lấy các cấu hình tính lương
                        Sys_AttOvertimePermitConfigServices ConfigServices = new Sys_AttOvertimePermitConfigServices();
                        bool ComputeOrderNumber = ConfigServices.GetConfigValue<bool>(AppConfig.HRM_SAL_COMPUTEPAYROLL_ORDERNUMBER);
                        string REALWAGES = ConfigServices.GetConfigValue<string>(AppConfig.HRM_SAL_ELEMENT_REALWAGES);
                        REALWAGES = REALWAGES != null ? REALWAGES : string.Empty;

                        //[03/12/2015][hien.nguyen][Modify][61208]
                        //Lấy cấu hình duyệt dữ liệu người phụ thuộc và lương cơ bản
                        bool IsApproveDependant = ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISAPPROVEDDEPENDANT);
                        bool IsApproveBasicSalary = ConfigServices.GetConfigValue<bool>(AppConfig.HRM_HRE_CONFIGGENERAL_ISAPPROVEDBASICSALARY);
                        // [Tung.Tran][16.10/2018] 0100008: Thêm phần tử lương tháng n-1	
                        TotalDataAll.IsApproveBasicSalary = IsApproveBasicSalary;

                        // Lấy cấu hình tính lương nhóm
                        bool isComputePayrollByGroup = false;
                        var objAllSettingComputeGroup = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_SAL_CONFIG_COMPUTEPAYROLLBYGROUP.ToString()).FirstOrDefault();
                        if (objAllSettingComputeGroup != null && !string.IsNullOrEmpty(objAllSettingComputeGroup.Value1))
                        {
                            if (bool.TryParse(objAllSettingComputeGroup.Value1, out isComputePayrollByGroup))
                            {
                                if (isComputePayrollByGroup)
                                {
                                    isComputePayrollByGroup = true;
                                }
                            }
                        }

                        var maxProcess = TotalDataAll.listAllSettingEntity.FirstOrDefault(i => i.Name == AppConfig.HRM_ATT_WORKDAY_SUMMARY_PROCESSPARTICIPATECOMPUTEWORKDAY.ToString());
                        if (maxProcess != null && !string.IsNullOrEmpty(maxProcess.Value1))
                        {
                            int noProcess = 0;
                            int.TryParse(maxProcess.Value1, out noProcess);
                            if (noProcess != 0)
                                this._degreeOfParallelism = int.Parse(maxProcess.Value1);
                        }

                        #endregion

                        #region Xóa dữ liệu cũ (Chỉ cập nhật IsDelete)
                        swatch.Restart();

                        #region Xóa bảng lương của các NV
                        //[27/11/2015][hien.nguyen][Modify][60445]
                        //TODO: Có thể dùng thread để đăng tốc độ
                        if (IsComputeForCompare != true)
                        {
                            Hre_ProfileServices profileServices = new Hre_ProfileServices();

                            #region [10/08/2017][bang.nguyen][86579]: chi xoa du lieu luong cua nhan vien nao duoc tinh luong
                            if (IsComputeRe)
                            {
                                profileServices.DeleteRePayrollTable(listProfile.Select(m => m.ID).ToList(), CutOffDuration.ID);
                            }
                            else if (IsComputePayBack)
                            {
                                profileServices.DeletePayrollPayback(listProfile.Select(m => m.ID).ToList(), CutOffDuration.ID, CutOffDurationPayBack.ID);
                            }
                            else
                            {
                                profileServices.DeletePayrollTable(listProfile.Select(m => m.ID).ToList(), CutOffDuration.ID);
                            }
                            #endregion
                        }

                        #endregion

                        #region Xóa bảng lương ReUse
                        //[21/08/2017][bang.nguyen][86779][Modify Func]
                        //Bổ sung chức năng lưu trữ lại giá trị những phần tử lương cần sử dụng lại vào các tháng sau
                        //neu co phan tu luong sử dụng lại tháng sau
                        if (IsComputeForCompare != true && !IsComputeRe && !IsComputePayBack)
                        {
                            if (TotalDataAll.listElement_All.Where(s => s.IsReUse == true).Count() > 0)
                            {
                                Sal_PayrollTableReUseServices payrollTableReUseServices = new Sal_PayrollTableReUseServices();
                                bool IsRemovePayrollTableReUse = payrollTableReUseServices.DeletePayrollTableReUse(listProfile.Select(m => m.ID).ToList(), CutOffDuration.ID);
                            }
                        }

                        #endregion

                        #region Xóa bảng lương nhóm
                        if (IsComputeForCompare != true && !IsComputeRe && !IsComputePayBack)
                        {
                            if (isComputePayrollByGroup == true && TotalDataAll.listElement_All.Where(s => s.IsPayrollGroupElement == true).Count() > 0)
                            {
                                Sal_PayrollGroupTableServices payrollGroupTableServices = new Sal_PayrollGroupTableServices();
                                bool IsRemovePayrollGroupTable = payrollGroupTableServices.DeletePayrollGroupTable(listProfile.Select(m => m.ID).ToList(), CutOffDuration.ID);
                            }
                        }
                        #endregion

                        _logger.WriteInfo("ComputePayrollProcess", "======> DELETE OLD DATA:", new
                        {
                            Time = swatch.Elapsed.ToString(),
                        });

                        #endregion

                        #region Xử lý lấy dữ liệu theo profile => Áp dụng parallel
                        swatch.Restart();
                        TotalDataAll.ListPayrolltable = new List<Sal_PayrollTable>();
                        List<Sal_PayrollTable> listPayrollTableByEntities = new List<Sal_PayrollTable>();
                        //var TotalClone = TotalDataAll.CopyData<ComputePayrollDataModelKZ>();
                        var lockObjectGetPayrollTable = new Object();
                        var lockObjectGetDataByProfile = new Object();

                        Parallel.ForEach(listProfile.Chunk(this._patchSizeProfile)
                        , new ParallelOptions() { MaxDegreeOfParallelism = this._degreeOfParallelism }
                        , listProfileSplit =>
                        {
                            using (var dbContext = new VnrHrmDataContext())
                            {
                                dbContext.Configuration.LazyLoadingEnabled = false;
                                dbContext.Configuration.ProxyCreationEnabled = false;
                                var unitOfWorkParallel = new UnitOfWork(dbContext);
                                var listProfileIDs = listProfileSplit
                                    .Select(p => p.ID)
                                    .ToList();

                                var listOrders = listProfileSplit
                                   .Select(p => p.Order)
                                   .ToArray();

                                #region Biến lưu bảng lương cho chức năng  quyết toán
                                if (Settlement)
                                {
                                    var listPayrollTable = unitOfWorkParallel.CreateQueryable<Sal_PayrollTable>(Guid.Empty,
                                        x => x.CutOffDurationID == CutOffDuration.ID
                                        && listProfileIDs.Contains(x.ProfileID))
                                        .ToList();

                                    lock (lockObjectGetPayrollTable)
                                    {
                                        listPayrollTableByEntities.AddRange(listPayrollTable);
                                    }
                                }
                                #endregion 

                                #region Get dữ liệu cho các thông tin khác

                                var TotaDataByProfileIDs = GetDataForComputePayrollByProfileIds(
                                                           TotalDataAll,
                                                           CutOffDuration,
                                                           string.Join(",", listOrders),
                                                           UserLogin,
                                                           IsApproveBasicSalary,
                                                           isComputePayrollByGroup
                                                           );

                                if (!string.IsNullOrEmpty(TotaDataByProfileIDs.Status))
                                {
                                    // Có lỗi trong quá trình get dữ liệu => Ghi log dừng xử lý
                                    lock (lockObjectGetDataByProfile)
                                    {
                                        TotalDataAll.Status += TotaDataByProfileIDs.Status;
                                    }
                                }
                                else
                                {
                                    lock (lockObjectGetDataByProfile)
                                    {
                                        #region Set into TotalData
                                        if (TotaDataByProfileIDs.listPayrollTablePayBackItem != null)
                                        {
                                            if (TotalDataAll.listPayrollTablePayBackItem == null) TotalDataAll.listPayrollTablePayBackItem = new List<Sal_PayrollTablePayBackItemEntity>();
                                            TotalDataAll.listPayrollTablePayBackItem.AddRange(TotaDataByProfileIDs.listPayrollTablePayBackItem);
                                        }
                                        if (TotaDataByProfileIDs.listAttendanceTablePaybackItem != null)
                                        {
                                            if (TotalDataAll.listAttendanceTablePaybackItem == null) TotalDataAll.listAttendanceTablePaybackItem = new List<Att_AttendanceTablePaybackItemEntity>();
                                            TotalDataAll.listAttendanceTablePaybackItem.AddRange(TotaDataByProfileIDs.listAttendanceTablePaybackItem);
                                        }
                                        if (TotaDataByProfileIDs.listAttendanceTablePayback != null)
                                        {
                                            if (TotalDataAll.listAttendanceTablePayback == null) TotalDataAll.listAttendanceTablePayback = new List<Att_AttendanceTablePaybackEntity>();
                                            TotalDataAll.listAttendanceTablePayback.AddRange(TotaDataByProfileIDs.listAttendanceTablePayback);
                                        }
                                        if (TotaDataByProfileIDs.listRecalAttendanceTableItem != null)
                                        {
                                            if (TotalDataAll.listRecalAttendanceTableItem == null) TotalDataAll.listRecalAttendanceTableItem = new List<Att_RecalAttendanceTableItemEntity>();
                                            TotalDataAll.listRecalAttendanceTableItem.AddRange(TotaDataByProfileIDs.listRecalAttendanceTableItem);
                                        }
                                        if (TotaDataByProfileIDs.listRecalAttendanceTable != null)
                                        {
                                            if (TotalDataAll.listRecalAttendanceTable == null) TotalDataAll.listRecalAttendanceTable = new List<Att_RecalAttendanceTableEntity>();
                                            TotalDataAll.listRecalAttendanceTable.AddRange(TotaDataByProfileIDs.listRecalAttendanceTable);
                                        }
                                        if (TotaDataByProfileIDs.listAttendanceTableItem != null)
                                        {
                                            if (TotalDataAll.listAttendanceTableItem == null) TotalDataAll.listAttendanceTableItem = new List<Att_AttendanceTableItemEntity>();
                                            TotalDataAll.listAttendanceTableItem.AddRange(TotaDataByProfileIDs.listAttendanceTableItem);
                                        }
                                        if (TotaDataByProfileIDs.listAttendanceTableItem_N_1 != null)
                                        {
                                            if (TotalDataAll.listAttendanceTableItem_N_1 == null) TotalDataAll.listAttendanceTableItem_N_1 = new List<Att_AttendanceTableItemEntity>();
                                            TotalDataAll.listAttendanceTableItem_N_1.AddRange(TotaDataByProfileIDs.listAttendanceTableItem_N_1);
                                        }
                                        if (TotaDataByProfileIDs.listRecalAttendanceTableItem_N_1 != null)
                                        {
                                            if (TotalDataAll.listRecalAttendanceTableItem_N_1 == null) TotalDataAll.listRecalAttendanceTableItem_N_1 = new List<Att_RecalAttendanceTableItemEntity>();
                                            TotalDataAll.listRecalAttendanceTableItem_N_1.AddRange(TotaDataByProfileIDs.listRecalAttendanceTableItem_N_1);
                                        }
                                        if (TotaDataByProfileIDs.listGrade != null)
                                        {
                                            if (TotalDataAll.listGrade == null) TotalDataAll.listGrade = new List<Sal_GradeEntity>();
                                            TotalDataAll.listGrade.AddRange(TotaDataByProfileIDs.listGrade);
                                        }
                                        if (TotaDataByProfileIDs.listAttendanceTable != null)
                                        {
                                            if (TotalDataAll.listAttendanceTable == null) TotalDataAll.listAttendanceTable = new List<Att_AttendanceTableEntity>();
                                            TotalDataAll.listAttendanceTable.AddRange(TotaDataByProfileIDs.listAttendanceTable);
                                        }
                                        if (TotaDataByProfileIDs.Att_AttendanceTable_Prev != null)
                                        {
                                            if (TotalDataAll.Att_AttendanceTable_Prev == null) TotalDataAll.Att_AttendanceTable_Prev = new List<Att_AttendanceTableEntity>();
                                            TotalDataAll.Att_AttendanceTable_Prev.AddRange(TotaDataByProfileIDs.Att_AttendanceTable_Prev);
                                        }
                                        if (TotaDataByProfileIDs.Att_AttendanceTable_Prev != null)
                                        {
                                            if (TotalDataAll.Att_RecalAttendanceTable_Prev == null) TotalDataAll.Att_RecalAttendanceTable_Prev = new List<Att_RecalAttendanceTableEntity>();
                                            TotalDataAll.Att_RecalAttendanceTable_Prev.AddRange(TotaDataByProfileIDs.Att_RecalAttendanceTable_Prev);
                                        }
                                        if (TotaDataByProfileIDs.listHre_StopWorking != null)
                                        {
                                            if (TotalDataAll.listHre_StopWorking == null) TotalDataAll.listHre_StopWorking = new List<Hre_StopWorkingEntity>();
                                            TotalDataAll.listHre_StopWorking.AddRange(TotaDataByProfileIDs.listHre_StopWorking);
                                        }
                                        if (TotaDataByProfileIDs.listSal_SeveranceAllowance != null)
                                        {
                                            if (TotalDataAll.listSal_SeveranceAllowance == null) TotalDataAll.listSal_SeveranceAllowance = new List<Sal_SeveranceAllowanceEntity>();
                                            TotalDataAll.listSal_SeveranceAllowance.AddRange(TotaDataByProfileIDs.listSal_SeveranceAllowance);
                                        }
                                        if (TotaDataByProfileIDs.listSal_SeveranceAllowanceItem != null)
                                        {
                                            if (TotalDataAll.listSal_SeveranceAllowanceItem == null) TotalDataAll.listSal_SeveranceAllowanceItem = new List<Sal_SeveranceAllowanceItemEntity>();
                                            TotalDataAll.listSal_SeveranceAllowanceItem.AddRange(TotaDataByProfileIDs.listSal_SeveranceAllowanceItem);
                                        }
                                        if (TotaDataByProfileIDs.listBasicSalary != null)
                                        {
                                            if (TotalDataAll.listBasicSalary == null) TotalDataAll.listBasicSalary = new List<Sal_BasicSalaryEntity>();
                                            TotalDataAll.listBasicSalary.AddRange(TotaDataByProfileIDs.listBasicSalary);
                                        }
                                        if (TotaDataByProfileIDs.listBasicSalaryT3 != null)
                                        {
                                            if (TotalDataAll.listBasicSalaryT3 == null) TotalDataAll.listBasicSalaryT3 = new List<Sal_BasicSalaryEntity>();
                                            TotalDataAll.listBasicSalaryT3.AddRange(TotaDataByProfileIDs.listBasicSalaryT3);
                                        }
                                        if (TotaDataByProfileIDs.listWorkHistory != null)
                                        {
                                            if (TotalDataAll.listWorkHistory == null) TotalDataAll.listWorkHistory = new List<Hre_WorkHistoryEntity>();
                                            TotalDataAll.listWorkHistory.AddRange(TotaDataByProfileIDs.listWorkHistory);
                                        }
                                        if (TotaDataByProfileIDs.listSalaryInformation != null)
                                        {
                                            if (TotalDataAll.listSalaryInformation == null) TotalDataAll.listSalaryInformation = new List<Sal_SalaryInformationEntity>();
                                            TotalDataAll.listSalaryInformation.AddRange(TotaDataByProfileIDs.listSalaryInformation);
                                        }
                                        if (TotaDataByProfileIDs.listOverTime != null)
                                        {
                                            if (TotalDataAll.listOverTime == null) TotalDataAll.listOverTime = new List<Att_OvertimeEntity>();
                                            TotalDataAll.listOverTime.AddRange(TotaDataByProfileIDs.listOverTime);
                                        }
                                        if (TotaDataByProfileIDs.listOverTimeByCutOffBackPay != null)
                                        {
                                            if (TotalDataAll.listOverTimeByCutOffBackPay == null) TotalDataAll.listOverTimeByCutOffBackPay = new List<Att_OvertimeEntity>();
                                            TotalDataAll.listOverTimeByCutOffBackPay.AddRange(TotaDataByProfileIDs.listOverTimeByCutOffBackPay);
                                        }
                                        if (TotaDataByProfileIDs.listLeaveDayNotStatus != null)
                                        {
                                            if (TotalDataAll.listLeaveDayNotStatus == null) TotalDataAll.listLeaveDayNotStatus = new List<Att_LeaveDayEntity>();
                                            TotalDataAll.listLeaveDayNotStatus.AddRange(TotaDataByProfileIDs.listLeaveDayNotStatus);
                                        }
                                        if (TotaDataByProfileIDs.listLeaveDay != null)
                                        {
                                            if (TotalDataAll.listLeaveDay == null) TotalDataAll.listLeaveDay = new List<Att_LeaveDayEntity>();
                                            TotalDataAll.listLeaveDay.AddRange(TotaDataByProfileIDs.listLeaveDay);
                                        }
                                        if (TotaDataByProfileIDs.ListAttGrade != null)
                                        {
                                            if (TotalDataAll.ListAttGrade == null) TotalDataAll.ListAttGrade = new List<Att_GradeEntity>();
                                            TotalDataAll.ListAttGrade.AddRange(TotaDataByProfileIDs.ListAttGrade);
                                        }
                                        if (TotaDataByProfileIDs.ListInsuranceForPayrollMonthly != null)
                                        {
                                            if (TotalDataAll.ListInsuranceForPayrollMonthly == null) TotalDataAll.ListInsuranceForPayrollMonthly = new List<Ins_InsuranceForPayrollMonthlyEntity>();
                                            TotalDataAll.ListInsuranceForPayrollMonthly.AddRange(TotaDataByProfileIDs.ListInsuranceForPayrollMonthly);
                                        }
                                        if (TotaDataByProfileIDs.ListAtt_ProfileTimeSheet != null)
                                        {
                                            if (TotalDataAll.ListAtt_ProfileTimeSheet == null) TotalDataAll.ListAtt_ProfileTimeSheet = new List<Att_ProfileTimeSheetEntity>();
                                            TotalDataAll.ListAtt_ProfileTimeSheet.AddRange(TotaDataByProfileIDs.ListAtt_ProfileTimeSheet);
                                        }
                                        if (TotaDataByProfileIDs.ListPerformanceAllowance != null)
                                        {
                                            if (TotalDataAll.ListPerformanceAllowance == null) TotalDataAll.ListPerformanceAllowance = new List<Sal_PerformanceAllowanceEntity>();
                                            TotalDataAll.ListPerformanceAllowance.AddRange(TotaDataByProfileIDs.ListPerformanceAllowance);
                                        }
                                        if (TotaDataByProfileIDs.listSal_HoldSalary != null)
                                        {
                                            if (TotalDataAll.listSal_HoldSalary == null) TotalDataAll.listSal_HoldSalary = new List<Sal_HoldSalaryEntity>();
                                            TotalDataAll.listSal_HoldSalary.AddRange(TotaDataByProfileIDs.listSal_HoldSalary);
                                        }
                                        if (TotaDataByProfileIDs.listRoster != null)
                                        {
                                            if (TotalDataAll.listRoster == null) TotalDataAll.listRoster = new List<Att_RosterEntity>();
                                            TotalDataAll.listRoster.AddRange(TotaDataByProfileIDs.listRoster);
                                        }
                                        #endregion
                                    }
                                }

                                #endregion
                            }
                        });

                        _logger.WriteInfo("ComputePayrollProcess", "======> GET DATA FOR " + listProfile.Count().ToString() + " PROFILE", new
                        {
                            Time = swatch.Elapsed.ToString(),
                        });

                        if (TotalDataAll.Status != string.Empty)
                        {
                            //Sys_Model = repoSys_AsynTask.FindBy(m => m.ID == asynTaskID).FirstOrDefault();
                            Sys_Model = unitOfWork.CreateQueryable<Sal_CaculateHistory>(Guid.Empty, m => m.ID == asynTaskID).FirstOrDefault();
                            Sys_Model.PercentCaculate = 1;
                            Sys_Model.ToDate = DateTime.Now;
                            unitOfWork.SaveChanges();
                            _logger.WriteError("ComputePayrollProcess", "======> STORE DATA BY PROFILE ERROR ", new
                            {
                                exception = TotalDataAll.Status,
                            });
                            return;
                        }

                        #endregion

                        #region Chuyển sang dictionary 
                        // Chuyển sang dictionary
                        if (TotalDataAll.ListPayrolltable != null) TotalDataAll.dicPayrolltable = listPayrollTableByEntities.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
                        ConvertDictionaryOfData(TotalDataAll);

                        Sys_Model.PercentCaculate = IsComputeByProfile ? 0.50 : 0.11;
                        repoSys_AsynTask.Edit(Sys_Model);
                        repoSys_AsynTask.SaveChanges();
                        #endregion

                        #region New 1 Task xử lý tính => save %
                        // create the cancellation token source
                        CancellationTokenSource tokenSource = new CancellationTokenSource();
                        // create the cancellation token
                        CancellationToken token = tokenSource.Token;

                        var taskSavePercent = new Task(async () =>
                        {
                            using (var dbContext = new VnrHrmDataContext())
                            {
                                var unitOfWorkSavePercent = (IUnitOfWork)new UnitOfWork(context);
                                var repoAsynTask = new CustomBaseRepository<Sal_CaculateHistory>(unitOfWork);
                                var objCaculateHistory = repoSys_AsynTask.FindBy(m => m.ID == asynTaskID).FirstOrDefault();
                                if (objCaculateHistory != null)
                                {
                                    while (!token.IsCancellationRequested)
                                    {
                                        await Task.Delay(15000);
                                        if (this.profileIndex < this.profileTotal)
                                        {
                                            objCaculateHistory.PercentCaculate = IsComputeByProfile ? 0.50 : 0.11 + ((this.profileIndex * 0.8) / this.profileTotal);
                                            repoAsynTask.Edit(objCaculateHistory);
                                            repoAsynTask.SaveChanges();
                                        }
                                        else
                                        {
                                            tokenSource.Cancel();
                                        }
                                    }
                                }
                                else
                                {
                                    tokenSource.Cancel();
                                }
                            }
                        }, token);
                        taskSavePercent.Start();

                        #endregion

                        #region Duyệt qua profile để xử lý tính toán => Áp dụng parallel
                        int indexComputePatch = 0;

                        var listThreadSave = new List<Thread>();
                        var lockObjectSave = new Object();
                        var objLockFileLog = new Object();
                        var objLockDataInsert = new Object();
                        Parallel.ForEach(listProfile.Chunk(this._patchSizeProfile)
                        , new ParallelOptions() { MaxDegreeOfParallelism = this._degreeOfParallelism }
                        , listProfileSplit =>
                        {
                            var swatchCompute = new System.Diagnostics.Stopwatch();
                            swatchCompute.Restart();
                            var indexPatchCompute = ++indexComputePatch;

                            LogHelper loggerPatch = new LogHelper(_logger.LogFileName, _logger.LoggerName, _logger.UserLog);
                            loggerPatch.WriteInfo("ComputePayrollProcess", "======> START - PATCH COMPUTE: " + indexPatchCompute.ToString("000"), listProfileSplit.Count());

                            var TotalData600 = new ComputePayrollDataModelKZ();

                            #region Init data 

                            #region Khởi tạo lại giá trị đã get dữ liệu
                            TotalData600.statusBugStore = string.Empty;
                            TotalData600.strOrderByProfile = string.Join(",", listProfileSplit.Select(m => m.Order.ToString()).ToArray());
                            TotalData600.listProfileIds = listProfileSplit.Select(x => x.ID).ToList();
                            TotalData600.listProfileSplit = listProfileSplit.ToList();
                            TotalData600.totalProfile = listProfileSplit.Count();
                            TotalData600.UserLogin = TotalDataAll.UserLogin;
                            #endregion

                            var sourceType = TotalData600.GetType();
                            var sourceProperties = sourceType.GetProperties();
                            foreach (var property in sourceProperties)
                            {
                                if (TotalData600.GetPropertyValue(property.Name) == null)
                                {
                                    try
                                    {
                                        TotalData600.SetPropertyValue(
                                            property.Name,
                                            Activator.CreateInstance(TotalData600.GetPropertyType(property.Name))
                                            );
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }
                            }
                            #endregion

                            try
                            {
                                ComputePayroll_ProgressDetails(
                                    TotalDataAll,
                                    dateTimeComputeTotal,
                                    soLanChunk600,
                                    listThreadSave,
                                    lockObjectSave,
                                    loggerPatch,
                                    indexPatchCompute,
                                    isComputePayrollByGroup,
                                    TotalData600,
                                    listProfileSplit.ToList(),
                                    CutOffDuration,
                                    PaymentPeriodID,
                                    CutOffDurationPayBack,
                                    Sys_Model.ID,
                                    totalProfile,
                                    ComputeOrderNumber,
                                    REALWAGES,
                                    Settlement,
                                    IsComputeForCompare,
                                    IsComputeRe,
                                    IsComputePayBack,
                                    detailCompute);
                            }
                            catch (Exception ex)
                            {
                                lock (objLockFileLog)
                                {
                                    loggerPatch.WriteError("ComputePayrollProcess", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": COMPUTEPAYROLL_PROGRESSDETAILS Exception", new
                                    {
                                        innerException = ex.InnerException,
                                        exeption = ex.Message + "; " + ex.StackTrace,
                                        data = listProfileSplit.Select(p => p.CodeEmp).ToList(),
                                    });
                                }

                            }
                            finally
                            {
                                lock (objLockFileLog)
                                {
                                    #region Ghi log lại các store và phần tử không tính được khi lỗi store
                                    if (!string.IsNullOrEmpty(TotalData600.statusBugStore))
                                    {
                                        loggerPatch.WriteError("ComputePayrollProcess", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": STORE ERROR", new
                                        {
                                            exception = TotalData600.statusBugStore
                                        });

                                        TotalData600.statusBugStore = string.Empty;
                                    }
                                    #endregion

                                    #region Ghi log lỗi khi tính
                                    if (!string.IsNullOrEmpty(TotalData600.strErrMesage) || !string.IsNullOrEmpty(TotalData600.strErrMesageByDay) || !string.IsNullOrEmpty(TotalData600.strErrMesageByGroup))
                                    {
                                        loggerPatch.WriteError("ComputePayrollProcess", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": COMPUTE ELEMENT FOR " + listProfileSplit.Count().ToString() + " EMPLOYEE ERROR", new
                                        {
                                            ErrMesage = TotalData600.strErrMesage,
                                            ErrMesageByDay = TotalData600.strErrMesageByDay,
                                            ErrMesageByGroup = TotalData600.strErrMesageByGroup,
                                            data = listProfileSplit.Select(p => p.CodeEmp).ToList()
                                        });

                                        TotalData600.strErrMesage = string.Empty;
                                        TotalData600.strErrMesageByDay = string.Empty;
                                        TotalData600.strErrMesageByGroup = string.Empty;
                                    }
                                    #endregion

                                    #region Ghi log thời gian tính
                                    loggerPatch.WriteInfo("ComputePayrollProcess", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": TIME COMPUTE FORMULA " + listProfileSplit.Count() + " PROFILE", new
                                    {
                                        Time = swatchCompute.Elapsed.ToString(),
                                    });
                                    #endregion
                                }
                            }
                        });
                        #endregion
                    }
                }
                catch (Exception ex)
                {
                    _logger.WriteError("ComputePayrollProcess", "======> END COMPUTEPAYROLL ERROR", new
                    {
                        innerException = ex.InnerException,
                        exeption = ex.Message + "; " + ex.StackTrace,
                        data = listProfile.Select(s => s.CodeEmp).ToList()
                    });
                }
            }
        }


        /// <summary>
        ///  Tung.Tran 05/04/2019 : Hàm tính lương apply parallel
        /// </summary>
        /// <param name="fileLog"></param>
        /// <param name="isComputePayrollByGroup"></param>
        /// <param name="TotalData"></param>
        /// <param name="ProfileID"></param>
        /// <param name="CutOffDuration"></param>
        /// <param name="Sys_AsynTaskID"></param>
        /// <param name="totalProfile"></param>
        /// <param name="ComputeOrderNumber"></param>
        /// <param name="REALWAGES"></param>
        /// <param name="Settlement"></param>
        /// <param name="IsComputeForCompare"></param>
        /// <param name="IsComputeRe">Tính ở màn hình Tính lại lương</param>
        /// <param name="IsComputePayBack">Tính ở màn hình Tính lương payback (AVN)</param>
        public void ComputePayroll_ProgressDetails(
            ComputePayrollDataModelKZAll TotalDataAll,
            DateTime dateTimeComputeTotal,
            int soLanChunk600,
            List<Thread> listThreadSave,
            Object lockObjectSave,
            LogHelper loggerPatch,
            int indexPatchCompute,
            bool isComputePayrollByGroup,
            ComputePayrollDataModelKZ TotalData600,
            List<Hre_ProfileEntity> listProfile,
            Att_CutOffDurationEntity CutOffDuration,
            Guid? PaymentPeriodID,
            Att_CutOffDurationEntity CutOffDurationPayBack,
            Guid Sys_AsynTaskID,
            int totalProfile,
            bool ComputeOrderNumber,
            string REALWAGES,
            bool Settlement = false,
            bool IsComputeForCompare = false,
            bool IsComputeRe = false,
            bool IsComputePayBack = false,
            Sal_CaculateHistoryDetailProfileComputeEntity detailCompute = null)
        {
            /*
                B1: Init các dữ liệu cần thiết
                B2: Duyệt qua từng Profile
                B3: Lưu dữ liệu
            */
            using (var context = new VnrHrmDataContext())
            {
                #region Init các dữ liệu cần thiết
                var unitOfWork = new UnitOfWork(context);
                var getStaticValuesServices = new Sal_GetStaticValuesKZServices();
                getStaticValuesServices.UserLogin = TotalDataAll.UserLogin;

                var getStaticValuesByDayReCallServices = new Sal_GetStaticValuesByDayReCallServices();
                getStaticValuesByDayReCallServices.UserLogin = TotalDataAll.UserLogin;

                var getStaticValuesByDayPaybackServices = new Sal_GetStaticValuesByDayPaybackServices();
                getStaticValuesByDayPaybackServices.UserLogin = TotalDataAll.UserLogin;

                context.Configuration.AutoDetectChangesEnabled = false;
                context.Configuration.ValidateOnSaveEnabled = false;

                //Các biến xử dụng chung
                Sal_CaculateHistory asynTask = new Sal_CaculateHistory();
                Sal_GetDataComputePayrollKZServices getDataComputePayrollServices = new Sal_GetDataComputePayrollKZServices();
                getDataComputePayrollServices.UserLogin = TotalDataAll.UserLogin;

                //[SCV] list lưu tiền khấu nhân viên chưa đủ thâm niên của shop
                Dictionary<Guid, ValueCount> listTmpDeduction = new Dictionary<Guid, ValueCount>();

                //Get asynTask
                asynTask = unitOfWork.CreateQueryable<Sal_CaculateHistory>(Guid.Empty, m => m.ID == Sys_AsynTaskID).FirstOrDefault();
                //Order By theo ngày vào làm để tính trường hợp nhân viên không đủ thâm niên của dự án SCV
                listProfile = listProfile.OrderBy(m => m.DateHire).ToList();

                //Phần tử tổng tiền thực nhận
                double TotalREALWAGES = 0;

                #endregion

                #region B2: Duyệt qua từng Profile

                string strCodeEmpErr = string.Empty;
                string strInfoErr = string.Empty;
                string strInnerException = string.Empty;
                for (int i = 0; i < listProfile.Count; i++)
                {
                    System.Diagnostics.Stopwatch StopwatchProfile = new System.Diagnostics.Stopwatch();
                    StopwatchProfile.Start();

                    Interlocked.Increment(ref profileIndex);
                    //Biến tổng lưu tất cả các value của Formula
                    List<ElementFormula> listElementFormula = new List<ElementFormula>();
                    var profileItem = listProfile[i];
                    try
                    {

                        #region [27/11/2015][hien.nguyen][Modify][60760] Cập nhật trạng thái cho nhân viên
                        //Biến lưu trạng thái nhân viên
                        string EmpStatus = string.Empty;
                        //[12/04/2016][HienNguyen][66017]
                        DateTime _profileQuitStart = CutOffDuration.DateStart.Date;
                        DateTime _profileQuitEnd = CutOffDuration.DateEnd.Date;

                        #region [16/12/2019][Tung.Tran][0110606]: Thay đổi logic xét trạng thái nhân viên (Không xét lại ngày bắt đầu, kết thúc dựa vào cấu hình nữa)
                        //var _dayProfileQuit = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_SAL_NUMBER_DAY_PROFILE_QUIT.ToString()).FirstOrDefault();
                        //if (_dayProfileQuit != null && !string.IsNullOrEmpty(_dayProfileQuit.Value1))
                        //{
                        //    double _dayNumberProfileQuit = 0;
                        //    double.TryParse(_dayProfileQuit.Value1, out _dayNumberProfileQuit);
                        //    _profileQuitStart = _profileQuitStart.AddDays(_dayNumberProfileQuit);
                        //    _profileQuitEnd = _profileQuitEnd.AddDays(_dayNumberProfileQuit);
                        //}
                        #endregion

                        //[27/11/2015][hien.nguyen][Modify][60760] Cập nhật trạng thái cho nhân viên
                        if (profileItem.DateQuit.HasValue && profileItem.DateQuit.Value.Date < _profileQuitStart)
                        {
                            EmpStatus = PayrollTableProfileStatus.E_PROFILE_QUITED.ToString();
                        }
                        else if ((profileItem.DateHire.HasValue && profileItem.DateHire.Value.Date >= _profileQuitStart && profileItem.DateHire.Value.Date <= _profileQuitEnd) && (profileItem.DateQuit == null || profileItem.DateQuit.Value.Date > _profileQuitEnd))
                        {
                            EmpStatus = PayrollTableProfileStatus.E_PROFILE_NEW.ToString();
                        }
                        else if ((profileItem.DateHire.HasValue && profileItem.DateHire.Value.Date < _profileQuitStart) && (profileItem.DateQuit == null || profileItem.DateQuit.Value.Date > _profileQuitEnd))
                        {
                            EmpStatus = PayrollTableProfileStatus.E_PROFILE_ACTIVE.ToString();
                        }
                        else if (profileItem.DateQuit.HasValue && profileItem.DateQuit.Value.Date >= _profileQuitStart && profileItem.DateQuit.Value.Date <= _profileQuitEnd)
                        {
                            EmpStatus = PayrollTableProfileStatus.E_PROFILE_QUIT.ToString();
                        }
                        #endregion

                        #region Lấy các phần tử tính lương nằm trong Grade của nhân viên
                        Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd);

                        List<Cat_ElementEntity> listElement = new List<Cat_ElementEntity>();
                        if (Grade != null && Grade.GradePayrollID != null && Grade.GradePayrollID != Guid.Empty)
                        {
                            listElement = new List<Cat_ElementEntity>(TotalDataAll.listElement_All.Where(m => (m.GradePayrollID != null && (Guid)m.GradePayrollID == Grade.GradePayrollID) || m.IsApplyGradeAll == true));
                        }

                        // Tung.Tran [17/02/2020][0109743][HRM8PRO.BMP]: Nếu đang tính lại, chỉ lấy các phần tử dùng để tính lại
                        if (IsComputeRe)
                        {
                            listElement = listElement.Where(p => p.RecalculatedElement == true).ToList();
                        }
                        else if (IsComputePayBack)
                        {
                            listElement = listElement.Where(p => p.IsPayrollPayback == true).ToList();
                        }
                        else
                        {
                            listElement = listElement.Where(p => p.RecalculatedElement != true && p.IsPayrollPayback != true).ToList();
                        }
                        #endregion

                        #region Tính lương nhóm nếu có cấu hình 
                        //[02/11/2017][bang.nguyen][89126][Modify Func]

                        if (isComputePayrollByGroup && !IsComputeRe && !IsComputePayBack)
                        {
                            var listElementNotGroup = listElement.Where(s => s.IsPayrollGroupElement == null || s.IsPayrollGroupElement == false).ToList();
                            var listElementForGroup = listElement.Where(s => s.IsPayrollGroupElement == true).ToList();
                            if (listElementForGroup.Count > 0)
                            {
                                ComputePayrollByElementGroup(
                                    TotalDataAll,
                                    TotalData600,
                                    listElementFormula,
                                    profileItem,
                                    CutOffDuration,
                                    listElementNotGroup,
                                    listElementForGroup,
                                    Grade,
                                    listTmpDeduction,
                                    ComputeOrderNumber);

                                //gan lại dữ liệu để phần tử lương thời gian gọi phần tử lương nhóm
                                TotalData600.ListSal_PayrollGroupTable = TotalData600.listPayrollGroupTableInsert.Where(s => s.ProfileID == profileItem.ID).ToList().Translate<Sal_PayrollGroupTableEntity>();
                                var listPayrollGroupTableID = TotalData600.ListSal_PayrollGroupTable.Select(s => s.ID).ToList();
                                //Hien.Le [10/12/2019] [0110981] [New Bug] : Không tính được phần tử lương
                                TotalData600.ListSal_PayrollGroupTableItem = TotalData600.listPayrollGroupTableItemInsert.Where(s => listPayrollGroupTableID.Contains(s.PayrollGroupTableID)).ToList().Translate<Sal_PayrollGroupTableItemEntity>(new List<string>() { "Value" });
                            }
                        }

                        #endregion

                        #region tạo mới PayrollTable
                        Sal_PayrollTable PayrollTable_Model = new Sal_PayrollTable();
                        Sal_RePayrollTable objRePayrollTable = new Sal_RePayrollTable();
                        Sal_PayrollTablePayBack objPayrollTablePayBack = new Sal_PayrollTablePayBack();

                        //[03/11/2015][hien.nguyen][Modify][59428]
                        //[03/08/2017][bang.nguyen][86152][Modify Func]
                        Hre_WorkHistoryEntity WorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.Status == WorkHistoryStatus.E_APPROVED.ToString())
                            .OrderByDescending(m => m.DateEffective).FirstOrDefault();

                        #region Code comment
                        //Nếu ngày chốt lương có thì tính theo ngày chốt lương
                        //if (Grade != null && Grade.SalaryDayClose.HasValue)
                        //{
                        //    DateTime DateClose = DateTime.MaxValue;
                        //    try
                        //    {
                        //        DateClose = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, Grade.SalaryDayClose ?? 1);
                        //    }
                        //    catch
                        //    {
                        //        DateClose = DateTime.MaxValue;
                        //    }
                        //    //Quá trình công tác
                        //    WorkHistory = TotalData600.listWorkHistory.Where(m => m.ProfileID == profileItem.ID && m.DateEffective <= DateClose && m.Status == WorkHistoryStatus.E_APPROVED.ToString())
                        //        .OrderByDescending(m => m.DateEffective).FirstOrDefault();
                        //}
                        #endregion

                        if (!WorkHistory.HasValue())
                        {
                            continue;
                        }

                        //Lương cơ bản
                        Sal_BasicSalaryEntity BasicSalary = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).FirstOrDefault();
                        Guid? CurrencyID = null;
                        if (BasicSalary != null)
                        {
                            CurrencyID = BasicSalary.CurrencyID;
                        }

                        //Lấy dữ liệu thông tin lương
                        var SalaryInformationByProfile = TotalDataAll.dicSalaryInformation.GetValueOrNew(profileItem.ID).FirstOrDefault();
                        if (SalaryInformationByProfile != null)
                        {
                            //Hien.Le [09/04/2020] [0114063] [Modify Func]
                            if (string.IsNullOrEmpty(SalaryInformationByProfile.SalaryPaidAccount) || SalaryInformationByProfile.SalaryPaidAccount == SalaryPaidAccount.E_ACCOUNT_1.ToString())
                            {
                                profileItem.AccountNo = profileItem.AccountNo;
                            }
                            else if (!string.IsNullOrEmpty(SalaryInformationByProfile.SalaryPaidAccount) && SalaryInformationByProfile.SalaryPaidAccount == SalaryPaidAccount.E_ACCOUNT_2.ToString())
                            {
                                profileItem.AccountNo = SalaryInformationByProfile.AccountNo2;
                            }
                            else if (!string.IsNullOrEmpty(SalaryInformationByProfile.SalaryPaidAccount) && SalaryInformationByProfile.SalaryPaidAccount == SalaryPaidAccount.E_ACCOUNT_3.ToString())
                            {
                                profileItem.AccountNo = SalaryInformationByProfile.AccountNo3;
                            }
                        }
                        //[27/12/2017][bang.nguyen][91834][Modify Func]
                        //cap nhat trang thai giu luong khi tinh luong
                        bool? isHold = null;
                        var objHoldSalaryByPro = TotalDataAll.dicHoldSalary.GetValueOrNew(profileItem.ID).Where(
                            s => s.StatusHold == EnumDropDown.HoldSalaryStatus.E_APPROVED.ToString()
                            && s.MonthSalary <= CutOffDuration.MonthYear
                            && (s.MonthEndSalary == null || s.MonthEndSalary > CutOffDuration.MonthYear)).FirstOrDefault();
                        if (objHoldSalaryByPro != null)
                        {
                            isHold = true;
                        }

                        if (Settlement == true)
                        {
                            // [16/02/2019][102916][Tung.Tran]: Lưu thêm thông tin số lần quyết toán
                            var stopworkingHasSettlement = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID).FirstOrDefault(x =>
                                    x.CutOffDurationID == CutOffDuration.ID
                                    && x.Settlement != null
                                    && x.Status == "E_APPROVED"
                                    );

                            if (TotalDataAll.dicPayrolltable.GetValueOrNew(profileItem.ID).Any(m => m.CutOffDurationID == CutOffDuration.ID))
                            {
                                Att_CutOffDurationEntity CutOff = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear >= CutOffDuration.MonthYear).OrderBy(m => m.MonthYear).FirstOrDefault();

                                PayrollTable_Model = new Sal_PayrollTable()
                                {
                                    ID = Guid.NewGuid(),
                                    ProfileID = profileItem.ID,
                                    CutOffDurationID = CutOff.ID,
                                    MonthYear = CutOff.MonthYear,
                                    OrgStructureID = WorkHistory.OrganizationStructureID,
                                    PositionID = WorkHistory.PositionID,
                                    JobTitleID = WorkHistory.JobTitleID,
                                    EmployeeTypeID = WorkHistory.EmployeeTypeID,
                                    PayrollGroupID = WorkHistory.PayrollGroupID,
                                    CostCentreID = WorkHistory.CostCentreID,
                                    CostCenterCode = WorkHistory.CostCentreCode,
                                    CostActivityID = WorkHistory.CostActivityID,
                                    CostSourceID = WorkHistory.CostSourceID,
                                    GradePayrollID = Grade.GradePayrollID,
                                    Currency = CurrencyID,
                                    WorkPlaceID = WorkHistory.WorkPlaceID,
                                    IsCash = SalaryInformationByProfile != null ? SalaryInformationByProfile.IsCash : true,
                                    DependantCount = 0,
                                    BankID = profileItem.BankID,
                                    AccountNo = profileItem.AccountNo,
                                    EmpStatus = EmpStatus,
                                    SalaryClassID = WorkHistory.SalaryClassID,
                                    EmployeeGroupID = WorkHistory.EmployeeGroupID,
                                    LaborType = WorkHistory.LaborType,
                                    PayrollCategoryID = WorkHistory.PayrollCategoryID,
                                    //[03/08/2017][bang.nguyen][86152][Modify Func]
                                    AbilityTileID = WorkHistory.AbilityTileID,
                                    CompanyID = WorkHistory.CompanyID,
                                    UnitStructureID = WorkHistory.UnitStructureID,
                                    //[01/12/2017][bang.nguyen][90040][new func]
                                    RegionID = WorkHistory.RegionID,
                                    IsHold = isHold,
                                    AreaPostJobWorkID = WorkHistory.AreaPostJobWorkID,
                                    // [16/02/2019][102916][Tung.Tran]
                                    Settlement = stopworkingHasSettlement != null ? stopworkingHasSettlement.Settlement : null,
                                    // Hien.Le [30/09/20190][0108499]QTCT
                                    EmploymentType = WorkHistory.EmploymentType,
                                    DistributionChannelID = WorkHistory.DistributionChannelID,
                                    MarketDomainID = WorkHistory.MarketDomainID,
                                    RegionMarketID = WorkHistory.RegionMarketID,
                                    MarketAreaID = WorkHistory.MarketAreaID,
                                    OriginalDistributorID = WorkHistory.OriginalDistributorID,
                                    OtherDistributors = WorkHistory.OtherDistributors,
                                    // Hien.Le [03/10/2019][109305]
                                    ShopID = WorkHistory.ShopID,
                                    //Hien.Le [04/02/2020] [0112032 + 0112418]
                                    UsualAllowanceGroupID = WorkHistory.UsualAllowanceGroupID,
                                    SalaryPaidByTheFormOf = WorkHistory.SalaryPaidByTheFormOf,
                                    CoefficientOfWorkmanship = WorkHistory.CoefficientOfWorkmanship,
                                    DateCreate = DateTime.Now,
                                    DateUpdate = DateTime.Now,
                                };
                            }
                            else
                            {
                                PayrollTable_Model = new Sal_PayrollTable()
                                {
                                    ID = Guid.NewGuid(),
                                    ProfileID = profileItem.ID,
                                    CutOffDurationID = CutOffDuration.ID,
                                    MonthYear = CutOffDuration.MonthYear,
                                    OrgStructureID = WorkHistory.OrganizationStructureID,
                                    PositionID = WorkHistory.PositionID,
                                    JobTitleID = WorkHistory.JobTitleID,
                                    EmployeeTypeID = WorkHistory.EmployeeTypeID,
                                    PayrollGroupID = WorkHistory.PayrollGroupID,
                                    CostCentreID = WorkHistory.CostCentreID,
                                    CostCenterCode = WorkHistory.CostCentreCode,
                                    CostActivityID = WorkHistory.CostActivityID,
                                    CostSourceID = WorkHistory.CostSourceID,
                                    WorkPlaceID = WorkHistory.WorkPlaceID,
                                    GradePayrollID = Grade.GradePayrollID,
                                    Currency = CurrencyID == Guid.Empty ? null : CurrencyID,
                                    IsCash = SalaryInformationByProfile != null ? SalaryInformationByProfile.IsCash : true,
                                    DependantCount = 0,
                                    BankID = profileItem.BankID,
                                    AccountNo = profileItem.AccountNo,
                                    EmpStatus = EmpStatus,
                                    SalaryClassID = WorkHistory.SalaryClassID,
                                    EmployeeGroupID = WorkHistory.EmployeeGroupID,
                                    LaborType = WorkHistory.LaborType,
                                    PayrollCategoryID = WorkHistory.PayrollCategoryID,
                                    //[03/08/2017][bang.nguyen][86152][Modify Func]
                                    AbilityTileID = WorkHistory.AbilityTileID,
                                    CompanyID = WorkHistory.CompanyID,
                                    UnitStructureID = WorkHistory.UnitStructureID,
                                    //[01/12/2017][bang.nguyen][90040][new func]
                                    RegionID = WorkHistory.RegionID,
                                    IsHold = isHold,
                                    AreaPostJobWorkID = WorkHistory.AreaPostJobWorkID,
                                    // [16/02/2019][102916][Tung.Tran]
                                    Settlement = stopworkingHasSettlement != null ? stopworkingHasSettlement.Settlement : null,
                                    // Hien.Le [30/09/20190][0108499] QTCT
                                    EmploymentType = WorkHistory.EmploymentType,
                                    DistributionChannelID = WorkHistory.DistributionChannelID,
                                    MarketDomainID = WorkHistory.MarketDomainID,
                                    RegionMarketID = WorkHistory.RegionMarketID,
                                    MarketAreaID = WorkHistory.MarketAreaID,
                                    OriginalDistributorID = WorkHistory.OriginalDistributorID,
                                    OtherDistributors = WorkHistory.OtherDistributors,
                                    // Hien.Le [03/10/2019][109305]
                                    ShopID = WorkHistory.ShopID,
                                    //Hien.Le [04/02/2020] [0112032 + 0112418]
                                    UsualAllowanceGroupID = WorkHistory.UsualAllowanceGroupID,
                                    SalaryPaidByTheFormOf = WorkHistory.SalaryPaidByTheFormOf,
                                    CoefficientOfWorkmanship = WorkHistory.CoefficientOfWorkmanship,
                                    DateCreate = DateTime.Now,
                                    DateUpdate = DateTime.Now,
                                };
                            }
                        }
                        else if (IsComputeRe)
                        {
                            objRePayrollTable = new Sal_RePayrollTable()
                            {
                                ID = Guid.NewGuid(),
                                ProfileID = profileItem.ID,
                                CutOffDurationID = CutOffDuration.ID,
                                PaymentPeriodID = PaymentPeriodID,
                                MonthYear = CutOffDuration.MonthYear,
                                OrgStructureID = WorkHistory.OrganizationStructureID,
                                PositionID = WorkHistory.PositionID,
                                JobTitleID = WorkHistory.JobTitleID,
                                EmployeeTypeID = WorkHistory.EmployeeTypeID,
                                PayrollGroupID = WorkHistory.PayrollGroupID,
                                CostCentreID = WorkHistory.CostCentreID,
                                CostCenterCode = WorkHistory.CostCentreCode,
                                CostActivityID = WorkHistory.CostActivityID,
                                CostSourceID = WorkHistory.CostSourceID,
                                GradePayrollID = Grade.GradePayrollID,
                                Currency = CurrencyID == Guid.Empty ? null : CurrencyID,
                                WorkPlaceID = WorkHistory.WorkPlaceID,
                                IsCash = SalaryInformationByProfile != null ? SalaryInformationByProfile.IsCash : true,
                                BankID = profileItem.BankID,
                                AccountNo = profileItem.AccountNo,
                                EmpStatus = EmpStatus,
                                SalaryClassID = WorkHistory.SalaryClassID,
                                EmployeeGroupID = WorkHistory.EmployeeGroupID,
                                LaborType = WorkHistory.LaborType,
                                PayrollCategoryID = WorkHistory.PayrollCategoryID,
                                //[03/08/2017][bang.nguyen][86152][Modify Func]
                                AbilityTileID = WorkHistory.AbilityTileID,
                                CompanyID = WorkHistory.CompanyID,
                                UnitStructureID = WorkHistory.UnitStructureID,
                                //[01/12/2017][bang.nguyen][90040][new func]
                                RegionID = WorkHistory.RegionID,
                                IsHold = isHold,
                                AreaPostJobWorkID = WorkHistory.AreaPostJobWorkID,
                                // Hien.Le [30/09/20190][0108499] QTCT
                                EmploymentType = WorkHistory.EmploymentType,
                                DistributionChannelID = WorkHistory.DistributionChannelID,
                                MarketDomainID = WorkHistory.MarketDomainID,
                                RegionMarketID = WorkHistory.RegionMarketID,
                                MarketAreaID = WorkHistory.MarketAreaID,
                                OriginalDistributorID = WorkHistory.OriginalDistributorID,
                                OtherDistributors = WorkHistory.OtherDistributors,
                                // Hien.Le [03/10/2019][109305]
                                ShopID = WorkHistory.ShopID,
                                //Hien.Le [04/02/2020] [0112032 + 0112418]
                                UsualAllowanceGroupID = WorkHistory.UsualAllowanceGroupID,
                                SalaryPaidByTheFormOf = WorkHistory.SalaryPaidByTheFormOf,
                                CoefficientOfWorkmanship = WorkHistory.CoefficientOfWorkmanship,
                                DateCreate = DateTime.Now,
                                DateUpdate = DateTime.Now,
                            };
                        }
                        else if (IsComputePayBack)
                        {
                            objPayrollTablePayBack = new Sal_PayrollTablePayBack()
                            {
                                ID = Guid.NewGuid(),
                                CutOffDurationID = CutOffDuration.ID, //Kỳ điều chỉnh
                                PBCutOffDurationID = CutOffDurationPayBack.ID, //Kỳ thanh toán
                                Status = EnumDropDown.PayrollPaybackStatus.E_NOTCONFIRMED.ToString(),
                                ProfileID = profileItem.ID,
                                MonthYear = CutOffDuration.MonthYear,
                                OrgStructureID = WorkHistory.OrganizationStructureID,
                                PositionID = WorkHistory.PositionID,
                                JobTitleID = WorkHistory.JobTitleID,
                                EmployeeTypeID = WorkHistory.EmployeeTypeID,
                                PayrollGroupID = WorkHistory.PayrollGroupID,
                                CostCentreID = WorkHistory.CostCentreID,
                                CostCenterCode = WorkHistory.CostCentreCode,
                                CostActivityID = WorkHistory.CostActivityID,
                                CostSourceID = WorkHistory.CostSourceID,
                                GradePayrollID = Grade.GradePayrollID,
                                Currency = CurrencyID == Guid.Empty ? null : CurrencyID,
                                WorkPlaceID = WorkHistory.WorkPlaceID,
                                IsCash = SalaryInformationByProfile != null ? SalaryInformationByProfile.IsCash : true,
                                BankID = profileItem.BankID,
                                AccountNo = profileItem.AccountNo,
                                EmpStatus = EmpStatus,
                                SalaryClassID = WorkHistory.SalaryClassID,
                                EmployeeGroupID = WorkHistory.EmployeeGroupID,
                                LaborType = WorkHistory.LaborType,
                                PayrollCategoryID = WorkHistory.PayrollCategoryID,
                                AbilityTileID = WorkHistory.AbilityTileID,
                                CompanyID = WorkHistory.CompanyID,
                                UnitStructureID = WorkHistory.UnitStructureID,
                                //RegionID = WorkHistory.RegionID,
                                //IsHold = isHold,
                                //AreaPostJobWorkID = WorkHistory.AreaPostJobWorkID,
                                EmploymentType = WorkHistory.EmploymentType,
                                DistributionChannelID = WorkHistory.DistributionChannelID,
                                MarketDomainID = WorkHistory.MarketDomainID,
                                RegionMarketID = WorkHistory.RegionMarketID,
                                MarketAreaID = WorkHistory.MarketAreaID,
                                OriginalDistributorID = WorkHistory.OriginalDistributorID,
                                OtherDistributors = WorkHistory.OtherDistributors,
                                ShopID = WorkHistory.ShopID,
                                //UsualAllowanceGroupID = WorkHistory.UsualAllowanceGroupID,
                                //SalaryPaidByTheFormOf = WorkHistory.SalaryPaidByTheFormOf,
                                //CoefficientOfWorkmanship = WorkHistory.CoefficientOfWorkmanship,
                                DateCreate = DateTime.Now,
                                DateUpdate = DateTime.Now,
                            };
                        }
                        else
                        {
                            PayrollTable_Model = new Sal_PayrollTable()
                            {
                                ID = Guid.NewGuid(),
                                ProfileID = profileItem.ID,
                                CutOffDurationID = CutOffDuration.ID,
                                MonthYear = CutOffDuration.MonthYear,
                                OrgStructureID = WorkHistory.OrganizationStructureID,
                                PositionID = WorkHistory.PositionID,
                                JobTitleID = WorkHistory.JobTitleID,
                                EmployeeTypeID = WorkHistory.EmployeeTypeID,
                                PayrollGroupID = WorkHistory.PayrollGroupID,
                                CostCentreID = WorkHistory.CostCentreID,
                                CostCenterCode = WorkHistory.CostCentreCode,
                                CostActivityID = WorkHistory.CostActivityID,
                                CostSourceID = WorkHistory.CostSourceID,
                                GradePayrollID = Grade.GradePayrollID,
                                Currency = CurrencyID == Guid.Empty ? null : CurrencyID,
                                WorkPlaceID = WorkHistory.WorkPlaceID,
                                IsCash = SalaryInformationByProfile != null ? SalaryInformationByProfile.IsCash : true,
                                BankID = profileItem.BankID,
                                AccountNo = profileItem.AccountNo,
                                EmpStatus = EmpStatus,
                                SalaryClassID = WorkHistory.SalaryClassID,
                                EmployeeGroupID = WorkHistory.EmployeeGroupID,
                                LaborType = WorkHistory.LaborType,
                                PayrollCategoryID = WorkHistory.PayrollCategoryID,
                                //[03/08/2017][bang.nguyen][86152][Modify Func]
                                AbilityTileID = WorkHistory.AbilityTileID,
                                CompanyID = WorkHistory.CompanyID,
                                UnitStructureID = WorkHistory.UnitStructureID,
                                //[01/12/2017][bang.nguyen][90040][new func]
                                RegionID = WorkHistory.RegionID,
                                IsHold = isHold,
                                AreaPostJobWorkID = WorkHistory.AreaPostJobWorkID,
                                // Hien.Le [30/09/20190][0108499] QTCT
                                EmploymentType = WorkHistory.EmploymentType,
                                DistributionChannelID = WorkHistory.DistributionChannelID,
                                MarketDomainID = WorkHistory.MarketDomainID,
                                RegionMarketID = WorkHistory.RegionMarketID,
                                MarketAreaID = WorkHistory.MarketAreaID,
                                OriginalDistributorID = WorkHistory.OriginalDistributorID,
                                OtherDistributors = WorkHistory.OtherDistributors,
                                // Hien.Le [03/10/2019][109305]
                                ShopID = WorkHistory.ShopID,
                                //Hien.Le [04/02/2020] [0112032 + 0112418]
                                UsualAllowanceGroupID = WorkHistory.UsualAllowanceGroupID,
                                SalaryPaidByTheFormOf = WorkHistory.SalaryPaidByTheFormOf,
                                CoefficientOfWorkmanship = WorkHistory.CoefficientOfWorkmanship,
                                DateCreate = DateTime.Now,
                                DateUpdate = DateTime.Now,
                            };
                        }

                        if (IsComputeRe)
                        {
                            TotalData600.listRePayrollTableInsert.Add(objRePayrollTable);
                        }
                        else if (IsComputePayBack)
                        {
                            TotalData600.listPayrollTablePayBackInsert.Add(objPayrollTablePayBack);
                        }
                        else
                        {
                            TotalData600.listPayrollTableInsert.Add(PayrollTable_Model);
                        }
                        #endregion

                        //bắt lỗi tính công thức có giá trị nào null hay không
                        try
                        {
                            if (profileItem.DateHire == null)
                            {
                                profileItem.DateHire = DateTime.MaxValue;
                            }

                            //[03/11/2017][bang.nguyen][89126][Modify Func]
                            //Bỏ qua không tính các phần tử lương có check “Phần tử lương nhóm
                            listElement = listElement.Where(s => s.IsPayrollGroupElement == null || s.IsPayrollGroupElement == false).ToList();

                            //[09/07/2018][bang.nguyen][96183][modify]
                            //neu có phần tử tính theo ngày => tính cho phần tử ngày trước
                            var listElementByDay = listElement.Where(s => s.IsDaily == true).ToList();
                            if (listElementByDay.Count > 0)
                            {
                                TotalData600.listElementByDay = listElementByDay;
                                var listElementByNow = listElementByDay;

                                #region Tung.Tran [19/09/2018][0098471][Modify] Xử lý phần tử ngày - N tháng

                                string strbyDay = "_BYDAY_N_";
                                var listElementPreN = TotalData600.listElementByDay.Where(s => s.Formula.Contains(strbyDay)).ToList();

                                if (listElementPreN.Count > 0)
                                {
                                    #region Xử lý cắt phần tử
                                    // Danh sách phần tử tháng lùi
                                    var listElementByN = TotalData600.listElementByDay.Where(s => s.Formula.Contains(strbyDay) && s.Formula.Contains("]")).ToList();

                                    // Danh sách phần tử tháng hiện tại
                                    listElementByNow = TotalData600.listElementByDay.Where(s => !listElementByN.Contains(s)).ToList();

                                    List<string> listEnumByN = new List<string>();


                                    // For qua từng phần tử tháng lùi để tách lấy ra các tháng lùi
                                    foreach (var objByN in listElementByN)
                                    {
                                        string strFormula = objByN.Formula;
                                        listEnumByN.AddRange(ParseFormulaToList(strFormula).Where(m => m.IndexOf('[') != -1 && m.IndexOf(']') != -1).ToList());
                                    }

                                    // Chỉ lấy những dòng có chứa _BYDAY_N_ để tách lấy tháng
                                    listEnumByN = listEnumByN.Where(s => s.Contains(strbyDay)).ToList();

                                    List<int> listMonthRe = new List<int>();

                                    // Tách lấy tháng lùi
                                    foreach (var enumByN in listEnumByN)
                                    {
                                        string _enumByN = enumByN.Replace("[", "").Replace("]", "");
                                        var listSplit = _enumByN.Split(new string[] { strbyDay }, StringSplitOptions.None).ToList();
                                        int value = 0;
                                        if (int.TryParse(listSplit[listSplit.Count - 1], out value))
                                        {
                                            if (!listMonthRe.Contains(value))
                                            {
                                                listMonthRe.Add(value);
                                            }
                                        }
                                    }

                                    #endregion

                                    #region For từng tháng lùi xử lý tính toán 
                                    foreach (var monthPre in listMonthRe)
                                    {
                                        #region Tung.Tran [19/09/2018][0098471][Modify] Logic lấy kỳ công để tính toán cho phần tử lùi - N tháng

                                        var strMonthPre = "_N_" + monthPre.ToString();

                                        // Lọc ds phần tử thuộc tháng N
                                        var listElementByReN = listElementByN.Where(s => s.Formula.Contains(strbyDay + monthPre + "]")).ToList();

                                        Att_CutOffDurationEntity cutOffPre = null;

                                        var listCutoffPre = TotalDataAll.listCutOffDuration.Where(a => a.MonthYear == CutOffDuration.MonthYear.AddMonths(-monthPre)).ToList();
                                        if (listCutoffPre != null && listCutoffPre.Count == 1)
                                        {
                                            cutOffPre = listCutoffPre[0];
                                        }
                                        else if (listCutoffPre != null && listCutoffPre.Count > 1)
                                        {
                                            // Lấy chế độ công nhân viên 
                                            var attGradeOfProfile = TotalDataAll.dicAttGrade.GetValueOrNew(profileItem.ID)
                                                                    .Where(a => a.MonthStart <= CutOffDuration.MonthYear)
                                                                    .OrderByDescending(a => a.MonthStart).FirstOrDefault();

                                            //Cat_GradeAttendance
                                            if (attGradeOfProfile != null && attGradeOfProfile.GradeAttendanceID != null && attGradeOfProfile.GradeAttendanceID != Guid.Empty)
                                            {
                                                var gradeAttendance = TotalDataAll.ListCat_GradeAttendance.FirstOrDefault(a => a.ID == attGradeOfProfile.GradeAttendanceID.Value);
                                                if (gradeAttendance != null && gradeAttendance.TypeDurationID != null && gradeAttendance.TypeDurationID != Guid.Empty)
                                                {
                                                    cutOffPre = TotalDataAll.listCutOffDuration.FirstOrDefault(a => a.ID == gradeAttendance.TypeDurationID.Value);
                                                }
                                            }
                                        }

                                        #endregion

                                        if (IsComputeRe)
                                        {
                                            #region TH đang tính lại lương 
                                            // Chức năng Tính lại lương chưa sử dụng ngày lùi

                                            #endregion
                                        }
                                        else
                                        {
                                            #region TH đang tính lương thời gian 
                                            if (cutOffPre == null)
                                            {
                                                foreach (var elementByPreN in listElementByReN)
                                                {
                                                    var item = new ElementFormula(elementByPreN.ElementCode, 0, 0);
                                                    listElementFormula.Add(item);
                                                }
                                            }
                                            else
                                            {
                                                #region Xử lý lấy dữ liệu 600 nhân viên theo kỳ
                                                if (!TotalData600.listCutOffByMonthPre.ContainsKey(cutOffPre.ID))
                                                {
                                                    string status = string.Empty;
                                                    TotalData600.listCutOffByMonthPre.Add(cutOffPre.ID, "");

                                                    #region Get bảng công 
                                                    var listAttendanceTableAll = getDataComputePayrollServices.GetAttendanceTableAll(TotalData600.strOrderByProfile, cutOffPre, ref status);
                                                    TotalData600.listAttendanceTableAll.AddRange(listAttendanceTableAll);
                                                    if (!string.IsNullOrEmpty(status))
                                                    {
                                                        TotalData600.statusBugStore += status + " (" + "BYDAY_N_" + monthPre.ToString() + ")";
                                                    }
                                                    #endregion

                                                    #region Get bảng công chi tiết
                                                    var listAttendanceTableItemAll = getDataComputePayrollServices.GetAttendanceTableItemAll(TotalData600.strOrderByProfile, cutOffPre, ref status);
                                                    TotalData600.listAttendanceTableItemAll.AddRange(listAttendanceTableItemAll);
                                                    if (!string.IsNullOrEmpty(status))
                                                    {
                                                        TotalData600.statusBugStore += status + " (" + "BYDAY_N_" + monthPre.ToString() + ")";
                                                    }
                                                    #endregion

                                                    #region Get OT

                                                    if (listEnumByN.Where(x =>
                                                           x.Contains(PayrollElementByDay.OVERTIMETYPEINTIME_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRAOVERTIMETYPEINTIME_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRAOVERTIMETYPE2INTIME_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRAOVERTIMETYPE3INTIME_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRAOVERTIMETYPE4INTIME_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.OVERTIMETYPEOUTTIME_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRAOVERTIMETYPEOUTTIME_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRAOVERTIMETYPE2OUTTIME_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRAOVERTIMETYPE3OUTTIME_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRAOVERTIMETYPE4OUTTIME_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.ATT_OVERTIME_PROGRESSIVE_BYDAY.ToString())
                                                    ).Count() > 0)
                                                    {
                                                        var listOverTimeAll = getDataComputePayrollServices.GetListOverTimeAll(TotalData600.strOrderByProfile, cutOffPre, ref status);
                                                        TotalData600.listOverTimeAll.AddRange(listOverTimeAll);

                                                        if (!string.IsNullOrEmpty(status))
                                                        {
                                                            TotalData600.statusBugStore += status + " (" + "BYDAY_N_" + monthPre.ToString() + ")";
                                                        }
                                                    }

                                                    // Tung.Tran [05/12/2018][101500] : Có sử dụng enum thì mới lấy dữ liệu
                                                    if (listEnumByN.Where(s =>
                                                        s.Contains("_TAXTOTAL_BYDAY")
                                                        || s.Contains("_TAXPROPORTION_BYDAY")
                                                        ).Count() > 0)
                                                    {
                                                        var listOverTimeTimeLineByDateApprove = getDataComputePayrollServices.GetListOverTimeTimeLineByDateApprove(TotalData600.strOrderByProfile, cutOffPre, ref status);
                                                        TotalData600.listOverTimeAllByDateApprove.AddRange(listOverTimeTimeLineByDateApprove);

                                                        if (!string.IsNullOrEmpty(status))
                                                        {
                                                            TotalData600.statusBugStore += status + " (" + "BYDAY_N_" + monthPre.ToString() + ")";
                                                        }
                                                    }


                                                    #endregion

                                                    #region Get LeaveDay

                                                    if (listEnumByN.Where(x =>
                                                           x.Contains(PayrollElementByDay.LEAVETYPEHAVEMEAL_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRALEAVETYPEHAVEMEAL_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRALEAVETYPE3HAVEMEAL_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRALEAVETYPE4HAVEMEAL_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRALEAVETYPE5HAVEMEAL_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRALEAVETYPE6HAVEMEAL_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.LEAVEWORKDAYTYPEHAVEMEAL_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.LEAVETYPEDURATIONTYPE_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRALEAVETYPEDURATIONTYPE_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRALEAVETYPE3DURATIONTYPE_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRALEAVETYPE4DURATIONTYPE_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRALEAVETYPE5DURATIONTYPE_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.EXTRALEAVETYPE6DURATIONTYPE_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.COUNTLEAVEDAY_BYDAY.ToString())
                                                        || x.Contains(PayrollElementByDay.SUMSHIFTBREAKHOUR_BYDAY.ToString())
                                                    ).Count() > 0)
                                                    {
                                                        var listLeaveDayAll = getDataComputePayrollServices.GetListLeaveDayAll(TotalData600.strOrderByProfile, cutOffPre, ref status);
                                                        TotalData600.listLeaveDayAll.AddRange(listLeaveDayAll);
                                                        if (!string.IsNullOrEmpty(status))
                                                        {
                                                            TotalData600.statusBugStore += status + " (" + "BYDAY_N_" + monthPre.ToString() + ")";
                                                        }
                                                    }

                                                    #endregion

                                                    #region Get Att_WorkDay

                                                    if (listEnumByN.Where(x =>
                                                          x.Contains(PayrollElementByDay.ATTWORKDAYSRCTYPE_BYDAY.ToString())
                                                    ).Count() > 0)
                                                    {
                                                        var listAttWorkdayAll = getDataComputePayrollServices.GetListAttWorkDay(TotalData600.strOrderByProfile, cutOffPre, ref status);
                                                        TotalData600.listAttWorkdayAll.AddRange(listAttWorkdayAll);
                                                        if (!string.IsNullOrEmpty(status))
                                                        {
                                                            TotalData600.statusBugStore += status + " (" + "BYDAY_N_" + monthPre.ToString() + ")";
                                                        }
                                                    }

                                                    #endregion

                                                    #region Get Sal_BasicSalary

                                                    if (listEnumByN.Where(x =>
                                                          x.Contains(PayrollElementByDay.BASICSALARYDATEOFEFFECT_BYDAY.ToString())
                                                    ).Count() > 0)
                                                    {
                                                        var listBasicSalaryAll = getDataComputePayrollServices.GetListBasicSalary(TotalData600, TotalDataAll, cutOffPre, ref status);
                                                        TotalData600.listBasicSalaryAll.AddRange(listBasicSalaryAll);
                                                        if (!string.IsNullOrEmpty(status))
                                                        {
                                                            TotalData600.statusBugStore += status + " (" + "BYDAY_N_" + monthPre.ToString() + ")";
                                                        }
                                                    }

                                                    #endregion

                                                    #region Get Att_ProfileTimeSheet

                                                    if (listEnumByN.Where(x =>
                                                         x.Contains(PayrollElementByDay.DYN12_SUM_ACTUALHOURS_.ToString())
                                                    ).Count() > 0)
                                                    {
                                                        var listAtt_ProfileTimeSheetAll = getDataComputePayrollServices.GetListTimeSheet(TotalData600.strOrderByProfile, cutOffPre, ref status);
                                                        TotalData600.ListAtt_ProfileTimeSheetAll.AddRange(listAtt_ProfileTimeSheetAll);
                                                        if (!string.IsNullOrEmpty(status))
                                                        {
                                                            TotalData600.statusBugStore += status + " (" + "BYDAY_N_" + monthPre.ToString() + ")";
                                                        }
                                                    }

                                                    #endregion

                                                    #region Get ca làm việc Att_Roster

                                                    if (listEnumByN.Where(x =>
                                                         x.Contains(PayrollElementByDay.GETDAILYSHIFTCODE_BYDAY.ToString())
                                                    ).Count() > 0)
                                                    {
                                                        var listAtt_RosterAll = getDataComputePayrollServices.GetListRosterAll(TotalData600.strOrderByProfile, cutOffPre, ref status);
                                                        TotalData600.listRosterAll.AddRange(listAtt_RosterAll);
                                                        if (!string.IsNullOrEmpty(status))
                                                        {
                                                            TotalData600.statusBugStore += status + " (" + "BYDAY_N_" + monthPre.ToString() + ")";
                                                        }
                                                    }

                                                    #endregion

                                                    #region Get nhóm ca làm việc Att_RosterGroup

                                                    if (listEnumByN.Where(x =>
                                                       x.Contains(PayrollElementByDay.GETDAILYSHIFTCODE_BYDAY.ToString())
                                                    ).Count() > 0)
                                                    {
                                                        var ListRosterGroupAll = getDataComputePayrollServices.GetListRosterGroupAll(TotalData600.strOrderByProfile, cutOffPre, ref status);
                                                        TotalData600.ListRosterGroupAll.AddRange(ListRosterGroupAll);
                                                        if (!string.IsNullOrEmpty(status))
                                                        {
                                                            TotalData600.statusBugStore += status + " (" + "BYDAY_N_" + monthPre.ToString() + ")";
                                                        }
                                                    }

                                                    #endregion
                                                }

                                                #endregion

                                                var listElementFormulaByMonthRe = getStaticValuesServices.ParseElementFormulaByDayPreMonth(
                                                    TotalDataAll,
                                                    listElementFormula,
                                                    listElementByReN,
                                                    TotalData600,
                                                    profileItem,
                                                    cutOffPre,
                                                    Grade,
                                                    listTmpDeduction,
                                                    ComputeOrderNumber,
                                                    strMonthPre);
                                                listElementFormula.AddRange(listElementFormulaByMonthRe);
                                            }
                                            #endregion
                                        }
                                    }

                                    #endregion
                                }

                                #endregion

                                #region Xử lý phần tử ngày - tháng hiện tại
                                if (IsComputeRe)
                                {
                                    #region TH đang tính lại lương 
                                    int countAttendanceTable = TotalDataAll.dicRecalAttendanceTable.GetValueOrNew(profileItem.ID)
                                                                .Where(m =>
                                                                ((m.CutOffDurationID == CutOffDuration.ID) ||
                                                                (m.CutOffDurationID == null
                                                                    && m.DateStart <= CutOffDuration.DateEnd
                                                                    && m.DateEnd >= CutOffDuration.DateStart)
                                                                )).Count();

                                    if (countAttendanceTable == 0)
                                    {
                                        foreach (var objElementByNow in listElementByNow)
                                        {
                                            listElementFormula.Add(new ElementFormula(objElementByNow.ElementCode, 0, 0));
                                        }
                                    }
                                    else
                                    {
                                        listElementFormula = getStaticValuesByDayReCallServices.ParseElementFormulaByDayReCall(
                                            TotalDataAll
                                            , listElementFormula
                                            , listElementByNow
                                            , TotalData600
                                            , profileItem
                                            , CutOffDuration
                                            , Grade
                                            , listTmpDeduction
                                            , ComputeOrderNumber
                                            );
                                    }

                                    #endregion
                                }
                                else if (IsComputePayBack == true)
                                {
                                    #region TH đang tính lương payback (AVN, Sal_PayrollPayback_Index) 
                                    int countAttendanceTable = TotalDataAll.dicAttendanceTablePayback.GetValueOrNew(profileItem.ID)
                                                                .Where(m => m.CutOffDurationID == CutOffDuration.ID)
                                                                .Where(m => m.PaybackDurationID == CutOffDurationPayBack.ID)
                                                                .Count();

                                    if (countAttendanceTable == 0)
                                    {
                                        foreach (var objElementByNow in listElementByNow)
                                        {
                                            listElementFormula.Add(new ElementFormula(objElementByNow.ElementCode, 0, 0));
                                        }
                                    }
                                    else
                                    {
                                        listElementFormula = getStaticValuesByDayPaybackServices.ParseElementFormulaByDayPayback(
                                            TotalDataAll
                                            , listElementFormula
                                            , listElementByNow
                                            , TotalData600
                                            , profileItem
                                            , CutOffDuration
                                            , CutOffDurationPayBack
                                            , Grade
                                            , listTmpDeduction
                                            , ComputeOrderNumber
                                            );
                                    }

                                    #endregion
                                }
                                else
                                {
                                    #region TH đang tính lương thời gian 
                                    int countAttendanceTable = 0;

                                    // Nếu không có dữ liệu công => all phần tử ngày thang hien tai sẽ được gán = 0
                                    // Trường hợp nhân viên nghỉ việc => không có dữ liệu công => enum ngày tính không được
                                    countAttendanceTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID)
                                                                .Where(m =>
                                                                ((m.CutOffDurationID == CutOffDuration.ID) ||
                                                                (m.CutOffDurationID == null
                                                                    && m.DateStart <= CutOffDuration.DateEnd
                                                                    && m.DateEnd >= CutOffDuration.DateStart)
                                                                )).Count();

                                    if (countAttendanceTable == 0)
                                    {
                                        foreach (var objElementByNow in listElementByNow)
                                        {
                                            listElementFormula.Add(new ElementFormula(objElementByNow.ElementCode, 0, 0));
                                        }
                                    }
                                    else
                                    {
                                        listElementFormula = getStaticValuesServices.ParseElementFormulaByDay(
                                            TotalDataAll
                                            , listElementFormula
                                            , listElementByNow
                                            , TotalData600
                                            , profileItem
                                            , CutOffDuration
                                            , CutOffDurationPayBack
                                            , Grade
                                            , listTmpDeduction
                                            , ComputeOrderNumber
                                            );
                                    }
                                    #endregion
                                }
                                #endregion

                                //khi có phân tử lương ngày đã được tính trước thì không cần tính lại ở phần tử lương tháng=> mà chỉ sử dụng lại kết quả
                                listElementFormula = ParseElementFormulaForComputePayroll(
                                    TotalDataAll,
                                    listElementFormula,
                                    listElement.Where(s => s.IsDaily == null || s.IsDaily == false).ToList(),
                                    TotalData600,
                                    profileItem,
                                    CutOffDuration,
                                    CutOffDurationPayBack,
                                    Grade,
                                    listTmpDeduction,
                                    ComputeOrderNumber
                                    );
                            }
                            else
                            {
                                listElementFormula = ParseElementFormulaForComputePayroll(
                                    TotalDataAll,
                                    listElementFormula,
                                    listElement,
                                    TotalData600,
                                    profileItem,
                                    CutOffDuration,
                                    CutOffDurationPayBack,
                                    Grade,
                                    listTmpDeduction,
                                    ComputeOrderNumber
                                    );
                            }

                            listElement = listElement.Where(m => m.Invisible != true).ToList();//sắp xếp lại

                            //Duyệt qua các phần tử tính lương 
                            foreach (var elementItem in listElement)
                            {
                                #region Đang tính ở màn hình Tính lại lương
                                if (IsComputeRe)
                                {
                                    Sal_RePayrollTableItem tableItem = new Sal_RePayrollTableItem();
                                    tableItem.ID = Guid.NewGuid();
                                    tableItem.RePayrollTableID = objRePayrollTable.ID;
                                    tableItem.Name = elementItem.ElementName;
                                    tableItem.Code = elementItem.ElementCode;
                                    tableItem.DateCreate = DateTime.Now;
                                    tableItem.DateUpdate = DateTime.Now;
                                    tableItem.MonthYear = CutOffDuration.MonthYear;
                                    tableItem.IsDecrypt = false;
                                    tableItem.IsAddToHourlyRate = false;
                                    tableItem.IsChargePIT = false;
                                    tableItem.OrderNo = elementItem.DisplayIndex != null ? (int)elementItem.DisplayIndex : 0;
                                    tableItem.ElementType = elementItem.TabType;
                                    tableItem.ValueType = elementItem.Type;
                                    tableItem.IsShow = elementItem.IsNotSave != null ? !elementItem.IsNotSave : true;
                                    //[11/11/2017][bang.nguyen][89675][Modify Func]
                                    tableItem.IsNotShowPortal = elementItem.IsNotShowPortal;
                                    if (elementItem.IsBold == true)
                                    {
                                        tableItem.Description4 += "E_BOLD,";
                                    }
                                    tableItem.Description4 += elementItem.ElementLevel + "," + elementItem.Type;
                                    tableItem.Description1 = elementItem.Description;
                                    var ElementResult = listElementFormula.Where(m => m.VariableName != null && m.VariableName.Trim() == elementItem.ElementCode.Trim()).ToList();
                                    string _Value = string.Empty;
                                    if (ElementResult != null && ElementResult.Count > 0)
                                    {
                                        var resultValue = ElementResult.LastOrDefault().Value;
                                        var listValue = resultValue as List<object>;
                                        if (listValue != null)
                                        {
                                            _Value = string.Join(",", listValue);
                                        }
                                        else
                                        {
                                            _Value = resultValue.ToString();
                                        }

                                        if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                        {
                                            tableItem.E_Value = _Value.Encrypt();
                                        }
                                        else
                                        {
                                            tableItem.E_Value = _Value.Encrypt();
                                            tableItem.Value = _Value;
                                        }

                                        if (!string.IsNullOrEmpty(ElementResult.LastOrDefault().ErrorMessage))
                                        {
                                            //[16/08/2017][bang.nguyen]
                                            //neu phan tu loi thi luu thong tin tren ca 2 cot Description1 va Description2
                                            tableItem.Description1 = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString();
                                            tableItem.Description2 = ElementResult.LastOrDefault().ErrorMessage;
                                        }
                                    }
                                    else
                                    {
                                        if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                        {
                                            tableItem.E_Value = "0".Encrypt();
                                        }
                                        else
                                        {
                                            tableItem.E_Value = "0".Encrypt();
                                            tableItem.Value = "0";
                                        }
                                        //[16/08/2017][bang.nguyen]
                                        //neu phan tu loi thi luu thong tin tren ca 2 cot Description1 va Description2
                                        tableItem.Description2 = ConstantDisplay.HRM_Sal_ComputePayroll_NotFoundElement.TranslateString() + " " + elementItem.ElementCode;
                                        tableItem.Description1 = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString();
                                    }

                                    TotalData600.listRePayrollTableItemInsert.Add(tableItem);

                                    if (elementItem.ElementCode == REALWAGES)
                                    {
                                        double _tmpREALWAGES = 0;
                                        double.TryParse(_Value, out _tmpREALWAGES);
                                        if (double.IsInfinity(_tmpREALWAGES))
                                        {
                                            _tmpREALWAGES = 0;
                                        }
                                        TotalREALWAGES += _tmpREALWAGES;
                                        if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                        {
                                            objRePayrollTable.E_AmountPaid = Common.EncryptValue(_tmpREALWAGES);
                                        }
                                        else
                                        {
                                            objRePayrollTable.E_AmountPaid = Common.EncryptValue(_tmpREALWAGES);
                                            objRePayrollTable.AmountPaid = _tmpREALWAGES;
                                        }
                                    }
                                }
                                #endregion

                                #region Đang tính ở màn hình Tính lương truy lĩnh
                                else if (IsComputePayBack)
                                {
                                    Sal_PayrollTablePayBackItem tableItem = new Sal_PayrollTablePayBackItem();
                                    tableItem.ID = Guid.NewGuid();
                                    tableItem.PayrollTableID = objPayrollTablePayBack.ID;
                                    tableItem.Name = elementItem.ElementName;
                                    tableItem.Code = elementItem.ElementCode;
                                    tableItem.DateCreate = DateTime.Now;
                                    tableItem.DateUpdate = DateTime.Now;
                                    tableItem.MonthYear = CutOffDuration.MonthYear;
                                    tableItem.IsDecrypt = false;
                                    tableItem.IsAddToHourlyRate = false;
                                    tableItem.IsChargePIT = false;
                                    tableItem.OrderNo = elementItem.DisplayIndex != null ? (int)elementItem.DisplayIndex : 0;
                                    tableItem.ElementType = elementItem.TabType;
                                    tableItem.ValueType = elementItem.Type;
                                    tableItem.IsShow = elementItem.IsNotSave != null ? !elementItem.IsNotSave : true;
                                    if (elementItem.IsBold == true)
                                    {
                                        tableItem.Description4 += "E_BOLD,";
                                    }
                                    tableItem.Description4 += elementItem.ElementLevel + "," + elementItem.Type;
                                    tableItem.Description1 = elementItem.Description;
                                    var ElementResult = listElementFormula.Where(m => m.VariableName != null && m.VariableName.Trim() == elementItem.ElementCode.Trim()).ToList();
                                    string _Value = string.Empty;
                                    if (ElementResult != null && ElementResult.Count > 0)
                                    {
                                        var resultValue = ElementResult.LastOrDefault().Value;
                                        var listValue = resultValue as List<object>;
                                        if (listValue != null)
                                        {
                                            _Value = string.Join(",", listValue);
                                        }
                                        else
                                        {
                                            _Value = resultValue.ToString();
                                        }

                                        if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                        {
                                            tableItem.E_Value = _Value.Encrypt();
                                        }
                                        else
                                        {
                                            tableItem.E_Value = _Value.Encrypt();
                                            tableItem.Value = _Value;
                                        }

                                        if (!string.IsNullOrEmpty(ElementResult.LastOrDefault().ErrorMessage))
                                        {
                                            //[16/08/2017][bang.nguyen]
                                            //neu phan tu loi thi luu thong tin tren ca 2 cot Description1 va Description2
                                            tableItem.Description1 = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString();
                                            tableItem.Description2 = ElementResult.LastOrDefault().ErrorMessage;
                                        }
                                    }
                                    else
                                    {
                                        if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                        {
                                            tableItem.E_Value = "0".Encrypt();
                                        }
                                        else
                                        {
                                            tableItem.E_Value = "0".Encrypt();
                                            tableItem.Value = "0";
                                        }
                                        //[16/08/2017][bang.nguyen]
                                        //neu phan tu loi thi luu thong tin tren ca 2 cot Description1 va Description2
                                        tableItem.Description2 = ConstantDisplay.HRM_Sal_ComputePayroll_NotFoundElement.TranslateString() + " " + elementItem.ElementCode;
                                        tableItem.Description1 = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString();
                                    }

                                    if (tableItem.ValueType == "Double" && double.TryParse(_Value, out double newValue))
                                    {
                                        //Tung.Tran [24/01/2022][0134886]: Lưu thêm giá trị đã tính trước đó và phần chênh lệch
                                        var objItemBefore = TotalDataAll
                                            .dicPayrollTablePayBackItem
                                            .GetValueOrNew(profileItem.ID)
                                            .Where(x => x.Code == tableItem.Code)
                                            .Where(x => x.CutOffDurationID == CutOffDuration.ID)
                                            .OrderByDescending(x => x.DateCreate)
                                            .FirstOrDefault();

                                        if (objItemBefore != null && double.TryParse(objItemBefore.E_Value.Decrypt(), out double oldValue))
                                        {
                                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                            {
                                                tableItem.E_PaidValue = objItemBefore.E_Value;
                                                tableItem.E_DeviationValue = (oldValue - newValue).ToString().Encrypt();
                                            }
                                            else
                                            {
                                                tableItem.PaidValue = objItemBefore.Value;
                                                tableItem.E_PaidValue = objItemBefore.E_Value;
                                                tableItem.DeviationValue = (oldValue - newValue).ToString();
                                                tableItem.E_DeviationValue = (oldValue - newValue).ToString().Encrypt();
                                            }
                                        }
                                    }

                                    TotalData600.listPayrollTablePayBackItemInsert.Add(tableItem);

                                    if (elementItem.ElementCode == REALWAGES)
                                    {
                                        double _tmpREALWAGES = 0;
                                        double.TryParse(_Value, out _tmpREALWAGES);
                                        if (double.IsInfinity(_tmpREALWAGES))
                                        {
                                            _tmpREALWAGES = 0;
                                        }
                                        TotalREALWAGES += _tmpREALWAGES;
                                        if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                        {
                                            objPayrollTablePayBack.E_AmountPaid = Common.EncryptValue(_tmpREALWAGES);
                                        }
                                        else
                                        {
                                            objPayrollTablePayBack.E_AmountPaid = Common.EncryptValue(_tmpREALWAGES);
                                            objPayrollTablePayBack.AmountPaid = _tmpREALWAGES;
                                        }
                                    }
                                }
                                #endregion

                                #region Tính ở màn hình Tính lương
                                else
                                {
                                    Sal_PayrollTableItem tableItem = new Sal_PayrollTableItem();
                                    tableItem.ID = Guid.NewGuid();
                                    tableItem.PayrollTableID = PayrollTable_Model.ID;
                                    tableItem.Name = elementItem.ElementName;
                                    tableItem.Code = elementItem.ElementCode;
                                    tableItem.DateCreate = DateTime.Now;
                                    tableItem.DateUpdate = DateTime.Now;
                                    tableItem.MonthYear = CutOffDuration.MonthYear;
                                    tableItem.IsDecrypt = false;
                                    tableItem.IsAddToHourlyRate = false;
                                    tableItem.IsChargePIT = false;
                                    tableItem.OrderNo = elementItem.DisplayIndex != null ? (int)elementItem.DisplayIndex : 0;
                                    tableItem.ElementType = elementItem.TabType;
                                    tableItem.ValueType = elementItem.Type;
                                    tableItem.IsShow = elementItem.IsNotSave != null ? !elementItem.IsNotSave : true;
                                    //[11/11/2017][bang.nguyen][89675][Modify Func]
                                    tableItem.IsNotShowPortal = elementItem.IsNotShowPortal;
                                    if (elementItem.IsBold == true)
                                    {
                                        tableItem.Description4 += "E_BOLD,";
                                    }
                                    tableItem.Description4 += elementItem.ElementLevel + "," + elementItem.Type;
                                    tableItem.Description1 = elementItem.Description;
                                    var ElementResult = listElementFormula.Where(m => m.VariableName != null && m.VariableName.Trim() == elementItem.ElementCode.Trim()).ToList();
                                    string _Value = string.Empty;
                                    if (ElementResult != null && ElementResult.Count > 0)
                                    {
                                        var resultValue = ElementResult.LastOrDefault().Value;
                                        var listValue = resultValue as List<object>;
                                        if (listValue != null)
                                        {
                                            _Value = string.Join(",", listValue);
                                        }
                                        else
                                        {
                                            _Value = resultValue.ToString();
                                        }

                                        if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                        {
                                            tableItem.E_Value = _Value.Encrypt();
                                        }
                                        else
                                        {
                                            tableItem.E_Value = _Value.Encrypt();
                                            tableItem.Value = _Value;
                                        }

                                        if (!string.IsNullOrEmpty(ElementResult.LastOrDefault().ErrorMessage))
                                        {
                                            //[16/08/2017][bang.nguyen]
                                            //neu phan tu loi thi luu thong tin tren ca 2 cot Description1 va Description2
                                            tableItem.Description1 = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString();
                                            tableItem.Description2 = ElementResult.LastOrDefault().ErrorMessage;
                                        }
                                    }
                                    else
                                    {
                                        if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                        {
                                            tableItem.E_Value = "0".Encrypt();
                                        }
                                        else
                                        {
                                            tableItem.E_Value = "0".Encrypt();
                                            tableItem.Value = "0";
                                        }
                                        //[16/08/2017][bang.nguyen]
                                        //neu phan tu loi thi luu thong tin tren ca 2 cot Description1 va Description2
                                        tableItem.Description2 = ConstantDisplay.HRM_Sal_ComputePayroll_NotFoundElement.TranslateString() + " " + elementItem.ElementCode;
                                        tableItem.Description1 = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString();
                                    }

                                    TotalData600.listPayrollTableItemInsert.Add(tableItem);

                                    if (elementItem.ElementCode == REALWAGES)
                                    {
                                        double _tmpREALWAGES = 0;
                                        double.TryParse(_Value, out _tmpREALWAGES);
                                        if (double.IsInfinity(_tmpREALWAGES))
                                        {
                                            _tmpREALWAGES = 0;
                                        }
                                        TotalREALWAGES += _tmpREALWAGES;
                                        if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                        {
                                            PayrollTable_Model.E_AmountPaid = Common.EncryptValue(_tmpREALWAGES);
                                        }
                                        else
                                        {
                                            PayrollTable_Model.E_AmountPaid = Common.EncryptValue(_tmpREALWAGES);
                                            PayrollTable_Model.AmountPaid = _tmpREALWAGES;
                                        }
                                    }
                                    #region Bổ sung chức năng lưu trữ lại giá trị những phần tử lương cần sử dụng lại vào các tháng sau
                                    //[21/08/2017][bang.nguyen][86779][Modify Func]
                                    //neu co phan tu su dụng lại cho các tháng sau
                                    if (elementItem.IsReUse == true)
                                    {
                                        Sal_PayrollTableReUse objPayrollTableReUse = new Sal_PayrollTableReUse();
                                        objPayrollTableReUse.ID = Guid.NewGuid();
                                        objPayrollTableReUse.ProfileID = profileItem.ID;
                                        objPayrollTableReUse.CutOffDurationID = CutOffDuration.ID;
                                        objPayrollTableReUse.MonthYear = CutOffDuration.MonthYear;
                                        objPayrollTableReUse.Name = elementItem.ElementName;
                                        objPayrollTableReUse.Code = elementItem.ElementCode;
                                        objPayrollTableReUse.ValueType = elementItem.Type;

                                        objPayrollTableReUse.Description1 = elementItem.Description;
                                        if (ElementResult != null && ElementResult.Count > 0)
                                        {
                                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                            {
                                                objPayrollTableReUse.E_Value = _Value.Encrypt();
                                            }
                                            else
                                            {
                                                objPayrollTableReUse.E_Value = _Value.Encrypt();
                                                objPayrollTableReUse.Value = _Value;
                                            }

                                            if (!string.IsNullOrEmpty(ElementResult.LastOrDefault().ErrorMessage))
                                            {
                                                //[16/08/2017][bang.nguyen]
                                                //neu phan tu loi thi luu thong tin tren ca 2 cot Description1 va Description2
                                                objPayrollTableReUse.Description1 = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString();
                                                objPayrollTableReUse.Description2 = ElementResult.LastOrDefault().ErrorMessage;
                                            }
                                        }
                                        else
                                        {
                                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                                            {
                                                objPayrollTableReUse.E_Value = "0".Encrypt();
                                            }
                                            else
                                            {
                                                objPayrollTableReUse.E_Value = "0".Encrypt();
                                                objPayrollTableReUse.Value = "0";
                                            }
                                            //[16/08/2017][bang.nguyen]
                                            //neu phan tu loi thi luu thong tin tren ca 2 cot Description1 va Description2
                                            objPayrollTableReUse.Description2 = ConstantDisplay.HRM_Sal_ComputePayroll_NotFoundElement.TranslateString() + " " + elementItem.ElementCode;
                                            objPayrollTableReUse.Description1 = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString();
                                        }

                                        TotalData600.listPayrollTableReUseInsert.Add(objPayrollTableReUse);
                                    }
                                    #endregion
                                }
                                #endregion
                            }
                        }
                        catch (Exception ex)
                        {
                            #region Exception ex
                            strInnerException += ex.InnerException != null ? ex.InnerException.Message + "," : string.Empty;
                            strCodeEmpErr += profileItem.CodeEmp + ",";
                            strInfoErr += profileItem.CodeEmp + ": " + ex.Message + "; " + ex.StackTrace + ",";

                            Sal_PayrollTableItem tableItem = new Sal_PayrollTableItem();
                            tableItem.ID = Guid.NewGuid();
                            tableItem.PayrollTableID = PayrollTable_Model.ID;
                            tableItem.Name = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString() + " " + ex.Message;
                            tableItem.Code = "Error";
                            tableItem.MonthYear = CutOffDuration.MonthYear;
                            tableItem.IsDecrypt = false;
                            tableItem.IsAddToHourlyRate = false;
                            tableItem.IsChargePIT = false;
                            tableItem.OrderNo = 0;
                            tableItem.ElementType = "Payroll";
                            tableItem.ValueType = "Double";
                            tableItem.Description4 = "Double";

                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                tableItem.E_Value = "0".Encrypt();
                            }
                            else
                            {
                                tableItem.E_Value = "0".Encrypt();
                                tableItem.Value = "0";
                            }
                            //[16/08/2017][bang.nguyen]
                            //neu phan tu loi thi luu thong tin tren ca 2 cot Description1 va Description2
                            tableItem.Description2 = ex.Message;
                            tableItem.Description1 = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString();

                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                //Cập nhật AmountPaid cho bảng Master
                                PayrollTable_Model.E_AmountPaid = Common.EncryptValue(0);
                            }
                            else
                            {
                                //Cập nhật AmountPaid cho bảng Master
                                PayrollTable_Model.E_AmountPaid = Common.EncryptValue(0);
                                PayrollTable_Model.AmountPaid = 0;
                            }

                            TotalData600.listPayrollTableItemInsert.Add(tableItem);
                            #endregion
                        }
                    }
                    catch (Exception ex)
                    {
                        #region Exception ex
                        strInnerException += ex.InnerException != null ? ex.InnerException.Message + "," : string.Empty;
                        strCodeEmpErr += profileItem.CodeEmp + ",";
                        strInfoErr += profileItem.CodeEmp + ": " + ex.Message + "; " + ex.StackTrace + ",";
                        #endregion
                    }

                    System.Diagnostics.Debug.WriteLine(profileItem.CodeEmp + "-" + StopwatchProfile.Elapsed.ToString());
                }

                #region Ghi log lỗi
                if (!string.IsNullOrEmpty(strCodeEmpErr) || !string.IsNullOrEmpty(strInfoErr) || !string.IsNullOrEmpty(strInnerException))
                {
                    loggerPatch.WriteError("ComputePayroll_ProgressDetails", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": TÍNH CHO TỪNG NHÂN VIÊN ERROR", new
                    {
                        innerException = strInnerException,
                        exeption = strInfoErr,
                        code = strCodeEmpErr,
                    });
                }
                #endregion

                #endregion

                #region B3: Lưu dữ liệu 

                //Get connection string
                var connection = context.Database.Connection.GetAdoConnection();
                using (DbCommander commander = new DbCommander(connection))
                {
                    //khi tinh lai luong chi để so sánh => không lưu vào bảng lương chính
                    if (IsComputeForCompare == true)
                    {
                        Thread thread = new Thread(() => AsyncSaveChangePayrollForCompare(
                            0.1,
                            TotalData600.listPayrollTableInsert,
                            TotalData600.listPayrollTableItemInsert,
                            totalProfile,
                            listProfile.Count,
                            Sys_AsynTaskID,
                            TotalREALWAGES));
                        thread.Start();
                    }
                    else
                    {
                        Thread thread = new Thread(() =>
                        {
                            AsyncSaveChangePayroll(
                                TotalDataAll.UserLogin,
                                listProfile,
                                TotalData600.listPayrollGroupTableInsert,
                                TotalData600.listPayrollGroupTableItemInsert,
                                TotalData600.listPayrollTableInsert,
                                TotalData600.listPayrollTableItemInsert,
                                TotalData600.listPayrollTableReUseInsert,
                                TotalData600.listRePayrollTableInsert,
                                TotalData600.listRePayrollTableItemInsert,
                                TotalData600.listPayrollTablePayBackInsert,
                                TotalData600.listPayrollTablePayBackItemInsert,
                                loggerPatch,
                                indexPatchCompute,
                                ref detailCompute,
                                IsComputeRe,
                                IsComputePayBack
                                );

                            lock (lockObjectSave)
                            {
                                if (dicTotalRealWagesAll.ContainsKey(Sys_AsynTaskID))
                                {
                                    dicTotalRealWagesAll[Sys_AsynTaskID] += TotalREALWAGES;
                                }
                                var checkThreaNotYetStop = listThreadSave.Where(p => p.Name == Sys_AsynTaskID.ToString()
                                    && (p.ThreadState == ThreadState.Running
                                    || p.ThreadState == ThreadState.WaitSleepJoin
                                    || p.ThreadState == ThreadState.Unstarted));

                                //khi chỉ còn 1 Thread cuối chưa chạy trong tổng số all Thread phải chạy
                                if (checkThreaNotYetStop.Count() == 1 && listThreadSave.Where(p => p.Name == Sys_AsynTaskID.ToString()).Count() == soLanChunk600)
                                {
                                    var threadCurrent = Thread.CurrentThread;
                                    if (checkThreaNotYetStop.FirstOrDefault(p => p.ManagedThreadId == threadCurrent.ManagedThreadId) != null)
                                    {
                                        if (detailCompute != null)
                                        {
                                            detailCompute.FailedComputed = detailCompute.EmployeePresents - detailCompute.SuccessComputed;
                                        }
                                        SaveCalculatorHistoryForProcess(Sys_AsynTaskID, 1, dicTotalRealWagesAll[Sys_AsynTaskID], null, detailCompute);
                                        dicTotalRealWagesAll.Remove(Sys_AsynTaskID);
                                        loggerPatch.WriteInfo("ComputePayrollKZ", "======> END PROCESS <======", new
                                        {
                                            data = Common.ComputeTime(dateTimeComputeTotal, DateTime.Now)
                                        });

                                        #region Tung.Tran [15/02/2022][138158]: Nếu có cấu hình khóa tạm sau khi tính lương => Lưu 1 dòng khóa tạm vào bảng Sys_LockObject
                                        var objSettingLockTemp = TotalDataAll.listAllSettingEntity.FirstOrDefault(x => x.Name == AppConfig.HRM_SAL_CONFIG_ISLOCKDATAAFTERCOMPUTINGPAYROLL.ToString());
                                        if (objSettingLockTemp != null && objSettingLockTemp.Value1 == "True")
                                        {

                                            using (var contextSaveLockObkect = new VnrHrmDataContext())
                                            {
                                                var unitOfWorkSaveLockObkect = new UnitOfWork(contextSaveLockObkect);
                                                unitOfWorkSaveLockObkect.UserLogin = TotalDataAll.UserLogin;

                                                //Lấy dữ liệu cấu hình khóa bảng lương (Cấu hình khóa đối tượng bảng lương)
                                                var objConfiglock = unitOfWorkSaveLockObkect
                                                .CreateQueryable<Cat_NameEntity>(x => x.NameEntityType == "E_LOCKOBJECT")
                                                .Where(x => x.Function == EnumDropDown.LockObjectFunction.E_LOCK_PAYTABLE.ToString())
                                                .FirstOrDefault();

                                                if (objConfiglock != null)
                                                {
                                                    var repo = new CustomBaseRepository<Sys_LockObject>(unitOfWorkSaveLockObkect);
                                                    var objLockObject = new Sys_LockObject();
                                                    objLockObject.ID = Guid.NewGuid();
                                                    objLockObject.CutOffDurationID = CutOffDuration.ID;
                                                    objLockObject.Type = SysLockObjectType.E_APPROVED_PAYROLL.ToString();
                                                    objLockObject.Status = LockObjectStatus.E_LOCKED_TEMP.ToString();
                                                    objLockObject.DateStart = CutOffDuration.DateStart;
                                                    objLockObject.DateEnd = CutOffDuration.DateEnd;
                                                    objLockObject.UserCreate = TotalDataAll.UserLogin;
                                                    repo.Add(objLockObject);
                                                    unitOfWorkSaveLockObkect.SaveChanges();

                                                    Sys_LockObjectServices insertGroupLock = new Sys_LockObjectServices();
                                                    var insertGroup = insertGroupLock.InsertGroupLockByID(
                                                        objLockObject.ID,
                                                        objLockObject.DateStart,
                                                        objLockObject.DateEnd,
                                                        objConfiglock.ID);
                                                }
                                            }
                                        }
                                        #endregion

                                        GC.Collect();
                                    }
                                }
                            }
                        });

                        lock (lockObjectSave)
                        {
                            listThreadSave.Add(thread);
                        }

                        thread.Name = Sys_AsynTaskID.ToString();
                        thread.Start();
                    }
                }
                #endregion
            }
        }

        #region Lương nhóm
        /// <summary>
        /// [01/11/2017][bang.nguyen][89126][Modify Func]
        /// tính lương cho các phần tử nhóm
        /// 
        /// [31/07/2018][tung.tran][0096903][Modify Func] Giải pháp tính lương nhóm cho nhân viên đã nghỉ việc	
        /// 
        /// </summary>
        /// <param name="TotalData"></param>
        /// <param name="listElementFormula"></param>
        /// <param name="profileItem"></param>
        /// <param name="CutOffDuration"></param>
        /// <param name="listElementByGroup"></param>
        public void ComputePayrollByElementGroup(
           ComputePayrollDataModelKZAll TotalDataAll,
           ComputePayrollDataModelKZ TotalData600,
           List<ElementFormula> listElementFormula,
           Hre_ProfileEntity profileItem,
           Att_CutOffDurationEntity CutOffDuration,
           List<Cat_ElementEntity> listElementByGrade,
           List<Cat_ElementEntity> listElementByGroup,
           Sal_GradeEntity Grade,
           Dictionary<Guid, ValueCount> listTmpDeduction,
           bool ComputeOrderNumber)
        {
            //ds chứa all các dòng đã group
            var listGroupValueForPayrollGroupTable = new List<GroupValueForPayrollGroupTable>();
            var listAttendanceTableItem = new List<Att_AttendanceTableItemEntity>();
            var objAttendanceTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => ((s.CutOffDurationID != null && s.CutOffDurationID == CutOffDuration.ID) || (s.MonthYear != null && s.MonthYear == CutOffDuration.MonthYear)))
            .FirstOrDefault();

            #region Lay cac dữ liệu cần nhóm
            //[12/11/2018][bang.nguyen][101337][Modify Func]
            //lấy các đội tượng nhóm theo cấu hình
            #region theo cau hinh nhom
            //get gia tri cau hinh đối tượng nhom
            string valueTableGroup = string.Empty;
            var objSettingGroupObject = TotalDataAll.listAllSettingEntity.FirstOrDefault(x => x.Name == AppConfig.HRM_SAL_ELEMENT_GROUPOBJECT.ToString());
            if (objSettingGroupObject != null && !string.IsNullOrEmpty(objSettingGroupObject.Value1))
            {
                valueTableGroup = objSettingGroupObject.Value1;
            }

            //get giá trị cấu hình thuộc tính nhóm
            string valueFieldGroup = string.Empty;
            var objSettingGroupProperties = TotalDataAll.listAllSettingEntity.FirstOrDefault(x => x.Name == AppConfig.HRM_SAL_ELEMENT_GROUPPROPERTIES.ToString());
            if (objSettingGroupProperties != null && !string.IsNullOrEmpty(objSettingGroupProperties.Value1))
            {
                valueFieldGroup = objSettingGroupProperties.Value1;
            }

            if (!string.IsNullOrEmpty(valueTableGroup) && !string.IsNullOrEmpty(valueFieldGroup))
            {
                string tableAtt_AttendanceTableItem = ObjectGroupEnum.Att_AttendanceTableItem.ToString();
                string tableSal_PerfomanceAllowance = ObjectGroupEnum.Sal_PerfomanceAllowance.ToString();
                string fieldOrgstructureID = PropertiesGroupEnum.OrgstructureID.ToString();
                string fieldPositionID = PropertiesGroupEnum.PositionID.ToString();
                string fieldShopID = PropertiesGroupEnum.ShopID.ToString();

                //nếu có cấu hình => xử lý các dữ liệu nhóm theo cấu hình
                List<string> listTableGroup = valueTableGroup.Split(',').Distinct().ToList();
                List<string> listFieldGroup = valueFieldGroup.Split(',').Distinct().ToList();
                //chứa các field nhóm
                Dictionary<string, string> dicFieldConfigForGroup = new Dictionary<string, string>();

                // giữ lại cái field cấu hình để get giá trị cho enum
                foreach (var field in listFieldGroup)
                {
                    dicFieldConfigForGroup.Add(field, "");
                }

                TotalData600.dicFieldConfigForGroup = dicFieldConfigForGroup;

                //add các dữ liệu để nhóm theo các bảng và field cấu hình
                foreach (var tableGroup in listTableGroup)
                {
                    #region Att_AttendanceTableItem
                    if (tableGroup == tableAtt_AttendanceTableItem)
                    {
                        var listProfileTimeSheet = new List<Att_ProfileTimeSheetEntity>();
                        if (objAttendanceTable != null)
                        {
                            listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTable.ID);
                            if (listAttendanceTableItem.Count > 0)
                            {
                                DateTime maxWorkDate = listAttendanceTableItem.Max(s => s.WorkDate);
                                DateTime minWorkDate = listAttendanceTableItem.Min(s => s.WorkDate);
                                listProfileTimeSheet = TotalDataAll.ListAtt_ProfileTimeSheet.Where(s => s.ProfileID == profileItem.ID && s.WorkDate >= minWorkDate && s.WorkDate <= maxWorkDate).ToList();
                            }

                            foreach (var objAttendanceTableItem in listAttendanceTableItem)
                            {
                                if (objAttendanceTableItem.IsMultiple == true)
                                {
                                    var listProfileTimeSheetByWorkDate = listProfileTimeSheet.Where(s => s.WorkDate == objAttendanceTableItem.WorkDate).ToList();
                                    foreach (var objProfileTimeSheetByWorkDate in listProfileTimeSheetByWorkDate)
                                    {
                                        GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable = new GroupValueForPayrollGroupTable();
                                        foreach (var field in listFieldGroup)
                                        {
                                            //OrgstructureID
                                            if (field == fieldOrgstructureID)
                                            {
                                                if (objProfileTimeSheetByWorkDate.OrgStructureTransID != null)
                                                {
                                                    objGroupValueForPayrollGroupTable.OrgstructureID = objProfileTimeSheetByWorkDate.OrgStructureTransID;
                                                }
                                            }
                                            //PositionID
                                            else if (field == fieldPositionID)
                                            {
                                                if (objProfileTimeSheetByWorkDate.PositionTransID != null)
                                                {
                                                    objGroupValueForPayrollGroupTable.PositionID = objProfileTimeSheetByWorkDate.PositionTransID;
                                                }
                                            }
                                            //ShopID
                                            else if (field == fieldShopID)
                                            {
                                                if (objProfileTimeSheetByWorkDate.ShopTransID != null)
                                                {
                                                    objGroupValueForPayrollGroupTable.ShopID = objProfileTimeSheetByWorkDate.ShopTransID;
                                                }
                                            }
                                        }
                                        listGroupValueForPayrollGroupTable.Add(objGroupValueForPayrollGroupTable);
                                    }
                                }
                                else
                                {
                                    GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable = new GroupValueForPayrollGroupTable();
                                    foreach (var field in listFieldGroup)
                                    {
                                        //OrgstructureID
                                        if (field == fieldOrgstructureID)
                                        {
                                            if (objAttendanceTableItem.OrgStructureID != null)
                                            {
                                                objGroupValueForPayrollGroupTable.OrgstructureID = objAttendanceTableItem.OrgStructureID;
                                            }
                                        }
                                        //PositionID
                                        else if (field == fieldPositionID)
                                        {
                                            if (objAttendanceTableItem.PositionID != null)
                                            {
                                                objGroupValueForPayrollGroupTable.PositionID = objAttendanceTableItem.PositionID;
                                            }
                                        }
                                        //ShopID
                                        else if (field == fieldShopID)
                                        {
                                            if (objAttendanceTableItem.ShopID != null)
                                            {
                                                objGroupValueForPayrollGroupTable.ShopID = objAttendanceTableItem.ShopID;
                                            }
                                        }
                                    }
                                    listGroupValueForPayrollGroupTable.Add(objGroupValueForPayrollGroupTable);
                                }
                            }
                        }
                    }
                    #endregion
                    #region Sal_PerfomanceAllowance
                    else if (tableGroup == tableSal_PerfomanceAllowance)
                    {
                        var listPerformanceAllowance = TotalDataAll.ListPerformanceAllowance
                             .Where(s => s.CutOffDurationID != null
                             && s.CutOffDurationID.Value == CutOffDuration.ID
                             && s.ProfileID == profileItem.ID).ToList();
                        foreach (var objPerformanceAllowance in listPerformanceAllowance)
                        {
                            GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable = new GroupValueForPayrollGroupTable();
                            foreach (var field in listFieldGroup)
                            {
                                //OrgstructureID
                                if (field == fieldOrgstructureID)
                                {
                                    if (objPerformanceAllowance.OrgStructureID != null)
                                    {
                                        objGroupValueForPayrollGroupTable.OrgstructureID = objPerformanceAllowance.OrgStructureID;
                                    }
                                }
                                //PositionID
                                else if (field == fieldPositionID)
                                {
                                    if (objPerformanceAllowance.PositionID != null)
                                    {
                                        objGroupValueForPayrollGroupTable.PositionID = objPerformanceAllowance.PositionID;
                                    }
                                }
                                //ShopID
                                else if (field == fieldShopID)
                                {
                                    if (objPerformanceAllowance.ShopID != null)
                                    {
                                        objGroupValueForPayrollGroupTable.ShopID = objPerformanceAllowance.ShopID;
                                    }
                                }
                            }
                            listGroupValueForPayrollGroupTable.Add(objGroupValueForPayrollGroupTable);
                        }
                    }
                    #endregion
                }
                //loại bỏ các nhóm trùng

                var listGetProperty = Common.Reflection.GetListGetValueProperty(typeof(GroupValueForPayrollGroupTable), listFieldGroup.ToArray());
                listGroupValueForPayrollGroupTable = listGroupValueForPayrollGroupTable.GroupBy(s => new LinQGroupItem(listGetProperty, s, listFieldGroup.ToArray()))
                    .Select(s => s.FirstOrDefault())
                    .ToList();

            }
            #endregion
            #region xu ly nhu hien tai neu khong cau hinh
            else
            {
                var listProfileTimeSheet = new List<Att_ProfileTimeSheetEntity>();
                if (objAttendanceTable != null)
                {
                    listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTable.ID);
                    if (listAttendanceTableItem.Count > 0)
                    {
                        DateTime maxWorkDate = listAttendanceTableItem.Max(s => s.WorkDate);
                        DateTime minWorkDate = listAttendanceTableItem.Min(s => s.WorkDate);
                        listProfileTimeSheet = TotalDataAll.ListAtt_ProfileTimeSheet.Where(s => s.ProfileID == profileItem.ID && s.WorkDate >= minWorkDate && s.WorkDate <= maxWorkDate).ToList();
                    }

                    foreach (var objAttendanceTableItem in listAttendanceTableItem)
                    {
                        if (objAttendanceTableItem.IsMultiple == true)
                        {
                            var listProfileTimeSheetByWorkDate = listProfileTimeSheet.Where(s => s.WorkDate == objAttendanceTableItem.WorkDate).ToList();
                            foreach (var objProfileTimeSheetByWorkDate in listProfileTimeSheetByWorkDate)
                            {
                                if (objProfileTimeSheetByWorkDate.OrgStructureTransID != null || objProfileTimeSheetByWorkDate.PositionTransID != null || objProfileTimeSheetByWorkDate.ShopTransID != null)
                                {
                                    GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable = new GroupValueForPayrollGroupTable();
                                    objGroupValueForPayrollGroupTable.OrgstructureID = objProfileTimeSheetByWorkDate.OrgStructureTransID;
                                    objGroupValueForPayrollGroupTable.PositionID = objProfileTimeSheetByWorkDate.PositionTransID;
                                    objGroupValueForPayrollGroupTable.ShopID = objProfileTimeSheetByWorkDate.ShopTransID;
                                    listGroupValueForPayrollGroupTable.Add(objGroupValueForPayrollGroupTable);
                                }
                            }
                        }
                        else
                        {
                            if (objAttendanceTableItem.OrgStructureID != null || objAttendanceTableItem.PositionID != null || objAttendanceTableItem.ShopID != null || objAttendanceTableItem.AreaPostJobWorkID != null)
                            {
                                GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable = new GroupValueForPayrollGroupTable();
                                objGroupValueForPayrollGroupTable.OrgstructureID = objAttendanceTableItem.OrgStructureID;
                                objGroupValueForPayrollGroupTable.PositionID = objAttendanceTableItem.PositionID;
                                objGroupValueForPayrollGroupTable.ShopID = objAttendanceTableItem.ShopID;
                                objGroupValueForPayrollGroupTable.AreaPostJobWorkID = objAttendanceTableItem.AreaPostJobWorkID;
                                listGroupValueForPayrollGroupTable.Add(objGroupValueForPayrollGroupTable);
                            }
                        }
                    }
                }
                else
                {
                    // [31/07/2018][tung.tran][0096903][Modify Func] Giải pháp tính lương nhóm cho nhân viên đã nghỉ việc
                    // Nhân viên nghỉ việc không có bảng công thì sẽ dùng Phụ cấp lương nhóm để tính lương nhóm
                    var listPerformanceAllowance = TotalDataAll.ListPerformanceAllowance
                       .Where(s => s.CutOffDurationID != null
                       && s.CutOffDurationID.Value == CutOffDuration.ID
                       && s.ProfileID == profileItem.ID).ToList();
                    foreach (var objPerformanceAllowance in listPerformanceAllowance)
                    {
                        if (objPerformanceAllowance.OrgStructureID != null || objPerformanceAllowance.PositionID != null || objPerformanceAllowance.ShopID != null)
                        {
                            GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable = new GroupValueForPayrollGroupTable();
                            objGroupValueForPayrollGroupTable.OrgstructureID = objPerformanceAllowance.OrgStructureID;
                            objGroupValueForPayrollGroupTable.PositionID = objPerformanceAllowance.PositionID;
                            objGroupValueForPayrollGroupTable.ShopID = objPerformanceAllowance.ShopID;
                            listGroupValueForPayrollGroupTable.Add(objGroupValueForPayrollGroupTable);
                        }
                    }
                }
                //loại bỏ các nhóm trùng
                listGroupValueForPayrollGroupTable = listGroupValueForPayrollGroupTable.GroupBy(s => new { s.OrgstructureID, s.PositionID, s.ShopID, s.AreaPostJobWorkID }).Select(s => s.First()).ToList();
            }
            #endregion
            #endregion

            #region Process

            //biển nhận biết lần lặp đầu tiên của nhóm => 
            //chỉ cần lần lặp đầu là biết được all enum cần lấy giá trị
            int indexByGroup = 0;
            //ds enum phan thu nhom
            var listEnumGroupAll = new List<string>();

            //lấy bảng công của nv trong tháng tính lương
            Att_AttendanceTableEntity objAttendanceTableProCut = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID)
                .Where(m => ((m.CutOffDurationID == CutOffDuration.ID) || (m.CutOffDurationID == null && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart)))
                .FirstOrDefault();

            //Lấy các phần tử tính lương nằm trong Grade của nhân viên
            if (Grade == null)
            {
                Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd);
            }

            if (profileItem.DateHire == null)
            {
                profileItem.DateHire = DateTime.MaxValue;
            }
            var listElementByGroupByDay = listElementByGroup.Where(x => x.IsDaily == true).ToList();
            if (ComputeOrderNumber)
            {
                listElementByGroup = listElementByGroup.OrderBy(m => m.OrderNumber).ToList();
                listElementByGrade = listElementByGrade.OrderBy(m => m.OrderNumber).ToList();
            }
            //lặp qa từng nhóm 1
            foreach (var objGroupValueForPayrollGroupTable in listGroupValueForPayrollGroupTable)
            {
                indexByGroup += 1;
                #region xu ly cho bảng lương nhóm master
                Sal_PayrollGroupTable objPayrollGroupTable = new Sal_PayrollGroupTable();
                objPayrollGroupTable.ID = Guid.NewGuid();
                objPayrollGroupTable.ProfileID = profileItem.ID;
                objPayrollGroupTable.MonthYear = CutOffDuration.MonthYear;
                objPayrollGroupTable.CutOffDurationID = CutOffDuration.ID;
                objPayrollGroupTable.OrgstructureID = objGroupValueForPayrollGroupTable.OrgstructureID;
                objPayrollGroupTable.PositionID = objGroupValueForPayrollGroupTable.PositionID;
                objPayrollGroupTable.ShopID = objGroupValueForPayrollGroupTable.ShopID;
                objPayrollGroupTable.AreaPostJobWorkID = objGroupValueForPayrollGroupTable.AreaPostJobWorkID;
                TotalData600.listPayrollGroupTableInsert.Add(objPayrollGroupTable);
                #endregion

                #region Xử lý cho bảng lương nhóm Item
                try
                {

                    var listElementFormulaForElementGroup = new List<ElementFormula>();
                    listElementFormulaForElementGroup.AddRange(listElementFormula.ToList());
                    if (listElementByGroupByDay.Count > 0)
                    {
                        listElementFormulaForElementGroup = ParseElementFormulaGroupForElementGroup(
                              TotalDataAll,
                              objAttendanceTableProCut,
                              listEnumGroupAll,
                              indexByGroup,
                              objGroupValueForPayrollGroupTable,
                              listElementFormula,
                              listElementFormulaForElementGroup,
                              listElementByGrade,
                              listElementByGroup,
                              TotalData600,
                              profileItem,
                              CutOffDuration,
                              Grade,
                              listTmpDeduction,
                              ComputeOrderNumber);
                        listElementFormulaForElementGroup = ParseElementFormulaForElementGroup(
                            TotalDataAll,
                            objAttendanceTableProCut,
                            listEnumGroupAll,
                            indexByGroup,
                            objGroupValueForPayrollGroupTable,
                            listElementFormula,
                            listElementFormulaForElementGroup,
                            listElementByGrade,
                            listElementByGroup.Where(x => x.IsDaily == false || x.IsDaily == null).ToList(),
                            TotalData600,
                            profileItem,
                            CutOffDuration,
                            Grade,
                            listTmpDeduction,
                            ComputeOrderNumber);
                    }
                    //add lại các phần tử bt đã được tính để tính cho những lần thứ 2 trở đi sau không cần tính lại
                    //vì phần tử không phải phần tử nhóm chỉ tính 1 lần và dùng lại cho những lần sau
                    else
                    {
                        //tinh giá trị cho công thưc
                        listElementFormulaForElementGroup = ParseElementFormulaForElementGroup(
                            TotalDataAll,
                            objAttendanceTableProCut,
                            listEnumGroupAll,
                            indexByGroup,
                            objGroupValueForPayrollGroupTable,
                            listElementFormula,
                            listElementFormulaForElementGroup,
                            listElementByGrade,
                            listElementByGroup,
                            TotalData600,
                            profileItem,
                            CutOffDuration,
                            Grade,
                            listTmpDeduction,
                            ComputeOrderNumber);
                    }
                    #region gan gia tri cho bang luong nhom detail
                    //Duyệt qua các phần tử tính lương 
                    foreach (var elementItem in listElementByGroup)
                    {
                        Sal_PayrollGroupTableItem objPayrollGroupTableItem = new Sal_PayrollGroupTableItem();
                        objPayrollGroupTableItem.ID = Guid.NewGuid();
                        objPayrollGroupTableItem.PayrollGroupTableID = objPayrollGroupTable.ID;
                        objPayrollGroupTableItem.Name = elementItem.ElementName;
                        objPayrollGroupTableItem.Code = elementItem.ElementCode;
                        objPayrollGroupTableItem.MonthYear = CutOffDuration.MonthYear;
                        objPayrollGroupTableItem.IsDecrypt = false;
                        objPayrollGroupTableItem.IsAddToHourlyRate = false;
                        objPayrollGroupTableItem.IsChargePIT = false;
                        objPayrollGroupTableItem.OrderNo = elementItem.DisplayIndex != null ? (int)elementItem.DisplayIndex : 0;
                        objPayrollGroupTableItem.ElementType = elementItem.TabType;
                        objPayrollGroupTableItem.ValueType = elementItem.Type;
                        objPayrollGroupTableItem.IsShow = elementItem.IsNotSave != null ? !elementItem.IsNotSave : true;
                        if (elementItem.IsBold == true)
                        {
                            objPayrollGroupTableItem.Description4 += "E_BOLD,";
                        }
                        objPayrollGroupTableItem.Description4 += elementItem.ElementLevel + "," + elementItem.Type;
                        objPayrollGroupTableItem.Description1 = elementItem.Description;
                        var ElementResult = listElementFormulaForElementGroup.Where(m => m.VariableName != null && m.VariableName.Trim() == elementItem.ElementCode.Trim()).ToList();
                        if (ElementResult != null)
                        {
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                objPayrollGroupTableItem.E_Value = ElementResult.LastOrDefault().Value.ToString().Encrypt();
                            }
                            else
                            {
                                objPayrollGroupTableItem.E_Value = ElementResult.LastOrDefault().Value.ToString().Encrypt();
                                objPayrollGroupTableItem.Value = ElementResult.LastOrDefault().Value.ToString();
                            }

                            if (!string.IsNullOrEmpty(ElementResult.LastOrDefault().ErrorMessage))
                            {
                                //[16/08/2017][bang.nguyen]
                                //neu phan tu loi thi luu thong tin tren ca 2 cot Description1 va Description2
                                objPayrollGroupTableItem.Description1 = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString();
                                objPayrollGroupTableItem.Description2 = ElementResult.LastOrDefault().ErrorMessage;
                            }
                        }
                        else
                        {
                            if (ConstantPathWeb.Hrm_IsEncryptData == true)
                            {
                                objPayrollGroupTableItem.E_Value = "0".Encrypt();
                            }
                            else
                            {
                                objPayrollGroupTableItem.E_Value = "0".Encrypt();
                                objPayrollGroupTableItem.Value = "0";
                            }
                            //[16/08/2017][bang.nguyen]
                            //neu phan tu loi thi luu thong tin tren ca 2 cot Description1 va Description2
                            objPayrollGroupTableItem.Description2 = ConstantDisplay.HRM_Sal_ComputePayroll_NotFoundElement.TranslateString() + " " + elementItem.ElementCode;
                            objPayrollGroupTableItem.Description1 = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString();
                        }

                        TotalData600.listPayrollGroupTableItemInsert.Add(objPayrollGroupTableItem);
                    }
                    #endregion
                }
                catch (Exception ex)
                {
                    TotalData600.strErrMesageByGroup += "ParseElementFormulaForElementGroup: Code employee: " + profileItem.CodeEmp
                              + "; error: " + ex.Message + ex.StackTrace;

                    #region gan gia tri cho bang luong nhom datail khi catch
                    Sal_PayrollGroupTableItem objPayrollGroupTableItem = new Sal_PayrollGroupTableItem();
                    objPayrollGroupTableItem.ID = Guid.NewGuid();
                    objPayrollGroupTableItem.PayrollGroupTableID = objPayrollGroupTable.ID;
                    objPayrollGroupTableItem.Name = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString() + " " + ex.Message;
                    objPayrollGroupTableItem.Code = "Error";
                    objPayrollGroupTableItem.MonthYear = CutOffDuration.MonthYear;
                    objPayrollGroupTableItem.IsDecrypt = false;
                    objPayrollGroupTableItem.IsAddToHourlyRate = false;
                    objPayrollGroupTableItem.IsChargePIT = false;
                    objPayrollGroupTableItem.OrderNo = 0;
                    objPayrollGroupTableItem.ElementType = "Payroll";
                    objPayrollGroupTableItem.ValueType = "Double";
                    objPayrollGroupTableItem.Description4 = "Double";

                    if (ConstantPathWeb.Hrm_IsEncryptData == true)
                    {
                        objPayrollGroupTableItem.E_Value = "0".Encrypt();
                    }
                    else
                    {
                        objPayrollGroupTableItem.E_Value = "0".Encrypt();
                        objPayrollGroupTableItem.Value = "0";
                    }
                    //[16/08/2017][bang.nguyen]
                    //neu phan tu loi thi luu thong tin tren ca 2 cot Description1 va Description2
                    objPayrollGroupTableItem.Description2 = ex.Message;
                    objPayrollGroupTableItem.Description1 = ConstantDisplay.HRM_Sal_ComputePayroll_ErrorElement.TranslateString();

                    TotalData600.listPayrollGroupTableItemInsert.Add(objPayrollGroupTableItem);
                    #endregion
                }
                #endregion
            }
            #endregion
        }
        public List<ElementFormula> ParseElementFormulaGroupForElementGroup(
          ComputePayrollDataModelKZAll TotalDataAll,
          Att_AttendanceTableEntity objAttendanceTableProCut,
          List<string> listEnumGroupAll,
          int indexByGroup,
          GroupValueForPayrollGroupTable GroupValueForPayrollGroupTable,
          List<ElementFormula> listElementFormula,
          List<ElementFormula> listElementFormulaForElementGroup,
          List<Cat_ElementEntity> listElementByGrade,
          List<Cat_ElementEntity> listElementForEmlementGroup,
          ComputePayrollDataModelKZ TotalData600,
          Hre_ProfileEntity profileItem,
          Att_CutOffDurationEntity CutOffDuration,
          Sal_GradeEntity GradeElement,
          Dictionary<Guid, ValueCount> listTmpDeduction,
          bool ComputeOrderNumber)
        {
            var listElementFormulaAll = new List<ElementFormula>();
            string strStartWithForElementGroup = "ELEMENT_GROUP_";

            if (ComputeOrderNumber)
            {
                //tu nhom thu 2 tro di khong can xac dinh lai enum
                //lan 2 tro di cũng không cần tính lại các enum lương thời gian (vì đã được tính lần đầu: và all các nhóm điều có cùng giá trị phần tử này)
                if (indexByGroup > 1)
                {
                    if (listEnumGroupAll.Count > 0)
                    {

                        //cac nhom sau chi di lay gia tri cho cac enum nhom 1 lan
                        listElementFormulaForElementGroup = GetStaticValuesForElementGroup(
                            TotalDataAll,
                            GroupValueForPayrollGroupTable,
                            TotalData600,
                            listElementFormulaForElementGroup,
                            profileItem,
                            CutOffDuration,
                            listEnumGroupAll.ToList(),
                            GradeElement.GradePayrollID,
                            objAttendanceTableProCut,
                            listTmpDeduction,
                            indexByGroup
                            );
                        listElementFormulaForElementGroup = GetStaticValuesForElementGroupByDay(
                           TotalDataAll,
                           GroupValueForPayrollGroupTable,
                           TotalData600,
                           listElementFormulaForElementGroup,
                           profileItem,
                           CutOffDuration,
                           listEnumGroupAll.ToList(),
                           GradeElement.GradePayrollID,
                           objAttendanceTableProCut,
                           listTmpDeduction,
                           indexByGroup
                           );
                    }

                    foreach (var elementItem in listElementForEmlementGroup)
                    {
                        try
                        {
                            listElementFormulaForElementGroup = ParseFormulaForElementGroupFromListResult(elementItem, listElementFormulaForElementGroup, TotalDataAll.listElement_All, GradeElement.GradePayrollID);
                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesageByGroup += "ParseFormulaForElementGroupFromListResult: Code employee: " + profileItem.CodeEmp
                              + "; Code Emlement: " + elementItem.ElementCode
                              + "; Fomular: " + elementItem.Formula
                              + "; error: " + ex.Message + ex.StackTrace;
                        }
                    }
                }
                else
                {
                    var listEnumHaveFormularByGrade = listElementByGrade.Select(s => s.ElementCode).ToList();
                    var listEnumGroupHaveFormularByGrade = listElementForEmlementGroup.Select(s => s.ElementCode).ToList();

                    //lặp qua từng công thức
                    foreach (var elementItem in listElementForEmlementGroup)
                    {
                        try
                        {
                            //ktra xem co enum chua duoc tinh hay khong
                            //neu con enum chua tinh => tinh gia tri cho enum
                            //neu khong con enum chua tinh => parte song thuc
                            //Các enum tính lương tách ra từ 1 chuỗi công thức
                            string strFormula = elementItem.Formula.Replace("[Source]", "").Replace("[Value]", "");
                            var listEnum = Common.ParseFormulaToList(strFormula);
                            listEnum = listEnum.Select(s => s = s.Replace("[", "").Replace("]", "")).ToList();

                            //xu ly tach cac phan tu nhom
                            List<string> ListEnumNotValueForElementGroup = listEnum.Where(m => !listElementFormulaForElementGroup.Any(t => t.VariableName == m)
                            && m.StartsWith(strStartWithForElementGroup)
                            && !listEnumGroupHaveFormularByGrade.Contains(m)).ToList();
                            //lấy giá trị cho các enum ptu nhom
                            if (ListEnumNotValueForElementGroup.Count > 0)
                            {
                                //luu lai bo enum nhom nhom sau
                                listEnumGroupAll.AddRange(ListEnumNotValueForElementGroup.ToList());
                                listElementFormulaForElementGroup = GetStaticValuesForElementGroup(
                                    TotalDataAll,
                                    GroupValueForPayrollGroupTable,
                                    TotalData600,
                                    listElementFormulaForElementGroup,
                                    profileItem,
                                    CutOffDuration,
                                    ListEnumNotValueForElementGroup,
                                    GradeElement.GradePayrollID,
                                    objAttendanceTableProCut,
                                    listTmpDeduction,
                                    indexByGroup);

                                listElementFormulaForElementGroup = GetStaticValuesForElementGroupByDay(
                                   TotalDataAll,
                                   GroupValueForPayrollGroupTable,
                                   TotalData600,
                                   listElementFormulaForElementGroup,
                                   profileItem,
                                   CutOffDuration,
                                   ListEnumNotValueForElementGroup,
                                   GradeElement.GradePayrollID,
                                   objAttendanceTableProCut,
                                   listTmpDeduction,
                                   indexByGroup);
                            }

                            //các enum không phải phần tử nhóm
                            //Các phần tử tính lương chưa có kết quả
                            List<string> ListEnumNotValue = listEnum.Where(m => !listElementFormula.Any(t => t.VariableName == m)
                            && !m.StartsWith(strStartWithForElementGroup)
                            && !listEnumGroupHaveFormularByGrade.Contains(m)).ToList();
                            //lấy giá trị cho các enum phần tử thường
                            if (ListEnumNotValue.Count > 0)
                            {
                                var listElementFormulaCurrent = listElementFormula.ToList();
                                #region xử lý cho các enum được tính từ công thức

                                var listElementHaveFormula = listElementByGrade.Where(m => ListEnumNotValue.Contains(m.ElementCode)).ToList();

                                //có ds phần tử không phải là enum hệ thống (phần tử do người dùng tự cấu hình)
                                if (listElementHaveFormula.Count > 0)
                                {
                                    //enum cua he thong
                                    var listEnumSystem = ListEnumNotValue.Where(s => !listElementHaveFormula.Select(m => m.ElementCode).Contains(s)).ToList();
                                    if (listEnumSystem.Count > 0)
                                    {
                                        GetStaticValues(
                                            TotalDataAll,
                                            TotalData600,
                                            listElementFormula,
                                            profileItem,
                                            CutOffDuration,
                                            null,
                                            listEnumSystem,
                                            GradeElement.GradePayrollID,
                                            objAttendanceTableProCut,
                                            listTmpDeduction,
                                            null);
                                    }
                                    //cac phan tử enum tự cấu hình
                                    foreach (var objElementHaveFormula in listElementHaveFormula)
                                    {
                                        var listEnumHaveFormula = Common.ParseFormulaToList(objElementHaveFormula.Formula);
                                        listEnumHaveFormula = listEnumHaveFormula.Select(s => s = s.Replace("[", "").Replace("]", "")).ToList();
                                        listEnumSystem = listEnumHaveFormula.Where(s => !listEnumHaveFormularByGrade.Contains(s)).ToList();
                                        //neu co enum he thong can lay gia tri
                                        if (listEnumSystem.Count > 0)
                                        {
                                            GetStaticValues(
                                                TotalDataAll,
                                                TotalData600,
                                                listElementFormula,
                                                profileItem,
                                                CutOffDuration,
                                                null,
                                                listEnumSystem,
                                                GradeElement.GradePayrollID,
                                                objAttendanceTableProCut,
                                                listTmpDeduction,
                                                null);
                                        }

                                        var resultForElementHaveFormula = FormulaHelper.ParseFormula(objElementHaveFormula.Formula, listElementFormula);
                                        listElementFormula.Add(new ElementFormula(objElementHaveFormula.ElementCode, resultForElementHaveFormula.Value, 0, resultForElementHaveFormula.ErrorMessage));
                                    }
                                }
                                else
                                {
                                    GetStaticValues(
                                        TotalDataAll,
                                        TotalData600,
                                        listElementFormula,
                                        profileItem,
                                        CutOffDuration,
                                        null,
                                        ListEnumNotValue.ToList(),
                                        GradeElement.GradePayrollID,
                                        objAttendanceTableProCut,
                                        listTmpDeduction,
                                        null);
                                }

                                #endregion

                                listElementFormulaForElementGroup.AddRange(listElementFormula.Where(s => !listElementFormulaCurrent.Contains(s)).ToList());
                            }
                            listElementFormulaForElementGroup = listElementFormulaForElementGroup.Distinct().ToList();

                            //[25/10/2017][bang.nguyen]
                            //không nên replace giá trị phần tử trong if => so sánh không được : điển hình như so sánh ngày tháng
                            var result = FormulaHelper.ParseFormula(elementItem.Formula, listElementFormulaForElementGroup);
                            listElementFormulaForElementGroup.Add(new ElementFormula(elementItem.ElementCode, result.Value, 0, result.ErrorMessage));
                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesageByGroup += "GetStaticValuesForElementGroup ParseFormula : Code employee: " + profileItem.CodeEmp
                              + "; Code Emlement: " + elementItem.ElementCode
                              + "; Fomular: " + elementItem.Formula
                              + "; error: " + ex.Message + ex.StackTrace;
                        }
                    }
                }
            }
            else
            {
                //tu nhom thu 2 tro di khong can xac dinh lai enum
                if (indexByGroup > 1)
                {
                    if (listEnumGroupAll.Count > 0)
                    {
                        //cac nhom sau chi di lay gia tri cho cac enum nhom 1 lan
                        listElementFormulaForElementGroup = GetStaticValuesForElementGroup(
                            TotalDataAll,
                            GroupValueForPayrollGroupTable,
                            TotalData600,
                            listElementFormulaForElementGroup,
                            profileItem,
                            CutOffDuration,
                            listEnumGroupAll.ToList(),
                            GradeElement.GradePayrollID,
                            objAttendanceTableProCut,
                            listTmpDeduction,
                            indexByGroup);
                        listElementFormulaForElementGroup = GetStaticValuesForElementGroupByDay(
                            TotalDataAll,
                            GroupValueForPayrollGroupTable,
                            TotalData600,
                            listElementFormulaForElementGroup,
                            profileItem,
                            CutOffDuration,
                            listEnumGroupAll.ToList(),
                            GradeElement.GradePayrollID,
                            objAttendanceTableProCut,
                            listTmpDeduction,
                            indexByGroup
                            );
                    }

                    foreach (var elementItem in listElementForEmlementGroup)
                    {
                        try
                        {
                            listElementFormulaForElementGroup = ParseFormulaForElementGroupFromListResult(elementItem, listElementFormulaForElementGroup, TotalDataAll.listElement_All, GradeElement.GradePayrollID);
                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesageByGroup += "ParseFormulaForElementGroupFromListResult : Code employee: " + profileItem.CodeEmp
                              + "; Code Emlement: " + elementItem.ElementCode
                              + "; Fomular: " + elementItem.Formula
                              + "; error: " + ex.Message + ex.StackTrace;
                        }
                    }
                }
                else
                {
                    foreach (var elementItem in listElementForEmlementGroup)
                    {
                        try
                        {
                            listElementFormulaForElementGroup = ParseFormulaForElementGroupByDay(
                                TotalDataAll,
                                listEnumGroupAll,
                                GroupValueForPayrollGroupTable,
                                elementItem,
                                listElementFormula,
                                listElementFormulaForElementGroup,
                                TotalData600,
                                profileItem,
                                CutOffDuration,
                                GradeElement.GradePayrollID,
                                objAttendanceTableProCut,
                                listTmpDeduction,
                                indexByGroup);

                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesageByGroup += "ParseFormulaForElementGroup : Code employee: " + profileItem.CodeEmp
                            + "; Code Emlement: " + elementItem.ElementCode
                            + "; Fomular: " + elementItem.Formula
                            + "; error: " + ex.Message + ex.StackTrace;
                        }
                    }
                }
            }
            return listElementFormulaForElementGroup;
        }
        public List<ElementFormula> ParseFormulaForElementGroupByDay(
        ComputePayrollDataModelKZAll TotalDataAll,
        List<string> listEnumGroupAll,
        GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable,
        Cat_ElementEntity formula,
        List<ElementFormula> listElementFormula,
        List<ElementFormula> listElementFormulaForElementGroup,
        ComputePayrollDataModelKZ TotalData600,
        Hre_ProfileEntity profileItem,
        Att_CutOffDurationEntity CutOffDuration,
        Guid? GradePayrollID,
        Att_AttendanceTableEntity objAttendanceTableProCut,
        Dictionary<Guid, ValueCount> listTmpDeduction,
        int indexByGroup)
        {
            string strStartWithForElementGroup = "ELEMENT_GROUP_";

            string strFormula = formula.Formula;

            //Các phần tử tính lương tách ra từ 1 chuỗi công thức
            List<string> ListFormula = Common.ParseFormulaToList(strFormula).Where(m => m.IndexOf('[') != -1 && m.IndexOf(']') != -1).ToList();

            //Các phần tử tính lương chưa có kết quả
            ListFormula = ListFormula.Select(s => s = s.Replace("[", "").Replace("]", "")).ToList();
            List<string> ListFormulaNotValue = ListFormula.Where(m => !listElementFormulaForElementGroup.Any(t => t.VariableName == m)).ToList();

            //có phần tử chưa được tính trước đó
            if (ListFormulaNotValue != null && ListFormulaNotValue.Count > 0)
            {
                //Các phần tử tính lương chưa có kết quả
                List<string> ListEnumNotValue = ListFormulaNotValue.ToList();

                foreach (string elementNotValue in ListFormulaNotValue)
                {
                    //kiểm tra phần tử đó là phần tử Enum hay là phần tử công thức
                    if (TotalDataAll.listElement_All.Any(m => (m.GradePayrollID != null || m.IsApplyGradeAll == true) && m.ElementCode == elementNotValue))//là phần tử công thức
                    {
                        if (GradePayrollID != null)
                        {
                            listElementFormulaForElementGroup = ParseFormulaForElementGroup(TotalDataAll, listEnumGroupAll, objGroupValueForPayrollGroupTable, TotalDataAll.listElement_All.Where(m => m.ElementCode == elementNotValue && (m.GradePayrollID == GradePayrollID || m.IsApplyGradeAll == true)).FirstOrDefault(), listElementFormula, listElementFormulaForElementGroup, TotalData600, profileItem, CutOffDuration, GradePayrollID, objAttendanceTableProCut, listTmpDeduction, indexByGroup);
                        }
                        else
                        {
                            listElementFormulaForElementGroup = ParseFormulaForElementGroup(TotalDataAll, listEnumGroupAll, objGroupValueForPayrollGroupTable, TotalDataAll.listElement_All.Where(m => m.ElementCode == elementNotValue).FirstOrDefault(), listElementFormula, listElementFormulaForElementGroup, TotalData600, profileItem, CutOffDuration, GradePayrollID, objAttendanceTableProCut, listTmpDeduction, indexByGroup);
                        }
                    }
                    else//là phần tử enum
                    {
                        try
                        {
                            //xu ly tach cac phan tu nhom
                            List<string> ListEnumNotValueForElementGroup = ListEnumNotValue.Where(m => !listElementFormulaForElementGroup.Any(t => t.VariableName == m) && m.StartsWith(strStartWithForElementGroup)).ToList();
                            //lấy giá trị cho các enum ptu nhom
                            if (ListEnumNotValueForElementGroup.Count > 0)
                            {
                                //luu lai bo enum nhom nhom sau
                                listEnumGroupAll.AddRange(ListEnumNotValueForElementGroup.ToList());
                                listElementFormulaForElementGroup = GetStaticValuesForElementGroup(TotalDataAll, objGroupValueForPayrollGroupTable, TotalData600, listElementFormulaForElementGroup, profileItem, CutOffDuration, ListEnumNotValueForElementGroup, GradePayrollID, objAttendanceTableProCut, listTmpDeduction, indexByGroup);
                                listElementFormulaForElementGroup = GetStaticValuesForElementGroupByDay(TotalDataAll, objGroupValueForPayrollGroupTable, TotalData600, listElementFormulaForElementGroup, profileItem, CutOffDuration, ListEnumNotValueForElementGroup, GradePayrollID, objAttendanceTableProCut, listTmpDeduction, indexByGroup);
                            }

                            //các enum không phải phần tử nhóm
                            //Các phần tử tính lương chưa có kết quả
                            ListEnumNotValue = ListEnumNotValue.Where(m => !listElementFormula.Any(t => t.VariableName == m) && !m.StartsWith(strStartWithForElementGroup)).ToList();
                            //lấy giá trị cho các enum phần tử thường
                            if (ListEnumNotValue.Count > 0)
                            {
                                var listElementFormulaCurrent = listElementFormula.ToList();
                                GetStaticValues(TotalDataAll,
                                    TotalData600,
                                    listElementFormula,
                                    profileItem,
                                    CutOffDuration,
                                    null,
                                    ListEnumNotValue,
                                    GradePayrollID,
                                    objAttendanceTableProCut,
                                    listTmpDeduction,
                                    null);
                                listElementFormulaForElementGroup.AddRange(listElementFormula.Where(s => !listElementFormulaCurrent.Contains(s)).ToList());
                            }
                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesageByGroup += "GetStaticValuesForElementGroup GetStaticValues : Code employee: " + profileItem.CodeEmp
                               + "; Emlement: " + elementNotValue
                               + "; error: " + ex.Message + ex.StackTrace;

                        }
                    }
                }
            }

            listElementFormulaForElementGroup = listElementFormulaForElementGroup.Distinct().ToList();
            var result = FormulaHelper.ParseFormula(formula.Formula, listElementFormulaForElementGroup);
            listElementFormulaForElementGroup.Add(new ElementFormula(formula.ElementCode, result.Value, 0, result.ErrorMessage));

            return listElementFormulaForElementGroup;
        }
        public List<ElementFormula> ParseElementFormulaForElementGroup(
            ComputePayrollDataModelKZAll TotalDataAll,
            Att_AttendanceTableEntity objAttendanceTableProCut,
            List<string> listEnumGroupAll,
            int indexByGroup,
            GroupValueForPayrollGroupTable GroupValueForPayrollGroupTable,
            List<ElementFormula> listElementFormula,
            List<ElementFormula> listElementFormulaForElementGroup,
            List<Cat_ElementEntity> listElementByGrade,
            List<Cat_ElementEntity> listElementForEmlementGroup,
            ComputePayrollDataModelKZ TotalData600,
            Hre_ProfileEntity profileItem,
            Att_CutOffDurationEntity CutOffDuration,
            Sal_GradeEntity GradeElement,
            Dictionary<Guid, ValueCount> listTmpDeduction,
            bool ComputeOrderNumber)
        {
            var listElementFormulaAll = new List<ElementFormula>();
            string strStartWithForElementGroup = "ELEMENT_GROUP_";

            if (ComputeOrderNumber)
            {
                //tu nhom thu 2 tro di khong can xac dinh lai enum
                //lan 2 tro di cũng không cần tính lại các enum lương thời gian (vì đã được tính lần đầu: và all các nhóm điều có cùng giá trị phần tử này)
                if (indexByGroup > 1)
                {
                    if (listEnumGroupAll.Count > 0)
                    {
                        //cac nhom sau chi di lay gia tri cho cac enum nhom 1 lan
                        listElementFormulaForElementGroup = GetStaticValuesForElementGroup(
                            TotalDataAll,
                            GroupValueForPayrollGroupTable,
                            TotalData600,
                            listElementFormulaForElementGroup,
                            profileItem,
                            CutOffDuration,
                            listEnumGroupAll.ToList(),
                            GradeElement.GradePayrollID,
                            objAttendanceTableProCut,
                            listTmpDeduction,
                            indexByGroup
                            );
                    }

                    foreach (var elementItem in listElementForEmlementGroup)
                    {
                        try
                        {
                            listElementFormulaForElementGroup = ParseFormulaForElementGroupFromListResult(elementItem, listElementFormulaForElementGroup, TotalDataAll.listElement_All, GradeElement.GradePayrollID);
                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesageByGroup += "ParseFormulaForElementGroupFromListResult: Code employee: " + profileItem.CodeEmp
                              + "; Code Emlement: " + elementItem.ElementCode
                              + "; Fomular: " + elementItem.Formula
                              + "; error: " + ex.Message + ex.StackTrace;
                        }
                    }
                }
                else
                {
                    var listEnumHaveFormularByGrade = listElementByGrade.Select(s => s.ElementCode).ToList();
                    var listEnumGroupHaveFormularByGrade = listElementForEmlementGroup.Select(s => s.ElementCode).ToList();
                    //lặp qua từng công thức
                    foreach (var elementItem in listElementForEmlementGroup)
                    {
                        try
                        {
                            //ktra xem co enum chua duoc tinh hay khong
                            //neu con enum chua tinh => tinh gia tri cho enum
                            //neu khong con enum chua tinh => parte song thuc
                            //Các enum tính lương tách ra từ 1 chuỗi công thức
                            var listEnum = Common.ParseFormulaToList(elementItem.Formula);
                            listEnum = listEnum.Select(s => s = s.Replace("[", "").Replace("]", "")).ToList();

                            //xu ly tach cac phan tu nhom
                            List<string> ListEnumNotValueForElementGroup = listEnum.Where(m => !listElementFormulaForElementGroup.Any(t => t.VariableName == m)
                            && m.StartsWith(strStartWithForElementGroup)
                            && !listEnumGroupHaveFormularByGrade.Contains(m)).ToList();
                            //lấy giá trị cho các enum ptu nhom
                            if (ListEnumNotValueForElementGroup.Count > 0)
                            {
                                //luu lai bo enum nhom nhom sau
                                listEnumGroupAll.AddRange(ListEnumNotValueForElementGroup.ToList());
                                listElementFormulaForElementGroup = GetStaticValuesForElementGroup(TotalDataAll, GroupValueForPayrollGroupTable, TotalData600, listElementFormulaForElementGroup, profileItem, CutOffDuration, ListEnumNotValueForElementGroup, GradeElement.GradePayrollID, objAttendanceTableProCut, listTmpDeduction, indexByGroup);
                            }

                            //các enum không phải phần tử nhóm
                            //Các phần tử tính lương chưa có kết quả
                            List<string> ListEnumNotValue = listEnum.Where(m => !listElementFormula.Any(t => t.VariableName == m)
                            && !m.StartsWith(strStartWithForElementGroup)
                            && !listEnumGroupHaveFormularByGrade.Contains(m)).ToList();
                            //lấy giá trị cho các enum phần tử thường
                            if (ListEnumNotValue.Count > 0)
                            {
                                var listElementFormulaCurrent = listElementFormula.ToList();
                                #region xử lý cho các enum được tính từ công thức

                                var listElementHaveFormula = listElementByGrade.Where(m => ListEnumNotValue.Contains(m.ElementCode)).ToList();

                                //có ds phần tử không phải là enum hệ thống (phần tử do người dùng tự cấu hình)
                                if (listElementHaveFormula.Count > 0)
                                {
                                    //enum cua he thong
                                    var listEnumSystem = ListEnumNotValue.Where(s => !listElementHaveFormula.Select(m => m.ElementCode).Contains(s)).ToList();
                                    if (listEnumSystem.Count > 0)
                                    {
                                        GetStaticValues(
                                            TotalDataAll,
                                            TotalData600,
                                            listElementFormula,
                                            profileItem,
                                            CutOffDuration,
                                            null,
                                            listEnumSystem,
                                            GradeElement.GradePayrollID,
                                            objAttendanceTableProCut,
                                            listTmpDeduction,
                                            null);
                                    }
                                    //cac phan tử enum tự cấu hình
                                    foreach (var objElementHaveFormula in listElementHaveFormula)
                                    {
                                        var listEnumHaveFormula = Common.ParseFormulaToList(objElementHaveFormula.Formula);
                                        listEnumHaveFormula = listEnumHaveFormula.Select(s => s = s.Replace("[", "").Replace("]", "")).ToList();
                                        listEnumSystem = listEnumHaveFormula.Where(s => !listEnumHaveFormularByGrade.Contains(s)).ToList();
                                        //neu co enum he thong can lay gia tri
                                        if (listEnumSystem.Count > 0)
                                        {
                                            GetStaticValues(
                                                TotalDataAll,
                                                TotalData600,
                                                listElementFormula,
                                                profileItem,
                                                CutOffDuration,
                                                null,
                                                listEnumSystem,
                                                GradeElement.GradePayrollID,
                                                objAttendanceTableProCut,
                                                listTmpDeduction,
                                                null);
                                        }

                                        var resultForElementHaveFormula = FormulaHelper.ParseFormula(objElementHaveFormula.Formula, listElementFormula);
                                        listElementFormula.Add(new ElementFormula(objElementHaveFormula.ElementCode, resultForElementHaveFormula.Value, 0, resultForElementHaveFormula.ErrorMessage));
                                    }
                                }
                                else
                                {
                                    GetStaticValues(
                                        TotalDataAll,
                                        TotalData600,
                                        listElementFormula,
                                        profileItem,
                                        CutOffDuration,
                                        null,
                                        ListEnumNotValue.ToList(),
                                        GradeElement.GradePayrollID,
                                        objAttendanceTableProCut,
                                        listTmpDeduction,
                                        null);
                                }

                                #endregion

                                listElementFormulaForElementGroup.AddRange(listElementFormula.Where(s => !listElementFormulaCurrent.Contains(s)).ToList());
                            }
                            listElementFormulaForElementGroup = listElementFormulaForElementGroup.Distinct().ToList();

                            //[25/10/2017][bang.nguyen]
                            //không nên replace giá trị phần tử trong if => so sánh không được : điển hình như so sánh ngày tháng
                            var result = FormulaHelper.ParseFormula(elementItem.Formula, listElementFormulaForElementGroup);
                            listElementFormulaForElementGroup.Add(new ElementFormula(elementItem.ElementCode, result.Value, 0, result.ErrorMessage));
                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesageByGroup += "GetStaticValuesForElementGroup ParseFormula : Code employee: " + profileItem.CodeEmp
                              + "; Code Emlement: " + elementItem.ElementCode
                              + "; Fomular: " + elementItem.Formula
                              + "; error: " + ex.Message + ex.StackTrace;
                        }
                    }
                }
            }
            else
            {
                //tu nhom thu 2 tro di khong can xac dinh lai enum
                if (indexByGroup > 1)
                {
                    if (listEnumGroupAll.Count > 0)
                    {
                        //cac nhom sau chi di lay gia tri cho cac enum nhom 1 lan
                        listElementFormulaForElementGroup = GetStaticValuesForElementGroup(TotalDataAll, GroupValueForPayrollGroupTable, TotalData600, listElementFormulaForElementGroup, profileItem, CutOffDuration, listEnumGroupAll.ToList(), GradeElement.GradePayrollID, objAttendanceTableProCut, listTmpDeduction, indexByGroup);
                    }

                    foreach (var elementItem in listElementForEmlementGroup)
                    {
                        try
                        {
                            listElementFormulaForElementGroup = ParseFormulaForElementGroupFromListResult(elementItem, listElementFormulaForElementGroup, TotalDataAll.listElement_All, GradeElement.GradePayrollID);
                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesageByGroup += "ParseFormulaForElementGroupFromListResult : Code employee: " + profileItem.CodeEmp
                              + "; Code Emlement: " + elementItem.ElementCode
                              + "; Fomular: " + elementItem.Formula
                              + "; error: " + ex.Message + ex.StackTrace;
                        }
                    }
                }
                else
                {
                    foreach (var elementItem in listElementForEmlementGroup)
                    {
                        try
                        {
                            listElementFormulaForElementGroup = ParseFormulaForElementGroup(TotalDataAll, listEnumGroupAll, GroupValueForPayrollGroupTable, elementItem, listElementFormula, listElementFormulaForElementGroup, TotalData600, profileItem, CutOffDuration, GradeElement.GradePayrollID, objAttendanceTableProCut, listTmpDeduction, indexByGroup);
                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesageByGroup += "ParseFormulaForElementGroup : Code employee: " + profileItem.CodeEmp
                            + "; Code Emlement: " + elementItem.ElementCode
                            + "; Fomular: " + elementItem.Formula
                            + "; error: " + ex.Message + ex.StackTrace;
                        }
                    }
                }
            }
            return listElementFormulaForElementGroup;
        }

        /// <summary>
        /// Ham tinh cong thuc khi tinh cho nhom thu 2 tro di
        /// không cần phải tính lại giá trị cho các enum
        /// </summary>
        /// <param name="formula"></param>
        /// <param name="listElementFormulaForElementGroup">chứa giá trị của all các enum</param>
        /// <param name="TotalData"></param>
        /// <param name="GradePayrollID"></param>
        /// <returns></returns>
        public List<ElementFormula> ParseFormulaForElementGroupFromListResult(Cat_ElementEntity formula, List<ElementFormula> listElementFormulaForElementGroup, List<Cat_ElementEntity> listElement_All,
            Guid? GradePayrollID)
        {
            // string strFormula = formula.Formula;
            string strFormula = formula.Formula.Replace("[Source]", "").Replace("[Value]", "");
            //Các phần tử tính lương tách ra từ 1 chuỗi công thức
            List<string> ListFormula = Common.ParseFormulaToList(strFormula).Where(m => m.IndexOf('[') != -1 && m.IndexOf(']') != -1).ToList();

            //Các phần tử tính lương chưa có kết quả
            ListFormula = ListFormula.Select(s => s = s.Replace("[", "").Replace("]", "")).ToList();
            List<string> ListFormulaNotValue = ListFormula.Where(m => !listElementFormulaForElementGroup.Any(t => t.VariableName == m)).ToList();

            //có phần tử chưa được tính trước đó
            if (ListFormulaNotValue != null && ListFormulaNotValue.Count > 0)
            {
                //Các phần tử tính lương chưa có kết quả
                foreach (string elementNotValue in ListFormulaNotValue)
                {
                    //kiểm tra phần tử đó là phần tử Enum hay là phần tử công thức
                    if (listElement_All.Any(m => (m.GradePayrollID != null || m.IsApplyGradeAll == true) && m.ElementCode == elementNotValue))//là phần tử công thức
                    {
                        if (GradePayrollID != null)
                        {
                            listElementFormulaForElementGroup = ParseFormulaForElementGroupFromListResult(listElement_All.Where(m => m.ElementCode == elementNotValue && (m.GradePayrollID == GradePayrollID || m.IsApplyGradeAll == true)).FirstOrDefault(), listElementFormulaForElementGroup, listElement_All, GradePayrollID);
                        }
                        else
                        {
                            listElementFormulaForElementGroup = ParseFormulaForElementGroupFromListResult(listElement_All.Where(m => m.ElementCode == elementNotValue).FirstOrDefault(), listElementFormulaForElementGroup, listElement_All, GradePayrollID);
                        }
                    }
                }
            }
            listElementFormulaForElementGroup = listElementFormulaForElementGroup.Distinct().ToList();
            var result = FormulaHelper.ParseFormula(formula.Formula, listElementFormulaForElementGroup);
            listElementFormulaForElementGroup.Add(new ElementFormula(formula.ElementCode, result.Value, 0, result.ErrorMessage));

            return listElementFormulaForElementGroup;
        }

        /// <summary>
        /// Tính giá trị cho các phần tử đổi với phần tử nhóm
        /// </summary>
        /// <param name="objGroupValueForPayrollGroupTable"></param>
        /// <param name="formula"></param>
        /// <param name="listElementFormula"></param>
        /// <param name="listElementFormulaForElementGroup"></param>
        /// <param name="TotalData"></param>
        /// <param name="profileItem"></param>
        /// <param name="CutOffDuration"></param>
        /// <param name="GradePayrollID"></param>
        /// <param name="objAttendanceTableProCut"></param>
        /// <param name="listTmpDeduction"></param>
        /// <returns></returns>
        public List<ElementFormula> ParseFormulaForElementGroup(
            ComputePayrollDataModelKZAll TotalDataAll,
            List<string> listEnumGroupAll,
            GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable,
            Cat_ElementEntity formula,
            List<ElementFormula> listElementFormula,
            List<ElementFormula> listElementFormulaForElementGroup,
            ComputePayrollDataModelKZ TotalData600,
            Hre_ProfileEntity profileItem,
            Att_CutOffDurationEntity CutOffDuration,
            Guid? GradePayrollID,
            Att_AttendanceTableEntity objAttendanceTableProCut,
            Dictionary<Guid, ValueCount> listTmpDeduction,
            int indexByGroup)
        {
            string strStartWithForElementGroup = "ELEMENT_GROUP_";

            string strFormula = formula.Formula;

            //Các phần tử tính lương tách ra từ 1 chuỗi công thức
            List<string> ListFormula = Common.ParseFormulaToList(strFormula).Where(m => m.IndexOf('[') != -1 && m.IndexOf(']') != -1).ToList();

            //Các phần tử tính lương chưa có kết quả
            ListFormula = ListFormula.Select(s => s = s.Replace("[", "").Replace("]", "")).ToList();
            List<string> ListFormulaNotValue = ListFormula.Where(m => !listElementFormulaForElementGroup.Any(t => t.VariableName == m)).ToList();

            //có phần tử chưa được tính trước đó
            if (ListFormulaNotValue != null && ListFormulaNotValue.Count > 0)
            {
                //Các phần tử tính lương chưa có kết quả
                List<string> ListEnumNotValue = ListFormulaNotValue.ToList();

                foreach (string elementNotValue in ListFormulaNotValue)
                {
                    //kiểm tra phần tử đó là phần tử Enum hay là phần tử công thức
                    if (TotalDataAll.listElement_All.Any(m => (m.GradePayrollID != null || m.IsApplyGradeAll == true) && m.ElementCode == elementNotValue))//là phần tử công thức
                    {
                        if (GradePayrollID != null)
                        {
                            listElementFormulaForElementGroup = ParseFormulaForElementGroup(TotalDataAll, listEnumGroupAll, objGroupValueForPayrollGroupTable, TotalDataAll.listElement_All.Where(m => m.ElementCode == elementNotValue && (m.GradePayrollID == GradePayrollID || m.IsApplyGradeAll == true)).FirstOrDefault(), listElementFormula, listElementFormulaForElementGroup, TotalData600, profileItem, CutOffDuration, GradePayrollID, objAttendanceTableProCut, listTmpDeduction, indexByGroup);
                        }
                        else
                        {
                            listElementFormulaForElementGroup = ParseFormulaForElementGroup(TotalDataAll, listEnumGroupAll, objGroupValueForPayrollGroupTable, TotalDataAll.listElement_All.Where(m => m.ElementCode == elementNotValue).FirstOrDefault(), listElementFormula, listElementFormulaForElementGroup, TotalData600, profileItem, CutOffDuration, GradePayrollID, objAttendanceTableProCut, listTmpDeduction, indexByGroup);
                        }
                    }
                    else//là phần tử enum
                    {
                        try
                        {
                            //xu ly tach cac phan tu nhom
                            List<string> ListEnumNotValueForElementGroup = ListEnumNotValue.Where(m => !listElementFormulaForElementGroup.Any(t => t.VariableName == m) && m.StartsWith(strStartWithForElementGroup)).ToList();
                            //lấy giá trị cho các enum ptu nhom
                            if (ListEnumNotValueForElementGroup.Count > 0)
                            {
                                //luu lai bo enum nhom nhom sau
                                listEnumGroupAll.AddRange(ListEnumNotValueForElementGroup.ToList());
                                listElementFormulaForElementGroup = GetStaticValuesForElementGroup(TotalDataAll, objGroupValueForPayrollGroupTable, TotalData600, listElementFormulaForElementGroup, profileItem, CutOffDuration, ListEnumNotValueForElementGroup, GradePayrollID, objAttendanceTableProCut, listTmpDeduction, indexByGroup);
                            }

                            //các enum không phải phần tử nhóm
                            //Các phần tử tính lương chưa có kết quả
                            ListEnumNotValue = ListEnumNotValue.Where(m => !listElementFormula.Any(t => t.VariableName == m) && !m.StartsWith(strStartWithForElementGroup)).ToList();
                            //lấy giá trị cho các enum phần tử thường
                            if (ListEnumNotValue.Count > 0)
                            {
                                var listElementFormulaCurrent = listElementFormula.ToList();
                                GetStaticValues(TotalDataAll,
                                    TotalData600,
                                    listElementFormula,
                                    profileItem,
                                    CutOffDuration,
                                    null,
                                    ListEnumNotValue,
                                    GradePayrollID,
                                    objAttendanceTableProCut,
                                    listTmpDeduction,
                                    null);
                                listElementFormulaForElementGroup.AddRange(listElementFormula.Where(s => !listElementFormulaCurrent.Contains(s)).ToList());
                            }
                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesageByGroup += "GetStaticValuesForElementGroup GetStaticValues : Code employee: " + profileItem.CodeEmp
                               + "; Emlement: " + elementNotValue
                               + "; error: " + ex.Message + ex.StackTrace;

                        }
                    }
                }
            }

            listElementFormulaForElementGroup = listElementFormulaForElementGroup.Distinct().ToList();
            var result = FormulaHelper.ParseFormula(formula.Formula, listElementFormulaForElementGroup);
            listElementFormulaForElementGroup.Add(new ElementFormula(formula.ElementCode, result.Value, 0, result.ErrorMessage));

            return listElementFormulaForElementGroup;
        }
        /// <summary>
        /// Tính giá trị cho từng enum đổi với phần tử nhóm
        /// </summary>
        /// <param name="objGroupValueForPayrollGroupTable"></param>
        /// <param name="TotalData"></param>
        /// <param name="listElementFormulaForElementGroup"></param>
        /// <param name="profileItem"></param>
        /// <param name="CutOffDuration"></param>
        /// <param name="formula"></param>
        /// <param name="GradePayrollID"></param>
        /// <param name="objAttendanceTableProCut"></param>
        /// <param name="listTmpDeduction"></param>
        /// <returns></returns>
        public List<ElementFormula> GetStaticValuesForElementGroupByDay(
            ComputePayrollDataModelKZAll TotalDataAll,
            GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable,
            ComputePayrollDataModelKZ TotalData600,
            List<ElementFormula> listElementFormulaForElementGroupByDay,
            Hre_ProfileEntity profileItem,
            Att_CutOffDurationEntity CutOffDuration,
            List<string> formula,
            Guid? GradePayrollID,
            Att_AttendanceTableEntity objAttendanceTableProCut,
            Dictionary<Guid, ValueCount> listTmpDeduction,
            int indexByGroup)
        {

            if (objAttendanceTableProCut == null)
            {
                objAttendanceTableProCut = new Att_AttendanceTableEntity();
            }
            var getDataComputePayrollServices = new Sal_GetDataComputePayrollKZServices();
            getDataComputePayrollServices.UserLogin = UserLogin;

            ElementFormula item = new ElementFormula();
            var orgstructureID = objGroupValueForPayrollGroupTable.OrgstructureID;
            var positionID = objGroupValueForPayrollGroupTable.PositionID;
            var shopID = objGroupValueForPayrollGroupTable.ShopID;
            var areaPostJobWorkID = objGroupValueForPayrollGroupTable.AreaPostJobWorkID;
            string fieldOrgstructureID = "OrgstructureID";
            string fieldPositionID = "PositionID";
            string fieldShopID = "ShopID";
            var queryAbleAttendanceTableItemMulti = TotalDataAll.listAttendanceTableItem.Where(s => s.ProfileID == profileItem.ID);
            var queryAbleAttendanceTableItem = TotalDataAll.listAttendanceTableItem.Where(s => s.ProfileID == profileItem.ID);
            var queryAbleAtt_ProfileTimeSheet = TotalDataAll.ListAtt_ProfileTimeSheet.Where(s => s.ProfileID == profileItem.ID);
            var queryAblePerformanceAllowance = TotalDataAll.ListPerformanceAllowance.Where(s => s.ProfileID == profileItem.ID);

            if (TotalData600.dicFieldConfigForGroup.Count > 0)
            {
                if (TotalData600.dicFieldConfigForGroup.ContainsKey(fieldOrgstructureID))
                {
                    queryAbleAttendanceTableItemMulti = queryAbleAttendanceTableItemMulti.Where(s => s.IsMultiple == true || s.OrgStructureID == orgstructureID);
                    queryAbleAttendanceTableItem = queryAbleAttendanceTableItem.Where(s => s.OrgStructureID == orgstructureID);
                    queryAbleAtt_ProfileTimeSheet = queryAbleAtt_ProfileTimeSheet.Where(s => s.OrgStructureTransID == orgstructureID);
                    queryAblePerformanceAllowance = queryAblePerformanceAllowance.Where(s => s.OrgStructureID == orgstructureID);
                }
                if (TotalData600.dicFieldConfigForGroup.ContainsKey(fieldPositionID))
                {
                    queryAbleAttendanceTableItemMulti = queryAbleAttendanceTableItemMulti.Where(s => s.IsMultiple == true || s.PositionID == positionID);
                    queryAbleAttendanceTableItem = queryAbleAttendanceTableItem.Where(s => s.PositionID == positionID);
                    queryAbleAtt_ProfileTimeSheet = queryAbleAtt_ProfileTimeSheet.Where(s => s.PositionTransID == positionID);
                    queryAblePerformanceAllowance = queryAblePerformanceAllowance.Where(s => s.PositionID == positionID);
                }
                if (TotalData600.dicFieldConfigForGroup.ContainsKey(fieldShopID))
                {
                    queryAbleAttendanceTableItemMulti = queryAbleAttendanceTableItemMulti.Where(s => s.IsMultiple == true || s.ShopID == shopID);
                    queryAbleAttendanceTableItem = queryAbleAttendanceTableItem.Where(s => s.ShopID == shopID);
                    queryAbleAtt_ProfileTimeSheet = queryAbleAtt_ProfileTimeSheet.Where(s => s.ShopTransID == shopID);
                    queryAblePerformanceAllowance = queryAblePerformanceAllowance.Where(s => s.ShopID == shopID);
                }
            }
            List<ColumnByDay> listColumnByDay = new List<ColumnByDay>();
            string strDouble = "Double";
            string strDateTime = "DateTime";
            string strString = "String";

            //var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).OrderBy(s => s.WorkDate).ToList();
            //tổng số dòng trong table
            int totalRowInDataSoure = queryAbleAttendanceTableItemMulti.ToList().Count;

            //Enum Tĩnh
            #region Enum tĩnh lương nhóm theo ngày 
            #region [Nghia.Dang] [2/11/2021] [0133696] [AnPhuoc] Phần tử thực đạt theo doanh thu cửa hàng từng ngày theo bảng công chi tiết 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_REVENUEFORSHOP_ACTUAL_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_REVENUEFORSHOP_ACTUAL_BYDAY.ToString();
                objColumnByDay.ValueType = "Double";
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                var listRevenueShop = TotalDataAll.listRevenueForShop.Where(x => x.DateFrom != null && x.DateTo != null && x.DateFrom <= CutOffDuration.DateEnd && x.DateTo >= CutOffDuration.DateStart);
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        double sumActual = 0;
                        var listRevenueShopPerDate = listRevenueShop.Where(x => x.DateFrom <= objAttendanceTableItem.WorkDate && x.DateTo >= objAttendanceTableItem.WorkDate && x.Actual != null && x.ShopID == objAttendanceTableItem.ShopID).ToList();
                        if (listRevenueShopPerDate.Count > 0)
                        {
                            sumActual = listRevenueShopPerDate.Sum(x => x.Actual.Value);
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, sumActual.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        double sumActual = 0;
                        var listRevenueShopPerDate = listRevenueShop.Where(x => x.DateFrom <= objAttendanceTableItem.WorkDate && x.DateTo >= objAttendanceTableItem.WorkDate && x.Actual != null && x.ShopID == objAttendanceTableItem.ShopID).ToList();
                        if (listRevenueShopPerDate.Count > 0)
                        {
                            sumActual = listRevenueShopPerDate.Sum(x => x.Actual.Value);
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, sumActual.ToString());
                        }
                        indexRow += 1;
                    }
                }

                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion

            #region [Nghia.Dang] [2/11/2021] [0133696] [AnPhuoc] Phần tử chỉ tiêu theo doanh thu cửa hàng từng ngày theo bảng công chi tiết 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_REVENUEFORSHOP_TARGET_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_REVENUEFORSHOP_TARGET_BYDAY.ToString();
                objColumnByDay.ValueType = "Double";
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                var listRevenueShop = TotalDataAll.listRevenueForShop.Where(x => x.DateFrom != null && x.DateTo != null && x.DateFrom <= CutOffDuration.DateEnd && x.DateTo >= CutOffDuration.DateStart);
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        double sumTarget = 0;
                        var listRevenueShopPerDate = listRevenueShop.Where(x => x.DateFrom <= objAttendanceTableItem.WorkDate && x.DateTo >= objAttendanceTableItem.WorkDate && x.Target != null && x.ShopID == objAttendanceTableItem.ShopID).ToList();
                        if (listRevenueShopPerDate.Count > 0)
                        {
                            sumTarget = listRevenueShopPerDate.Sum(x => x.Target.Value);
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, sumTarget.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        double sumTarget = 0;
                        var listRevenueShopPerDate = listRevenueShop.Where(x => x.DateFrom <= objAttendanceTableItem.WorkDate && x.DateTo >= objAttendanceTableItem.WorkDate && x.Target != null && x.ShopID == objAttendanceTableItem.ShopID).ToList();
                        if (listRevenueShopPerDate.Count > 0)
                        {
                            sumTarget = listRevenueShopPerDate.Sum(x => x.Target.Value);
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, sumTarget.ToString());
                        }
                        indexRow += 1;
                    }
                }

                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion

            #region [Nghia.Dang] [2/11/2021] [0133696] [AnPhuoc] Phần tử Mã vùng đơn vị kinh doanh từng ngày theo bảng công chi tiết 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_STOREARIA_REGIONCODE_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_STOREARIA_REGIONCODE_BYDAY.ToString();
                objColumnByDay.ValueType = strString;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                var listShop = TotalDataAll.listShop.ToList();
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        string sumTarget = string.Empty;
                        var objShop = listShop.Where(x => x.ID == objAttendanceTableItem.ShopID).FirstOrDefault();
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, objShop != null ? objShop.StoreAreaCode : string.Empty);
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        string sumTarget = string.Empty;
                        var objShop = listShop.Where(x => x.ID == objAttendanceTableItem.ShopID).FirstOrDefault();
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, objShop != null ? objShop.StoreAreaCode : string.Empty);
                        }
                        indexRow += 1;
                    }
                }

                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion

            #region [Nghia.Dang] [2/11/2021] [0133696] [AnPhuoc] Phần tử ngày Mã loại công việc 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_JOBTYPE_CODE_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_JOBTYPE_CODE_BYDAY.ToString();
                objColumnByDay.ValueType = strString;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                var listJobType = TotalDataAll.listCat_JobType.ToList();
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        string codeJobType = string.Empty;
                        var objJobType = listJobType.Where(x => x.ID == objAttendanceTableItem.JobTypeID).FirstOrDefault();
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, objJobType != null ? objJobType.Code : string.Empty);
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        string codeJobType = string.Empty;
                        var objJobType = listJobType.Where(x => x.ID == objAttendanceTableItem.JobTypeID).FirstOrDefault();
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, objJobType != null ? objJobType.Code : string.Empty);
                        }
                        indexRow += 1;
                    }
                }

                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion

            #region [Nghia.Dang] [2/11/2021] [0133696] [AnPhuoc] Phần tử số giờ công theo ngày trong công việc hàng ngày 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_WORKPAIDHOUR_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_WORKPAIDHOUR_BYDAY.ToString();
                objColumnByDay.ValueType = "Double";
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                var listJobType = TotalDataAll.listCat_JobType.ToList();
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, objAttendanceTableItem.WorkPaidHours.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, objAttendanceTableItem.WorkPaidHours.ToString());
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion

            #region [Nghia.Dang] [9/11/2021] [0133693] [AnPhuoc]  	Phần tử ngày bắt đầu, ngày kết thúc, phí gửi xe trong đơn vị kinh doanh 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula,
               new string[] {
                    PayrollElementGroupByDay.ELEMENT_GROUP_CATSHOP_PARKINGFEE_BYDAY.ToString(),
                    PayrollElementGroupByDay.ELEMENT_GROUP_CATSHOP_DATESTART_BYDAY.ToString(),
                    PayrollElementGroupByDay.ELEMENT_GROUP_CATSHOP_DATEEND_BYDAY.ToString(),
               }))
            {
                ColumnByDay objColumnParkingFeeByDay = new ColumnByDay();
                objColumnParkingFeeByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_CATSHOP_PARKINGFEE_BYDAY.ToString();
                objColumnParkingFeeByDay.ValueType = strDouble;
                ColumnByDay objColumnDateStartByDay = new ColumnByDay();
                objColumnDateStartByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_CATSHOP_DATESTART_BYDAY.ToString();
                objColumnDateStartByDay.ValueType = strDateTime;
                ColumnByDay objColumnDateEndByDay = new ColumnByDay();
                objColumnDateEndByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_CATSHOP_DATEEND_BYDAY.ToString();
                objColumnDateEndByDay.ValueType = strDateTime;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueParkingFeeByDay = new Dictionary<int, string>();
                Dictionary<int, string> listValueDateStartByDay = new Dictionary<int, string>();
                Dictionary<int, string> listValueDateEndByDay = new Dictionary<int, string>();
                int indexRow = 0;
                var listShop = TotalDataAll.listShop.ToList();
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        double? parkingFee = null;
                        DateTime? DateStart = null;
                        DateTime? DateEnd = null;
                        var objShop = listShop.Where(x => x.ID == objAttendanceTableItem.ShopID).FirstOrDefault();
                        if (objShop != null)
                        {
                            if (objShop.DateStart != null)
                            {
                                DateStart = objShop.DateStart;
                            }
                            if (objShop.DateEnd != null)
                            {
                                DateEnd = objShop.DateEnd;
                            }
                            if (objShop.ParkingFee != null)
                            {
                                parkingFee = objShop.ParkingFee;
                            }
                        }
                        if (!listValueParkingFeeByDay.ContainsKey(indexRow))
                        {
                            listValueParkingFeeByDay.Add(indexRow, parkingFee.ToString());
                        }
                        if (!listValueDateStartByDay.ContainsKey(indexRow))
                        {
                            listValueDateStartByDay.Add(indexRow, DateStart.ToString());
                        }
                        if (!listValueDateEndByDay.ContainsKey(indexRow))
                        {
                            listValueDateEndByDay.Add(indexRow, DateEnd.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        double? parkingFee = null;
                        DateTime? DateStart = null;
                        DateTime? DateEnd = null;
                        var objShop = listShop.Where(x => x.ID == objAttendanceTableItem.ShopID).FirstOrDefault();
                        if (objShop != null)
                        {
                            if (objShop.DateStart != null)
                            {
                                DateStart = objShop.DateStart;
                            }
                            if (objShop.DateEnd != null)
                            {
                                DateEnd = objShop.DateEnd;
                            }
                            if (objShop.ParkingFee != null)
                            {
                                parkingFee = objShop.ParkingFee;
                            }
                        }
                        if (!listValueParkingFeeByDay.ContainsKey(indexRow))
                        {
                            listValueParkingFeeByDay.Add(indexRow, parkingFee.ToString());
                        }
                        if (!listValueDateStartByDay.ContainsKey(indexRow))
                        {
                            listValueDateStartByDay.Add(indexRow, DateStart.ToString());
                        }
                        if (!listValueDateEndByDay.ContainsKey(indexRow))
                        {
                            listValueDateEndByDay.Add(indexRow, DateEnd.ToString());
                        }
                        indexRow += 1;
                    }
                }
                objColumnParkingFeeByDay.ListValueByDay = listValueParkingFeeByDay;
                listColumnByDay.Add(objColumnParkingFeeByDay);

                objColumnDateStartByDay.ListValueByDay = listValueDateStartByDay;
                listColumnByDay.Add(objColumnDateStartByDay);

                objColumnDateEndByDay.ListValueByDay = listValueDateEndByDay;
                listColumnByDay.Add(objColumnDateEndByDay);
            }
            #endregion

            #region [Nghia.Dang] [9/11/2021] [0133693] [AnPhuoc]   	Phần tử ngày Mã loại đơn vị kinh doanh 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_CATSHOPGROUP_CODE_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_CATSHOPGROUP_CODE_BYDAY.ToString();
                objColumnByDay.ValueType = strString;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                var listShopGroup = TotalDataAll.listShopGroup.ToList();
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        string code = string.Empty;
                        var objShopGroup = listShopGroup.Where(x => x.ID == objAttendanceTableItem.ShopGroupID).FirstOrDefault();
                        if (objShopGroup != null)
                        {
                            code = objShopGroup.Code;
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, code);
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        string code = string.Empty;
                        var objShopGroup = listShopGroup.Where(x => x.ID == objAttendanceTableItem.ShopGroupID).FirstOrDefault();
                        if (objShopGroup != null)
                        {
                            code = objShopGroup.Code;
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, code);
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion

            #region [Kiet.Nguyen][18/11/2021][0135356: [AnPhuoc] [Modify] Thêm enum Nhóm theo ngày

            #region Số phút vào trễ chuyên cần đầu ca 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_LATEINMINUTES4_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_LATEINMINUTES4_BYDAY.ToString();
                objColumnByDay.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {

                        double? LATEINMINUTES4 = 0;
                        if (objAttendanceTableItem.LateInMinutes4 != null)
                        {
                            LATEINMINUTES4 = objAttendanceTableItem.LateInMinutes4.Value;
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, LATEINMINUTES4.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        double? LATEINMINUTES4 = 0;
                        if (objAttendanceTableItem.LateInMinutes4 != null)
                        {
                            LATEINMINUTES4 = objAttendanceTableItem.LateInMinutes4.Value;
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, LATEINMINUTES4.ToString());
                        }
                        indexRow += 1;
                    }
                }

                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion

            #region Số phút vào trễ chuyên cần đầu ca 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_LATEINMINUTES5_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_LATEINMINUTES5_BYDAY.ToString();
                objColumnByDay.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {

                        double? LATEINMINUTES5 = 0;
                        if (objAttendanceTableItem.LateInMinutes5 != null)
                        {
                            LATEINMINUTES5 = objAttendanceTableItem.LateInMinutes5.Value;
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, LATEINMINUTES5.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        double? LATEINMINUTES5 = 0;
                        if (objAttendanceTableItem.LateInMinutes5 != null)
                        {
                            LATEINMINUTES5 = objAttendanceTableItem.LateInMinutes5.Value;
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, LATEINMINUTES5.ToString());
                        }
                        indexRow += 1;
                    }
                }

                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion

            #region Số phút vào trễ chuyên cần đầu ca 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_LATEOUTMINUTES4_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_LATEOUTMINUTES4_BYDAY.ToString();
                objColumnByDay.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {

                        double? LATEOUTMINUTES4 = 0;
                        if (objAttendanceTableItem.LateOutMinutes4 != null)
                        {
                            LATEOUTMINUTES4 = objAttendanceTableItem.LateOutMinutes4.Value;
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, LATEOUTMINUTES4.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        double? LATEOUTMINUTES4 = 0;
                        if (objAttendanceTableItem.LateOutMinutes4 != null)
                        {
                            LATEOUTMINUTES4 = objAttendanceTableItem.LateOutMinutes4.Value;
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, LATEOUTMINUTES4.ToString());
                        }
                        indexRow += 1;
                    }
                }

                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion

            #region Số phút vào trễ chuyên cần đầu ca 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_LATEOUTMINUTES5_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_LATEOUTMINUTES5_BYDAY.ToString();
                objColumnByDay.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {

                        double? LATEOUTMINUTES5 = 0;
                        if (objAttendanceTableItem.LateOutMinutes5 != null)
                        {
                            LATEOUTMINUTES5 = objAttendanceTableItem.LateOutMinutes5.Value;
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, LATEOUTMINUTES5.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        double? LATEOUTMINUTES5 = 0;
                        if (objAttendanceTableItem.LateOutMinutes5 != null)
                        {
                            LATEOUTMINUTES5 = objAttendanceTableItem.LateOutMinutes5.Value;
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, LATEOUTMINUTES5.ToString());
                        }
                        indexRow += 1;
                    }
                }

                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion

            #endregion

            #region [Nghia.Dang] [9/11/2021] [0133693] [AnPhuoc]   	Phần tử ngày thứ trong tuần
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_DAYOFWEEK_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_DAYOFWEEK_BYDAY.ToString();
                objColumnByDay.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        string strIndexDayOfWeek = string.Empty;
                        if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Sunday)
                        {
                            strIndexDayOfWeek = "1";
                        }
                        else if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Monday)
                        {
                            strIndexDayOfWeek = "2";
                        }
                        else if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Tuesday)
                        {
                            strIndexDayOfWeek = "3";
                        }
                        else if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Wednesday)
                        {
                            strIndexDayOfWeek = "4";
                        }
                        else if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Thursday)
                        {
                            strIndexDayOfWeek = "5";
                        }
                        else if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Friday)
                        {
                            strIndexDayOfWeek = "6";
                        }
                        else if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Saturday)
                        {
                            strIndexDayOfWeek = "7";
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, strIndexDayOfWeek);
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        string strIndexDayOfWeek = string.Empty;
                        if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Sunday)
                        {
                            strIndexDayOfWeek = "1";
                        }
                        else if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Monday)
                        {
                            strIndexDayOfWeek = "2";
                        }
                        else if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Tuesday)
                        {
                            strIndexDayOfWeek = "3";
                        }
                        else if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Wednesday)
                        {
                            strIndexDayOfWeek = "4";
                        }
                        else if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Thursday)
                        {
                            strIndexDayOfWeek = "5";
                        }
                        else if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Friday)
                        {
                            strIndexDayOfWeek = "6";
                        }
                        else if (objAttendanceTableItem.WorkDate.DayOfWeek == DayOfWeek.Saturday)
                        {
                            strIndexDayOfWeek = "7";
                        }
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, strIndexDayOfWeek);
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion
            #region [Nghia.Dang] [9/11/2021] [0133693] [AnPhuoc]   	Phần tử ngày WorkPaidHours 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_WORKPAIDHOURS_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_WORKPAIDHOURS_BYDAY.ToString();
                objColumnByDay.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, objAttendanceTableItem.WorkPaidHours.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, objAttendanceTableItem.WorkPaidHours.ToString());
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion
            #region [Nghia.Dang] [9/11/2021] [0133693] [AnPhuoc]   	Phần tử ngày AvailableHours 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_AVAILABLEHOURS_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_AVAILABLEHOURS_BYDAY.ToString();
                objColumnByDay.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, objAttendanceTableItem.AvailableHours.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, objAttendanceTableItem.AvailableHours.ToString());
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion
            #region [Nghia.Dang] [9/11/2021] [0133693] [AnPhuoc]   	Phần tử ngày WorkDate 
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_WORKDATE_BYDAY.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTTABLEITEM_WORKDATE_BYDAY.ToString();
                objColumnByDay.ValueType = strDateTime;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, objAttendanceTableItem.WorkDate.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            listValueByDay.Add(indexRow, objAttendanceTableItem.WorkDate.ToString());
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion

            #region [Nghia.Dang] [28/12/2021] [136973] [AnPhuoc]  Phần tử mã loại ngày nghỉ trong bảng công chi tiết
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_LEAVEWORKDAYDAYS.ToString()))
            {
                ColumnByDay objColumnByDay = new ColumnByDay();
                objColumnByDay.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_LEAVEWORKDAYDAYS.ToString();
                objColumnByDay.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listValueByDay = new Dictionary<int, string>();
                int indexRow = 0;
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveWorkDayDays != null)
                            {
                                listValueByDay.Add(indexRow, objAttendanceTableItem.LeaveWorkDayDays.ToString());
                            }
                            else
                            {
                                listValueByDay.Add(indexRow, 0.ToString());
                            }
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listValueByDay.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveWorkDayDays != null)
                            {
                                listValueByDay.Add(indexRow, objAttendanceTableItem.LeaveWorkDayDays.ToString());
                            }
                            else
                            {
                                listValueByDay.Add(indexRow, 0.ToString());
                            }
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDay.ListValueByDay = listValueByDay;
                listColumnByDay.Add(objColumnByDay);
            }
            #endregion
            #region [Nghia.Dang] [28/12/2021] [136973] [AnPhuoc]  Phần tử mã loại ngày nghỉ trong bảng công chi tiết
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, new string[] { PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_LEAVETYPECODE.ToString(), PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_LEAVETYPEHOUR.ToString() }))
            {
                ColumnByDay objColumnByDayLeaveType = new ColumnByDay();
                objColumnByDayLeaveType.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_LEAVETYPECODE.ToString();
                objColumnByDayLeaveType.ValueType = strString;
                ColumnByDay objColumnByDayLeaveTypeHour = new ColumnByDay();
                objColumnByDayLeaveTypeHour.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_LEAVETYPEHOUR.ToString();
                objColumnByDayLeaveTypeHour.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listLeaveType = new Dictionary<int, string>();
                Dictionary<int, string> listLeaveTypeHour = new Dictionary<int, string>();
                int indexRow = 0;
                var leaveType = TotalDataAll.listLeavedayType.ToList();
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listLeaveType.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveTypeID != null)
                            {
                                var leavecode = leaveType.Where(x => x.ID == objAttendanceTableItem.LeaveTypeID).FirstOrDefault();
                                listLeaveType.Add(indexRow, leavecode != null ? leavecode.Code : string.Empty);
                            }
                            else
                            {
                                listLeaveType.Add(indexRow, string.Empty);
                            }
                        }
                        if (!listLeaveTypeHour.ContainsKey(indexRow))
                        {
                            listLeaveTypeHour.Add(indexRow, objAttendanceTableItem.LeaveHours.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listLeaveType.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveTypeID != null)
                            {
                                var leavecode = leaveType.Where(x => x.ID == objAttendanceTableItem.LeaveTypeID).FirstOrDefault();
                                listLeaveType.Add(indexRow, leavecode != null ? leavecode.Code : string.Empty);
                            }
                            else
                            {
                                listLeaveType.Add(indexRow, string.Empty);
                            }
                        }
                        if (!listLeaveTypeHour.ContainsKey(indexRow))
                        {
                            listLeaveTypeHour.Add(indexRow, objAttendanceTableItem.LeaveHours.ToString());
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDayLeaveType.ListValueByDay = listLeaveType;
                listColumnByDay.Add(objColumnByDayLeaveType);
                objColumnByDayLeaveTypeHour.ListValueByDay = listLeaveTypeHour;
                listColumnByDay.Add(objColumnByDayLeaveTypeHour);
            }
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, new string[] { PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVETYPE.ToString(), PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVEHOUR.ToString() }))
            {
                ColumnByDay objColumnByDayLeaveType = new ColumnByDay();
                objColumnByDayLeaveType.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVETYPE.ToString();
                objColumnByDayLeaveType.ValueType = strString;
                ColumnByDay objColumnByDayLeaveTypeHour = new ColumnByDay();
                objColumnByDayLeaveTypeHour.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVEHOUR.ToString();
                objColumnByDayLeaveTypeHour.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listLeaveType = new Dictionary<int, string>();
                Dictionary<int, string> listLeaveTypeHour = new Dictionary<int, string>();
                int indexRow = 0;
                var leaveType = TotalDataAll.listLeavedayType.ToList();
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listLeaveType.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveTypeID != null)
                            {
                                var leavecode = leaveType.Where(x => x.ID == objAttendanceTableItem.ExtraLeaveTypeID).FirstOrDefault();
                                listLeaveType.Add(indexRow, leavecode != null ? leavecode.Code : string.Empty);
                            }
                            else
                            {
                                listLeaveType.Add(indexRow, string.Empty);
                            }
                        }
                        if (!listLeaveTypeHour.ContainsKey(indexRow))
                        {
                            listLeaveTypeHour.Add(indexRow, objAttendanceTableItem.ExtraLeaveHours.ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listLeaveType.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveTypeID != null)
                            {
                                var leavecode = leaveType.Where(x => x.ID == objAttendanceTableItem.ExtraLeaveTypeID).FirstOrDefault();
                                listLeaveType.Add(indexRow, leavecode != null ? leavecode.Code : string.Empty);
                            }
                            else
                            {
                                listLeaveType.Add(indexRow, string.Empty);
                            }
                        }
                        if (!listLeaveTypeHour.ContainsKey(indexRow))
                        {
                            listLeaveTypeHour.Add(indexRow, objAttendanceTableItem.ExtraLeaveHours.ToString());
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDayLeaveType.ListValueByDay = listLeaveType;
                listColumnByDay.Add(objColumnByDayLeaveType);
                objColumnByDayLeaveTypeHour.ListValueByDay = listLeaveTypeHour;
                listColumnByDay.Add(objColumnByDayLeaveTypeHour);
            }
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, new string[] { PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVETYPE3.ToString(), PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVEHOUR3.ToString() }))
            {
                ColumnByDay objColumnByDayLeaveType = new ColumnByDay();
                objColumnByDayLeaveType.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVETYPE3.ToString();
                objColumnByDayLeaveType.ValueType = strString;
                ColumnByDay objColumnByDayLeaveTypeHour = new ColumnByDay();
                objColumnByDayLeaveTypeHour.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVEHOUR3.ToString();
                objColumnByDayLeaveTypeHour.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listLeaveType = new Dictionary<int, string>();
                Dictionary<int, string> listLeaveTypeHour = new Dictionary<int, string>();
                int indexRow = 0;
                var leaveType = TotalDataAll.listLeavedayType.ToList();
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listLeaveType.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveTypeID != null)
                            {
                                var leavecode = leaveType.Where(x => x.ID == objAttendanceTableItem.ExtraLeaveType3ID).FirstOrDefault();
                                listLeaveType.Add(indexRow, leavecode != null ? leavecode.Code : string.Empty);
                            }
                            else
                            {
                                listLeaveType.Add(indexRow, string.Empty);
                            }
                        }
                        if (!listLeaveTypeHour.ContainsKey(indexRow))
                        {
                            listLeaveTypeHour.Add(indexRow, (objAttendanceTableItem.ExtraLeaveHours3 != null ? objAttendanceTableItem.ExtraLeaveHours3.Value : 0).ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listLeaveType.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveTypeID != null)
                            {
                                var leavecode = leaveType.Where(x => x.ID == objAttendanceTableItem.ExtraLeaveType3ID).FirstOrDefault();
                                listLeaveType.Add(indexRow, leavecode != null ? leavecode.Code : string.Empty);
                            }
                            else
                            {
                                listLeaveType.Add(indexRow, string.Empty);
                            }
                        }
                        if (!listLeaveTypeHour.ContainsKey(indexRow))
                        {
                            listLeaveTypeHour.Add(indexRow, (objAttendanceTableItem.ExtraLeaveHours3 != null ? objAttendanceTableItem.ExtraLeaveHours3.Value : 0).ToString());
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDayLeaveType.ListValueByDay = listLeaveType;
                listColumnByDay.Add(objColumnByDayLeaveType);
                objColumnByDayLeaveTypeHour.ListValueByDay = listLeaveTypeHour;
                listColumnByDay.Add(objColumnByDayLeaveTypeHour);
            }
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, new string[] { PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVETYPE4.ToString(), PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVEHOUR4.ToString() }))
            {
                ColumnByDay objColumnByDayLeaveType = new ColumnByDay();
                objColumnByDayLeaveType.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVETYPE4.ToString();
                objColumnByDayLeaveType.ValueType = strString;
                ColumnByDay objColumnByDayLeaveTypeHour = new ColumnByDay();
                objColumnByDayLeaveTypeHour.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVEHOUR4.ToString();
                objColumnByDayLeaveTypeHour.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listLeaveType = new Dictionary<int, string>();
                Dictionary<int, string> listLeaveTypeHour = new Dictionary<int, string>();
                int indexRow = 0;
                var leaveType = TotalDataAll.listLeavedayType.ToList();
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listLeaveType.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveTypeID != null)
                            {
                                var leavecode = leaveType.Where(x => x.ID == objAttendanceTableItem.ExtraLeaveType4ID).FirstOrDefault();
                                listLeaveType.Add(indexRow, leavecode != null ? leavecode.Code : string.Empty);
                            }
                            else
                            {
                                listLeaveType.Add(indexRow, string.Empty);
                            }
                        }
                        if (!listLeaveTypeHour.ContainsKey(indexRow))
                        {
                            listLeaveTypeHour.Add(indexRow, (objAttendanceTableItem.ExtraLeaveHours4 != null ? objAttendanceTableItem.ExtraLeaveHours4.Value : 0).ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listLeaveType.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveTypeID != null)
                            {
                                var leavecode = leaveType.Where(x => x.ID == objAttendanceTableItem.ExtraLeaveType4ID).FirstOrDefault();
                                listLeaveType.Add(indexRow, leavecode != null ? leavecode.Code : string.Empty);
                            }
                            else
                            {
                                listLeaveType.Add(indexRow, string.Empty);
                            }
                        }
                        if (!listLeaveTypeHour.ContainsKey(indexRow))
                        {
                            listLeaveTypeHour.Add(indexRow, (objAttendanceTableItem.ExtraLeaveHours4 != null ? objAttendanceTableItem.ExtraLeaveHours4.Value : 0).ToString());
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDayLeaveType.ListValueByDay = listLeaveType;
                listColumnByDay.Add(objColumnByDayLeaveType);
                objColumnByDayLeaveTypeHour.ListValueByDay = listLeaveTypeHour;
                listColumnByDay.Add(objColumnByDayLeaveTypeHour);
            }
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, new string[] { PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVETYPE5.ToString(), PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVEHOUR5.ToString() }))
            {
                ColumnByDay objColumnByDayLeaveType = new ColumnByDay();
                objColumnByDayLeaveType.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVETYPE5.ToString();
                objColumnByDayLeaveType.ValueType = strString;
                ColumnByDay objColumnByDayLeaveTypeHour = new ColumnByDay();
                objColumnByDayLeaveTypeHour.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVEHOUR5.ToString();
                objColumnByDayLeaveTypeHour.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listLeaveType = new Dictionary<int, string>();
                Dictionary<int, string> listLeaveTypeHour = new Dictionary<int, string>();
                int indexRow = 0;
                var leaveType = TotalDataAll.listLeavedayType.ToList();
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listLeaveType.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveTypeID != null)
                            {
                                var leavecode = leaveType.Where(x => x.ID == objAttendanceTableItem.ExtraLeaveType5ID).FirstOrDefault();
                                listLeaveType.Add(indexRow, leavecode != null ? leavecode.Code : string.Empty);
                            }
                            else
                            {
                                listLeaveType.Add(indexRow, string.Empty);
                            }
                        }
                        if (!listLeaveTypeHour.ContainsKey(indexRow))
                        {
                            listLeaveTypeHour.Add(indexRow, (objAttendanceTableItem.ExtraLeaveHours5 != null ? objAttendanceTableItem.ExtraLeaveHours5.Value : 0).ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listLeaveType.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveTypeID != null)
                            {
                                var leavecode = leaveType.Where(x => x.ID == objAttendanceTableItem.ExtraLeaveType5ID).FirstOrDefault();
                                listLeaveType.Add(indexRow, leavecode != null ? leavecode.Code : string.Empty);
                            }
                            else
                            {
                                listLeaveType.Add(indexRow, string.Empty);
                            }
                        }
                        if (!listLeaveTypeHour.ContainsKey(indexRow))
                        {
                            listLeaveTypeHour.Add(indexRow, (objAttendanceTableItem.ExtraLeaveHours5 != null ? objAttendanceTableItem.ExtraLeaveHours5.Value : 0).ToString());
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDayLeaveType.ListValueByDay = listLeaveType;
                listColumnByDay.Add(objColumnByDayLeaveType);
                objColumnByDayLeaveTypeHour.ListValueByDay = listLeaveTypeHour;
                listColumnByDay.Add(objColumnByDayLeaveTypeHour);
            }
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, new string[] { PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVETYPE6.ToString(), PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVEHOUR6.ToString() }))
            {
                ColumnByDay objColumnByDayLeaveType = new ColumnByDay();
                objColumnByDayLeaveType.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVETYPE6.ToString();
                objColumnByDayLeaveType.ValueType = strString;
                ColumnByDay objColumnByDayLeaveTypeHour = new ColumnByDay();
                objColumnByDayLeaveTypeHour.ColumnName = PayrollElementGroupByDay.ELEMENT_GROUP_ATT_ATTENDANCEITEM_EXTRALEAVEHOUR6.ToString();
                objColumnByDayLeaveTypeHour.ValueType = strDouble;
                //ds dữ liệu cho từng ngày
                Dictionary<int, string> listLeaveType = new Dictionary<int, string>();
                Dictionary<int, string> listLeaveTypeHour = new Dictionary<int, string>();
                int indexRow = 0;
                var leaveType = TotalDataAll.listLeavedayType.ToList();
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listLeaveType.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveTypeID != null)
                            {
                                var leavecode = leaveType.Where(x => x.ID == objAttendanceTableItem.ExtraLeaveType6ID).FirstOrDefault();
                                listLeaveType.Add(indexRow, leavecode != null ? leavecode.Code : string.Empty);
                            }
                            else
                            {
                                listLeaveType.Add(indexRow, string.Empty);
                            }
                        }
                        if (!listLeaveTypeHour.ContainsKey(indexRow))
                        {
                            listLeaveTypeHour.Add(indexRow, (objAttendanceTableItem.ExtraLeaveHours6 != null ? objAttendanceTableItem.ExtraLeaveHours6.Value : 0).ToString());
                        }
                        indexRow += 1;
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                    foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                    {
                        if (!listLeaveType.ContainsKey(indexRow))
                        {
                            if (objAttendanceTableItem.LeaveTypeID != null)
                            {
                                var leavecode = leaveType.Where(x => x.ID == objAttendanceTableItem.ExtraLeaveType6ID).FirstOrDefault();
                                listLeaveType.Add(indexRow, leavecode != null ? leavecode.Code : string.Empty);
                            }
                            else
                            {
                                listLeaveType.Add(indexRow, string.Empty);
                            }
                        }
                        if (!listLeaveTypeHour.ContainsKey(indexRow))
                        {
                            listLeaveTypeHour.Add(indexRow, (objAttendanceTableItem.ExtraLeaveHours6 != null ? objAttendanceTableItem.ExtraLeaveHours6.Value : 0).ToString());
                        }
                        indexRow += 1;
                    }
                }
                objColumnByDayLeaveType.ListValueByDay = listLeaveType;
                listColumnByDay.Add(objColumnByDayLeaveType);
                objColumnByDayLeaveTypeHour.ListValueByDay = listLeaveTypeHour;
                listColumnByDay.Add(objColumnByDayLeaveTypeHour);
            }
            #endregion
            #endregion

            //Enum Động
            #region Enum động lương nhóm theo ngày 

            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_DYN1_COUNT_PROFILE_BYJOBTYPECODE_.ToString(), "_BYDAY"))
            {
                var listOverTimeByProfileDic = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID);
                var strStartsWith = PayrollElementGroupByDay.ELEMENT_GROUP_DYN1_COUNT_PROFILE_BYJOBTYPECODE_.ToString();
                var strEndWith = "_BYDAY";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                string status = string.Empty;
                string status4 = string.Empty;

                getDataComputePayrollServices.GetAttendanceTableAllProfile(TotalData600, CutOffDuration, ref status);
                var listAttendanceTableID = TotalData600.listAttendanceTableAllProfile.Select(x => x.ID).Distinct().ToList();
                getDataComputePayrollServices.GetAttendanceTableItemAllByAttendanceTableID(TotalData600, listAttendanceTableID, CutOffDuration, ref status4);


                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status4))
                {
                    TotalData600.statusBugStore += status + " (ELEMENT_GROUP_DYN1_COUNT_PROFILE_BYJOBTYPECODE_) ";
                    foreach (var itemFormula in ListFormula)
                    {
                        ColumnByDay objColumn = new ColumnByDay();
                        objColumn.ColumnName = itemFormula;
                        objColumn.ValueType = strDouble;
                        Dictionary<int, string> listValue = new Dictionary<int, string>();
                        int indexRow = 0;
                        if (TotalData600.dicFieldConfigForGroup.Count > 0)
                        {
                            var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                                      s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                            //gán dữ liệu cho từng ngày cho các enum
                            foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                            {
                                if (!listValue.ContainsKey(indexRow))
                                {
                                    listValue.Add(indexRow, 0.ToString());
                                }
                                indexRow += 1;
                            }
                        }
                        else
                        {
                            var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                       s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                            //gán dữ liệu cho từng ngày cho các enum
                            foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                            {
                                if (!listValue.ContainsKey(indexRow))
                                {
                                    listValue.Add(indexRow, 0.ToString());
                                }
                                indexRow += 1;
                            }
                        }
                        objColumn.ListValueByDay = listValue;
                        listColumnByDay.Add(objColumn);
                    }
                }
                else
                {
                    foreach (var itemFormula in ListFormula)
                    {
                        // Tách lấy chuỗi các giá trị số chặn đầu, chặn cuối
                        var strDurationType = itemFormula
                            .Replace(PayrollElementGroupByDay.ELEMENT_GROUP_DYN1_COUNT_PROFILE_BYJOBTYPECODE_.ToString(), "")
                            .Replace("_BYDAY", "");

                        ColumnByDay objColumn = new ColumnByDay();
                        objColumn.ColumnName = itemFormula;
                        objColumn.ValueType = strDouble;
                        Dictionary<int, string> listValue = new Dictionary<int, string>();

                        int indexRow = 0;
                        var objJobtype = TotalDataAll.listCat_JobType.Where(x => x.Code == strDurationType).FirstOrDefault();
                        if (TotalData600.dicFieldConfigForGroup.Count > 0)
                        {
                            var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                                       s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                            //gán dữ liệu cho từng ngày cho các enum
                            foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                            {
                                double count = 0;
                                var countProfile = TotalData600.listAttendanceTableItemByAttendanceTableID.Where(x => x.ShopID == objAttendanceTableItem.ShopID && objJobtype.ID == x.JobTypeID && x.WorkDate == objAttendanceTableItem.WorkDate).Select(x => x.ProfileID).Distinct().ToList();
                                if (countProfile != null)
                                {
                                    count = countProfile.Count;
                                }
                                if (!listValue.ContainsKey(indexRow))
                                {
                                    listValue.Add(indexRow, count.ToString());
                                }
                                indexRow += 1;
                            }
                        }
                        else
                        {
                            var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                        s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                            foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                            {
                                double count = 0;
                                var countProfile = TotalData600.listAttendanceTableItemByAttendanceTableID.Where(x => x.ShopID == objAttendanceTableItem.ShopID && objJobtype.ID == x.JobTypeID && x.WorkDate == objAttendanceTableItem.WorkDate).Select(x => x.ProfileID).Distinct().ToList();
                                if (countProfile != null)
                                {
                                    count = countProfile.Count;
                                }
                                if (!listValue.ContainsKey(indexRow))
                                {
                                    listValue.Add(indexRow, count.ToString());
                                }
                            }

                        }
                        objColumn.ListValueByDay = listValue;
                        listColumnByDay.Add(objColumn);
                    }
                }
            }

            //Tung.Tran [17/03/2022][140325]: Thêm enum lương nhóm : Đếm số ngày có ca theo mã ca làm việc
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_DYN4_TIMESHEET_SHIFT_.ToString(), "_BYDAY"))
            {
                var strStartsWith = PayrollElementGroupByDay.ELEMENT_GROUP_DYN4_TIMESHEET_SHIFT_.ToString();
                var strEndWith = "_BYDAY";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                string status = string.Empty;
                string nameTableGetData = "listAttWorkday";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    var dataComputeSer = new Sal_GetDataComputePayrollKZServices();
                    dataComputeSer.UserLogin = TotalDataAll.UserLogin;
                    TotalData600.listAttWorkday = dataComputeSer.GetListAttWorkDay(TotalData600.strOrderByProfile, CutOffDuration, ref status);
                    if (TotalData600.listAttWorkday != null)
                    {
                        TotalData600.dicAttWorkday = TotalData600.listAttWorkday.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
                    }
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_WORKDAY_COUNT_MISS_IN_OUT_IN_MONTH.ToString() + ") ";
                }
                else
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                                           s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                    var listProfileTimeSheet = queryAbleAtt_ProfileTimeSheet.Where(
                              s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                    var listWorkDay = TotalData600.dicAttWorkday.GetValueOrNew(profileItem.ID);

                    foreach (var itemFormula in ListFormula)
                    {
                        // Tách lấy chuỗi các giá trị số chặn đầu, chặn cuối
                        var shiftCode = itemFormula
                            .Replace(PayrollElementGroupByDay.ELEMENT_GROUP_DYN4_TIMESHEET_SHIFT_.ToString(), "")
                            .Replace("_BYDAY", "");

                        ColumnByDay objColumn = new ColumnByDay();
                        objColumn.ColumnName = itemFormula;
                        objColumn.ValueType = strDouble;
                        Dictionary<int, string> listValue = new Dictionary<int, string>();

                        int indexRow = 0;
                        var objShift = TotalDataAll.listCat_Shift.Where(x => x.Code == shiftCode).FirstOrDefault();
                        if (objShift != null)
                        {
                            if (TotalData600.dicFieldConfigForGroup.Count > 0)
                            {

                                //gán dữ liệu cho từng ngày cho các enum
                                foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                                {
                                    var checkHaveShift = listProfileTimeSheet
                                        .Any(x => x.WorkDate == objAttendanceTableItem.WorkDate && x.ShiftID == objShift.ID);

                                    if (!checkHaveShift)
                                    {
                                        checkHaveShift = listWorkDay
                                       .Any(x => x.WorkDate == objAttendanceTableItem.WorkDate && x.ShiftID == objShift.ID);
                                    }

                                    if (!listValue.ContainsKey(indexRow))
                                    {
                                        listValue.Add(indexRow, checkHaveShift ? "1" : "0");
                                    }
                                    indexRow += 1;
                                }
                            }
                        }
                        objColumn.ListValueByDay = listValue;
                        listColumnByDay.Add(objColumn);
                    }
                }
            }

            #region [Kiet.Nguyen][18/11/2021][0135356: [AnPhuoc] [Modify] Thêm enum Nhóm theo ngày
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_DYN2_SUM_OVERTIMEHOURS_GROUPBY_.ToString(), "_BYDAY"))
            {
                var listOverTimeByProfileDic = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID);
                var strStartsWith = PayrollElementGroupByDay.ELEMENT_GROUP_DYN2_SUM_OVERTIMEHOURS_GROUPBY_.ToString();
                var strEndWith = "_BYDAY";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                string status = string.Empty;
                string status4 = string.Empty;

                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status4))
                {
                    TotalData600.statusBugStore += status + " (ELEMENT_GROUP_DYN2_SUM_OVERTIMEHOURS_GROUPBY_) ";
                    foreach (var itemFormula in ListFormula)
                    {
                        ColumnByDay objColumn = new ColumnByDay();
                        objColumn.ColumnName = itemFormula;
                        objColumn.ValueType = strDouble;
                        Dictionary<int, string> listValue = new Dictionary<int, string>();
                        int indexRow = 0;
                        if (TotalData600.dicFieldConfigForGroup.Count > 0)
                        {
                            var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                                      s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                            //gán dữ liệu cho từng ngày cho các enum
                            foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                            {
                                if (!listValue.ContainsKey(indexRow))
                                {
                                    listValue.Add(indexRow, 0.ToString());
                                }
                                indexRow += 1;
                            }
                        }
                        else
                        {
                            var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                       s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                            //gán dữ liệu cho từng ngày cho các enum
                            foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                            {
                                if (!listValue.ContainsKey(indexRow))
                                {
                                    listValue.Add(indexRow, 0.ToString());
                                }
                                indexRow += 1;
                            }
                        }
                        objColumn.ListValueByDay = listValue;
                        listColumnByDay.Add(objColumn);
                    }
                }
                else
                {
                    foreach (var itemFormula in ListFormula)
                    {
                        // Tách lấy chuỗi các giá trị số chặn đầu, chặn cuối
                        var formulaItemcodeOverTimeType = itemFormula
                            .Replace(PayrollElementGroupByDay.ELEMENT_GROUP_DYN2_SUM_OVERTIMEHOURS_GROUPBY_.ToString(), "")
                            .Replace("_BYDAY", "");

                        ColumnByDay objColumn = new ColumnByDay();
                        objColumn.ColumnName = itemFormula;
                        objColumn.ValueType = strDouble;
                        Dictionary<int, string> listValue = new Dictionary<int, string>();

                        var objOverTimeType = TotalDataAll.listOvertimeType.FirstOrDefault(s => s.Code == formulaItemcodeOverTimeType);
                        if (TotalData600.dicFieldConfigForGroup.Count > 0)
                        {

                            var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                                      s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                            //gán dữ liệu cho từng ngày cho các enum
                            if (objOverTimeType != null)
                            {
                                int indexRow = 0;
                                foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                                {
                                    double sumOverTimeHour = 0;
                                    if (objAttendanceTableItem.OvertimeTypeID == objOverTimeType.ID)
                                    {
                                        sumOverTimeHour += objAttendanceTableItem.OvertimeHours;
                                    }
                                    if (objAttendanceTableItem.ExtraOvertimeTypeID == objOverTimeType.ID)
                                    {
                                        sumOverTimeHour += objAttendanceTableItem.ExtraOvertimeHours;
                                    }
                                    if (objAttendanceTableItem.ExtraOvertimeType2ID == objOverTimeType.ID)
                                    {
                                        sumOverTimeHour += objAttendanceTableItem.ExtraOvertimeHours2;
                                    }
                                    if (objAttendanceTableItem.ExtraOvertimeType3ID == objOverTimeType.ID)
                                    {
                                        sumOverTimeHour += objAttendanceTableItem.ExtraOvertimeHours3;
                                    }
                                    if (objAttendanceTableItem.ExtraOvertimeType4ID == objOverTimeType.ID && objAttendanceTableItem.ExtraOvertimeHours4 != null)
                                    {
                                        sumOverTimeHour += objAttendanceTableItem.ExtraOvertimeHours4.Value;
                                    }
                                    if (!listValue.ContainsKey(indexRow))
                                    {
                                        listValue.Add(indexRow, sumOverTimeHour.ToString());
                                    }
                                    indexRow += 1;
                                }
                            }
                        }
                        else
                        {
                            var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                        s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                            if (objOverTimeType != null)
                            {
                                int indexRow = 0;
                                foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                                {
                                    double sumOverTimeHour = 0;
                                    if (objAttendanceTableItem.OvertimeTypeID == objOverTimeType.ID)
                                    {
                                        sumOverTimeHour += objAttendanceTableItem.OvertimeHours;
                                    }
                                    if (objAttendanceTableItem.ExtraOvertimeTypeID == objOverTimeType.ID)
                                    {
                                        sumOverTimeHour += objAttendanceTableItem.ExtraOvertimeHours;
                                    }
                                    if (objAttendanceTableItem.ExtraOvertimeType2ID == objOverTimeType.ID)
                                    {
                                        sumOverTimeHour += objAttendanceTableItem.ExtraOvertimeHours2;
                                    }
                                    if (objAttendanceTableItem.ExtraOvertimeType3ID == objOverTimeType.ID)
                                    {
                                        sumOverTimeHour += objAttendanceTableItem.ExtraOvertimeHours3;
                                    }
                                    if (objAttendanceTableItem.ExtraOvertimeType4ID == objOverTimeType.ID && objAttendanceTableItem.ExtraOvertimeHours4 != null)
                                    {
                                        sumOverTimeHour += objAttendanceTableItem.ExtraOvertimeHours4.Value;
                                    }
                                    if (!listValue.ContainsKey(indexRow))
                                    {
                                        listValue.Add(indexRow, sumOverTimeHour.ToString());
                                    }
                                    indexRow += 1;
                                }
                            }

                        }
                        objColumn.ListValueByDay = listValue;
                        listColumnByDay.Add(objColumn);
                    }
                }
            }
            #endregion

            #region minhnguyenvan-133522- phần tử lương nhóm theo ngày động theo mã loại phụ cấp lương nhóm
            if (CheckIsExistFormula(listElementFormulaForElementGroupByDay, ref formula, PayrollElementGroupByDay.ELEMENT_GROUP_DYN3_SAL_PERFORMANCEALLOWANCE_ISFOLLOWDAY_BYCODEUNUSUALALLOWANCECFG_.ToString(), "_BYDAY"))
            {
                var listOverTimeByProfileDic = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID);
                var strStartsWith = PayrollElementGroupByDay.ELEMENT_GROUP_DYN3_SAL_PERFORMANCEALLOWANCE_ISFOLLOWDAY_BYCODEUNUSUALALLOWANCECFG_.ToString();
                var strEndWith = "_BYDAY";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                string status = string.Empty;
                string status4 = string.Empty;

                getDataComputePayrollServices.GetAttendanceTableAllProfile(TotalData600, CutOffDuration, ref status);
                var listAttendanceTableID = TotalData600.listAttendanceTableAllProfile.Select(x => x.ID).Distinct().ToList();
                getDataComputePayrollServices.GetAttendanceTableItemAllByAttendanceTableID(TotalData600, listAttendanceTableID, CutOffDuration, ref status4);


                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status4))
                {
                    TotalData600.statusBugStore += status + " (ELEMENT_GROUP_DYN3_SAL_PERFORMANCEALLOWANCE_ISFOLLOWDAY_BYCODEUNUSUALALLOWANCECFG_) ";
                    foreach (var itemFormula in ListFormula)
                    {
                        ColumnByDay objColumn = new ColumnByDay();
                        objColumn.ColumnName = itemFormula;
                        objColumn.ValueType = strDouble;
                        Dictionary<int, string> listValue = new Dictionary<int, string>();
                        int indexRow = 0;
                        if (TotalData600.dicFieldConfigForGroup.Count > 0)
                        {
                            var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                                      s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                            //gán dữ liệu cho từng ngày cho các enum
                            foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                            {
                                if (!listValue.ContainsKey(indexRow))
                                {
                                    listValue.Add(indexRow, 0.ToString());
                                }
                                indexRow += 1;
                            }
                        }
                        else
                        {
                            var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                       s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                            //gán dữ liệu cho từng ngày cho các enum
                            foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                            {
                                if (!listValue.ContainsKey(indexRow))
                                {
                                    listValue.Add(indexRow, 0.ToString());
                                }
                                indexRow += 1;
                            }
                        }
                        objColumn.ListValueByDay = listValue;
                        listColumnByDay.Add(objColumn);
                    }
                }
                else
                {
                    foreach (var itemFormula in ListFormula)
                    {

                        ColumnByDay objColumn = new ColumnByDay();
                        // Tách lấy chuỗi các giá trị số chặn đầu, chặn cuối
                        var codeUnusualAllowanceCfg = itemFormula
                            .Replace(PayrollElementGroupByDay.ELEMENT_GROUP_DYN3_SAL_PERFORMANCEALLOWANCE_ISFOLLOWDAY_BYCODEUNUSUALALLOWANCECFG_.ToString(), "")
                            .Replace("_BYDAY", "");
                        objColumn.ColumnName = itemFormula;
                        objColumn.ValueType = strDouble;
                        Dictionary<int, string> listValue = new Dictionary<int, string>();

                        int indexRow = 0;
                        var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                        if (TotalData600.dicFieldConfigForGroup.Count > 0)
                        {
                            var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                                       s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                            //gán dữ liệu cho từng ngày cho các enum
                            foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                            {
                                double isFollowDay = 0;
                                var ListPerformanceAllowance =
                                    TotalDataAll.ListPerformanceAllowance.Where(x =>
                                                                               x.ProfileID == profileItem.ID
                                                                            && x.IsFollowDay == true
                                                                            && x.DateFrom <= objAttendanceTableItem.WorkDate
                                                                            && x.DateTo >= objAttendanceTableItem.WorkDate
                                                                            && objUnusualAllowanceCfg != null
                                                                            && x.UnusualAllowanceID == objUnusualAllowanceCfg.ID).FirstOrDefault();
                                if (ListPerformanceAllowance != null)
                                {
                                    isFollowDay = 1;
                                }
                                if (!listValue.ContainsKey(indexRow))
                                {
                                    listValue.Add(indexRow, isFollowDay.ToString());
                                }
                                indexRow += 1;
                            }
                        }
                        else
                        {
                            var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                        s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                            foreach (var objAttendanceTableItem in listAttendanceTableItemByPro)
                            {
                                double isFollowDay = 0;
                                var ListPerformanceAllowance =
                                    TotalDataAll.ListPerformanceAllowance.Where(x =>
                                                                               x.ProfileID == profileItem.ID
                                                                            && x.IsFollowDay == true && x.DateFrom <= objAttendanceTableItem.WorkDate
                                                                            && x.DateTo >= objAttendanceTableItem.WorkDate
                                                                            && objUnusualAllowanceCfg != null
                                                                            && x.UnusualAllowanceID == objUnusualAllowanceCfg.ID).FirstOrDefault();
                                if (ListPerformanceAllowance != null)
                                {
                                    isFollowDay = 1;
                                }
                                if (!listValue.ContainsKey(indexRow))
                                {
                                    listValue.Add(indexRow, isFollowDay.ToString());
                                }
                            }
                        }
                        objColumn.ListValueByDay = listValue;
                        listColumnByDay.Add(objColumn);
                    }
                }
            }
            #endregion
            #endregion

            //EndEnum
            #region Tạo cấu trúc bảng
            //bang sẽ chứa all các cột làm enum cho công thức mảng
            //mỗi 1 cột sẽ là 1 logic để lấy giá trị trả về cho từng ngày
            DataTable dataSource = new DataTable();

            //add all cột
            foreach (var columnByDay in listColumnByDay)
            {
                string columnName = columnByDay.ColumnName;
                if (!dataSource.Columns.Contains(columnName))
                {
                    if (columnByDay.ValueType == strDouble)
                    {
                        dataSource.Columns.Add(columnName, typeof(Double));
                    }
                    else if (columnByDay.ValueType == strDateTime)
                    {
                        dataSource.Columns.Add(columnName, typeof(DateTime));
                    }
                    else
                    {
                        dataSource.Columns.Add(columnName);
                    }
                }
            }

            //gán dữ liệu cho các cột
            for (int i = 0; i < totalRowInDataSoure; i++)
            {
                DataRow row = dataSource.NewRow();
                foreach (var columnByDay in listColumnByDay)
                {
                    string columnName = columnByDay.ColumnName;
                    string valueString = string.Empty;
                    if (columnByDay.ListValueByDay.Keys.Contains(i))
                    {
                        valueString = columnByDay.ListValueByDay[i];
                    }
                    if (columnByDay.ValueType == strDouble)
                    {
                        if (!string.IsNullOrEmpty(valueString))
                        {
                            double valueDouble = 0;
                            row[columnName] = valueDouble;
                            if (Double.TryParse(valueString, out valueDouble))
                            {
                                row[columnName] = valueDouble;
                            }
                        }
                    }
                    else if (columnByDay.ValueType == strDateTime)
                    {
                        if (!string.IsNullOrEmpty(valueString))
                        {
                            DateTime valueDateTime = DateTime.MinValue;
                            row[columnName] = valueDateTime;
                            if (DateTime.TryParse(valueString, out valueDateTime))
                            {
                                row[columnName] = valueDateTime;
                            }
                        }
                    }
                    else
                    {
                        row[columnName] = valueString;
                    }
                }
                dataSource.Rows.Add(row);
            }
            #endregion

            //bang chua all các cột làm enum tính
            var elementFormulaDataSource = new ElementFormula
            {
                VariableName = "Source",
                OrderNumber = 0,
                Value = dataSource
            };
            if (listElementFormulaForElementGroupByDay.Where(x => x.VariableName == "Source").FirstOrDefault() != null)
            {
                listElementFormulaForElementGroupByDay.Remove(listElementFormulaForElementGroupByDay.Where(x => x.VariableName == "Source").FirstOrDefault());
            }
            //ds all enum trong source
            TotalData600.listAllColumnInSource = dataSource.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToList();
            listElementFormulaForElementGroupByDay.Add(elementFormulaDataSource);
            return listElementFormulaForElementGroupByDay;
        }

        /// <summary>
        /// Tính giá trị cho từng enum đổi với phần tử nhóm
        /// </summary>
        /// <param name="objGroupValueForPayrollGroupTable"></param>
        /// <param name="TotalData"></param>
        /// <param name="listElementFormulaForElementGroup"></param>
        /// <param name="profileItem"></param>
        /// <param name="CutOffDuration"></param>
        /// <param name="formula"></param>
        /// <param name="GradePayrollID"></param>
        /// <param name="objAttendanceTableProCut"></param>
        /// <param name="listTmpDeduction"></param>
        /// <returns></returns>
        public List<ElementFormula> GetStaticValuesForElementGroup(
        ComputePayrollDataModelKZAll TotalDataAll,
        GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable,
        ComputePayrollDataModelKZ TotalData600,
        List<ElementFormula> listElementFormulaForElementGroup,
        Hre_ProfileEntity profileItem,
        Att_CutOffDurationEntity CutOffDuration,
        List<string> formula,
        Guid? GradePayrollID,
        Att_AttendanceTableEntity objAttendanceTableProCut,
        Dictionary<Guid, ValueCount> listTmpDeduction,
        int indexByGroup)
        {
            var getDataComputePayrollServices = new Sal_GetDataComputePayrollKZServices();
            getDataComputePayrollServices.UserLogin = UserLogin;

            ElementFormula item = new ElementFormula();
            var orgstructureID = objGroupValueForPayrollGroupTable.OrgstructureID;
            var positionID = objGroupValueForPayrollGroupTable.PositionID;
            var shopID = objGroupValueForPayrollGroupTable.ShopID;
            var areaPostJobWorkID = objGroupValueForPayrollGroupTable.AreaPostJobWorkID;
            string fieldOrgstructureID = "OrgstructureID";
            string fieldPositionID = "PositionID";
            string fieldShopID = "ShopID";
            var queryAbleAttendanceTableItemMulti = TotalDataAll.listAttendanceTableItem.Where(s => s.ProfileID == profileItem.ID);
            var queryAbleAttendanceTableItem = TotalDataAll.listAttendanceTableItem.Where(s => s.ProfileID == profileItem.ID);
            var queryAbleAtt_ProfileTimeSheet = TotalDataAll.ListAtt_ProfileTimeSheet.Where(s => s.ProfileID == profileItem.ID);
            var queryAblePerformanceAllowance = TotalDataAll.ListPerformanceAllowance.Where(s => s.ProfileID == profileItem.ID);

            // xử lý lọc cho các nhóm 1 lần
            if (TotalData600.dicFieldConfigForGroup.Count > 0)
            {
                if (TotalData600.dicFieldConfigForGroup.ContainsKey(fieldOrgstructureID))
                {
                    queryAbleAttendanceTableItemMulti = queryAbleAttendanceTableItemMulti.Where(s => s.IsMultiple == true || s.OrgStructureID == orgstructureID);
                    queryAbleAttendanceTableItem = queryAbleAttendanceTableItem.Where(s => s.OrgStructureID == orgstructureID);
                    queryAbleAtt_ProfileTimeSheet = queryAbleAtt_ProfileTimeSheet.Where(s => s.OrgStructureTransID == orgstructureID);
                    queryAblePerformanceAllowance = queryAblePerformanceAllowance.Where(s => s.OrgStructureID == orgstructureID);
                }
                if (TotalData600.dicFieldConfigForGroup.ContainsKey(fieldPositionID))
                {
                    queryAbleAttendanceTableItemMulti = queryAbleAttendanceTableItemMulti.Where(s => s.IsMultiple == true || s.PositionID == positionID);
                    queryAbleAttendanceTableItem = queryAbleAttendanceTableItem.Where(s => s.PositionID == positionID);
                    queryAbleAtt_ProfileTimeSheet = queryAbleAtt_ProfileTimeSheet.Where(s => s.PositionTransID == positionID);
                    queryAblePerformanceAllowance = queryAblePerformanceAllowance.Where(s => s.PositionID == positionID);
                }
                if (TotalData600.dicFieldConfigForGroup.ContainsKey(fieldShopID))
                {
                    queryAbleAttendanceTableItemMulti = queryAbleAttendanceTableItemMulti.Where(s => s.IsMultiple == true || s.ShopID == shopID);
                    queryAbleAttendanceTableItem = queryAbleAttendanceTableItem.Where(s => s.ShopID == shopID);
                    queryAbleAtt_ProfileTimeSheet = queryAbleAtt_ProfileTimeSheet.Where(s => s.ShopTransID == shopID);
                    queryAblePerformanceAllowance = queryAblePerformanceAllowance.Where(s => s.ShopID == shopID);
                }
            }


            #region [02/11/2017][bang.nguyen][89526][New Func] Giờ công thực tế theo nhóm,Giờ nghỉ có trả lương theo nhóm
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, new string[] { PayrollElementGroup.ELEMENT_GROUP_ATT_WORKING_HOUR.ToString(),
            PayrollElementGroup.ELEMENT_GROUP_ATT_TOTAL_PAID_LEAVEDAY_DAY.ToString() }))
            {
                double workingHour = 0;
                double paidLeaveDay = 0;
                //co cau hinh
                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItemMulti.Where(
                        s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);

                    var queryAbleAtt_ProfileTimeSheetByEnum = queryAbleAtt_ProfileTimeSheet.Where(
                        s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);

                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();
                    var listProfileTimeSheetByPro = queryAbleAtt_ProfileTimeSheetByEnum.ToList();

                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                    {
                        if (objAttendanceTableItemByPro.IsMultiple == true)
                        {
                            var listProfileTimeSheetByWorkDate = listProfileTimeSheetByPro.Where(
                                s => s.WorkDate >= objAttendanceTableItemByPro.WorkDate && s.WorkDate <= objAttendanceTableItemByPro.WorkDate).ToList();
                            if (listProfileTimeSheetByWorkDate.Count > 0)
                            {
                                workingHour += listProfileTimeSheetByWorkDate.Where(s => s.ActualHours != null).Sum(s => s.ActualHours.Value);
                                paidLeaveDay += listProfileTimeSheetByWorkDate.Where(s => s.LeaveHours != null).Sum(s => s.LeaveHours.Value);
                            }
                        }
                        else
                        {
                            workingHour += objAttendanceTableItemByPro.WorkPaidHours;
                            paidLeaveDay += objAttendanceTableItemByPro.PaidLeaveHours;
                        }
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                        s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                    var listProfileTimeSheetByPro = TotalDataAll.ListAtt_ProfileTimeSheet.Where(
                        s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd
                        && s.OrgStructureTransID == orgstructureID
                        && s.PositionTransID == positionID
                        && s.ShopTransID == shopID
                        ).ToList();

                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                    {
                        if (objAttendanceTableItemByPro.IsMultiple == true)
                        {
                            var listProfileTimeSheetByWorkDate = listProfileTimeSheetByPro.Where(
                                s => s.WorkDate >= objAttendanceTableItemByPro.WorkDate && s.WorkDate <= objAttendanceTableItemByPro.WorkDate).ToList();
                            if (listProfileTimeSheetByWorkDate.Count > 0)
                            {
                                workingHour += listProfileTimeSheetByWorkDate.Where(s => s.ActualHours != null).Sum(s => s.ActualHours.Value);
                                paidLeaveDay += listProfileTimeSheetByWorkDate.Where(s => s.LeaveHours != null).Sum(s => s.LeaveHours.Value);
                            }
                        }
                        else
                        {
                            if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                            {
                                workingHour += objAttendanceTableItemByPro.WorkPaidHours;
                                paidLeaveDay += objAttendanceTableItemByPro.PaidLeaveHours;
                            }
                        }
                    }
                }

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_WORKING_HOUR.ToString(), workingHour, 0);
                listElementFormulaForElementGroup.Add(item);

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_TOTAL_PAID_LEAVEDAY_DAY.ToString(), paidLeaveDay, 0);
                listElementFormulaForElementGroup.Add(item);
            }

            #endregion

            #region Tung.Tran [17/03/2022][140326]: Thêm enum lương nhóm Kiểm tra giá trị lớn nhất
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula,  PayrollElementGroup.ELEMENT_GROUP_CHECK_WORKPAIDHOURS_HTC.ToString()))
            {
                var isMax = 0;
                //Lấy danh sách dữ liệu công chi tiết của nhân viên
                var listAttItem = TotalDataAll.dicAttendanceTableItemGroupByProfile
                    .GetValueOrNew(profileItem.ID)
                    .Where(x => x.WorkDate >= CutOffDuration.DateStart && x.WorkDate <= CutOffDuration.DateEnd)
                    .ToList();
                
                var listProfileTimeSheetByPro = TotalDataAll.dicAtt_ProfileTimeSheet
                        .GetValueOrNew(profileItem.ID)
                        .Where(x => x.WorkDate >= CutOffDuration.DateStart && x.WorkDate <= CutOffDuration.DateEnd)
                        .ToList();

                //Group lại theo từng phòng ban trong tháng làm việc
                var listAttItemGroupByOrgID = listAttItem.GroupBy(x => x.OrgStructureID).ToDictionary(x => x.Key, x => x.ToList());
                var listValueCompare = new Dictionary<Guid?, double>();

                //For từng phòng ban, tính toán số giờ làm việc của từng phòng ban
                foreach (var orgID in listAttItemGroupByOrgID.Keys)
                {
                    double workingHour = 0;

                    foreach (var itemAttItem in listAttItemGroupByOrgID[orgID])
                    {
                        if (itemAttItem.IsMultiple == true)
                        {
                            var listProfileTimeSheetByWorkDate = listProfileTimeSheetByPro.Where(
                                s => s.WorkDate >= itemAttItem.WorkDate && s.WorkDate <= itemAttItem.WorkDate).ToList();
                            if (listProfileTimeSheetByWorkDate.Count > 0)
                            {
                                workingHour += listProfileTimeSheetByWorkDate.Where(s => s.ActualHours != null).Sum(s => s.ActualHours.Value);
                            }
                        }
                        else
                        {
                            workingHour += itemAttItem.WorkPaidHours;
                        }
                    }
                    //Lưu lại kết quả từng phòng ban
                    listValueCompare.Add(orgID, workingHour);
                }

                var maxOrgID = listValueCompare.Aggregate((l, r) => l.Value > r.Value ? l : r).Key;
                if (maxOrgID == orgstructureID)
                {
                    isMax = 1;
                }

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_CHECK_WORKPAIDHOURS_HTC.ToString(), isMax, 0);
                listElementFormulaForElementGroup.Add(item);
            }

            #endregion


            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, new string[] { PayrollElementGroup.ELEMENT_GROUP_ATT_WORKING_PAIDLEAVE_DAY_1.ToString(),
                PayrollElementGroup.ELEMENT_GROUP_ATT_WORKING_PAIDLEAVE_DAY_2.ToString(), PayrollElementGroup.ELEMENT_GROUP_ATT_TOTAL_PAID_LEAVEDAY_DAY1.ToString(),
                PayrollElementGroup.ELEMENT_GROUP_ATT_TOTAL_PAID_LEAVEDAY_DAY2.ToString()}))
            {
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {

                    if (TotalData600.dicFieldConfigForGroup.Count > 0)
                    {
                        // Có cấu hình 
                        double workingPaidLeaveDay1 = 0;
                        double totalPaidLeaveDay1 = 0;
                        double workingPaidLeaveDay2 = 0;
                        double totalPaidLeaveDay2 = 0;

                        var listAttendanceTableItemByPro = queryAbleAttendanceTableItemMulti.Where(
                        s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        var queryAbleAtt_ProfileTimeSheetByEnum = queryAbleAtt_ProfileTimeSheet.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd
                        );

                        var listProfileTimeSheetByPro = queryAbleAtt_ProfileTimeSheetByEnum.ToList();

                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                        //Lấy dòng gần nhất từ đầu tháng trở đi, để đáp ứng trường hợp 1 tháng thay đổi nhiều lần
                        DateTime dateChangeSalary = SalaryProfile.Where(m => m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd)
                            .OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                        var listAttendanceTableItemLastChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate < dateChangeSalary).ToList();

                        //duyet qua cac dong truoc thay doi luong
                        #region duyet qua cac dong truoc thay doi luong
                        foreach (var objAttendanceTableItemByPro in listAttendanceTableItemLastChangeBasicSalary)
                        {
                            if (objAttendanceTableItemByPro.IsMultiple == true)
                            {
                                var listProfileTimeSheetByWorkDate = listProfileTimeSheetByPro.Where(
                                    s => s.WorkDate >= objAttendanceTableItemByPro.WorkDate && s.WorkDate <= objAttendanceTableItemByPro.WorkDate).ToList();
                                if (listProfileTimeSheetByWorkDate.Count > 0)
                                {
                                    workingPaidLeaveDay1 += listProfileTimeSheetByWorkDate.Where(s => s.ActualHours != null).Sum(s => s.ActualHours.Value);
                                    totalPaidLeaveDay1 += listProfileTimeSheetByWorkDate.Where(s => s.LeaveHours != null).Sum(s => s.LeaveHours.Value);
                                }
                            }
                            else
                            {
                                workingPaidLeaveDay1 += objAttendanceTableItemByPro.WorkPaidHours;
                                totalPaidLeaveDay1 += objAttendanceTableItemByPro.PaidLeaveHours;
                            }
                        }
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_WORKING_PAIDLEAVE_DAY_1.ToString(), workingPaidLeaveDay1, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_TOTAL_PAID_LEAVEDAY_DAY1.ToString(), totalPaidLeaveDay1, 0);
                        listElementFormulaForElementGroup.Add(item);
                        #endregion

                        #region duyet qua cac dong sau thay doi luong
                        var listAttendanceTableItemAfterChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= dateChangeSalary && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        //duyet qua cac dong truoc thay doi luong
                        foreach (var objAttendanceTableItemByPro in listAttendanceTableItemAfterChangeBasicSalary)
                        {
                            if (objAttendanceTableItemByPro.IsMultiple == true)
                            {
                                var listProfileTimeSheetByWorkDate = listProfileTimeSheetByPro.Where(
                                    s => s.WorkDate >= objAttendanceTableItemByPro.WorkDate && s.WorkDate <= objAttendanceTableItemByPro.WorkDate).ToList();
                                if (listProfileTimeSheetByWorkDate.Count > 0)
                                {
                                    workingPaidLeaveDay2 += listProfileTimeSheetByWorkDate.Where(s => s.ActualHours != null).Sum(s => s.ActualHours.Value);
                                    totalPaidLeaveDay2 += listProfileTimeSheetByWorkDate.Where(s => s.LeaveHours != null).Sum(s => s.LeaveHours.Value);
                                }
                            }
                            else
                            {
                                workingPaidLeaveDay2 += objAttendanceTableItemByPro.WorkPaidHours;
                                totalPaidLeaveDay2 += objAttendanceTableItemByPro.PaidLeaveHours;
                            }
                        }
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_WORKING_PAIDLEAVE_DAY_2.ToString(), workingPaidLeaveDay2, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_TOTAL_PAID_LEAVEDAY_DAY2.ToString(), totalPaidLeaveDay2, 0);
                        listElementFormulaForElementGroup.Add(item);
                        #endregion
                    }
                    else
                    {
                        double workingPaidLeaveDay1 = 0;
                        double totalPaidLeaveDay1 = 0;
                        double workingPaidLeaveDay2 = 0;
                        double totalPaidLeaveDay2 = 0;

                        var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                        s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        var listProfileTimeSheetByPro = TotalDataAll.ListAtt_ProfileTimeSheet.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd
                            && s.OrgStructureTransID == orgstructureID
                            && s.PositionTransID == positionID
                            && s.ShopTransID == shopID
                            ).ToList();

                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                        //Lấy dòng gần nhất từ đầu tháng trở đi, để đáp ứng trường hợp 1 tháng thay đổi nhiều lần
                        DateTime dateChangeSalary = SalaryProfile.Where(m => m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd)
                            .OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                        var listAttendanceTableItemLastChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate < dateChangeSalary).ToList();

                        //duyet qua cac dong truoc thay doi luong
                        #region duyet qua cac dong truoc thay doi luong
                        foreach (var objAttendanceTableItemByPro in listAttendanceTableItemLastChangeBasicSalary)
                        {
                            if (objAttendanceTableItemByPro.IsMultiple == true)
                            {
                                var listProfileTimeSheetByWorkDate = listProfileTimeSheetByPro.Where(
                                    s => s.WorkDate >= objAttendanceTableItemByPro.WorkDate && s.WorkDate <= objAttendanceTableItemByPro.WorkDate).ToList();
                                if (listProfileTimeSheetByWorkDate.Count > 0)
                                {
                                    workingPaidLeaveDay1 += listProfileTimeSheetByWorkDate.Where(s => s.ActualHours != null).Sum(s => s.ActualHours.Value);
                                    totalPaidLeaveDay1 += listProfileTimeSheetByWorkDate.Where(s => s.LeaveHours != null).Sum(s => s.LeaveHours.Value);
                                }
                            }
                            else
                            {
                                if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                {
                                    workingPaidLeaveDay1 += objAttendanceTableItemByPro.WorkPaidHours;
                                    totalPaidLeaveDay1 += objAttendanceTableItemByPro.PaidLeaveHours;
                                }
                            }
                        }
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_WORKING_PAIDLEAVE_DAY_1.ToString(), workingPaidLeaveDay1, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_TOTAL_PAID_LEAVEDAY_DAY1.ToString(), totalPaidLeaveDay1, 0);
                        listElementFormulaForElementGroup.Add(item);
                        #endregion

                        #region duyet qua cac dong sau thay doi luong
                        var listAttendanceTableItemAfterChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= dateChangeSalary && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        //duyet qua cac dong truoc thay doi luong
                        foreach (var objAttendanceTableItemByPro in listAttendanceTableItemAfterChangeBasicSalary)
                        {
                            if (objAttendanceTableItemByPro.IsMultiple == true)
                            {
                                var listProfileTimeSheetByWorkDate = listProfileTimeSheetByPro.Where(
                                    s => s.WorkDate >= objAttendanceTableItemByPro.WorkDate && s.WorkDate <= objAttendanceTableItemByPro.WorkDate).ToList();
                                if (listProfileTimeSheetByWorkDate.Count > 0)
                                {
                                    workingPaidLeaveDay2 += listProfileTimeSheetByWorkDate.Where(s => s.ActualHours != null).Sum(s => s.ActualHours.Value);
                                    totalPaidLeaveDay2 += listProfileTimeSheetByWorkDate.Where(s => s.LeaveHours != null).Sum(s => s.LeaveHours.Value);
                                }
                            }
                            else
                            {
                                if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                {
                                    workingPaidLeaveDay2 += objAttendanceTableItemByPro.WorkPaidHours;
                                    totalPaidLeaveDay2 += objAttendanceTableItemByPro.PaidLeaveHours;
                                }
                            }
                        }
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_WORKING_PAIDLEAVE_DAY_2.ToString(), workingPaidLeaveDay2, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_TOTAL_PAID_LEAVEDAY_DAY2.ToString(), totalPaidLeaveDay2, 0);
                        listElementFormulaForElementGroup.Add(item);
                        #endregion
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_WORKING_PAIDLEAVE_DAY_1.ToString(), 0, 0);
                    listElementFormulaForElementGroup.Add(item);
                    item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_TOTAL_PAID_LEAVEDAY_DAY1.ToString(), 0, 0);
                    listElementFormulaForElementGroup.Add(item);
                    item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_WORKING_PAIDLEAVE_DAY_2.ToString(), 0, 0);
                    listElementFormulaForElementGroup.Add(item);
                    item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_TOTAL_PAID_LEAVEDAY_DAY2.ToString(), 0, 0);
                    listElementFormulaForElementGroup.Add(item);
                }
            }

            #region [02/11/2017][bang.nguyen][89526][New Func] Mã chức vụ của nhóm bảng lương theo nhóm
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_SAL_POSITION_CODE.ToString()))
            {

                string codePosition = string.Empty;

                if (objGroupValueForPayrollGroupTable.PositionID != null)
                {
                    var objPosition = TotalDataAll.listPosition.Where(s => s.ID == objGroupValueForPayrollGroupTable.PositionID).FirstOrDefault();
                    if (objPosition != null && !string.IsNullOrEmpty(objPosition.Code))
                    {
                        codePosition = objPosition.Code;
                    }
                }

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SAL_POSITION_CODE.ToString(), codePosition, 0);
                listElementFormulaForElementGroup.Add(item);
            }

            #endregion

            #region [18/12/2017][bang.nguyen][91106][	New Func] lương theo năng suất cửa hàng
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_SAL_PERFORMANCE_ALLOWANCE.ToString()))
            {
                double amount = 0;

                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    if (TotalDataAll.ListPerformanceAllowance != null)
                    {
                        var queryAblePerformanceAllowanceByEnum = queryAblePerformanceAllowance.Where(s => s.CutOffDurationID != null
                            && s.CutOffDurationID.Value == CutOffDuration.ID
                            && s.ProfileID == profileItem.ID);

                        var objPerformanceAllowance = queryAblePerformanceAllowanceByEnum.FirstOrDefault();

                        if (objPerformanceAllowance != null && objPerformanceAllowance.Amount != null)
                        {
                            amount = objPerformanceAllowance.Amount.Value;
                        }
                    }
                }
                else
                {
                    var objPerformanceAllowance = TotalDataAll.ListPerformanceAllowance
                       .Where(s => s.CutOffDurationID != null
                       && s.CutOffDurationID.Value == CutOffDuration.ID
                       && s.OrgStructureID == orgstructureID
                       && s.PositionID == positionID
                       && s.ShopID == shopID
                       && s.ProfileID == profileItem.ID)
                       .FirstOrDefault();
                    if (objPerformanceAllowance != null && objPerformanceAllowance.Amount != null)
                    {
                        amount = objPerformanceAllowance.Amount.Value;
                    }
                }

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SAL_PERFORMANCE_ALLOWANCE.ToString(), amount, 0);
                listElementFormulaForElementGroup.Add(item);
            }

            #endregion

            #region [06/01/2017][bang.nguyen][92019][Modify Func] Mã cửa hàng làm việc
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, new string[] { PayrollElementGroup.ELEMENT_GROUP_ATT_SHOP_CODE.ToString(), PayrollElementGroup.ELEMENT_GROUP_ATT_SHOP_NOTE.ToString() }))
            {
                string attShopCode = string.Empty;
                string attShopNote = string.Empty;

                if (objGroupValueForPayrollGroupTable.ShopID != null)
                {
                    var objShop = TotalDataAll.listShop.Where(s => s.ID == objGroupValueForPayrollGroupTable.ShopID).FirstOrDefault();
                    if (objShop != null && !string.IsNullOrEmpty(objShop.Code))
                    {
                        attShopCode = objShop.Code;
                    }
                    if (objShop != null && !string.IsNullOrEmpty(objShop.Note))
                    {
                        attShopNote = objShop.Note;
                    }
                }

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_SHOP_CODE.ToString(), attShopCode, 0);
                listElementFormulaForElementGroup.Add(item);
                //[16/01/2018][bang.nguyen][92409][Modify Func]
                //ghi chú cửa hàng làm việc
                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_SHOP_NOTE.ToString(), attShopNote, 0);
                listElementFormulaForElementGroup.Add(item);
            }

            #endregion

            #region Tung.Tran [05072018][0096165] Phần tử lương vùng đăng tuyển + Lương vùng làm việc
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, new string[] { PayrollElementGroup.ELEMENT_GROUP_HRE_PROFILE_AREAPOSTJOBID_CODE.ToString(), PayrollElementGroup.ELEMENT_GROUP_HRE_WORKHISTORY_AREAPOSTJOBWORKID_CODE.ToString() }))
            {
                string areaPostJobCode = string.Empty;
                string areaPostJobWorkCode = string.Empty;

                if (profileItem != null)
                {
                    if (profileItem.AreaPostJobID != null && profileItem.AreaPostJobID != Guid.Empty)
                    {
                        var nameEntityAreaPostJob = TotalDataAll.ListCat_NameEntity.Where(a => a.ID == profileItem.AreaPostJobID).FirstOrDefault();
                        areaPostJobCode = nameEntityAreaPostJob != null ? nameEntityAreaPostJob.Code : string.Empty;
                    }
                }

                var objWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                .Where(s => s.DateEffective <= CutOffDuration.DateEnd && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                .OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (objWorkHistory != null)
                {

                    if (objWorkHistory.AreaPostJobWorkID != null && objWorkHistory.AreaPostJobWorkID != Guid.Empty)
                    {
                        var nameEntityAreaPostJobWork = TotalDataAll.ListCat_NameEntity.Where(a => a.ID == objWorkHistory.AreaPostJobWorkID).FirstOrDefault();
                        areaPostJobWorkCode = nameEntityAreaPostJobWork != null ? nameEntityAreaPostJobWork.Code : string.Empty;
                    }
                }

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_HRE_PROFILE_AREAPOSTJOBID_CODE.ToString(), areaPostJobCode, 0);
                listElementFormulaForElementGroup.Add(item);

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_HRE_WORKHISTORY_AREAPOSTJOBWORKID_CODE.ToString(), areaPostJobWorkCode, 0);
                listElementFormulaForElementGroup.Add(item);
            }

            #endregion

            #region [06/11/2018][tung.tran][0100710][New Func] Số dòng công của từng nhóm (lương theo năng suất cửa hàng)
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_COUNTROWGROUP.ToString()))
            {
                int countWorkingHour = 0;


                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    var listAttendanceTableItemByPro = queryAbleAttendanceTableItemMulti.Where(
                               s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                    var queryAbleAtt_ProfileTimeSheetByEnum = queryAbleAtt_ProfileTimeSheet.Where(
                        s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);

                    var listProfileTimeSheetByPro = queryAbleAtt_ProfileTimeSheetByEnum.ToList();

                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                    {
                        if (objAttendanceTableItemByPro.IsMultiple == true)
                        {
                            var listProfileTimeSheetByWorkDate = listProfileTimeSheetByPro.Where(
                                s => s.WorkDate >= objAttendanceTableItemByPro.WorkDate && s.WorkDate <= objAttendanceTableItemByPro.WorkDate).ToList();

                            if (listProfileTimeSheetByWorkDate.Count > 0)
                            {
                                countWorkingHour += listProfileTimeSheetByWorkDate.Count;
                            }
                        }
                        else
                        {
                            countWorkingHour++;
                        }
                    }
                }
                else
                {
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                    var listProfileTimeSheetByPro = TotalDataAll.ListAtt_ProfileTimeSheet.Where(
                                    s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd
                                    && s.OrgStructureTransID == orgstructureID
                                    && s.PositionTransID == positionID
                                    && s.ShopTransID == shopID
                                    ).ToList();

                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                    {
                        if (objAttendanceTableItemByPro.IsMultiple == true)
                        {
                            var listProfileTimeSheetByWorkDate = listProfileTimeSheetByPro.Where(
                                s => s.WorkDate >= objAttendanceTableItemByPro.WorkDate && s.WorkDate <= objAttendanceTableItemByPro.WorkDate).ToList();
                            if (listProfileTimeSheetByWorkDate.Count > 0)
                            {
                                countWorkingHour += listProfileTimeSheetByWorkDate.Count;
                            }
                        }
                        else
                        {
                            if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID)
                            {
                                countWorkingHour++;
                            }
                        }
                    }
                }

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_COUNTROWGROUP.ToString(), countWorkingHour, 0);
                listElementFormulaForElementGroup.Add(item);
            }

            #endregion

            #region Tung.Tran[26/11/2018][101338]: Mã chế độ công của nhóm, Lấy top 1 Att_AttendanceTableItem.GradeAttendanceID->Cat_GradeAttendance.Code
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_ATT_ATTENDANCETABLEITEM_GRADEATTENDANCECODE.ToString()))
            {
                var gradeAttendanceCode = string.Empty;

                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    // Lấy bảng công của nhân viên ứng với từng nhóm
                    var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                        s => s.ProfileID == profileItem.ID
                        && s.WorkDate >= CutOffDuration.DateStart
                        && s.WorkDate <= CutOffDuration.DateEnd);
                    var attendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.OrderBy(x => x.WorkDate).FirstOrDefault();

                    if (attendanceTableItemByPro != null && !Common.IsNullOrGuidEmpty(attendanceTableItemByPro.GradeAttendanceID))
                    {
                        var objGradeAttendance = TotalDataAll.ListCat_GradeAttendance.FirstOrDefault(x => x.ID == attendanceTableItemByPro.GradeAttendanceID);
                        if (objGradeAttendance != null && !string.IsNullOrEmpty(objGradeAttendance.Code))
                        {
                            gradeAttendanceCode = objGradeAttendance.Code;
                        }
                    }
                }
                else
                {
                    // Lấy bảng công của nhân viên ứng với từng nhóm
                    var attendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                        s => s.WorkDate >= CutOffDuration.DateStart
                        && s.WorkDate <= CutOffDuration.DateEnd
                        && s.ShopID == shopID
                        && s.OrgStructureID == orgstructureID
                        && s.PositionID == positionID
                        ).OrderBy(x => x.WorkDate).FirstOrDefault();
                    if (attendanceTableItemByPro != null && !Common.IsNullOrGuidEmpty(attendanceTableItemByPro.GradeAttendanceID))
                    {
                        var objGradeAttendance = TotalDataAll.ListCat_GradeAttendance.FirstOrDefault(x => x.ID == attendanceTableItemByPro.GradeAttendanceID);
                        if (objGradeAttendance != null && !string.IsNullOrEmpty(objGradeAttendance.Code))
                        {
                            gradeAttendanceCode = objGradeAttendance.Code;
                        }
                    }
                }

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_ATTENDANCETABLEITEM_GRADEATTENDANCECODE.ToString(), gradeAttendanceCode, 0);
                listElementFormulaForElementGroup.Add(item);
            }
            #endregion

            #region Tung.Tran[26/11/2018][101338]: Giờ công chuẩn của nhóm, Lấy top 1 Att_AttendanceTableItem.StdWorkDayCount
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_ATT_ATTENDANCETABLEITEM_STDWORKDAYCOUNT.ToString()))
            {
                double stdWorkDayCount = 0;

                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    // Lấy bảng công của nhân viên ứng với từng nhóm
                    var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                        s => s.ProfileID == profileItem.ID
                        && s.WorkDate >= CutOffDuration.DateStart
                        && s.WorkDate <= CutOffDuration.DateEnd);
                    var attendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.OrderBy(x => x.WorkDate).FirstOrDefault();
                    if (attendanceTableItemByPro != null && attendanceTableItemByPro.StdWorkDayCount != null)
                    {
                        stdWorkDayCount = attendanceTableItemByPro.StdWorkDayCount.Value;
                    }
                }
                else
                {
                    // Lấy bảng công của nhân viên ứng với từng nhóm
                    var attendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                        s => s.WorkDate >= CutOffDuration.DateStart
                        && s.WorkDate <= CutOffDuration.DateEnd
                        && s.ShopID == shopID
                        && s.OrgStructureID == orgstructureID
                        && s.PositionID == positionID
                        ).OrderBy(x => x.WorkDate).FirstOrDefault();
                    if (attendanceTableItemByPro != null && attendanceTableItemByPro.StdWorkDayCount != null)
                    {
                        stdWorkDayCount = attendanceTableItemByPro.StdWorkDayCount.Value;
                    }
                }

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ATT_ATTENDANCETABLEITEM_STDWORKDAYCOUNT.ToString(), stdWorkDayCount, 0);
                listElementFormulaForElementGroup.Add(item);
            }
            #endregion

            #region [Tung.Tran][04/12/2018][0101457]: Phần tử lương nhóm mã chi phí phòng ban	
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_CAT_COSTCENTRE_CODE.ToString()))
            {
                // Lấy dữ liệu danh mục bảng Cat_CostCentre
                string status = string.Empty;
                string nameTableGetData = "listCostCentre";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listCostCentre = getDataComputePayrollServices.GetCostCentre(ref status);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }
                //Trường hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElementGroup.ELEMENT_GROUP_CAT_COSTCENTRE_CODE.ToString() + ") ";
                    item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_CAT_COSTCENTRE_CODE.ToString(), 0, 0, string.Empty);
                    listElementFormulaForElementGroup.Add(item);
                }
                else
                {
                    string costCenTreCode = string.Empty;
                    var objOrgStructure = TotalDataAll.listOrgStructure.FirstOrDefault(x => x.ID == orgstructureID);
                    if (objOrgStructure != null && !string.IsNullOrEmpty(objOrgStructure.GroupCostCentreID))
                    {
                        Guid GroupCostCentreID = Guid.Empty;
                        Guid.TryParse(objOrgStructure.GroupCostCentreID, out GroupCostCentreID);
                        var objCostCenTre = TotalData600.listCostCentre.FirstOrDefault(x => x.ID == GroupCostCentreID);
                        if (objCostCenTre != null && !string.IsNullOrEmpty(objCostCenTre.Code))
                        {
                            costCenTreCode = objCostCenTre.Code;
                        }
                    }
                    item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_CAT_COSTCENTRE_CODE.ToString(), costCenTreCode, 0);
                    listElementFormulaForElementGroup.Add(item);
                }
            }

            #endregion

            #region [Hien.Le][12/06/2019][0106259]: Phần tử lương nhóm mã chi phí phòng ban mới nhất	
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_CAT_COSTCENTRE_CODE_NEW.ToString()))
            {
                // Lấy dữ liệu danh mục bảng Cat_CostCentre
                string status = string.Empty;
                string nameTableGetData = "listCostCentre";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listCostCentre = getDataComputePayrollServices.GetCostCentre(ref status);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }
                //Trường hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElementGroup.ELEMENT_GROUP_CAT_COSTCENTRE_CODE_NEW.ToString() + ") ";
                    item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_CAT_COSTCENTRE_CODE_NEW.ToString(), 0, 0, string.Empty);
                    listElementFormulaForElementGroup.Add(item);
                }
                else
                {
                    string costCenTreCode = string.Empty;
                    var objOrgStructure = TotalDataAll.listOrgStructure.FirstOrDefault(x => x.ID == profileItem.OrgStructureID);
                    if (objOrgStructure != null && !string.IsNullOrEmpty(objOrgStructure.GroupCostCentreID))
                    {
                        Guid GroupCostCentreID = Guid.Empty;
                        Guid.TryParse(objOrgStructure.GroupCostCentreID, out GroupCostCentreID);
                        var objCostCenTre = TotalData600.listCostCentre.FirstOrDefault(x => x.ID == GroupCostCentreID);
                        if (objCostCenTre != null && !string.IsNullOrEmpty(objCostCenTre.Code))
                        {
                            costCenTreCode = objCostCenTre.Code;
                        }
                    }
                    item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_CAT_COSTCENTRE_CODE_NEW.ToString(), costCenTreCode, 0);
                    listElementFormulaForElementGroup.Add(item);
                }
            }

            #endregion

            #region Tung.Tran[26/11/2018][101338]: Mã chế độ công của nhóm, Lấy top 1 Att_AttendanceTableItem.GradeAttendanceID->Cat_GradeAttendance.Code
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, new string[] {
                PayrollElementGroup.ELEMENT_GROUP_COUNT_ATT_WORKHOURS.ToString(),
                PayrollElementGroup.ELEMENT_GROUP_COUNT_ATT_LEAVEWORKDAYHOUR.ToString(),
                PayrollElementGroup.ELEMENT_GROUP_COUNT_ATT_NIGHTSHIFTHOUR.ToString()
            }))
            {
                double countWorkHour = 0;
                double countLeaveWorkDayHour = 0;
                double countNightShiftHours = 0;

                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    if (queryAbleAttendanceTableItem != null && queryAbleAttendanceTableItem.Count() > 0)
                    {
                        countWorkHour = queryAbleAttendanceTableItem.ToList().Sum(x => x.WorkHours);
                        countLeaveWorkDayHour = queryAbleAttendanceTableItem.Where(x => x.LeaveWorkDayHour != null).ToList().Sum(x => x.LeaveWorkDayHour.Value);
                        countNightShiftHours = queryAbleAttendanceTableItem.ToList().Sum(x => x.NightShiftHours);
                    }
                }
                else
                {
                    // Lấy bảng công của nhân viên ứng với từng nhóm
                    var attendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                        s => s.ShopID == shopID
                        && s.OrgStructureID == orgstructureID
                        && s.PositionID == positionID
                        ).ToList();
                    if (attendanceTableItemByPro != null && attendanceTableItemByPro.Count() > 0)
                    {
                        countWorkHour = attendanceTableItemByPro.Sum(x => x.WorkHours);
                        countLeaveWorkDayHour = attendanceTableItemByPro.Where(x => x.LeaveWorkDayHour != null).Sum(x => x.LeaveWorkDayHour.Value);
                        countNightShiftHours = attendanceTableItemByPro.Sum(x => x.NightShiftHours);
                    }
                }

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_COUNT_ATT_WORKHOURS.ToString(), countWorkHour, 0);
                listElementFormulaForElementGroup.Add(item);

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_COUNT_ATT_LEAVEWORKDAYHOUR.ToString(), countLeaveWorkDayHour, 0);
                listElementFormulaForElementGroup.Add(item);

                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_COUNT_ATT_NIGHTSHIFTHOUR.ToString(), countNightShiftHours, 0);
                listElementFormulaForElementGroup.Add(item);
            }
            #endregion

            #region Phần tử nhóm động

            //[17/01/2018][bang.nguyen][0092408][Modify Func]
            //Phụ cấp lương nhóm theo loại
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN_ATT_ATTENDANCETABLEITEM_OVERTIMETYPE_.ToString(), "_BYOVERTIMETYPE"))
            {
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN_ATT_ATTENDANCETABLEITEM_OVERTIMETYPE_.ToString();
                var strEndWith = "_BYOVERTIMETYPE";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();

                if (TotalData600.dicFieldConfigForGroup.Count > 0)
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        var _formula = formulaitem;
                        double totalCount = 0;
                        var codeOverTimeType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                        var objOverTimeType = TotalDataAll.listOvertimeType.Where(s => s.Code == codeOverTimeType).FirstOrDefault();
                        if (queryAbleAttendanceTableItem.ToList().Count > 0 && objOverTimeType != null)
                        {

                            foreach (var tableItem in queryAbleAttendanceTableItem.ToList())
                            {
                                if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == objOverTimeType.ID)
                                {
                                    totalCount += tableItem.OvertimeHours;
                                }
                                if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == objOverTimeType.ID)
                                {
                                    totalCount += tableItem.ExtraOvertimeHours;
                                }
                                if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == objOverTimeType.ID)
                                {
                                    totalCount += tableItem.ExtraOvertimeHours2;
                                }
                                if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == objOverTimeType.ID)
                                {
                                    totalCount += tableItem.ExtraOvertimeHours3;
                                }
                                //[27/06/2017][bang.nguyen][83774][Modify Func]
                                if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == objOverTimeType.ID)
                                {
                                    totalCount += tableItem.ExtraOvertimeHours4.Value;
                                }
                            }
                            item = new ElementFormula(_formula, totalCount, 0);
                            listElementFormulaForElementGroup.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                        else
                        {
                            item = new ElementFormula(_formula, 0, 0);
                            listElementFormulaForElementGroup.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
                else
                {
                    //[02/02/2018][bang.nguyen][0092819][modify]
                    var attendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                        s => s.ShopID == shopID
                        && s.OrgStructureID == orgstructureID
                        && s.PositionID == positionID
                        ).ToList();
                    if (attendanceTableItemByPro.Count > 0)
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            double totalCount = 0;
                            var codeOverTimeType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                            var objOverTimeType = TotalDataAll.listOvertimeType.Where(s => s.Code == codeOverTimeType).FirstOrDefault();
                            if (objOverTimeType != null)
                            {
                                foreach (var tableItem in queryAbleAttendanceTableItem)
                                {
                                    if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == objOverTimeType.ID)
                                    {
                                        totalCount += tableItem.OvertimeHours;
                                    }
                                    if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == objOverTimeType.ID)
                                    {
                                        totalCount += tableItem.ExtraOvertimeHours;
                                    }
                                    if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == objOverTimeType.ID)
                                    {
                                        totalCount += tableItem.ExtraOvertimeHours2;
                                    }
                                    if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == objOverTimeType.ID)
                                    {
                                        totalCount += tableItem.ExtraOvertimeHours3;
                                    }
                                    //[27/06/2017][bang.nguyen][83774][Modify Func]
                                    if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == objOverTimeType.ID)
                                    {
                                        totalCount += tableItem.ExtraOvertimeHours4.Value;
                                    }
                                }
                                item = new ElementFormula(_formula, totalCount, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                            else
                            {
                                item = new ElementFormula(_formula, 0, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormulaForElementGroup.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
            }




            //[17/01/2018][bang.nguyen][0092408][Modify Func]
            //Phụ cấp lương nhóm theo loại
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN_SAL_PERFORMANCEALLOWANCE_AMOUNT_.ToString(), "_BYCODEUNUSUALALLOWANCECFG"))
            {
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN_SAL_PERFORMANCEALLOWANCE_AMOUNT_.ToString();
                var strEndWith = "_BYCODEUNUSUALALLOWANCECFG";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();

                if (TotalDataAll.ListPerformanceAllowance != null && TotalDataAll.ListPerformanceAllowance.Count > 0)
                {

                    if (TotalData600.dicFieldConfigForGroup.Count > 0)
                    {
                        //[02/02/2018][bang.nguyen][0092819][modify]
                        var queryAblePerformanceAllowanceByEnum = queryAblePerformanceAllowance.Where(s => s.ProfileID == profileItem.ID
                        && s.CutOffDurationID != null
                        && s.CutOffDurationID.Value == CutOffDuration.ID
                        && s.Amount != null);
                        var listPerformanceAllowanceByProAndGroup = queryAblePerformanceAllowanceByEnum.ToList();

                        if (listPerformanceAllowanceByProAndGroup.Count > 0)
                        {
                            foreach (var formulaitem in ListFormula)
                            {
                                var _formula = formulaitem;
                                double sumAmountPerformanceAllowance = 0;
                                var codeUnusualAllowanceCfg = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");

                                var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(s => s.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                                if (objUnusualAllowanceCfg != null)
                                {
                                    sumAmountPerformanceAllowance = listPerformanceAllowanceByProAndGroup.Where(s => s.UnusualAllowanceID == objUnusualAllowanceCfg.ID).Sum(s => s.Amount.Value);
                                }

                                item = new ElementFormula(_formula, sumAmountPerformanceAllowance, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                        else
                        {
                            foreach (var formulaitem in ListFormula)
                            {
                                item = new ElementFormula(formulaitem, 0, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                    }
                    else
                    {
                        //[02/02/2018][bang.nguyen][0092819][modify]
                        var listPerformanceAllowanceByProAndGroup = TotalDataAll.ListPerformanceAllowance.Where(s => s.ProfileID == profileItem.ID
                        && s.CutOffDurationID != null
                        && s.CutOffDurationID.Value == CutOffDuration.ID
                        && s.OrgStructureID == orgstructureID
                        && s.PositionID == positionID
                        && s.ShopID == shopID
                        && s.Amount != null).ToList();
                        if (listPerformanceAllowanceByProAndGroup.Count > 0)
                        {
                            foreach (var formulaitem in ListFormula)
                            {
                                var _formula = formulaitem;
                                double sumAmountPerformanceAllowance = 0;
                                var codeUnusualAllowanceCfg = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");

                                var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(s => s.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                                if (objUnusualAllowanceCfg != null)
                                {
                                    sumAmountPerformanceAllowance = listPerformanceAllowanceByProAndGroup.Where(s => s.UnusualAllowanceID == objUnusualAllowanceCfg.ID).Sum(s => s.Amount.Value);
                                }

                                item = new ElementFormula(_formula, sumAmountPerformanceAllowance, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                        else
                        {
                            foreach (var formulaitem in ListFormula)
                            {
                                item = new ElementFormula(formulaitem, 0, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormulaForElementGroup.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
            }

            // Tung.Tran [05072018][0096165] Phần tử lương vùng đăng tuyển + Lương vùng làm việc
            // DNY_SUM_AMOUNT_BY_FORMULA_ALLOWANCE_Mã phụ cấp phát sinh_GROUP
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN1_CAT_ALLOWANCECFGAREAPOSTJOBWORK_AMOUNT_.ToString(), "_GROUP"))
            {
                var status = string.Empty;
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN1_CAT_ALLOWANCECFGAREAPOSTJOBWORK_AMOUNT_.ToString();
                var strEndWith = "_GROUP";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                if (ListFormula.Any())
                {
                    string nameTableGetData = "listCat_AllowanceCfgAreaPostJobWork";
                    if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                    {
                        TotalData600.listCat_AllowanceCfgAreaPostJobWork = getDataComputePayrollServices.GetAllowanceCfgAreaPostJobWork(ref status);
                        TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                    }

                    if (!string.IsNullOrEmpty(status))
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormulaForElementGroup.Add(item);
                        }
                        TotalData600.statusBugStore += status + " (" + "ELEMENT_GROUP_DYN1_SUM_AMOUNT_BY_FORMULA_ALLOWANCE_" + ")";
                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            var codeUnusualAllowanceCfg = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                            var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(s => s.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                            if (objUnusualAllowanceCfg != null)
                            {
                                if (!string.IsNullOrEmpty(objUnusualAllowanceCfg.Formula))
                                {
                                    var result = GetStaticValuesFormulalAllowanceCfg(TotalDataAll, objUnusualAllowanceCfg.Formula, TotalData600, profileItem, CutOffDuration, objUnusualAllowanceCfg, objGroupValueForPayrollGroupTable);
                                    item = new ElementFormula(_formula, result.Value, 0);
                                    listElementFormulaForElementGroup.Add(item);
                                    //xoa cac enum da xu ly trong list enum tong
                                    formula.Remove(formulaitem);
                                }
                            }
                        }
                    }
                }
            }

            #region [04/02/2019][tung.tran][104032] Enum động : Sum số giờ nghỉ động theo mã loại ngày nghỉ
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN2_ATT_ATTENDANCETABLE_SUMLEAVEHOURS_.ToString(), "_GROUP"))
            {
                var status = string.Empty;
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN2_ATT_ATTENDANCETABLE_SUMLEAVEHOURS_.ToString();
                var strEndWith = "_GROUP";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                if (ListFormula.Any())
                {
                    if (TotalData600.dicFieldConfigForGroup.Count > 0)
                    {
                        var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);
                        var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();

                        foreach (var formulaitem in ListFormula)
                        {
                            double sumLeaveHours = 0;
                            var _formula = formulaitem;
                            var codeLeaveDayType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                            var objLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();
                            if (objLeaveDayType != null)
                            {
                                foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                                {

                                    if (objAttendanceTableItemByPro.LeaveTypeID == objLeaveDayType.ID)
                                    {
                                        sumLeaveHours += objAttendanceTableItemByPro.LeaveHours;
                                    }
                                    if (objAttendanceTableItemByPro.ExtraLeaveTypeID == objLeaveDayType.ID)
                                    {
                                        sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours;
                                    }
                                    if (objAttendanceTableItemByPro.ExtraLeaveType3ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours3 != null)
                                    {
                                        sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours3.Value;
                                    }
                                    if (objAttendanceTableItemByPro.ExtraLeaveType4ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours4 != null)
                                    {
                                        sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours4.Value;
                                    }
                                    if (objAttendanceTableItemByPro.ExtraLeaveType5ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours5 != null)
                                    {
                                        sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours5.Value;
                                    }
                                    if (objAttendanceTableItemByPro.ExtraLeaveType6ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours6 != null)
                                    {
                                        sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours6.Value;
                                    }
                                }
                            }
                            item = new ElementFormula(_formula, sumLeaveHours, 0);
                            listElementFormulaForElementGroup.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                    else
                    {
                        var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                              s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        foreach (var formulaitem in ListFormula)
                        {
                            double sumLeaveHours = 0;

                            var _formula = formulaitem;
                            var codeLeaveDayType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                            var objLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();
                            if (objLeaveDayType != null)
                            {
                                foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                                {
                                    if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                    {
                                        if (objAttendanceTableItemByPro.LeaveTypeID == objLeaveDayType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.LeaveHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveTypeID == objLeaveDayType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType3ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours3 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours3.Value;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType4ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours4 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours4.Value;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType5ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours5 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours5.Value;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType6ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours6 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours6.Value;
                                        }
                                    }
                                }
                            }

                            item = new ElementFormula(_formula, sumLeaveHours, 0);
                            listElementFormulaForElementGroup.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
            }
            #endregion

            #region [04/02/2019][tung.tran][104032] Enum động : Sum số giờ nghỉ động theo mã loại ngày nghỉ
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_OVERTIMHOURS_BEFORE_BY_.ToString(), "_GROUP"))
            {
                var status = string.Empty;
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_OVERTIMHOURS_BEFORE_BY_.ToString();
                var strEndWith = "_GROUP";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                if (ListFormula.Any())
                {
                    List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                    SalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();
                    if (CheckIsChangeBasicSalary(TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                    {
                        if (TotalData600.dicFieldConfigForGroup.Count > 0)
                        {
                            var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                                s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);
                            var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();

                            foreach (var formulaitem in ListFormula)
                            {
                                double sumLeaveHours = 0;
                                var _formula = formulaitem;
                                var codeOverTimeType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                var objOverTimeType = TotalDataAll.listOvertimeType.Where(s => s.Code == codeOverTimeType).FirstOrDefault();
                                if (objOverTimeType != null)
                                {
                                    DateTime dateChangeSalary = SalaryProfile.Where(m => m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd)
                                        .OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;
                                    var listAttendanceTableItemLastChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate < dateChangeSalary).ToList();

                                    //duyet qua cac dong truoc thay doi luong
                                    #region duyet qua cac dong truoc thay doi luong
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemLastChangeBasicSalary)
                                    {
                                        if (objAttendanceTableItemByPro.OvertimeTypeID == objOverTimeType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.OvertimeHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraOvertimeTypeID == objOverTimeType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraOvertimeType2ID == objOverTimeType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours2;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraOvertimeType3ID == objOverTimeType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours3;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraOvertimeType4ID == objOverTimeType.ID && objAttendanceTableItemByPro.ExtraOvertimeHours4 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours4.Value;
                                        }
                                    }
                                    #endregion
                                }
                                item = new ElementFormula(_formula, sumLeaveHours, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                        else
                        {
                            var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                                  s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                            foreach (var formulaitem in ListFormula)
                            {
                                double sumLeaveHours = 0;

                                var _formula = formulaitem;
                                var codeOverTimeType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                var objOverTimeType = TotalDataAll.listOvertimeType.Where(s => s.Code == codeOverTimeType).FirstOrDefault();
                                if (objOverTimeType != null)
                                {
                                    DateTime dateChangeSalary = SalaryProfile.Where(m => m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd)
                                        .OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;
                                    var listAttendanceTableItemLastChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate < dateChangeSalary).ToList();
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemLastChangeBasicSalary)
                                    {
                                        if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                        {
                                            if (objAttendanceTableItemByPro.OvertimeTypeID == objOverTimeType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.OvertimeHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraOvertimeTypeID == objOverTimeType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraOvertimeType2ID == objOverTimeType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours2;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraOvertimeType3ID == objOverTimeType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours3;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraOvertimeType4ID == objOverTimeType.ID && objAttendanceTableItemByPro.ExtraOvertimeHours4 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours4.Value;
                                            }
                                        }
                                    }
                                }

                                item = new ElementFormula(_formula, sumLeaveHours, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormulaForElementGroup.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }

                    }
                }
            }
            #endregion
            #region [04/02/2019][tung.tran][104032] Enum động : Sum số giờ nghỉ động theo mã loại ngày nghỉ
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_OVERTIMHOURS_AFTER_BY_.ToString(), "_GROUP"))
            {
                var status = string.Empty;
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_OVERTIMHOURS_AFTER_BY_.ToString();
                var strEndWith = "_GROUP";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                if (ListFormula.Any())
                {
                    List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                    SalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();
                    if (CheckIsChangeBasicSalary(TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                    {
                        if (TotalData600.dicFieldConfigForGroup.Count > 0)
                        {
                            var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                                s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);
                            var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();

                            foreach (var formulaitem in ListFormula)
                            {
                                double sumLeaveHours = 0;
                                var _formula = formulaitem;
                                var codeOverTimeType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                var objOverTimeType = TotalDataAll.listOvertimeType.Where(s => s.Code == codeOverTimeType).FirstOrDefault();
                                if (objOverTimeType != null)
                                {
                                    DateTime dateChangeSalary = SalaryProfile.Where(m => m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd)
                                        .OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;
                                    var listAttendanceTableItemAfterChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= dateChangeSalary && s.WorkDate <= CutOffDuration.DateEnd).ToList();


                                    //duyet qua cac dong truoc thay doi luong
                                    #region duyet qua cac dong truoc thay doi luong
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemAfterChangeBasicSalary)
                                    {
                                        if (objAttendanceTableItemByPro.OvertimeTypeID == objOverTimeType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.OvertimeHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraOvertimeTypeID == objOverTimeType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraOvertimeType2ID == objOverTimeType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours2;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraOvertimeType3ID == objOverTimeType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours3;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraOvertimeType4ID == objOverTimeType.ID && objAttendanceTableItemByPro.ExtraOvertimeHours4 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours4.Value;
                                        }
                                    }
                                    #endregion
                                }
                                item = new ElementFormula(_formula, sumLeaveHours, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                        else
                        {
                            var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                                  s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                            foreach (var formulaitem in ListFormula)
                            {
                                double sumLeaveHours = 0;

                                var _formula = formulaitem;
                                var codeOverTimeType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                var objOverTimeType = TotalDataAll.listOvertimeType.Where(s => s.Code == codeOverTimeType).FirstOrDefault();
                                if (objOverTimeType != null)
                                {
                                    DateTime dateChangeSalary = SalaryProfile.Where(m => m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd)
                                        .OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;
                                    var listAttendanceTableItemLastChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= dateChangeSalary && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemLastChangeBasicSalary)
                                    {
                                        if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                        {
                                            if (objAttendanceTableItemByPro.OvertimeTypeID == objOverTimeType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.OvertimeHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraOvertimeTypeID == objOverTimeType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraOvertimeType2ID == objOverTimeType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours2;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraOvertimeType3ID == objOverTimeType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours3;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraOvertimeType4ID == objOverTimeType.ID && objAttendanceTableItemByPro.ExtraOvertimeHours4 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours4.Value;
                                            }
                                        }
                                    }
                                }

                                item = new ElementFormula(_formula, sumLeaveHours, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                    }
                    else
                    {
                        if (TotalData600.dicFieldConfigForGroup.Count > 0)
                        {
                            var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                                s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);
                            var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();

                            foreach (var formulaitem in ListFormula)
                            {
                                double sumLeaveHours = 0;
                                var _formula = formulaitem;
                                var codeOverTimeType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                var objOverTimeType = TotalDataAll.listOvertimeType.Where(s => s.Code == codeOverTimeType).FirstOrDefault();
                                if (objOverTimeType != null)
                                {
                                    var listAttendanceTableItemAfterChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                                    //duyet qua cac dong truoc thay doi luong
                                    #region duyet qua cac dong truoc thay doi luong
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemAfterChangeBasicSalary)
                                    {
                                        if (objAttendanceTableItemByPro.OvertimeTypeID == objOverTimeType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.OvertimeHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraOvertimeTypeID == objOverTimeType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraOvertimeType2ID == objOverTimeType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours2;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraOvertimeType3ID == objOverTimeType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours3;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraOvertimeType4ID == objOverTimeType.ID && objAttendanceTableItemByPro.ExtraOvertimeHours4 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours4.Value;
                                        }
                                    }
                                    #endregion
                                }
                                item = new ElementFormula(_formula, sumLeaveHours, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                        else
                        {
                            var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                                  s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                            foreach (var formulaitem in ListFormula)
                            {
                                double sumLeaveHours = 0;

                                var _formula = formulaitem;
                                var codeOverTimeType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                var objOverTimeType = TotalDataAll.listOvertimeType.Where(s => s.Code == codeOverTimeType).FirstOrDefault();
                                if (objOverTimeType != null)
                                {
                                    var listAttendanceTableItemLastChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemLastChangeBasicSalary)
                                    {
                                        if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                        {
                                            if (objAttendanceTableItemByPro.OvertimeTypeID == objOverTimeType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.OvertimeHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraOvertimeTypeID == objOverTimeType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraOvertimeType2ID == objOverTimeType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours2;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraOvertimeType3ID == objOverTimeType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours3;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraOvertimeType4ID == objOverTimeType.ID && objAttendanceTableItemByPro.ExtraOvertimeHours4 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraOvertimeHours4.Value;
                                            }
                                        }
                                    }
                                }

                                item = new ElementFormula(_formula, sumLeaveHours, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                    }
                }
            }
            #endregion
            #region [04/02/2019][tung.tran][104032] Enum động : Sum số giờ nghỉ động theo mã loại ngày nghỉ
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_LEAVEHOURS_BEFORE_BY_.ToString(), "_GROUP"))
            {
                var status = string.Empty;
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_LEAVEHOURS_BEFORE_BY_.ToString();
                var strEndWith = "_GROUP";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                if (ListFormula.Any())
                {
                    List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                    SalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();
                    if (CheckIsChangeBasicSalary(TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                    {
                        if (TotalData600.dicFieldConfigForGroup.Count > 0)
                        {
                            var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                                s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);
                            var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();

                            foreach (var formulaitem in ListFormula)
                            {
                                double sumLeaveHours = 0;
                                var _formula = formulaitem;
                                var codeLeaveDayType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                var objLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();
                                if (objLeaveDayType != null)
                                {
                                    DateTime dateChangeSalary = SalaryProfile.Where(m => m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd)
                                        .OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;
                                    var listAttendanceTableItemLastChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate < dateChangeSalary).ToList();

                                    //duyet qua cac dong truoc thay doi luong
                                    #region duyet qua cac dong truoc thay doi luong
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemLastChangeBasicSalary)
                                    {
                                        if (objAttendanceTableItemByPro.LeaveTypeID == objLeaveDayType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.LeaveHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveTypeID == objLeaveDayType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType3ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours3 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours3.Value;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType4ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours4 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours4.Value;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType5ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours5 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours5.Value;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType6ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours6 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours6.Value;
                                        }
                                    }
                                    #endregion
                                }
                                item = new ElementFormula(_formula, sumLeaveHours, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                        else
                        {
                            var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                                  s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                            foreach (var formulaitem in ListFormula)
                            {
                                double sumLeaveHours = 0;

                                var _formula = formulaitem;
                                var codeLeaveDayType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                var objLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();
                                if (objLeaveDayType != null)
                                {
                                    DateTime dateChangeSalary = SalaryProfile.Where(m => m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd)
                                      .OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;
                                    var listAttendanceTableItemLastChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate < dateChangeSalary).ToList();
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemLastChangeBasicSalary)
                                    {
                                        if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                        {
                                            if (objAttendanceTableItemByPro.LeaveTypeID == objLeaveDayType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.LeaveHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveTypeID == objLeaveDayType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType3ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours3 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours3.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType4ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours4 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours4.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType5ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours5 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours5.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType6ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours6 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours6.Value;
                                            }
                                        }
                                    }
                                }

                                item = new ElementFormula(_formula, sumLeaveHours, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormulaForElementGroup.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }

                    }
                }
            }
            #endregion
            #region [04/02/2019][tung.tran][104032] Enum động : Sum số giờ nghỉ động theo mã loại ngày nghỉ
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_LEAVEHOURS_AFTER_BY_.ToString(), "_GROUP"))
            {
                var status = string.Empty;
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_LEAVEHOURS_AFTER_BY_.ToString();
                var strEndWith = "_GROUP";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                if (ListFormula.Any())
                {
                    List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                    SalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();
                    if (CheckIsChangeBasicSalary(TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                    {
                        if (TotalData600.dicFieldConfigForGroup.Count > 0)
                        {
                            var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                                s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);

                            var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();

                            foreach (var formulaitem in ListFormula)
                            {
                                double sumLeaveHours = 0;
                                var _formula = formulaitem;
                                var codeLeaveDayType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                var objLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();
                                if (objLeaveDayType != null)
                                {
                                    DateTime dateChangeSalary = SalaryProfile.Where(m => m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd)
                                        .OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;
                                    var listAttendanceTableItemAfterChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= dateChangeSalary && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                                    //duyet qua cac dong truoc thay doi luong
                                    #region duyet qua cac dong truoc thay doi luong
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemAfterChangeBasicSalary)
                                    {
                                        if (objAttendanceTableItemByPro.LeaveTypeID == objLeaveDayType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.LeaveHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveTypeID == objLeaveDayType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType3ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours3 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours3.Value;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType4ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours4 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours4.Value;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType5ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours5 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours5.Value;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType6ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours6 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours6.Value;
                                        }
                                    }
                                    #endregion
                                }
                                item = new ElementFormula(_formula, sumLeaveHours, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                        else
                        {
                            var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                                  s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                            foreach (var formulaitem in ListFormula)
                            {
                                double sumLeaveHours = 0;

                                var _formula = formulaitem;
                                var codeLeaveDayType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                var objLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();
                                if (objLeaveDayType != null)
                                {
                                    DateTime dateChangeSalary = SalaryProfile.Where(m => m.DateOfEffect >= CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd)
                                       .OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;
                                    var listAttendanceTableItemAfterChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= dateChangeSalary && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemAfterChangeBasicSalary)
                                    {
                                        if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                        {
                                            if (objAttendanceTableItemByPro.LeaveTypeID == objLeaveDayType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.LeaveHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveTypeID == objLeaveDayType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType3ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours3 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours3.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType4ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours4 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours4.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType5ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours5 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours5.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType6ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours6 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours6.Value;
                                            }
                                        }
                                    }
                                }

                                item = new ElementFormula(_formula, sumLeaveHours, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                    }
                    else
                    {
                        if (TotalData600.dicFieldConfigForGroup.Count > 0)
                        {
                            var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                                s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);

                            var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();

                            foreach (var formulaitem in ListFormula)
                            {
                                double sumLeaveHours = 0;
                                var _formula = formulaitem;
                                var codeLeaveDayType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                var objLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();
                                if (objLeaveDayType != null)
                                {
                                    var listAttendanceTableItemAfterChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate > CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                                    //duyet qua cac dong truoc thay doi luong
                                    #region duyet qua cac dong truoc thay doi luong
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemAfterChangeBasicSalary)
                                    {
                                        if (objAttendanceTableItemByPro.LeaveTypeID == objLeaveDayType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.LeaveHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveTypeID == objLeaveDayType.ID)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType3ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours3 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours3.Value;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType4ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours4 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours4.Value;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType5ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours5 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours5.Value;
                                        }
                                        if (objAttendanceTableItemByPro.ExtraLeaveType6ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours6 != null)
                                        {
                                            sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours6.Value;
                                        }
                                    }
                                    #endregion
                                }
                                item = new ElementFormula(_formula, sumLeaveHours, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                        else
                        {
                            var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                                                  s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                            foreach (var formulaitem in ListFormula)
                            {
                                double sumLeaveHours = 0;

                                var _formula = formulaitem;
                                var codeLeaveDayType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                var objLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();
                                if (objLeaveDayType != null)
                                {
                                    var listAttendanceTableItemAfterChangeBasicSalary = listAttendanceTableItemByPro.Where(m => m.WorkDate > CutOffDuration.DateStart && m.WorkDate <= CutOffDuration.DateEnd).ToList();
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemAfterChangeBasicSalary)
                                    {
                                        if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                        {
                                            if (objAttendanceTableItemByPro.LeaveTypeID == objLeaveDayType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.LeaveHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveTypeID == objLeaveDayType.ID)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType3ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours3 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours3.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType4ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours4 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours4.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType5ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours5 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours5.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType6ID == objLeaveDayType.ID && objAttendanceTableItemByPro.ExtraLeaveHours6 != null)
                                            {
                                                sumLeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours6.Value;
                                            }
                                        }
                                    }
                                }

                                item = new ElementFormula(_formula, sumLeaveHours, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }

                    }
                }
            }
            #endregion


            #endregion
            #region [Hien.Le][23/04/2020][114192]: Thêm phần tử lương nhóm số thứ tự dòng lương nhóm nhóm theo nhân viên
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_ORDERBY_PROFILE.ToString()))
            {
                item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_ORDERBY_PROFILE.ToString(), indexByGroup, 0);
                listElementFormulaForElementGroup.Add(item);
            }
            #endregion
            #region [15/09/2021/11/2017][minh.nguyenvan][0132611][New Func]Phần tử lương nhóm: đếm số ngày làm thực tế > 0.5 công để tính tiền ăn
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN_TOTALACTUAL_WORKINGINMONTH_.ToString(), ""))
            {
                var status = string.Empty;
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN_TOTALACTUAL_WORKINGINMONTH_.ToString();
                double day = 0;
                //co cau hinh
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                if (ListFormula.Any())
                {
                    if (TotalData600.dicFieldConfigForGroup.Count > 0)
                    {
                        var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);

                        var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();

                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            var value = Double.Parse(_formula.Replace(strStartsWith, ""));
                            foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                            {
                                if ((objAttendanceTableItemByPro.WorkPaidHours / objAttendanceTableItemByPro.AvailableHours) > value)
                                {
                                    day += 1;
                                }

                            }
                            item = new ElementFormula(_formula, day, 0);
                            listElementFormulaForElementGroup.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                    else
                    {
                        var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                            s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        var listProfileTimeSheetByPro = TotalDataAll.ListAtt_ProfileTimeSheet.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd
                            && s.OrgStructureTransID == orgstructureID
                            && s.PositionTransID == positionID
                            && s.ShopTransID == shopID
                            ).ToList();

                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            var value = Double.Parse(_formula.Replace(strStartsWith, ""));
                            foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                            {

                                if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                {
                                    if ((objAttendanceTableItemByPro.WorkPaidHours / objAttendanceTableItemByPro.AvailableHours) > value)
                                    {
                                        day += 1;
                                    }
                                }
                            }
                            item = new ElementFormula(_formula, day, 0);
                            listElementFormulaForElementGroup.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }

                    }
                }


            }
            #endregion

            #region [16/09/2021][Nghia.Dang][131991][New Func] Thêm phần tử tính lương nhóm có thay đổi lương: Số giờ công thực tế trước thay đổi

            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, new string[] {
                PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_WORKHOURS_BEFORE.ToString(),
                PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_WORKHOURS_AFTER.ToString(),
                PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_NIGHTSHIFTHOURS_BEFORE.ToString(),
                PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_NIGHTSHIFTHOURS_AFTER.ToString(),
                PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_LEAVEWORKDAYDAY_BEFORE.ToString(),
                PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_LEAVEWORKDAYDAY_AFTER.ToString()}))
            {
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {

                    if (TotalData600.dicFieldConfigForGroup.Count > 0)
                    {
                        // Có cấu hình 
                        double workhoursBef = 0;
                        double workhoursAf = 0;
                        double leaveWorkdayDayBef = 0;
                        double leaveWorkdayDayAf = 0;
                        double nightShiftHoursBef = 0;
                        double nightShiftHoursAf = 0;

                        var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                        s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                        //Lấy dòng gần nhất từ đầu tháng trở đi, để đáp ứng trường hợp 1 tháng thay đổi nhiều lần
                        DateTime dateChangeSalary = SalaryProfile.Where(m => m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd)
                            .OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                        var listAttendanceTableItemLastChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate < dateChangeSalary).ToList();

                        //duyet qua cac dong truoc thay doi luong
                        #region duyet qua cac dong truoc thay doi luong
                        foreach (var objAttendanceTableItemByPro in listAttendanceTableItemLastChangeBasicSalary)
                        {
                            leaveWorkdayDayBef += objAttendanceTableItemByPro.LeaveWorkDayDays != null ? objAttendanceTableItemByPro.LeaveWorkDayDays.Value : 0;
                            if (objAttendanceTableItemByPro.AvailableHours != 0)
                            {
                                workhoursBef += objAttendanceTableItemByPro.WorkHours / objAttendanceTableItemByPro.AvailableHours;
                            }
                            nightShiftHoursBef += objAttendanceTableItemByPro.NightShiftHours;
                        }
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_WORKHOURS_BEFORE.ToString(), workhoursBef, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_LEAVEWORKDAYDAY_BEFORE.ToString(), leaveWorkdayDayBef, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_NIGHTSHIFTHOURS_BEFORE.ToString(), nightShiftHoursBef, 0);
                        listElementFormulaForElementGroup.Add(item);
                        #endregion

                        #region duyet qua cac dong sau thay doi luong
                        var listAttendanceTableItemAfterChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= dateChangeSalary && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        //duyet qua cac dong truoc thay doi luong
                        foreach (var objAttendanceTableItemByPro in listAttendanceTableItemAfterChangeBasicSalary)
                        {
                            leaveWorkdayDayAf += objAttendanceTableItemByPro.LeaveWorkDayDays != null ? objAttendanceTableItemByPro.LeaveWorkDayDays.Value : 0;
                            if (objAttendanceTableItemByPro.AvailableHours != 0)
                            {
                                workhoursAf += objAttendanceTableItemByPro.WorkHours / objAttendanceTableItemByPro.AvailableHours;
                            }
                            nightShiftHoursAf += objAttendanceTableItemByPro.NightShiftHours;
                        }
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_WORKHOURS_AFTER.ToString(), workhoursAf, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_LEAVEWORKDAYDAY_AFTER.ToString(), leaveWorkdayDayAf, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_NIGHTSHIFTHOURS_AFTER.ToString(), nightShiftHoursAf, 0);
                        listElementFormulaForElementGroup.Add(item);
                        #endregion
                    }
                    else
                    {
                        double workhoursBef = 0;
                        double workhoursAf = 0;
                        double leaveWorkdayDayBef = 0;
                        double leaveWorkdayDayAf = 0;
                        double nightShiftHoursBef = 0;
                        double nightShiftHoursAf = 0;
                        var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                        s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                        //Lấy dòng gần nhất từ đầu tháng trở đi, để đáp ứng trường hợp 1 tháng thay đổi nhiều lần
                        DateTime dateChangeSalary = SalaryProfile.Where(m => m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd)
                            .OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                        var listAttendanceTableItemLastChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate < dateChangeSalary).ToList();
                        //duyet qua cac dong truoc thay doi luong
                        #region duyet qua cac dong truoc thay doi luong
                        foreach (var objAttendanceTableItemByPro in listAttendanceTableItemLastChangeBasicSalary)
                        {
                            if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                            {
                                leaveWorkdayDayBef += objAttendanceTableItemByPro.LeaveWorkDayDays != null ? objAttendanceTableItemByPro.LeaveWorkDayDays.Value : 0;
                                if (objAttendanceTableItemByPro.AvailableHours != 0)
                                {
                                    workhoursBef += objAttendanceTableItemByPro.WorkHours / objAttendanceTableItemByPro.AvailableHours;
                                }
                                nightShiftHoursBef += objAttendanceTableItemByPro.NightShiftHours;
                            }
                        }
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_WORKHOURS_BEFORE.ToString(), workhoursBef, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_LEAVEWORKDAYDAY_BEFORE.ToString(), leaveWorkdayDayBef, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_NIGHTSHIFTHOURS_BEFORE.ToString(), nightShiftHoursBef, 0);
                        listElementFormulaForElementGroup.Add(item);
                        #endregion

                        #region duyet qua cac dong sau thay doi luong
                        var listAttendanceTableItemAfterChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= dateChangeSalary && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        //duyet qua cac dong truoc thay doi luong
                        foreach (var objAttendanceTableItemByPro in listAttendanceTableItemAfterChangeBasicSalary)
                        {
                            if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                            {
                                leaveWorkdayDayAf += objAttendanceTableItemByPro.LeaveWorkDayDays != null ? objAttendanceTableItemByPro.LeaveWorkDayDays.Value : 0;
                                if (objAttendanceTableItemByPro.AvailableHours != 0)
                                {
                                    workhoursAf += objAttendanceTableItemByPro.WorkHours / objAttendanceTableItemByPro.AvailableHours;
                                }
                                nightShiftHoursAf += objAttendanceTableItemByPro.NightShiftHours;
                            }
                        }
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_WORKHOURS_AFTER.ToString(), workhoursAf, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_LEAVEWORKDAYDAY_AFTER.ToString(), leaveWorkdayDayAf, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_NIGHTSHIFTHOURS_AFTER.ToString(), nightShiftHoursAf, 0);
                        listElementFormulaForElementGroup.Add(item);
                        #endregion
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_WORKHOURS_BEFORE.ToString(), 0, 0);
                    listElementFormulaForElementGroup.Add(item);
                    item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_LEAVEWORKDAYDAY_BEFORE.ToString(), 0, 0);
                    listElementFormulaForElementGroup.Add(item);
                    item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_NIGHTSHIFTHOURS_BEFORE.ToString(), 0, 0);
                    listElementFormulaForElementGroup.Add(item);

                    double workhoursAf = 0;
                    double leaveWorkdayDayAf = 0;
                    double nightShiftHoursAf = 0;
                    if (TotalData600.dicFieldConfigForGroup.Count > 0)
                    {
                        var listAttendanceTableItemByPro = queryAbleAttendanceTableItem.Where(
                       s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        #region duyet qua cac dong sau thay doi luong
                        var listAttendanceTableItemAfterChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        //duyet qua cac dong truoc thay doi luong
                        foreach (var objAttendanceTableItemByPro in listAttendanceTableItemAfterChangeBasicSalary)
                        {
                            leaveWorkdayDayAf += objAttendanceTableItemByPro.LeaveWorkDayDays != null ? objAttendanceTableItemByPro.LeaveWorkDayDays.Value : 0;
                            if (objAttendanceTableItemByPro.AvailableHours != 0)
                            {
                                workhoursAf += objAttendanceTableItemByPro.WorkHours / objAttendanceTableItemByPro.AvailableHours;
                            }
                            nightShiftHoursAf += objAttendanceTableItemByPro.NightShiftHours;
                        }
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_WORKHOURS_AFTER.ToString(), workhoursAf, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_LEAVEWORKDAYDAY_AFTER.ToString(), leaveWorkdayDayAf, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_NIGHTSHIFTHOURS_AFTER.ToString(), nightShiftHoursAf, 0);
                        listElementFormulaForElementGroup.Add(item);
                        #endregion
                    }
                    else
                    {
                        var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                        s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();
                        #region duyet qua cac dong sau thay doi luong
                        var listAttendanceTableItemAfterChangeBasicSalary = listAttendanceTableItemByPro.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        //duyet qua cac dong truoc thay doi luong
                        foreach (var objAttendanceTableItemByPro in listAttendanceTableItemAfterChangeBasicSalary)
                        {
                            if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                            {
                                leaveWorkdayDayAf += objAttendanceTableItemByPro.LeaveWorkDayDays != null ? objAttendanceTableItemByPro.LeaveWorkDayDays.Value : 0;
                                if (objAttendanceTableItemByPro.AvailableHours != 0)
                                {
                                    workhoursAf += objAttendanceTableItemByPro.WorkHours / objAttendanceTableItemByPro.AvailableHours;
                                }
                                nightShiftHoursAf += objAttendanceTableItemByPro.NightShiftHours;
                            }
                        }
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_WORKHOURS_AFTER.ToString(), workhoursAf, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_LEAVEWORKDAYDAY_AFTER.ToString(), leaveWorkdayDayAf, 0);
                        listElementFormulaForElementGroup.Add(item);
                        item = new ElementFormula(PayrollElementGroup.ELEMENT_GROUP_SUM_ATT_NIGHTSHIFTHOURS_AFTER.ToString(), nightShiftHoursAf, 0);
                        listElementFormulaForElementGroup.Add(item);
                        #endregion
                    }
                }
            }
            #endregion

            #region [30/12/2021][minh.nguyenvan][135795]	Phần tử lương nhóm số ngày công động theo mã loại phụ cấp
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN_SUMVALUE_HOURACTUAL_BYCODEUNUSUALALLOWANCE_.ToString(), ""))
            {
                var status = string.Empty;
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN_SUMVALUE_HOURACTUAL_BYCODEUNUSUALALLOWANCE_.ToString();
                //co cau hinh
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                if (ListFormula.Any())
                {
                    if (TotalData600.dicFieldConfigForGroup.Count > 0)
                    {
                        var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);

                        var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();
                        foreach (var formulaitem in ListFormula)
                        {
                            double sumValue = 0;
                            var _formula = formulaitem;
                            var codeUnusualAllowanceCfg = _formula.Replace(strStartsWith, "");
                            if (codeUnusualAllowanceCfg != null)
                            {
                                var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == codeUnusualAllowanceCfg).FirstOrDefault();

                                foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                                {
                                    var ListPerformanceAllowance =
                                TotalDataAll.ListPerformanceAllowance.Where(x =>
                                                                           x.ProfileID == profileItem.ID
                                                                        && x.DateFrom <= objAttendanceTableItemByPro.WorkDate
                                                                        && x.DateTo >= objAttendanceTableItemByPro.WorkDate
                                                                        && objUnusualAllowanceCfg != null
                                                                        && x.UnusualAllowanceID == objUnusualAllowanceCfg.ID).FirstOrDefault();

                                    if (ListPerformanceAllowance != null && objAttendanceTableItemByPro.AvailableHours != 0)
                                    {
                                        sumValue += objAttendanceTableItemByPro.WorkPaidHours / objAttendanceTableItemByPro.AvailableHours;
                                    }

                                }
                                item = new ElementFormula(_formula, sumValue, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }

                        }
                    }
                    else
                    {
                        var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                            s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        var listProfileTimeSheetByPro = TotalDataAll.ListAtt_ProfileTimeSheet.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd
                            && s.OrgStructureTransID == orgstructureID
                            && s.PositionTransID == positionID
                            && s.ShopTransID == shopID
                            ).ToList();

                        foreach (var formulaitem in ListFormula)
                        {
                            double sumValue = 0;
                            var _formula = formulaitem;
                            var codeUnusualAllowanceCfg = _formula.Replace(strStartsWith, "");
                            if (codeUnusualAllowanceCfg != null)
                            {
                                var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                                foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                                {
                                    if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                    {
                                        var ListPerformanceAllowance =
                             TotalDataAll.ListPerformanceAllowance.Where(x =>
                                                                        x.ProfileID == profileItem.ID
                                                                     && x.DateFrom <= objAttendanceTableItemByPro.WorkDate
                                                                     && x.DateTo >= objAttendanceTableItemByPro.WorkDate
                                                                     && objUnusualAllowanceCfg != null
                                                                     && x.UnusualAllowanceID == objUnusualAllowanceCfg.ID).FirstOrDefault();

                                        if (ListPerformanceAllowance != null && objAttendanceTableItemByPro.AvailableHours != 0)
                                        {
                                            sumValue += objAttendanceTableItemByPro.WorkPaidHours / objAttendanceTableItemByPro.AvailableHours;
                                        }

                                    }
                                }
                                item = new ElementFormula(_formula, sumValue, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }

                    }
                }


            }
            #endregion 
            #region [30/12/2021][minh.nguyenvan][135795]Phần tử lương nhóm số ngày nghỉ động theo mã loại phụ cấp và mã loại ngày nghỉ
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN_SUMLEAVEHOURS_BYCODEUNUSUALALLOWANCEANDLEAVEDAYTYPE_.ToString(), ""))
            {
                var status = string.Empty;
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN_SUMLEAVEHOURS_BYCODEUNUSUALALLOWANCEANDLEAVEDAYTYPE_.ToString();
                //co cau hinh
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                if (ListFormula.Any())
                {
                    if (TotalData600.dicFieldConfigForGroup.Count > 0)
                    {
                        var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);

                        var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();
                        foreach (var formulaitem in ListFormula)
                        {
                            double _LeaveHours = 0;
                            var _formula = formulaitem;
                            var UnusualAllowanceCfgAndLeavedayType = _formula.Replace(PayrollElementGroup.ELEMENT_GROUP_DYN_SUMLEAVEHOURS_BYCODEUNUSUALALLOWANCEANDLEAVEDAYTYPE_.ToString(), "");
                            var splitUnusualAllowanceCfgAndLeavedayType = UnusualAllowanceCfgAndLeavedayType.Split("_AND_");
                            if (splitUnusualAllowanceCfgAndLeavedayType.Count == 2)
                            {
                                string codeUnusualAllowanceCfg = splitUnusualAllowanceCfgAndLeavedayType[0];
                                string codeLeavedayType = splitUnusualAllowanceCfgAndLeavedayType[1];
                                if (codeUnusualAllowanceCfg != null && codeLeavedayType != null)
                                {
                                    var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                                    var objLeaveDaytype = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeavedayType).FirstOrDefault();
                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                                    {
                                        var ListPerformanceAllowance =
                                    TotalDataAll.ListPerformanceAllowance.Where(x =>
                                                                               x.ProfileID == profileItem.ID
                                                                            && x.DateFrom <= objAttendanceTableItemByPro.WorkDate
                                                                            && x.DateTo >= objAttendanceTableItemByPro.WorkDate
                                                                            && objUnusualAllowanceCfg != null
                                                                            && x.UnusualAllowanceID == objUnusualAllowanceCfg.ID).FirstOrDefault();

                                        if (ListPerformanceAllowance != null)
                                        {

                                            if (objAttendanceTableItemByPro.LeaveTypeID == objLeaveDaytype.ID)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.LeaveHours;
                                            }
                                            if (objAttendanceTableItemByPro.LeaveWorkDayType == objLeaveDaytype.ID && objAttendanceTableItemByPro.LeaveWorkDayHour != null)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.LeaveWorkDayHour.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveTypeID == objLeaveDaytype.ID)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType3ID == objLeaveDaytype.ID && objAttendanceTableItemByPro.ExtraLeaveHours3 != null)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours3.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType4ID == objLeaveDaytype.ID && objAttendanceTableItemByPro.ExtraLeaveHours4 != null)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours4.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType5ID == objLeaveDaytype.ID && objAttendanceTableItemByPro.ExtraLeaveHours5 != null)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours5.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType6ID == objLeaveDaytype.ID && objAttendanceTableItemByPro.ExtraLeaveHours6 != null)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours6.Value;
                                            }

                                        }

                                    }
                                    item = new ElementFormula(_formula, _LeaveHours, 0);
                                    listElementFormulaForElementGroup.Add(item);
                                    //xoa cac enum da xu ly trong list enum tong
                                    formula.Remove(formulaitem);
                                }
                            }

                        }
                    }
                    else
                    {
                        var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                            s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        var listProfileTimeSheetByPro = TotalDataAll.ListAtt_ProfileTimeSheet.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd
                            && s.OrgStructureTransID == orgstructureID
                            && s.PositionTransID == positionID
                            && s.ShopTransID == shopID
                            ).ToList();

                        foreach (var formulaitem in ListFormula)
                        {
                            double _LeaveHours = 0;
                            var _formula = formulaitem;
                            var UnusualAllowanceCfgAndLeavedayType = _formula.Replace(PayrollElementGroup.ELEMENT_GROUP_DYN_SUMLEAVEHOURS_BYCODEUNUSUALALLOWANCEANDLEAVEDAYTYPE_.ToString(), "");
                            var splitUnusualAllowanceCfgAndLeavedayType = UnusualAllowanceCfgAndLeavedayType.Split("_AND_");
                            if (splitUnusualAllowanceCfgAndLeavedayType.Count == 2)
                            {
                                string codeUnusualAllowanceCfg = splitUnusualAllowanceCfgAndLeavedayType[0];
                                string codeLeavedayType = splitUnusualAllowanceCfgAndLeavedayType[1];
                                if (codeUnusualAllowanceCfg != null && codeLeavedayType != null)
                                {
                                    var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                                    var objLeaveDaytype = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeavedayType).FirstOrDefault();

                                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                                    {
                                        var ListPerformanceAllowance =
                                   TotalDataAll.ListPerformanceAllowance.Where(x =>
                                                                              x.ProfileID == profileItem.ID
                                                                           && x.DateFrom <= objAttendanceTableItemByPro.WorkDate
                                                                           && x.DateTo >= objAttendanceTableItemByPro.WorkDate
                                                                           && objUnusualAllowanceCfg != null
                                                                           && x.UnusualAllowanceID == objUnusualAllowanceCfg.ID).FirstOrDefault();

                                        if (ListPerformanceAllowance != null)
                                        {

                                            if (objAttendanceTableItemByPro.LeaveTypeID == objLeaveDaytype.ID)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.LeaveHours;
                                            }
                                            if (objAttendanceTableItemByPro.LeaveWorkDayType == objLeaveDaytype.ID && objAttendanceTableItemByPro.LeaveWorkDayHour != null)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.LeaveWorkDayHour.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveTypeID == objLeaveDaytype.ID)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType3ID == objLeaveDaytype.ID && objAttendanceTableItemByPro.ExtraLeaveHours3 != null)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours3.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType4ID == objLeaveDaytype.ID && objAttendanceTableItemByPro.ExtraLeaveHours4 != null)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours4.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType5ID == objLeaveDaytype.ID && objAttendanceTableItemByPro.ExtraLeaveHours5 != null)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours5.Value;
                                            }
                                            if (objAttendanceTableItemByPro.ExtraLeaveType6ID == objLeaveDaytype.ID && objAttendanceTableItemByPro.ExtraLeaveHours6 != null)
                                            {
                                                _LeaveHours += objAttendanceTableItemByPro.ExtraLeaveHours6.Value;
                                            }


                                        }
                                        item = new ElementFormula(_formula, _LeaveHours, 0);
                                        listElementFormulaForElementGroup.Add(item);
                                        //xoa cac enum da xu ly trong list enum tong
                                        formula.Remove(formulaitem);
                                    }
                                }

                            }
                        }


                    }
                }
            }
            #endregion
            #region [30/12/2021][minh.nguyenvan][135795]Phần tử lương nhóm số ngày công tác theo mã loại phụ cấp
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN_SUMLEAVEWORKDAYDAYS_BYCODEUNUSUALALLOWANCE_.ToString(), ""))
            {
                var status = string.Empty;
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN_SUMLEAVEWORKDAYDAYS_BYCODEUNUSUALALLOWANCE_.ToString();
                //co cau hinh
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                if (ListFormula.Any())
                {
                    if (TotalData600.dicFieldConfigForGroup.Count > 0)
                    {
                        var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);

                        var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();
                        foreach (var formulaitem in ListFormula)
                        {
                            double sumValue = 0;
                            var _formula = formulaitem;
                            var codeUnusualAllowanceCfg = _formula.Replace(strStartsWith, "");
                            if (codeUnusualAllowanceCfg != null)
                            {
                                var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == codeUnusualAllowanceCfg).FirstOrDefault();

                                foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                                {
                                    var ListPerformanceAllowance =
                                TotalDataAll.ListPerformanceAllowance.Where(x =>
                                                                           x.ProfileID == profileItem.ID
                                                                        && x.DateFrom <= objAttendanceTableItemByPro.WorkDate
                                                                        && x.DateTo >= objAttendanceTableItemByPro.WorkDate
                                                                        && objUnusualAllowanceCfg != null
                                                                        && x.UnusualAllowanceID == objUnusualAllowanceCfg.ID).FirstOrDefault();

                                    if (ListPerformanceAllowance != null && objAttendanceTableItemByPro.LeaveWorkDayDays != null)
                                    {
                                        sumValue += objAttendanceTableItemByPro.LeaveWorkDayDays.Value;
                                    }

                                }
                                item = new ElementFormula(_formula, sumValue, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }

                        }
                    }
                    else
                    {
                        var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                            s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        var listProfileTimeSheetByPro = TotalDataAll.ListAtt_ProfileTimeSheet.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd
                            && s.OrgStructureTransID == orgstructureID
                            && s.PositionTransID == positionID
                            && s.ShopTransID == shopID
                            ).ToList();

                        foreach (var formulaitem in ListFormula)
                        {
                            double sumValue = 0;
                            var _formula = formulaitem;
                            var codeUnusualAllowanceCfg = _formula.Replace(strStartsWith, "");
                            if (codeUnusualAllowanceCfg != null)
                            {
                                var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                                foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                                {

                                    if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                    {
                                        var ListPerformanceAllowance =
                             TotalDataAll.ListPerformanceAllowance.Where(x =>
                                                                        x.ProfileID == profileItem.ID
                                                                     && x.DateFrom <= objAttendanceTableItemByPro.WorkDate
                                                                     && x.DateTo >= objAttendanceTableItemByPro.WorkDate
                                                                     && objUnusualAllowanceCfg != null
                                                                     && x.UnusualAllowanceID == objUnusualAllowanceCfg.ID).FirstOrDefault();

                                        if (ListPerformanceAllowance != null && objAttendanceTableItemByPro.LeaveWorkDayDays != null)
                                        {
                                            sumValue += objAttendanceTableItemByPro.LeaveWorkDayDays.Value;
                                        }

                                    }
                                }
                                item = new ElementFormula(_formula, sumValue, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }

                    }
                }


            }
            #endregion
            #region [30/12/2021][minh.nguyenvan][135795]Phần tử lương nhóm số ngày làm thứ 7 nửa công theo mã loại phụ cấp
            if (CheckIsExistFormula(listElementFormulaForElementGroup, ref formula, PayrollElementGroup.ELEMENT_GROUP_DYN_SUMWORKDAY_ON_SATURDAY_BYCODEUNUSUALALLOWANCE_.ToString(), ""))
            {
                var status = string.Empty;
                var strStartsWith = PayrollElementGroup.ELEMENT_GROUP_DYN_SUMWORKDAY_ON_SATURDAY_BYCODEUNUSUALALLOWANCE_.ToString();
                //co cau hinh
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                if (ListFormula.Any())
                {
                    if (TotalData600.dicFieldConfigForGroup.Count > 0)
                    {
                        var queryAbleAttendanceTableItemByEnum = queryAbleAttendanceTableItem.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd);

                        var listAttendanceTableItemByPro = queryAbleAttendanceTableItemByEnum.ToList();
                        foreach (var formulaitem in ListFormula)
                        {
                            double sumValue = 0;
                            var _formula = formulaitem;
                            var codeUnusualAllowanceCfg = _formula.Replace(strStartsWith, "");
                            if (codeUnusualAllowanceCfg != null)
                            {
                                var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == codeUnusualAllowanceCfg).FirstOrDefault();

                                foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                                {
                                    var ListPerformanceAllowance =
                                TotalDataAll.ListPerformanceAllowance.Where(x =>
                                                                           x.ProfileID == profileItem.ID
                                                                        && x.DateFrom <= objAttendanceTableItemByPro.WorkDate
                                                                        && x.DateTo >= objAttendanceTableItemByPro.WorkDate
                                                                        && objUnusualAllowanceCfg != null
                                                                        && x.UnusualAllowanceID == objUnusualAllowanceCfg.ID).FirstOrDefault();

                                    if (ListPerformanceAllowance != null
                                                && ((int)objAttendanceTableItemByPro.WorkDate.DayOfWeek == 6)
                                                && objAttendanceTableItemByPro.AvailableHours != 0
                                                && (objAttendanceTableItemByPro.WorkPaidHours / objAttendanceTableItemByPro.AvailableHours) == 0.5)
                                    {
                                        sumValue += 1;
                                    }

                                }
                                item = new ElementFormula(_formula, sumValue, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }

                        }
                    }
                    else
                    {
                        var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                            s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        var listProfileTimeSheetByPro = TotalDataAll.ListAtt_ProfileTimeSheet.Where(
                            s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd
                            && s.OrgStructureTransID == orgstructureID
                            && s.PositionTransID == positionID
                            && s.ShopTransID == shopID
                            ).ToList();

                        foreach (var formulaitem in ListFormula)
                        {
                            double sumValue = 0;
                            var _formula = formulaitem;
                            var codeUnusualAllowanceCfg = _formula.Replace(strStartsWith, "");
                            if (codeUnusualAllowanceCfg != null)
                            {
                                var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                                foreach (var objAttendanceTableItemByPro in listAttendanceTableItemByPro)
                                {

                                    if (objAttendanceTableItemByPro.OrgStructureID == orgstructureID && objAttendanceTableItemByPro.PositionID == positionID && objAttendanceTableItemByPro.ShopID == shopID && objAttendanceTableItemByPro.AreaPostJobWorkID == areaPostJobWorkID)
                                    {
                                        var ListPerformanceAllowance =
                             TotalDataAll.ListPerformanceAllowance.Where(x =>
                                                                        x.ProfileID == profileItem.ID
                                                                     && x.DateFrom <= objAttendanceTableItemByPro.WorkDate
                                                                     && x.DateTo >= objAttendanceTableItemByPro.WorkDate
                                                                     && objUnusualAllowanceCfg != null
                                                                     && x.UnusualAllowanceID == objUnusualAllowanceCfg.ID).FirstOrDefault();

                                        if (ListPerformanceAllowance != null
                                            && ((int)objAttendanceTableItemByPro.WorkDate.DayOfWeek == 7)
                                            && objAttendanceTableItemByPro.AvailableHours != 0
                                            && (objAttendanceTableItemByPro.WorkPaidHours / objAttendanceTableItemByPro.AvailableHours) == 0.5)
                                        {
                                            sumValue += 1;
                                        }
                                    }
                                }
                                item = new ElementFormula(_formula, sumValue, 0);
                                listElementFormulaForElementGroup.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }

                    }
                }


            }
            #endregion

            return listElementFormulaForElementGroup;
        }

        #endregion

        /// <summary>
        /// Tung.Tran [05072018][0096165] Phần tử lương vùng đăng tuyển + Lương vùng làm việc
        /// Hàm tính công thức riêng cho objUnusualAllowanceCfg.Formula
        /// </summary>
        /// <param name="formula"></param>
        /// <param name="evaluatorAmount"></param>
        /// <param name="listKPIDynamicEntity"></param>
        /// <returns></returns>
        public FormulaHelper.FormulaHelperModel GetStaticValuesFormulalAllowanceCfg(
            ComputePayrollDataModelKZAll TotalDataAll,
            string formula,
            ComputePayrollDataModelKZ TotalData600,
            Hre_ProfileEntity profileItem,
            Att_CutOffDurationEntity CutOffDuration,
            Cat_UnusualAllowanceCfgEntity objUnusualAllowanceCfg,
            GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable)
        {
            var result = new FormulaHelper.FormulaHelperModel();

            //Các phần tử tính lương tách ra từ 1 chuỗi công thức
            if (formula.IndexOf("\n") != -1 || formula.IndexOf("\t") != -1)
            {
                formula = formula.Replace("\n", "").Replace("\t", "").Trim();
            }

            List<ElementFormula> listElementFormula = new List<ElementFormula>();
            ElementFormula item = new ElementFormula();
            //Các phần tử tính lương tách ra từ 1 chuỗi công thức
            List<string> ListFormulaAll = Common.ParseFormulaToList(formula).Where(m => m.IndexOf('[') != -1 && m.IndexOf(']') != -1).ToList();
            ListFormulaAll = ListFormulaAll.Select(s => s.Replace("[", "").Replace("]", "")).ToList();


            #region Enum E_AREAPOSTJOBCODE
            string areaPostJobCode = string.Empty;
            if (profileItem != null)
            {
                if (profileItem.AreaPostJobID != null && profileItem.AreaPostJobID != Guid.Empty)
                {
                    var nameEntityAreaPostJob = TotalDataAll.ListCat_NameEntity.Where(a => a.ID == profileItem.AreaPostJobID).FirstOrDefault();
                    areaPostJobCode = nameEntityAreaPostJob != null ? nameEntityAreaPostJob.Code : string.Empty;
                }
            }
            item = new ElementFormula(ElementAllowanceCfgFormula.E_AREAPOSTJOBCODE.ToString(), areaPostJobCode, 0);
            listElementFormula.Add(item);
            #endregion

            #region Enum E_AREAPOSTJOBWORKCODE + enum E_AMOUNT
            // [Tung.Tran][97051][Modify]: Thiết lập công thức tính phụ cấp theo công trình " Vùng làm viêc"
            string areaPostJobWorkCode = string.Empty;
            if (objGroupValueForPayrollGroupTable.AreaPostJobWorkID != null && objGroupValueForPayrollGroupTable.AreaPostJobWorkID != Guid.Empty)
            {

                #region Enum E_AREAPOSTJOBCODE
                var nameEntityAreaPostJobWork = TotalDataAll.ListCat_NameEntity.Where(a => a.ID == objGroupValueForPayrollGroupTable.AreaPostJobWorkID).FirstOrDefault();
                areaPostJobWorkCode = nameEntityAreaPostJobWork != null ? nameEntityAreaPostJobWork.Code : string.Empty;
                item = new ElementFormula(ElementAllowanceCfgFormula.E_AREAPOSTJOBWORKCODE.ToString(), areaPostJobWorkCode, 0);
                listElementFormula.Add(item);
                #endregion

                #region Enum E_AMOUNT
                // Vì enum này có cách get dữ liệu tương tự enum E_AREAPOSTJOBWORKCODE nên bỏ vào chung
                double amount = 0;
                var cat_AllowanceCfgAreaPostJobWork = TotalData600.listCat_AllowanceCfgAreaPostJobWork.Where(a => a.UnusualAllowanceCfgID == objUnusualAllowanceCfg.ID && a.AreaPostJobWorkListCode.Contains(nameEntityAreaPostJobWork.Code)).FirstOrDefault();
                amount = cat_AllowanceCfgAreaPostJobWork != null && cat_AllowanceCfgAreaPostJobWork.Amount != null ? cat_AllowanceCfgAreaPostJobWork.Amount.Value : 0;
                item = new ElementFormula(ElementAllowanceCfgFormula.E_AMOUNT.ToString(), amount, 0);
                listElementFormula.Add(item);
                #endregion
            }
            else
            {
                item = new ElementFormula(ElementAllowanceCfgFormula.E_AMOUNT.ToString(), 0, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(ElementAllowanceCfgFormula.E_AREAPOSTJOBWORKCODE.ToString(), areaPostJobWorkCode, 0);
                listElementFormula.Add(item);
            }

            #endregion

            // Tính giá trị công thức                                 
            result = FormulaHelper.ParseFormula(formula, listElementFormula);
            return result;
        }

        /// <summary>
        /// HienNguyen
        /// Tách hàm lưu ra để chạy bất đồng bộ
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="listPayrollTable"></param>
        /// <param name="listPayrollTableItem"></param>
        /// <param name="SizeSaveChange"></param>
        /// <param name="FileLog"></param>
        /// <param name="totalProfile"></param>
        /// <param name="currentProfile"></param>
        /// <param name="Sys_AsynTaskID"></param>
        /// <param name="TotalREALWAGES"></param>
        private void AsyncSaveChangePayroll(
            string userLogin,
            List<Hre_ProfileEntity> listProfile,
            List<Sal_PayrollGroupTable> listPayrollGroupTable,
            List<Sal_PayrollGroupTableItem> listPayrollGroupTableItem,
            List<Sal_PayrollTable> listPayrollTable,
            List<Sal_PayrollTableItem> listPayrollTableItem,
            List<Sal_PayrollTableReUse> listPayrollTableReUse,
            List<Sal_RePayrollTable> listRePayrollTable,
            List<Sal_RePayrollTableItem> listRePayrollTableItem,
            List<Sal_PayrollTablePayBack> listPayrollTablePayBack,
            List<Sal_PayrollTablePayBackItem> listPayrollTableItemPayBack,
            LogHelper loggerPatch,
            int indexPatchCompute,
            ref Sal_CaculateHistoryDetailProfileComputeEntity detailCompute,
            bool IsComputeRe = false,
            bool IsComputePayBack = false
            )
        {
            using (var context = new VnrHrmDataContext())
            {
                var unitOfWork = new UnitOfWork(context);
                unitOfWork.UserLogin = userLogin;
                DateTime DatetimeStart = DateTime.Now;

                #region khi lưu dữ liệu ở bảng đang có dữ liệu lớn => time out => xử lý lưu theo cách mới này
                if (IsComputeRe)
                {
                    #region Sal_RePayrollTable
                    var listRePayrollTableFail = new List<Sal_RePayrollTable>();
                    if (listRePayrollTable.Count > 0)
                    {
                        try
                        {
                            // Xử lý Save
                            unitOfWork.InsertArray(listRePayrollTable);
                        }
                        catch (DbEntityValidationException dbex)
                        {
                            // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                            listRePayrollTableFail.AddRange(listRePayrollTable);
                            var errorMessages = dbex.EntityValidationErrors
                                    .SelectMany(x => x.ValidationErrors)
                                    .Select(x => x.ErrorMessage);
                            var fullErrorMessage = string.Join("; ", errorMessages);
                            var exceptionMessage = string.Concat(dbex.Message, " Save Sal_RePayrollTable In For 2: ", fullErrorMessage);

                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE REPAYROLLTABLE DBENTITY", new
                            {
                                innerException = dbex.InnerException,
                                exeption = exceptionMessage,
                                count = listRePayrollTable.Count,
                                data = listProfile.Select(s => s.CodeEmp).ToList()
                            });


                        }
                        catch (Exception ex)
                        {
                            // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                            listRePayrollTableFail.AddRange(listRePayrollTable);

                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE REPAYROLLTABLE EXCEPTION", new
                            {
                                innerException = ex.InnerException,
                                exception = ex.Message + " " + ex.StackTrace,
                                count = listRePayrollTable.Count,
                                data = listRePayrollTable.Select(s => s.ProfileID).ToList()
                            });
                        }

                        #region get list Error and ghi log
                        if (listRePayrollTableFail.Count > 0)
                        {
                            // Cố gắng lưu thêm 1 lần nữa => Lần lưu này sẽ trả về các record lỗi
                            var listRePayrollTableError = unitOfWork.InsertArrayTrying(listRePayrollTableFail);
                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVERECORDS REPAYROLLTABLE DBENTITY NOT SAVE", new
                            {
                                // Count số record lỗi
                                count = listRePayrollTableError.Count,
                                // Những nhân viên lỗi
                                data = listProfile.Where(s => listRePayrollTableError.Select(m => m.ProfileID).Contains(s.ID)).Select(s => s.CodeEmp).ToList()
                            });

                            //những dòng master lỗi => loại trừ không lưu các dòng Item tương ứng
                            listRePayrollTableItem = listRePayrollTableItem.Where(s => !listRePayrollTableError.Select(m => m.ID).Contains(s.RePayrollTableID)).ToList();
                            listRePayrollTableFail = new List<Sal_RePayrollTable>();
                        }
                        #endregion

                    }
                    #endregion

                    #region Sal_PayrollTableItem
                    var listRePayrollTableItemFail = new List<Sal_PayrollTableItem>();
                    if (listRePayrollTableItem.Count > 0)
                    {
                        try
                        {
                            // Xử lý Save
                            unitOfWork.InsertArray(listRePayrollTableItem, 2000);
                        }
                        catch (Exception ex)
                        {
                            try
                            {
                                // Xử lý save nhưng số lượng save nhỏ hơn => Tránh TH timeout
                                unitOfWork.InsertArray(listRePayrollTableItem, 1000);
                            }
                            catch (DbEntityValidationException dbex)
                            {
                                // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                                listRePayrollTableItemFail.AddRange(listRePayrollTableItem);
                                var errorMessages = dbex.EntityValidationErrors
                                        .SelectMany(x => x.ValidationErrors)
                                        .Select(x => x.ErrorMessage);

                                var fullErrorMessage = string.Join("; ", errorMessages);

                                var exceptionMessage = string.Concat(dbex.Message, " The validation errors are: ", fullErrorMessage);

                                loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE PAYROLLTABLEITEM DBENTITY", new
                                {
                                    innerException = dbex.InnerException,
                                    exeption = exceptionMessage,
                                    count = listRePayrollTableItem.Count(),
                                    data = listProfile.Select(s => s.CodeEmp).ToList()
                                });
                            }
                            catch (Exception ex1)
                            {
                                listRePayrollTableItemFail.AddRange(listRePayrollTableItem);
                                loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE CHANGE PAYROLLTABLEITEM", new
                                {
                                    innerException = ex.InnerException,
                                    exeption = ex1.Message + "; " + ex1.StackTrace,
                                    count = listRePayrollTableItem.Count(),
                                    data = listProfile.Select(s => s.CodeEmp).ToList()
                                });
                            }
                        }

                        #region get list Error and ghi log
                        if (listRePayrollTableItemFail.Count > 0)
                        {
                            // Cố gắng lưu thêm 1 lần nữa => Lần lưu này sẽ trả về các record lỗi
                            var listRePayrollTableItemError = unitOfWork.InsertArrayTrying(listRePayrollTableItemFail);
                            // Từ danh sách Item lỗi => Lấy ra danh sách master
                            var listRePayrollTableIDByItemError = listRePayrollTableItemError.Select(s => s.PayrollTableID).Distinct().ToList();
                            // Từ danh sách master => Lấy ra danh sách nhân viên lỗi
                            var listProfileIDByItemError = listRePayrollTable.Where(s => listRePayrollTableIDByItemError.Contains(s.ID)).Select(s => s.ProfileID).Distinct().ToList();
                            if (listRePayrollTableItemError != null && listRePayrollTableItemError.Count > 0)
                            {
                                loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": RECORDS PAYROLLTABLEITEM DBENTITY NOT SAVE", new
                                {
                                    // Count số record lỗi
                                    count = listRePayrollTableItemError.Count(),
                                    // Danh sách nhân viên lỗi
                                    data = listProfile.Where(s => listProfileIDByItemError.Contains(s.ID)).Select(s => s.CodeEmp).ToList(),
                                    // Chi tiết record lỗi
                                    dataCode = listRePayrollTableItemError.Select(s => new { s.PayrollTableID, s.Code }).ToList()
                                });
                            }
                            listRePayrollTableItemFail = new List<Sal_PayrollTableItem>();
                        }
                        #endregion
                    }
                    #endregion
                }
                else if (IsComputePayBack)
                {
                    #region Sal_PayrollTablePayBack
                    var listPayrollTablePayBackFail = new List<Sal_PayrollTablePayBack>();
                    if (listPayrollTablePayBack.Count > 0)
                    {
                        try
                        {
                            // Xử lý Save
                            unitOfWork.InsertArray(listPayrollTablePayBack);
                        }
                        catch (DbEntityValidationException dbex)
                        {
                            // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                            listPayrollTablePayBackFail.AddRange(listPayrollTablePayBack);
                            var errorMessages = dbex.EntityValidationErrors
                                    .SelectMany(x => x.ValidationErrors)
                                    .Select(x => x.ErrorMessage);
                            var fullErrorMessage = string.Join("; ", errorMessages);
                            var exceptionMessage = string.Concat(dbex.Message, " Save Sal_RePayrollTable In For 2: ", fullErrorMessage);

                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE REPAYROLLTABLE DBENTITY", new
                            {
                                innerException = dbex.InnerException,
                                exeption = exceptionMessage,
                                count = listPayrollTablePayBack.Count,
                                data = listProfile.Select(s => s.CodeEmp).ToList()
                            });


                        }
                        catch (Exception ex)
                        {
                            // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                            listPayrollTablePayBackFail.AddRange(listPayrollTablePayBack);

                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE REPAYROLLTABLE EXCEPTION", new
                            {
                                innerException = ex.InnerException,
                                exception = ex.Message + " " + ex.StackTrace,
                                count = listPayrollTablePayBack.Count,
                                data = listPayrollTablePayBack.Select(s => s.ProfileID).ToList()
                            });
                        }

                        #region get list Error and ghi log
                        if (listPayrollTablePayBackFail.Count > 0)
                        {
                            // Cố gắng lưu thêm 1 lần nữa => Lần lưu này sẽ trả về các record lỗi
                            var listPayrollTablePayBackError = unitOfWork.InsertArrayTrying(listPayrollTablePayBackFail);
                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVERECORDS REPAYROLLTABLE DBENTITY NOT SAVE", new
                            {
                                // Count số record lỗi
                                count = listPayrollTablePayBackError.Count,
                                // Những nhân viên lỗi
                                data = listProfile.Where(s => listPayrollTablePayBackError.Select(m => m.ProfileID).Contains(s.ID)).Select(s => s.CodeEmp).ToList()
                            });

                            //những dòng master lỗi => loại trừ không lưu các dòng Item tương ứng
                            listPayrollTableItemPayBack = listPayrollTableItemPayBack.Where(s => !listPayrollTablePayBackError.Select(m => m.ID).Contains(s.PayrollTableID)).ToList();
                            listPayrollTablePayBackFail = new List<Sal_PayrollTablePayBack>();
                        }
                        #endregion

                    }
                    #endregion

                    #region Sal_PayrollTablePayBackItem
                    var listPayrollTableItemPayBackFail = new List<Sal_PayrollTablePayBackItem>();
                    if (listPayrollTableItemPayBack.Count > 0)
                    {
                        try
                        {
                            // Xử lý Save
                            unitOfWork.InsertArray(listPayrollTableItemPayBack, 2000);
                        }
                        catch (Exception ex)
                        {
                            try
                            {
                                // Xử lý save nhưng số lượng save nhỏ hơn => Tránh TH timeout
                                unitOfWork.InsertArray(listPayrollTableItemPayBack, 1000);
                            }
                            catch (DbEntityValidationException dbex)
                            {
                                // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                                listPayrollTableItemPayBackFail.AddRange(listPayrollTableItemPayBack);
                                var errorMessages = dbex.EntityValidationErrors
                                        .SelectMany(x => x.ValidationErrors)
                                        .Select(x => x.ErrorMessage);

                                var fullErrorMessage = string.Join("; ", errorMessages);

                                var exceptionMessage = string.Concat(dbex.Message, " The validation errors are: ", fullErrorMessage);

                                loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE PAYROLLTABLEITEM DBENTITY", new
                                {
                                    innerException = dbex.InnerException,
                                    exeption = exceptionMessage,
                                    count = listPayrollTableItemPayBack.Count(),
                                    data = listProfile.Select(s => s.CodeEmp).ToList()
                                });
                            }
                            catch (Exception ex1)
                            {
                                listPayrollTableItemPayBackFail.AddRange(listPayrollTableItemPayBack);
                                loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE CHANGE PAYROLLTABLEITEM", new
                                {
                                    innerException = ex.InnerException,
                                    exeption = ex1.Message + "; " + ex1.StackTrace,
                                    count = listPayrollTableItemPayBack.Count(),
                                    data = listProfile.Select(s => s.CodeEmp).ToList()
                                });
                            }
                        }

                        #region get list Error and ghi log
                        if (listPayrollTableItemPayBackFail.Count > 0)
                        {
                            // Cố gắng lưu thêm 1 lần nữa => Lần lưu này sẽ trả về các record lỗi
                            var listPayrollTableItemPayBackError = unitOfWork.InsertArrayTrying(listPayrollTableItemPayBackFail);
                            // Từ danh sách Item lỗi => Lấy ra danh sách master
                            var listRePayrollTableIDByItemError = listPayrollTableItemPayBackError.Select(s => s.PayrollTableID).Distinct().ToList();
                            // Từ danh sách master => Lấy ra danh sách nhân viên lỗi
                            var listProfileIDByItemError = listRePayrollTable.Where(s => listRePayrollTableIDByItemError.Contains(s.ID)).Select(s => s.ProfileID).Distinct().ToList();
                            if (listPayrollTableItemPayBackError != null && listPayrollTableItemPayBackError.Count > 0)
                            {
                                loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": RECORDS PAYROLLTABLEITEM DBENTITY NOT SAVE", new
                                {
                                    // Count số record lỗi
                                    count = listPayrollTableItemPayBackError.Count(),
                                    // Danh sách nhân viên lỗi
                                    data = listProfile.Where(s => listProfileIDByItemError.Contains(s.ID)).Select(s => s.CodeEmp).ToList(),
                                    // Chi tiết record lỗi
                                    dataCode = listPayrollTableItemPayBackError.Select(s => new { s.PayrollTableID, s.Code }).ToList()
                                });
                            }
                            listPayrollTableItemPayBackFail = new List<Sal_PayrollTablePayBackItem>();
                        }
                        #endregion
                    }
                    #endregion
                }
                else
                {
                    #region Sal_PayrollTable
                    var listPayrollTableFail = new List<Sal_PayrollTable>();
                    if (listPayrollTable.Count > 0)
                    {
                        try
                        {
                            // Xử lý Save
                            unitOfWork.InsertArray(listPayrollTable);
                            if (detailCompute != null)
                            {
                                detailCompute.SuccessComputed = detailCompute.SuccessComputed + listPayrollTable.Count();
                                detailCompute.WorkingEmps = detailCompute.WorkingEmps + listPayrollTable.Where(x => x.EmpStatus == "E_PROFILE_ACTIVE" || x.EmpStatus == "E_PROFILE_NEW").Count();
                                detailCompute.TerminatedEmps = detailCompute.TerminatedEmps + listPayrollTable.Where(x => x.EmpStatus == "E_PROFILE_QUITED" || x.EmpStatus == "E_PROFILE_QUIT").Count();
                            }
                            //Tung.Tran [27/08/2021][132166]: Clear cache khi tính lương xong, cache sẽ được thêm vào khi công bố
                            Sal_CachePayrollTableServices cachePayrollTableServices = new Sal_CachePayrollTableServices();
                            Sal_CachePayrollTableItemServices cachePayrollTableItemServices = new Sal_CachePayrollTableItemServices();
                            cachePayrollTableServices.DeleteCache(listPayrollTable);
                            cachePayrollTableItemServices.DeleteCache(listPayrollTable);
                        }
                        catch (DbEntityValidationException dbex)
                        {
                            // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                            listPayrollTableFail.AddRange(listPayrollTable);
                            var errorMessages = dbex.EntityValidationErrors
                                    .SelectMany(x => x.ValidationErrors)
                                    .Select(x => x.ErrorMessage);
                            var fullErrorMessage = string.Join("; ", errorMessages);
                            var exceptionMessage = string.Concat(dbex.Message, " Save Payroll In For 2: ", fullErrorMessage);

                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE PAYROLLTABLE DBENTITY", new
                            {
                                innerException = dbex.InnerException,
                                exeption = exceptionMessage,
                                count = listPayrollTable.Count,
                                data = listProfile.Select(s => s.CodeEmp).ToList()
                            });


                        }
                        catch (Exception ex)
                        {
                            // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                            listPayrollTableFail.AddRange(listPayrollTable);

                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE PAYROLLTABLE EXCEPTION", new
                            {
                                innerException = ex.InnerException,
                                exception = ex.Message + " " + ex.StackTrace,
                                count = listPayrollTable.Count,
                                data = listPayrollTable.Select(s => s.ProfileID).ToList()
                            });
                        }

                        #region get list Error and ghi log
                        if (listPayrollTableFail.Count > 0)
                        {
                            // Cố gắng lưu thêm 1 lần nữa => Lần lưu này sẽ trả về các record lỗi
                            var listPayrollTableError = unitOfWork.InsertArrayTrying(listPayrollTableFail);
                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVERECORDS PAYROLLTABLE DBENTITY NOT SAVE", new
                            {
                                // Count số record lỗi
                                count = listPayrollTableError.Count,
                                // Những nhân viên lỗi
                                data = listProfile.Where(s => listPayrollTableError.Select(m => m.ProfileID).Contains(s.ID)).Select(s => s.CodeEmp).ToList()
                            });

                            //những dòng master lỗi => loại trừ không lưu các dòng Item tương ứng
                            listPayrollTableItem = listPayrollTableItem.Where(s => !listPayrollTableError.Select(m => m.ID).Contains(s.PayrollTableID)).ToList();
                            listPayrollTableFail = new List<Sal_PayrollTable>();
                        }
                        #endregion

                    }
                    #endregion

                    #region Sal_PayrollTableReUse
                    var listPayrollTableReUseFail = new List<Sal_PayrollTable>();
                    if (listPayrollTableReUse.Count > 0)
                    {
                        try
                        {
                            // Xử lý Save
                            unitOfWork.InsertArray(listPayrollTableReUse, 2000);
                        }
                        catch (DbEntityValidationException dbex)
                        {
                            // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                            listPayrollTableReUseFail.AddRange(listPayrollTableReUse);

                            var errorMessages = dbex.EntityValidationErrors
                                    .SelectMany(x => x.ValidationErrors)
                                    .Select(x => x.ErrorMessage);
                            var fullErrorMessage = string.Join("; ", errorMessages);
                            var exceptionMessage = string.Concat(dbex.Message, " The validation errors are: ", fullErrorMessage);
                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE PAYROLLTABLEREUSE DBENTITY", new
                            {
                                innerException = dbex.InnerException,
                                exeption = exceptionMessage,
                                count = listPayrollTableReUse.Count(),
                                data = listProfile.Select(s => s.CodeEmp).ToList()
                            });
                        }
                        catch (Exception ex)
                        {
                            // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                            listPayrollTableReUseFail.AddRange(listPayrollTableItem);
                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE PAYROLLTABLEREUSE EXCEPTION", new
                            {
                                innerException = ex.InnerException,
                                exception = ex.Message + " " + ex.StackTrace,
                                count = listPayrollTableReUse.Count,
                                data = listPayrollTableReUse.Select(s => s.ProfileID).ToList()
                            });
                        }
                        #region get list Error and ghi log
                        if (listPayrollTableReUseFail.Count > 0)
                        {
                            // Cố gắng lưu thêm 1 lần nữa => Lần lưu này sẽ trả về các record lỗi
                            var listPayrollTableReUseError = unitOfWork.InsertArrayTrying(listPayrollTableReUseFail);

                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": RECORDS PAYROLLTABLEREUSE DBENTITY NOT SAVE", new
                            {
                                // Count số record lỗi
                                count = listPayrollTableReUseError.Count,
                                // Những nhân viên lỗi
                                data = listProfile.Where(s => listPayrollTableReUseError.Select(m => m.ProfileID).Contains(s.ID)).Select(s => s.CodeEmp).ToList()
                            });

                            listPayrollTableReUseFail = new List<Sal_PayrollTable>();
                        }
                        #endregion
                    }

                    #endregion

                    #region Sal_PayrollTableItem
                    var listPayrollTableItemFail = new List<Sal_PayrollTableItem>();
                    if (listPayrollTableItem.Count > 0)
                    {
                        try
                        {
                            // Xử lý Save
                            unitOfWork.InsertArray(listPayrollTableItem, 2000);
                        }
                        catch (Exception ex)
                        {
                            try
                            {
                                // Xử lý save nhưng số lượng save nhỏ hơn => Tránh TH timeout
                                unitOfWork.InsertArray(listPayrollTableItem, 1000);
                            }
                            catch (DbEntityValidationException dbex)
                            {
                                // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                                listPayrollTableItemFail.AddRange(listPayrollTableItem);
                                var errorMessages = dbex.EntityValidationErrors
                                        .SelectMany(x => x.ValidationErrors)
                                        .Select(x => x.ErrorMessage);

                                var fullErrorMessage = string.Join("; ", errorMessages);

                                var exceptionMessage = string.Concat(dbex.Message, " The validation errors are: ", fullErrorMessage);

                                loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE PAYROLLTABLEITEM DBENTITY", new
                                {
                                    innerException = dbex.InnerException,
                                    exeption = exceptionMessage,
                                    count = listPayrollTableItem.Count(),
                                    data = listProfile.Select(s => s.CodeEmp).ToList()
                                });
                            }
                            catch (Exception ex1)
                            {
                                listPayrollTableItemFail.AddRange(listPayrollTableItem);
                                loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE CHANGE PAYROLLTABLEITEM", new
                                {
                                    innerException = ex.InnerException,
                                    exeption = ex1.Message + "; " + ex1.StackTrace,
                                    count = listPayrollTableItem.Count(),
                                    data = listProfile.Select(s => s.CodeEmp).ToList()
                                });
                            }
                        }

                        #region get list Error and ghi log
                        if (listPayrollTableItemFail.Count > 0)
                        {
                            // Cố gắng lưu thêm 1 lần nữa => Lần lưu này sẽ trả về các record lỗi
                            var listPayrollTableItemError = unitOfWork.InsertArrayTrying(listPayrollTableItemFail);
                            // Từ danh sách Item lỗi => Lấy ra danh sách master
                            var listPayrollTableIDByItemError = listPayrollTableItemError.Select(s => s.PayrollTableID).Distinct().ToList();
                            // Từ danh sách master => Lấy ra danh sách nhân viên lỗi
                            var listProfileIDByItemError = listPayrollTable.Where(s => listPayrollTableIDByItemError.Contains(s.ID)).Select(s => s.ProfileID).Distinct().ToList();
                            if (listPayrollTableItemError != null && listPayrollTableItemError.Count > 0)
                            {
                                loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": RECORDS PAYROLLTABLEITEM DBENTITY NOT SAVE", new
                                {
                                    // Count số record lỗi
                                    count = listPayrollTableItemError.Count(),
                                    // Danh sách nhân viên lỗi
                                    data = listProfile.Where(s => listProfileIDByItemError.Contains(s.ID)).Select(s => s.CodeEmp).ToList(),
                                    // Chi tiết record lỗi
                                    dataCode = listPayrollTableItemError.Select(s => new { s.PayrollTableID, s.Code }).ToList()
                                });
                            }
                            listPayrollTableItemFail = new List<Sal_PayrollTableItem>();
                        }
                        #endregion
                    }
                    #endregion

                    #region Sal_PayrollGroupTable
                    List<Sal_PayrollGroupTable> listPayrollGroupTableFail = new List<Sal_PayrollGroupTable>();
                    if (listPayrollGroupTable.Count > 0)
                    {
                        try
                        {
                            // Xử lý Save
                            unitOfWork.InsertArray(listPayrollGroupTable, 2000);
                        }
                        catch (DbEntityValidationException dbex)
                        {
                            // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                            listPayrollGroupTableFail.AddRange(listPayrollGroupTable);

                            var errorMessages = dbex.EntityValidationErrors
                                    .SelectMany(x => x.ValidationErrors)
                                    .Select(x => x.ErrorMessage);

                            var fullErrorMessage = string.Join("; ", errorMessages);

                            var exceptionMessage = string.Concat(dbex.Message, " Save PayrollGroupTable In For 2: ", fullErrorMessage);
                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE PAYROLLGROUPTABLE DBENTITY", new
                            {
                                innerException = dbex.InnerException,
                                exeption = exceptionMessage,
                                count = listPayrollGroupTable.Count,
                                data = listProfile.Select(s => s.CodeEmp).ToList()
                            });
                        }
                        catch (Exception ex)
                        {
                            // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                            listPayrollGroupTableFail.AddRange(listPayrollGroupTable);
                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE PAYROLLGROUPTABLE EXCEPTION", new
                            {
                                innerException = ex.InnerException,
                                exception = ex.Message + " " + ex.StackTrace,
                                count = listPayrollGroupTable.Count,
                                data = listPayrollGroupTable.Select(s => s.ProfileID).ToList()
                            });
                        }

                        #region get list Error and ghi log
                        if (listPayrollGroupTableFail.Count > 0)
                        {
                            // Cố gắng lưu thêm 1 lần nữa => Lần lưu này sẽ trả về các record lỗi
                            var listPayrollGroupTableFailError = unitOfWork.InsertArrayTrying(listPayrollGroupTableFail);

                            loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": RECORDS PAYROLLTABLE DBENTITY NOT SAVE", new
                            {
                                count = listPayrollGroupTableFailError.Count,
                                data = listProfile.Where(s => listPayrollGroupTableFailError.Select(m => m.ProfileID).Contains(s.ID)).Select(s => s.CodeEmp).ToList()
                            });

                            //những dòng master lỗi => loại trừ không lưu các dòng Item tương ứng
                            listPayrollGroupTableItem = listPayrollGroupTableItem.Where(s => !listPayrollGroupTableFailError.Select(m => m.ID).Contains(s.PayrollGroupTableID)).ToList();
                            listPayrollGroupTableFail = new List<Sal_PayrollGroupTable>();
                        }
                        #endregion
                    }

                    #endregion

                    #region Sal_PayrollGroupTableItem
                    var listPayrollGroupTableItemFail = new List<Sal_PayrollGroupTableItem>();
                    if (listPayrollGroupTableItem.Count > 0)
                    {
                        try
                        {
                            // Xử lý Save
                            unitOfWork.InsertArray(listPayrollGroupTableItem, 2000);
                        }
                        catch (Exception ex)
                        {
                            try
                            {
                                unitOfWork.InsertArray(listPayrollGroupTableItem, 1000);
                            }
                            catch (DbEntityValidationException dbex)
                            {
                                // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                                listPayrollGroupTableItemFail.AddRange(listPayrollGroupTableItem);

                                var errorMessages = dbex.EntityValidationErrors
                                        .SelectMany(x => x.ValidationErrors)
                                        .Select(x => x.ErrorMessage);

                                var fullErrorMessage = string.Join("; ", errorMessages);

                                var exceptionMessage = string.Concat(dbex.Message, " The validation errors are: ", fullErrorMessage);

                                loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE PAYROLLGROUPTABLEITEM DBENTITY", new
                                {
                                    innerException = dbex.InnerException,
                                    exeption = exceptionMessage,
                                    count = listPayrollGroupTableItem.Count(),
                                    data = listProfile.Select(s => s.CodeEmp).ToList(),
                                });
                            }
                            catch (Exception ex1)
                            {
                                // Xảy ra lỗi trong quá trình lưu => Lấy thông tin lỗi => Ghi log
                                loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE PAYROLLGROUPTABLEITEM", new
                                {
                                    innerException = ex.InnerException,
                                    exception = ex1.Message + " " + ex1.StackTrace,
                                    count = listPayrollGroupTableItem.Count,
                                    data = listPayrollGroupTable.Select(s => s.ProfileID).ToList()
                                });
                            }
                        }

                        #region get list Error and ghi log
                        if (listPayrollGroupTableItemFail.Count > 0)
                        {
                            // Cố gắng lưu thêm 1 lần nữa => Lần lưu này sẽ trả về các record lỗi
                            var listPayrollGroupTableItemError = unitOfWork.InsertArrayTrying(listPayrollGroupTableItemFail);
                            // Từ danh sách item lỗi => Lấy ra danh sách master
                            var listPayrollGroupTableIDByItemError = listPayrollGroupTableItemError.Select(s => s.PayrollGroupTableID).Distinct().ToList();
                            // Từ danh sách master => Lấy ra nhân viên
                            var listProfileIDByItemError = listPayrollGroupTable.Where(s => listPayrollGroupTableIDByItemError.Contains(s.ID)).Select(s => s.ProfileID).Distinct().ToList();

                            if (listPayrollGroupTableItemError != null && listPayrollGroupTableItemError.Count > 0)
                            {
                                loggerPatch.WriteError("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": RECORDS PAYROLLGROUPTABLEITEM DBENTITY NOT SAVE", new
                                {
                                    // Count số record lỗi
                                    count = listPayrollGroupTableItemError.Count(),
                                    // DS nhân viên lỗi
                                    data = listProfile.Where(s => listProfileIDByItemError.Contains(s.ID)).Select(s => s.CodeEmp).ToList(),
                                    // Chi tiết record lỗi
                                    dataCode = listPayrollGroupTableItemError.Select(s => new { s.PayrollGroupTableID, s.Code }).ToList()
                                });
                            }

                            listPayrollGroupTableItemFail = new List<Sal_PayrollGroupTableItem>();
                        }
                        #endregion
                    }
                    #endregion

                }
                #endregion

                loggerPatch.WriteInfo("AsyncSaveChangePayroll", "======> PATCH COMPUTE: " + indexPatchCompute.ToString("000") + ": SAVE CHANGE " + listPayrollTable.Count().ToString() + " profile - " + listPayrollTableItem.Count().ToString() + " item", new
                {
                    data = Common.ComputeTime(DatetimeStart, DateTime.Now)
                });

            }
        }

        /// <summary>
        /// lưu dữ liệu cho để so sánh lại mỗi khi cập nhật bảng mơi => tính luong lại xem giống kết quả cũ không
        /// không luu vào những của hệ thống
        /// chỉ luu bảng tạm để lấy dữ liệu so sánh
        /// </summary>
        /// <param name="_loadPercentSave600"></param>
        /// <param name="listPayrollTable"></param>
        /// <param name="listPayrollTableItem"></param>
        /// <param name="SizeSaveChange"></param>
        /// <param name="FileLog"></param>
        /// <param name="totalProfile"></param>
        /// <param name="currentProfile"></param>
        /// <param name="Sys_AsynTaskID"></param>
        /// <param name="TotalREALWAGES"></param>
        private void AsyncSaveChangePayrollForCompare(
            double _loadPercentSave600,
            List<Sal_PayrollTable> listPayrollTable,
            List<Sal_PayrollTableItem> listPayrollTableItem,
            int totalProfile,
            int currentProfile,
            Guid Sys_AsynTaskID,
            double TotalREALWAGES)
        {
            using (var context = new VnrHrmDataContext())
            {
                var connection = context.Database.Connection.GetAdoConnection();
                var unitOfWork = new UnitOfWork(context);
                using (DbCommander commander = new DbCommander(connection))
                {
                    if (connection.IsSqlConnection())
                    {
                        try
                        {
                            var bulkCopyHelper = new SqlBulkCopyHelper(connection.ConnectionString);
                            var dtPayrollTable_BK = commander.GetSchema("Columns", new string[] { null, null, typeof(Sal_PayrollTable_BK).Name });
                            var dtPayrollTableItem_BK = commander.GetSchema("Columns", new string[] { null, null, typeof(Sal_PayrollTableItem_BK).Name });
                            var payrollTableFields_BK = dtPayrollTable_BK.Rows.OfType<System.Data.DataRow>().Select(d => d["Column_Name"].GetString()).ToArray();
                            var payrollTableItemFields_BK = dtPayrollTableItem_BK.Rows.OfType<System.Data.DataRow>().Select(d => d["Column_Name"].GetString()).ToArray();
                            var listPayrollTable_BK = listPayrollTable.Translate<Sal_PayrollTable_BK>();
                            listPayrollTable = new List<Sal_PayrollTable>();
                            bulkCopyHelper.WriteToServer(listPayrollTable_BK, typeof(Sal_PayrollTable_BK).Name, payrollTableFields_BK);

                            var listPayrollTableItem_BK = listPayrollTableItem.Translate<Sal_PayrollTableItem_BK>();
                            listPayrollTableItem = new List<Sal_PayrollTableItem>();
                            foreach (var listPayrollTableItem_BKBySize in listPayrollTableItem_BK.Chunk(1000))
                            {
                                try
                                {
                                    bulkCopyHelper.WriteToServer(listPayrollTableItem_BKBySize.ToList(),
                                           typeof(Sal_PayrollTableItem_BK).Name, payrollTableItemFields_BK);
                                }
                                catch (Exception ex)
                                {
                                    try
                                    {
                                        bulkCopyHelper.WriteToServer(listPayrollTableItem_BKBySize.ToList(), typeof(Sal_PayrollTableItem_BK).Name, payrollTableItemFields_BK);
                                    }
                                    catch (Exception ex1)
                                    {


                                    }
                                }
                            }

                            unitOfWork.SaveChanges();
                        }
                        catch (Exception ex)
                        {

                        }
                    }
                }

                //Update CalculatorHistory
                //int _remainCountProfile = 0;
                //_remainCountProfile = currentProfile % 100;
                //khi tổng nv tính ít hơn 600 hoặc  lần chunk cuối cùng
                if ((currentProfile > 0 && currentProfile < 600)) // khi tính all nv => 100%
                {
                    SaveCalculatorHistoryForProcess(Sys_AsynTaskID, 1, TotalREALWAGES, null);
                }
                else
                {
                    if (currentProfile > 0) // khi chua tính hết chỉ cập nhật tổng tiền
                    {
                        SaveCalculatorHistoryForProcess(Sys_AsynTaskID, _loadPercentSave600, TotalREALWAGES, null);
                    }
                }
            }
        }

        /// <summary>
        /// bang.nguyen
        /// Hàm Lưu lại dữ liệu và CalculatorHistory for process
        /// </summary>
        /// <param name="ID"></param>
        /// <param name="PercentCaculate"></param>
        /// <param name="Realwages"></param>
        /// <param name="totalProfile"></param>
        public void SaveCalculatorHistoryForProcess(Guid ID, double PercentCaculate, double? Realwages, int? totalProfile, Sal_CaculateHistoryDetailProfileComputeEntity detailCompute = null)
        {
            using (var context = new VnrHrmDataContext())
            {
                var unitOfWork = new UnitOfWork(context);
                var CaculateHistory = unitOfWork.CreateQueryable<Sal_CaculateHistory>(m => m.ID == ID).FirstOrDefault();
                if (CaculateHistory != null)
                {
                    CaculateHistory.PercentCaculate += PercentCaculate;
                    if (Realwages != null)
                    {
                        CaculateHistory.TotalAmount += Realwages;
                    }
                    if (totalProfile != null)
                    {
                        CaculateHistory.NumberEmployee += totalProfile;
                    }
                    if (detailCompute != null)
                    {
                        CaculateHistory.DetailProfileCompute = Newtonsoft.Json.JsonConvert.SerializeObject(detailCompute);
                    }
                    if (CaculateHistory.PercentCaculate >= 1)
                    {
                        CaculateHistory.Status = AsynTaskStatus.Done.ToString();
                        CaculateHistory.PercentCaculate = 1D;
                        CaculateHistory.ToDate = DateTime.Now;
                    }
                    unitOfWork.SaveChanges();
                }
            }
        }

        /// <summary>
        /// Tung.Tran [28/03/2019][104305]
        /// Get data danh mục riêng cho chức năng tính lương
        /// </summary>
        /// <param name="CutOffDuration"></param>
        /// <param name="UserLogin"></param>
        /// <returns></returns>
        public ComputePayrollDataModelKZAll GetDataForComputePayroll(Att_CutOffDurationEntity CutOffDuration, string UserLogin)
        {
            //biến lưu tất cả các dữ liệu lấy lên
            ComputePayrollDataModelKZAll TotalDataAll = new ComputePayrollDataModelKZAll();
            TotalDataAll.UserLogin = UserLogin;

            try
            {
                #region GetData

                string status = string.Empty;
                List<object> listModel = new List<object>();

                #region Dữ liệu lương sản phẩm
                listModel = new List<object>();
                listModel = Common.AddRange(7);
                listModel[2] = CutOffDuration.DateStart.AddMonths(-1);
                listModel[3] = CutOffDuration.DateEnd;
                TotalDataAll.ListProductive = GetData<Sal_ProductiveEntity>(listModel, ConstantSql.hrm_sal_sp_get_Sal_Producttive_Sal_Kaizen, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.ListProductive == null ? ConstantSql.hrm_sal_sp_get_Sal_Producttive_Sal_Kaizen + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion

                listModel = new List<object>();
                listModel.AddRange(new object[7]);
                listModel[5] = 1;
                listModel[6] = Int32.MaxValue - 1;
                TotalDataAll.listElement_All = GetData<Cat_ElementEntity>(listModel, ConstantSql.hrm_cat_sp_get_Element_All, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listElement_All == null ? ConstantSql.hrm_cat_sp_get_Element_All + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                TotalDataAll.listElementSeveranceAllowance = TotalDataAll.listElement_All
                   .Where(s => s.Formula != null)
                   .Where(s => s.IsSeveranceAllowance == true)
                   .OrderBy(m => m.OrderNumber).ToList();


                //[16/05/2018][bang.nguyen][95035][Modify Func]
                TotalDataAll.listElement_All = TotalDataAll.listElement_All
                    .Where(s => s.IsSalaryTemp == null || s.IsSalaryTemp == false)
                    .Where(s => s.Formula != null)
                    .Where(s => s.IsSeveranceAllowance == null || s.IsSeveranceAllowance == false)
                    .OrderBy(m => m.OrderNumber).ToList();

                listModel = new List<object>();
                listModel.AddRange(new object[4]);
                listModel[2] = 1;
                listModel[3] = Int32.MaxValue - 1;
                TotalDataAll.listUsualAllowance = GetData<Cat_UsualAllowanceEntity>(listModel, ConstantSql.hrm_cat_sp_get_UsualAllowance, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listUsualAllowance == null ? ConstantSql.hrm_cat_sp_get_UsualAllowance + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[6]);
                listModel[4] = 1;
                listModel[5] = Int32.MaxValue - 1;
                TotalDataAll.listUnusualAllowanceCfg = GetData<Cat_UnusualAllowanceCfgEntity>(listModel, ConstantSql.hrm_cat_sp_get_UnusualAllowanceCfg, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listUnusualAllowanceCfg == null ? ConstantSql.hrm_cat_sp_get_UnusualAllowanceCfg + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[3]);
                listModel[1] = 1;
                listModel[2] = Int32.MaxValue - 1;
                TotalDataAll.listCutOffDuration = GetData<Att_CutOffDurationEntity>(listModel, ConstantSql.hrm_att_sp_get_CutOffDurations, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCutOffDuration == null ? ConstantSql.hrm_att_sp_get_CutOffDurations + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[4]);
                listModel[2] = 1;
                listModel[3] = Int32.MaxValue - 1;
                TotalDataAll.listCat_GradePayroll = GetData<Cat_GradePayrollEntity>(listModel, ConstantSql.hrm_cat_sp_get_GradePayroll, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCat_GradePayroll == null ? ConstantSql.hrm_cat_sp_get_GradePayroll + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[5]);
                listModel[3] = 1;
                listModel[4] = Int32.MaxValue - 1;
                TotalDataAll.listOvertimeTypeAll = GetData<Cat_OvertimeTypeEntity>(listModel, ConstantSql.hrm_cat_sp_get_OvertimeType, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listOvertimeTypeAll == null ? ConstantSql.hrm_cat_sp_get_OvertimeType + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;


                listModel = new List<object>();
                listModel.AddRange(new object[4]);
                listModel[2] = 1;
                listModel[3] = Int32.MaxValue - 1;
                TotalDataAll.listCatCardTypeAll = GetData<Cat_CardTypeEntity>(listModel, ConstantSql.hrm_cat_sp_get_CardType, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCatCardTypeAll == null ? ConstantSql.hrm_cat_sp_get_CardType + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;


                listModel = new List<object>();
                listModel.AddRange(new object[7]);
                listModel[5] = 1;
                listModel[6] = Int32.MaxValue - 1;
                TotalDataAll.listPaymentAmountAll = GetData<Cat_PaymentAmountEntity>(listModel, ConstantSql.hrm_cat_sp_get_PaymentAmount, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listPaymentAmountAll == null ? ConstantSql.hrm_cat_sp_get_PaymentAmount + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[6]);
                listModel[4] = 1;
                listModel[5] = Int32.MaxValue - 1;
                TotalDataAll.listSalaryRankDetailAll = GetData<Cat_SalaryRankDetailEntity>(listModel, ConstantSql.hrm_cat_sp_get_SalaryRankDetail, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listSalaryRankDetailAll == null ? ConstantSql.hrm_cat_sp_get_SalaryRankDetail + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[7]);
                listModel[5] = 1;
                listModel[6] = Int32.MaxValue - 1;
                TotalDataAll.listSalaryRankAll = GetData<Cat_SalaryRankEntity>(listModel, ConstantSql.hrm_cat_sp_get_SalaryRank, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listSalaryRankAll == null ? ConstantSql.hrm_cat_sp_get_SalaryRank + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                //Hien.Nguyen Lọc overtimetype theo time line nếu có
                var OvertimeTypeServices = new Cat_OvertimeTypeServices();
                TotalDataAll.listOvertimeType = OvertimeTypeServices.GetOverTimeType_TimeLine(TotalDataAll.listOvertimeTypeAll, CutOffDuration.DateEnd);

                listModel = new List<object>();
                listModel.AddRange(new object[4]);
                listModel[2] = 1;
                listModel[3] = Int32.MaxValue - 1;
                TotalDataAll.listLeavedayType = GetData<Cat_LeaveDayTypeEntity>(listModel, ConstantSql.hrm_cat_sp_get_LeaveDayType, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listLeavedayType == null ? ConstantSql.hrm_cat_sp_get_LeaveDayType + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[4]);
                listModel[2] = 1;
                listModel[3] = Int32.MaxValue - 1;
                TotalDataAll.listCat_Shift = GetData<Cat_ShiftEntity>(listModel, ConstantSql.hrm_cat_sp_get_Shift, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCat_Shift == null ? ConstantSql.hrm_cat_sp_get_Shift + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[6]);
                listModel[4] = 1;
                listModel[5] = Int32.MaxValue - 1;
                TotalDataAll.listPosition = GetData<Cat_PositionEntity>(listModel, ConstantSql.hrm_cat_sp_get_Position, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listPosition == null ? ConstantSql.hrm_cat_sp_get_Position + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[3]);
                listModel[1] = 1;
                listModel[2] = Int32.MaxValue - 1;
                TotalDataAll.listSalesType = GetData<Eva_SalesTypeEntity>(listModel, ConstantSql.hrm_eva_sp_get_SalesType, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listSalesType == null ? ConstantSql.hrm_eva_sp_get_SalesType + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[5]);//Viết lại store where theo tháng áp dụng
                listModel[3] = 1;
                listModel[4] = Int32.MaxValue - 1;
                TotalDataAll.listDayOff = GetData<Cat_DayOffEntity>(listModel, ConstantSql.hrm_cat_sp_get_DayOff, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listDayOff == null ? ConstantSql.hrm_cat_sp_get_DayOff + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[5]);//Viết lại store where theo tháng áp dụng
                listModel[3] = 1;
                listModel[4] = Int32.MaxValue - 1;
                TotalDataAll.listUnAllowCfgAmount = GetData<Cat_UnAllowCfgAmountEntity>(listModel, ConstantSql.hrm_cat_sp_get_Cat_UnAllowCfgAmount, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listUnAllowCfgAmount == null ? ConstantSql.hrm_cat_sp_get_Cat_UnAllowCfgAmount + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel = Common.AddRange(5);
                TotalDataAll.listOrgStructure = GetData<Cat_OrgStructureEntity>(listModel, ConstantSql.hrm_cat_sp_get_OrgStructure, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listOrgStructure == null ? ConstantSql.hrm_cat_sp_get_OrgStructure + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel = Common.AddRange(2);
                TotalDataAll.listRosterGroupByOrganization = GetData<Att_RosterGroupByOrganizationEntity>(listModel, ConstantSql.hrm_cat_sp_get_RosterGroupByOrganization, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listRosterGroupByOrganization == null ? ConstantSql.hrm_cat_sp_get_RosterGroupByOrganization + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel = Common.AddRange(2);
                TotalDataAll.listRosterGroupType = GetData<Cat_RosterGroupTypeEntity>(listModel, ConstantSql.hrm_cat_sp_get_RosterGroupType, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listRosterGroupType == null ? ConstantSql.hrm_cat_sp_get_RosterGroupType + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #region Lương Hoa Hồng
                listModel = new List<object>();
                listModel.AddRange(new object[4]);
                listModel[0] = CutOffDuration.MonthYear;
                listModel[2] = 1;
                listModel[3] = Int32.MaxValue - 1;
                TotalDataAll.listRevenueRecord = GetData<Sal_RevenueRecordEntity>(listModel, ConstantSql.hrm_sal_sp_get_RevenueRecord, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listRevenueRecord == null ? ConstantSql.hrm_sal_sp_get_RevenueRecord + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[7]);
                listModel[1] = CutOffDuration.DateStart;
                listModel[2] = CutOffDuration.DateEnd;
                listModel[5] = 1;
                listModel[6] = Int32.MaxValue - 1;
                TotalDataAll.listRevenueForShop = GetData<Sal_RevenueForShopEntity>(listModel, ConstantSql.hrm_sal_sp_get_RevenueForShop, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listRevenueForShop == null ? ConstantSql.hrm_sal_sp_get_RevenueForShop + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[3]);
                listModel[1] = 1;
                listModel[2] = Int32.MaxValue - 1;
                TotalDataAll.listRevenueForProfile = GetData<Sal_RevenueForProfileEntity>(listModel, ConstantSql.hrm_sal_sp_get_RevenueForProfile, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listRevenueForProfile == null ? ConstantSql.hrm_sal_sp_get_RevenueForProfile + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[4]);
                listModel[2] = 1;
                listModel[3] = Int32.MaxValue - 1;
                TotalDataAll.listKPIBonus = GetData<Cat_KPIBonusEntity>(listModel, ConstantSql.hrm_cat_sp_get_KPIBonus, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listKPIBonus == null ? ConstantSql.hrm_cat_sp_get_KPIBonus + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[7]);
                listModel[5] = 1;
                listModel[6] = Int32.MaxValue - 1;
                TotalDataAll.listShop = GetData<Cat_ShopEntity>(listModel, ConstantSql.hrm_cat_sp_get_Shop, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listShop == null ? ConstantSql.hrm_cat_sp_get_Shop + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[6]);
                listModel[4] = 1;
                listModel[5] = Int32.MaxValue - 1;
                TotalDataAll.lstWorkPlace = GetData<Cat_WorkPlaceEntity>(listModel, ConstantSql.hrm_cat_sp_get_WorkPlace, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.lstWorkPlace == null ? ConstantSql.hrm_cat_sp_get_WorkPlace + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel = Common.AddRange(5);
                listModel[3] = 1;
                listModel[4] = Int32.MaxValue - 1;
                TotalDataAll.listCat_AllowanceCfgAreaPostJobWork = GetData<Cat_AllowanceCfgAreaPostJobWorkEntity>(listModel, ConstantSql.hrm_sal_sp_get_AllowanceCfgAreaPostJobWork, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.lstWorkPlace == null ? ConstantSql.hrm_cat_sp_get_WorkPlace + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[6]);
                listModel[4] = 1;
                listModel[5] = Int32.MaxValue - 1;
                TotalDataAll.listShopGroup = GetData<Cat_ShopGroupEntity>(listModel, ConstantSql.hrm_cat_sp_get_ShopGroup, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listShopGroup == null ? ConstantSql.hrm_cat_sp_get_ShopGroup + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[5]);
                listModel[3] = 1;
                listModel[4] = Int32.MaxValue - 1;
                TotalDataAll.listItemForShop = GetData<Sal_ItemForShopEntity>(listModel, ConstantSql.hrm_sal_sp_get_ItemForShop, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listItemForShop == null ? ConstantSql.hrm_sal_sp_get_ItemForShop + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[5]);
                listModel[3] = 1;
                listModel[4] = Int32.MaxValue - 1;
                TotalDataAll.listLineItemForShop = GetData<Sal_LineItemForShopEntity>(listModel, ConstantSql.hrm_sal_sp_get_LineItemForShop, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listLineItemForShop == null ? ConstantSql.hrm_sal_sp_get_LineItemForShop + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[7]);
                listModel[2] = Common.DotNetToOracle(CutOffDuration.ID.ToString());
                listModel[5] = 1;
                listModel[6] = Int32.MaxValue - 1;
                TotalDataAll.listPayCommissionItem = GetData<Sal_PayCommissionItemEntity>(listModel, ConstantSql.hrm_sal_sp_get_PayCommissionItem, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listPayCommissionItem == null ? ConstantSql.hrm_sal_sp_get_PayCommissionItem + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion

                #region vietject
                listModel = new List<object>();
                listModel.AddRange(new object[4]);//viết lại store where với ngày tháng < cutof.dateend
                listModel[2] = 1;
                listModel[3] = Int32.MaxValue - 1;
                TotalDataAll.listCat_UnitPrice = GetData<Cat_UnitPriceEntity>(listModel, ConstantSql.hrm_cat_sp_get_UnitPrice, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCat_UnitPrice == null ? ConstantSql.hrm_cat_sp_get_UnitPrice + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[4]);
                listModel[2] = 1;
                listModel[3] = Int32.MaxValue - 1;
                TotalDataAll.listCat_Role = GetData<Cat_RoleEntity>(listModel, ConstantSql.hrm_cat_sp_get_Role, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCat_Role == null ? ConstantSql.hrm_cat_sp_get_Role + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[4]);
                listModel[2] = 1;
                listModel[3] = Int32.MaxValue - 1;
                TotalDataAll.listCat_JobType = GetData<Cat_JobTypeEntity>(listModel, ConstantSql.hrm_cat_sp_get_JobType, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCat_JobType == null ? ConstantSql.hrm_cat_sp_get_JobType + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #endregion

                #region Tiền tệ
                listModel = new List<object>();
                listModel.AddRange(new object[4]);
                listModel[2] = 1;
                listModel[3] = Int32.MaxValue - 1;
                TotalDataAll.listCurrency = GetData<Cat_CurrencyEntity>(listModel, ConstantSql.hrm_cat_sp_get_Currency, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCurrency == null ? ConstantSql.hrm_cat_sp_get_Currency + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel.AddRange(new object[8]);
                listModel[6] = 1;
                listModel[7] = Int32.MaxValue - 1;
                TotalDataAll.listExchangeRate = GetData<Cat_ExchangeRateEntity>(listModel, ConstantSql.hrm_cat_sp_get_ExchangeRate, UserLogin, ref status);
                TotalDataAll.listExchangeRate = TotalDataAll.listExchangeRate.Where(m => m.MonthOfEffect <= CutOffDuration.DateEnd).ToList();
                TotalDataAll.Status += TotalDataAll.listExchangeRate == null ? ConstantSql.hrm_cat_sp_get_ExchangeRate + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion

                #region Đánh Giá

                listModel = new List<object>();
                listModel.AddRange(new object[3]);
                listModel[1] = 1;
                listModel[2] = Int32.MaxValue - 1;
                TotalDataAll.listPerformanceType = GetData<Cat_PerformanceTypeEntity>(listModel, ConstantSql.hrm_cat_sp_get_PerformanceType, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listPerformanceType == null ? ConstantSql.hrm_cat_sp_get_PerformanceType + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #endregion

                listModel = new List<object>();
                listModel = Common.AddRange(4);
                TotalDataAll.listValueEntity = GetData<Cat_ValueEntityEntity>(listModel, ConstantSql.hrm_cat_sp_get_ValueEntity, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listValueEntity == null ? ConstantSql.hrm_cat_sp_get_ValueEntity + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #region Lương Sản Phẩm

                listModel = new List<object>();
                listModel = Common.AddRange(8);
                TotalDataAll.ListProduct = GetData<Cat_ProductEntity>(listModel, ConstantSql.hrm_cat_sp_get_Product, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.ListProduct == null ? ConstantSql.hrm_cat_sp_get_Product + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                listModel = new List<object>();
                listModel = Common.AddRange(4);
                TotalDataAll.ListProductItem = GetData<Cat_ProductItemEntity>(listModel, ConstantSql.hrm_cat_sp_get_ProductItem, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.ListProductItem == null ? ConstantSql.hrm_cat_sp_get_ProductItem + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #endregion

                #region Tất Cả Cấu Hình
                //[15122015][bang.nguyen][60715][sua phan luong]
                listModel = new List<object>();
                listModel = Common.AddRange(3);
                TotalDataAll.listAllSettingEntity = GetData<Sys_AllSettingEntity>(listModel, ConstantSql.hrm_sys_sp_get_AllSetting, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listAllSettingEntity == null ? ConstantSql.hrm_sys_sp_get_AllSetting + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;


                #endregion

                #region Att_RosterGroup
                //[23122015][bang.nguyen][62075][bug]
                //Phần tử đếm theo ca trả về sai
                listModel = new List<object>();
                listModel = Common.AddRange(5);
                listModel[0] = RosterStatus.E_APPROVED.ToString();
                listModel[1] = CutOffDuration.DateStart.AddMonths(-1);
                listModel[2] = CutOffDuration.DateEnd;
                TotalDataAll.ListRosterGroup = GetData<Att_RosterGroupEntity>(listModel, ConstantSql.hrm_att_sp_get_RosterGroup_Sal, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.ListRosterGroup == null ? ConstantSql.hrm_att_sp_get_RosterGroup_Sal + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion

                #region Att_AnnualDetail

                listModel = new List<object>();
                listModel = Common.AddRange(2);
                listModel[0] = 1;
                listModel[1] = Int32.MaxValue - 1;
                TotalDataAll.lstAnnualDetail = GetData<Att_AnnualDetailEntity>(listModel, ConstantSql.hrm_att_sp_get_AnnualDetail_Sal_Year, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.lstAnnualDetail == null ? ConstantSql.hrm_att_sp_get_AnnualDetail_Sal_Year + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion



                listModel = new List<object>();
                listModel = Common.AddRange(5);
                TotalDataAll.listPriceTypeDetail = GetData<Cat_PriceTypeDetailEntity>(listModel, ConstantSql.hrm_cat_sp_get_PriceTypeDetail, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listPriceTypeDetail == null ? ConstantSql.hrm_cat_sp_get_PriceTypeDetail + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #region Cat_NameEntity
                //[05032016][bang.nguyen][64226][New Func]
                listModel = new List<object>();
                listModel = Common.AddRange(5);
                TotalDataAll.ListCat_NameEntity = GetData<Cat_NameEntityEntity>(listModel, ConstantSql.hrm_cat_sp_get_NameEntity, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.ListCat_NameEntity == null ? ConstantSql.hrm_cat_sp_get_NameEntity + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion
                #region Cat_Dormitory
                //[05032016][bang.nguyen][64229][New Func]
                listModel = new List<object>();
                listModel = Common.AddRange(4);
                TotalDataAll.ListCat_Dormitory = GetData<Cat_DormitoryEntity>(listModel, ConstantSql.hrm_cat_sp_get_Dormitory, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listPriceTypeDetail == null ? ConstantSql.hrm_cat_sp_get_Dormitory + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion
                #region Cat_GradeAttendance
                //[14032016][bang.nguyen][64142][New Func]
                listModel = new List<object>();
                listModel = Common.AddRange(11);
                TotalDataAll.ListCat_GradeAttendance = GetData<Cat_GradeAttendanceEntity>(listModel, ConstantSql.hrm_cat_sp_get_Cat_GradeAttendance, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.ListCat_GradeAttendance == null ? ConstantSql.hrm_cat_sp_get_Cat_GradeAttendance + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion
                #region Cat_ResignReason
                //[23032016][bang.nguyen][65129][Modify Func]
                listModel = new List<object>();
                listModel = Common.AddRange(4);
                TotalDataAll.ListCat_ResignReason = GetData<Cat_ResignReasonEntity>(listModel, ConstantSql.hrm_cat_sp_get_ResignReason, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.ListCat_ResignReason == null ? ConstantSql.hrm_cat_sp_get_ResignReason + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion
                #region Cat_OrgStructureType
                //[23032016][bang.nguyen][65129][Modify Func]
                listModel = new List<object>();
                listModel = Common.AddRange(4);
                TotalDataAll.ListCat_OrgStructureType = GetData<Cat_OrgStructureTypeEntity>(listModel, ConstantSql.hrm_cat_sp_get_OrgStructureType, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.ListCat_OrgStructureType == null ? ConstantSql.hrm_cat_sp_get_OrgStructureType + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion
                #region Cat_SalaryClassType
                //[02/11/2016][bang.nguyen][74945][New Func]
                listModel = new List<object>();
                listModel = Common.AddRange(3);
                TotalDataAll.listSalaryClassType = GetData<Cat_SalaryClassTypeEntity>(listModel, ConstantSql.hrm_cat_sp_get_SalaryClassType, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listSalaryClassType == null ? ConstantSql.hrm_cat_sp_get_SalaryClassType + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion
                #region Cat_Country
                //[08/05/2017][bang.nguyen][82034][Modify Func]
                listModel = new List<object>();
                listModel = Common.AddRange(5);
                TotalDataAll.ListCountry = GetData<Cat_CountryEntity>(listModel, ConstantSql.hrm_cat_sp_get_Country, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.ListCountry == null ? ConstantSql.hrm_cat_sp_get_Country + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion
                #region Cat_OrgUnit
                //[20/08/2021][minhnguyenvan][0131324][Modify Func]
                listModel = new List<object>();
                listModel = Common.AddRange(3);
                TotalDataAll.ListOrgUnit = GetData<Cat_OrgUnitEntity>(listModel, ConstantSql.hrm_cat_sp_get_OrgUnit, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.ListOrgUnit == null ? ConstantSql.hrm_cat_sp_get_OrgUnit + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion
                #region Cat_PayrollCategory
                //[14/11/2017][bang.nguyen][89732][Modify Func]
                listModel = new List<object>();
                listModel = Common.AddRange(4);
                TotalDataAll.ListPayrollCategory = GetData<Cat_PayrollCategoryEntity>(listModel, ConstantSql.hrm_cat_sp_get_PayrollCategory, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.ListPayrollCategory == null ? ConstantSql.hrm_cat_sp_get_PayrollCategory + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion

                listModel = new List<object>();
                listModel = Common.AddRange(4);
                TotalDataAll.ListGradeSalDeptElement = GetData<Cat_GradeSalDeptElementEntity>(listModel, ConstantSql.hrm_cat_sp_get_GradeSalDeptElement, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.ListGradeSalDeptElement == null ? ConstantSql.hrm_cat_sp_get_GradeSalDeptElement + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                TotalDataAll.ListGradeSalDeptElement = TotalDataAll.ListGradeSalDeptElement.Where(m => m.IsSave == true).ToList();

                #region Cat_MissionCostType
                listModel = new List<object>();
                listModel = new List<object>();
                listModel = Common.AddRange(4);
                TotalDataAll.listCat_MissionCostType = GetData<Cat_MissionCostTypeEntity>(listModel, ConstantSql.hrm_cat_sp_get_MissionCostType, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCat_MissionCostType == null ? ConstantSql.hrm_cat_sp_get_MissionCostType + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #endregion

                #region Cat_DisciplinedTypes
                listModel = new List<object>();
                listModel = Common.AddRange(4);
                TotalDataAll.listCat_DisciplinedTypes = GetData<Cat_DisciplinedTypesEntity>(listModel, ConstantSql.hrm_cat_sp_get_DisciplinedTypes, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCat_DisciplinedTypes == null ? ConstantSql.hrm_cat_sp_get_DisciplinedTypes + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #endregion

                #region Cat_AbilityTile
                listModel = new List<object>();
                listModel = Common.AddRange(4);
                TotalDataAll.listCat_AbilityTile = GetData<Cat_AbilityTileEntity>(listModel, ConstantSql.hrm_cat_sp_get_AbilityTile, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCat_AbilityTile == null ? ConstantSql.hrm_cat_sp_get_AbilityTile + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #endregion

                #region Cat_RelativeType
                listModel = new List<object>();
                listModel = Common.AddRange(4);
                listModel[2] = 1;
                listModel[3] = int.MaxValue - 1;

                TotalDataAll.listCatRelativeType = GetData<Cat_RelativeTypeEntity>(listModel, ConstantSql.hrm_cat_sp_get_RelativesType_Sal, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCatRelativeType == null ? ConstantSql.hrm_cat_sp_get_RelativesType_Sal + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion

                #region Cat_JobTitle
                listModel = new List<object>();
                listModel = Common.AddRange(4);
                listModel[2] = 1;
                listModel[3] = int.MaxValue - 1;

                TotalDataAll.listCatJobTitle = GetData<Cat_JobTitleEntity>(listModel, ConstantSql.hrm_cat_sp_get_JobTitle_Sal, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listCatJobTitle == null ? ConstantSql.hrm_cat_sp_get_JobTitle_Sal + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion

                #region Cat_PayrollGroup
                listModel = new List<object>();
                listModel.AddRange(new object[4]);
                listModel[2] = 1;
                listModel[3] = int.MaxValue - 1;
                TotalDataAll.listPayrollGroup = GetData<Cat_PayrollGroupEntity>(listModel, ConstantSql.hrm_cat_sp_get_payrollGroup_Sal, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listPayrollGroup == null ? ConstantSql.hrm_cat_sp_get_payrollGroup_Sal + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion

                #region Cat_KPIRank
                listModel = new List<object>();
                listModel.AddRange(new object[7]);
                listModel[5] = 1;
                listModel[6] = Int32.MaxValue - 1;
                TotalDataAll.listKPIRank = GetData<Cat_KPIRankEntity>(listModel, ConstantSql.hrm_cat_sp_get_KPIRank, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listKPIRank == null ? ConstantSql.hrm_cat_sp_get_KPIRank + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #endregion

                #region Cat_ContractType
                listModel = new List<object>();
                listModel.AddRange(new object[6]);
                listModel[4] = 1;
                listModel[5] = Int32.MaxValue - 1;
                TotalDataAll.lstContractType = GetData<Cat_ContractTypeEntity>(listModel, ConstantSql.hrm_cat_sp_get_ContractType, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.lstContractType == null ? ConstantSql.hrm_cat_sp_get_ContractType + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #endregion

                #region Cat_TradeUnionistPosition
                listModel = new List<object>();
                listModel.AddRange(new object[2]);
                listModel[0] = 1;
                listModel[1] = int.MaxValue - 1;
                TotalDataAll.listTradeUnionistPosition = GetData<Cat_TradeUnionistPositionEntity>(listModel, ConstantSql.hrm_cat_sp_get_TradeUnionistPosition_Sal, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listTradeUnionistPosition == null ? ConstantSql.hrm_cat_sp_get_TradeUnionistPosition_Sal + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion

                #region Cat_TAMScanReasonMiss
                listModel = new List<object>();
                listModel = Common.AddRange(4);
                listModel[2] = 1;
                listModel[3] = int.MaxValue - 1;

                TotalDataAll.listTAMScanReasonMiss = GetData<Cat_TAMScanReasonMissEntity>(listModel, ConstantSql.hrm_cat_sp_get_TAMScanReasonMiss_Sal, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listTAMScanReasonMiss == null ? ConstantSql.hrm_cat_sp_get_TAMScanReasonMiss_Sal + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion

                #region Cat_BusinessTravel

                listModel = new List<object>();
                listModel = Common.AddRange(2);
                listModel[0] = 1;
                listModel[1] = Int32.MaxValue - 1;
                TotalDataAll.listBusinessTravel = GetData<Cat_BusinessTravelEntity>(listModel, ConstantSql.hrm_cat_sp_get_Cat_BusinessTravel, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listBusinessTravel == null ? ConstantSql.hrm_cat_sp_get_Cat_BusinessTravel + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #endregion

                #region Cat_SalaryRank

                listModel = new List<object>();
                listModel = Common.AddRange(2);
                listModel[0] = 1;
                listModel[1] = Int32.MaxValue - 1;
                TotalDataAll.listSalaryRank = GetData<Cat_SalaryRankEntity>(listModel, ConstantSql.hrm_cat_sp_get_Cat_SalaryRank, UserLogin, ref status);
                TotalDataAll.Status += TotalDataAll.listSalaryRank == null ? ConstantSql.hrm_cat_sp_get_Cat_SalaryRank + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;

                #endregion

                #region Cat_EmployeeType
                listModel = Common.AddRange(5);
                TotalDataAll.listEmployeeType = GetData<Cat_EmployeeTypeEntity>(listModel, ConstantSql.hrm_cat_sp_get_EmployeeType, UserLogin, ref status).ToList();
                TotalDataAll.Status += TotalDataAll.listEmployeeType == null ? ConstantSql.hrm_cat_sp_get_EmployeeType + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataAll.Status)) return TotalDataAll;
                #endregion

                #endregion

                return TotalDataAll;
            }
            catch (Exception ex)
            {
                TotalDataAll.Status = ex.Message;
                return TotalDataAll;
            }

        }

        /// <summary>
        /// Tung.Tran [28/03/2019][104305] Tách hàm lấy dữ liệu theo nhân viên riêng , enhance tốc độ màn hình Tính lương
        /// </summary>
        /// <returns></returns>
        public ComputePayrollDataModelKZAll GetDataForComputePayrollByProfileIds(
            ComputePayrollDataModelKZAll TotalDataAll,
            Att_CutOffDurationEntity CutOffDuration,
            string ProfileIDs,
            string UserLogin,
            bool? IsApproveBasicSalary = false,
            bool? isComputePayrollByGroup = false
            )
        {

            #region Khai báo
            ComputePayrollDataModelKZAll TotalDataByProfileIDs = new ComputePayrollDataModelKZAll();

            var dataComputeSer = new Sal_GetDataComputePayrollKZServices();
            dataComputeSer.UserLogin = TotalDataAll.UserLogin;
            BaseService newBaseService = new BaseService();
            newBaseService.UserLogin = TotalDataAll.UserLogin;

            DateTime dateMinByCutOffDuration = CutOffDuration.DateStart;
            DateTime dateMaxByCutOffDuration = CutOffDuration.DateEnd;
            if (CutOffDuration.BackPayFrom != null && CutOffDuration.BackPayTo != null)
            {
                if (CutOffDuration.BackPayFrom < dateMinByCutOffDuration)
                {
                    dateMinByCutOffDuration = CutOffDuration.BackPayFrom.Value;
                }
                if (CutOffDuration.BackPayTo > dateMaxByCutOffDuration)
                {
                    dateMaxByCutOffDuration = CutOffDuration.BackPayTo.Value;
                }
            }
            string status = string.Empty;
            List<object> listModel = new List<object>();
            //[18/05/2016][HienNguyen][67437]
            Sys_AttOvertimePermitConfigServices Sys_Services = new Sys_AttOvertimePermitConfigServices();
            bool? _configAttendanceN_1 = Sys_Services.GetConfigValue<bool?>(AppConfig.HRM_SAL_USING_ELEMENT_N_1);
            var CutOffDuration_Prev = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutOffDuration.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();
            #endregion

            #region Get dữ liệu

            #region Dữ liệu bảng lương đã tính trước đó
            listModel = new List<object>();
            listModel = Common.AddRange(4);
            listModel[0] = CutOffDuration.ID;
            listModel[1] = ProfileIDs;
            TotalDataByProfileIDs.listPayrollTablePayBackItem = newBaseService.GetData<Sal_PayrollTablePayBackItemEntity>(listModel, ConstantSql.hrm_sal_sp_get_PaybackPayrollItem, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listPayrollTablePayBackItem == null ? ConstantSql.hrm_sal_sp_get_PaybackPayrollItem + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            #endregion

            #region Dữ liệu bảng công payback master 
            listModel = new List<object>();
            listModel = Common.AddRange(8);
            listModel[2] = CutOffDuration.ID;
            listModel[5] = ProfileIDs;
            TotalDataByProfileIDs.listAttendanceTablePayback = newBaseService.GetData<Att_AttendanceTablePaybackEntity>(listModel, ConstantSql.hrm_att_sp_get_attdancetablePayback_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listAttendanceTablePayback == null ? ConstantSql.hrm_att_sp_get_attdancetablePayback_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            TotalDataByProfileIDs.listAttendanceTablePayback = TotalDataByProfileIDs.listAttendanceTablePayback.OrderByDescending(m => m.MonthYear).ToList();
            #endregion

            #region Dữ liệu bảng công payback chi tiết
            listModel = new List<object>();
            listModel = Common.AddRange(6);
            listModel[0] = Common.DotNetToOracle(CutOffDuration.ID.ToString());
            listModel[3] = ProfileIDs;
            TotalDataByProfileIDs.listAttendanceTablePaybackItem = newBaseService.GetData<Att_AttendanceTablePaybackItemEntity>(listModel, ConstantSql.hrm_att_sp_get_AttendanceTablePaybackItem_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listAttendanceTablePaybackItem == null ? ConstantSql.hrm_att_sp_get_AttendanceTablePaybackItem_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            #endregion

            #region Dữ liệu bảng công chi tiết
            listModel = new List<object>();
            listModel = Common.AddRange(6);
            listModel[0] = Common.DotNetToOracle(CutOffDuration.ID.ToString());
            listModel[3] = ProfileIDs;
            TotalDataByProfileIDs.listAttendanceTableItem = newBaseService.GetData<Att_AttendanceTableItemEntity>(listModel, ConstantSql.hrm_att_sp_get_AttendanceTableItem_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listAttendanceTableItem == null ? ConstantSql.hrm_att_sp_get_AttendanceTableItem_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            #endregion

            #region Dữ liệu bảng công chi tiết tháng N - 1
            if (_configAttendanceN_1 == true)
            {
                var _cutoffduration_N_1 = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutOffDuration.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                if (_cutoffduration_N_1 != null)
                {
                    listModel = new List<object>();
                    listModel = Common.AddRange(6);
                    listModel[0] = Common.DotNetToOracle(_cutoffduration_N_1.ID.ToString());
                    listModel[3] = ProfileIDs;
                    TotalDataByProfileIDs.listAttendanceTableItem_N_1 = newBaseService.GetData<Att_AttendanceTableItemEntity>(listModel, ConstantSql.hrm_att_sp_get_AttendanceTableItem_Sal, UserLogin, ref status);
                    TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listAttendanceTableItem_N_1 == null ? ConstantSql.hrm_att_sp_get_AttendanceTableItem_Sal + " : " + status + "," : "";
                    if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
                }
                else
                {
                    TotalDataByProfileIDs.listAttendanceTableItem_N_1 = new List<Att_AttendanceTableItemEntity>();
                }
            }
            //minhnguyenvan kaizen 0137008: Chỉnh sửa logic Tính lương có tính tháng lùi mà không check cấu hình
            else
            {
                TotalDataByProfileIDs.listAttendanceTableItem_N_1 = new List<Att_AttendanceTableItemEntity>();
            }
            #endregion

            #region Dữ liệu bảng công master
            listModel = new List<object>();
            listModel = Common.AddRange(8);
            listModel[3] = new DateTime(CutOffDuration.MonthYear.Year - 1, 1, 1);
            listModel[4] = new DateTime(CutOffDuration.MonthYear.Year, 12, 31);
            listModel[5] = ProfileIDs;
            TotalDataByProfileIDs.listAttendanceTable = newBaseService.GetData<Att_AttendanceTableEntity>(listModel, ConstantSql.hrm_att_sp_get_attdancetable_Sal_Kaizen, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listAttendanceTable == null ? ConstantSql.hrm_att_sp_get_attdancetable_Sal_Kaizen + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            TotalDataByProfileIDs.listAttendanceTable = TotalDataByProfileIDs.listAttendanceTable.OrderByDescending(m => m.MonthYear).ToList();

            //Lấy dữ liệu bảng công tháng n-1
            if (CutOffDuration_Prev != null)
            {
                TotalDataByProfileIDs.Att_AttendanceTable_Prev = TotalDataByProfileIDs.listAttendanceTable.Where(m => m.MonthYear != null && m.MonthYear.Value.Year == CutOffDuration_Prev.MonthYear.Year && m.MonthYear.Value.Month == CutOffDuration_Prev.MonthYear.Month).ToList();
            }
            else
            {
                TotalDataByProfileIDs.Att_AttendanceTable_Prev = new List<Att_AttendanceTableEntity>();
            }
            #endregion

            #region Dữ liệu Sal_Grade
            listModel = new List<object>();
            listModel = Common.AddRange(8);
            listModel[3] = CutOffDuration.DateStart;
            listModel[4] = CutOffDuration.DateEnd;
            listModel[5] = ProfileIDs;
            TotalDataByProfileIDs.listGrade = newBaseService.GetData<Sal_GradeEntity>(listModel, ConstantSql.hrm_sal_sp_get_Grade_Sal_Kaizen, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listGrade == null ? ConstantSql.hrm_sal_sp_get_Grade_Sal_Kaizen + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            #endregion

            #region Dữ liệu bảng công master tính lại
            listModel = new List<object>();
            listModel = Common.AddRange(8);
            listModel[3] = new DateTime(CutOffDuration.MonthYear.Year - 1, 1, 1);
            listModel[4] = new DateTime(CutOffDuration.MonthYear.Year, 12, 31);
            listModel[5] = ProfileIDs;
            TotalDataByProfileIDs.listRecalAttendanceTable = newBaseService.GetData<Att_RecalAttendanceTableEntity>(listModel, ConstantSql.hrm_att_sp_get_RecalAttendanceTable_Sal_Kaizen, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listAttendanceTable == null ? ConstantSql.hrm_att_sp_get_RecalAttendanceTable_Sal_Kaizen + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            TotalDataByProfileIDs.listAttendanceTable = TotalDataByProfileIDs.listAttendanceTable.OrderByDescending(m => m.MonthYear).ToList();
            if (CutOffDuration_Prev != null)
            {
                TotalDataByProfileIDs.Att_RecalAttendanceTable_Prev = TotalDataByProfileIDs.listRecalAttendanceTable.Where(m => m.MonthYear != null && m.MonthYear.Value.Year == CutOffDuration_Prev.MonthYear.Year && m.MonthYear.Value.Month == CutOffDuration_Prev.MonthYear.Month).ToList();
            }
            else
            {
                TotalDataByProfileIDs.Att_RecalAttendanceTable_Prev = new List<Att_RecalAttendanceTableEntity>();
            }
            #endregion

            #region Dữ liệu bảng công chi tiết tính lại
            listModel = new List<object>();
            listModel = Common.AddRange(6);
            listModel[0] = Common.DotNetToOracle(CutOffDuration.ID.ToString());
            listModel[3] = ProfileIDs;
            TotalDataByProfileIDs.listRecalAttendanceTableItem = newBaseService.GetData<Att_RecalAttendanceTableItemEntity>(listModel, ConstantSql.hrm_att_sp_get_RecalAttendanceTableItem_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listAttendanceTableItem == null ? ConstantSql.hrm_att_sp_get_RecalAttendanceTableItem_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            #endregion

            #region Dữ liệu bảng công chi tiết tháng N - 1
            //[18/05/2016][HienNguyen][67437]
            if (_configAttendanceN_1 == true)
            {
                var _cutoffduration_N_1 = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutOffDuration.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                if (_cutoffduration_N_1 != null)
                {
                    listModel = new List<object>();
                    listModel = Common.AddRange(6);
                    listModel[0] = Common.DotNetToOracle(_cutoffduration_N_1.ID.ToString());
                    listModel[3] = ProfileIDs;
                    TotalDataByProfileIDs.listRecalAttendanceTableItem_N_1 = newBaseService.GetData<Att_RecalAttendanceTableItemEntity>(listModel, ConstantSql.hrm_att_sp_get_RecalAttendanceTableItem_Sal, UserLogin, ref status);
                    TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listRecalAttendanceTableItem_N_1 == null ? ConstantSql.hrm_att_sp_get_RecalAttendanceTableItem_Sal + " : " + status + "," : "";
                    if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
                }
                else
                {
                    TotalDataByProfileIDs.listRecalAttendanceTableItem_N_1 = new List<Att_RecalAttendanceTableItemEntity>();
                }
            }
            #endregion

            #region Dữ liệu Hre_StopWorking
            listModel = new List<object>();
            listModel = Common.AddRange(18);
            listModel[15] = ProfileIDs;
            TotalDataByProfileIDs.listHre_StopWorking = newBaseService.GetData<Hre_StopWorkingEntity>(listModel, ConstantSql.hrm_hr_sp_get_StopWorking_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listHre_StopWorking == null ? ConstantSql.hrm_hr_sp_get_StopWorking_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;

            #endregion
            #region Dữ liệu Sal_SeveranceAllowanceEntity
            listModel = new List<object>();
            listModel = Common.AddRange(16);
            listModel[13] = ProfileIDs;
            TotalDataByProfileIDs.listSal_SeveranceAllowance = newBaseService.GetData<Sal_SeveranceAllowanceEntity>(listModel, ConstantSql.hrm_sal_sp_get_SeveranceAllowance_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listSal_SeveranceAllowance == null ? ConstantSql.hrm_sal_sp_get_SeveranceAllowance_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;

            #endregion
            #region Dữ liệu Sal_SeveranceAllowanceItemEntity
            listModel = new List<object>();
            listModel = Common.AddRange(3);
            listModel[0] = ProfileIDs;
            TotalDataByProfileIDs.listSal_SeveranceAllowanceItem = newBaseService.GetData<Sal_SeveranceAllowanceItemEntity>(listModel, ConstantSql.hrm_sal_sp_get_SeveranceAllowanceItem_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listSal_SeveranceAllowanceItem == null ? ConstantSql.hrm_sal_sp_get_SeveranceAllowanceItem_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;

            #endregion

            #region Dữ liệu lương cơ bản
            listModel = new List<object>();
            listModel = Common.AddRange(11);
            listModel[6] = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1).AddMonths(1).AddDays(-1);
            listModel[8] = ProfileIDs;
            TotalDataByProfileIDs.listBasicSalary = newBaseService.GetData<Sal_BasicSalaryEntity>(listModel, ConstantSql.hrm_sal_sp_get_BasicPayroll_Sal_Kaizen, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listBasicSalary == null ? ConstantSql.hrm_sal_sp_get_BasicPayroll_Sal_Kaizen + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;

            if (IsApproveBasicSalary == true)
            {
                TotalDataByProfileIDs.listBasicSalary = TotalDataByProfileIDs.listBasicSalary.Where(m => m.Status == EnumDropDown.Sal_BasicSalaryStatus.E_APPROVED.ToString()).ToList();
            }

            listModel = new List<object>();
            listModel = Common.AddRange(11);
            listModel[6] = new DateTime(CutOffDuration.MonthYear.Year, 3, 31);
            listModel[8] = ProfileIDs;
            if (CutOffDuration.MonthYear.Month < 3)
            {
                TotalDataByProfileIDs.listBasicSalaryT3 = newBaseService.GetData<Sal_BasicSalaryEntity>(listModel, ConstantSql.hrm_sal_sp_get_BasicPayroll_Sal_Kaizen, UserLogin, ref status);
                TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listBasicSalaryT3 == null ? ConstantSql.hrm_sal_sp_get_BasicPayroll_Sal_Kaizen + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            }
            else
            {
                TotalDataByProfileIDs.listBasicSalaryT3 = TotalDataByProfileIDs.listBasicSalary.Where(m => m.DateOfEffect <= new DateTime(CutOffDuration.MonthYear.Year, 3, 31)).ToList();
            }

            #endregion

            #region Dữ liệu hold lương

            listModel = new List<object>();
            listModel = Common.AddRange(11);
            listModel[8] = ProfileIDs;
            TotalDataByProfileIDs.listSal_HoldSalary = newBaseService.GetData<Sal_HoldSalaryEntity>(listModel, ConstantSql.hrm_sal_sp_get_HoldSalary_Sal_Kaizen, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listSal_HoldSalary == null ? ConstantSql.hrm_sal_sp_get_HoldSalary_Sal_Kaizen + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;

            #endregion

            #region Dữ liệu quá trình công tác
            listModel = new List<object>();
            listModel = Common.AddRange(18);
            listModel[10] = WorkHistoryStatus.E_APPROVED.ToString();
            listModel[12] = CutOffDuration.DateEnd;
            listModel[15] = ProfileIDs;
            TotalDataByProfileIDs.listWorkHistory = newBaseService.GetData<Hre_WorkHistoryEntity>(listModel, ConstantSql.hrm_hr_sp_get_WorkHistory_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listWorkHistory == null ? ConstantSql.hrm_hr_sp_get_WorkHistory_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            #endregion

            #region Dữ liệu thông tin tài khoản
            listModel = new List<object>();
            listModel = Common.AddRange(9);
            listModel[6] = ProfileIDs;
            TotalDataByProfileIDs.listSalaryInformation = newBaseService.GetData<Sal_SalaryInformationEntity>(listModel, ConstantSql.hrm_sal_sp_get_Sal_SalaryInformation_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listSalaryInformation == null ? ConstantSql.hrm_sal_sp_get_Sal_SalaryInformation_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            #endregion

            #region Dữ liệu ca làm việc


            listModel = new List<object>();
            listModel = Common.AddRange(11);
            listModel[3] = CutOffDuration.DateStart.AddMonths(-1);
            // Tung.Tran [15/05/2019][0105225]: Các enum kỳ ứng cần lấy dữ liệu sau kỳ công, Nên DateEnd + 1 tháng để lấy đầy đủ data
            listModel[4] = CutOffDuration.DateEnd.AddMonths(1);
            listModel[8] = ProfileIDs;
            TotalDataByProfileIDs.listRoster = newBaseService.GetData<Att_RosterEntity>(listModel, ConstantSql.hrm_att_sp_get_Roster_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listRoster == null ? ConstantSql.hrm_att_sp_get_Roster_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;

            #endregion

            #region Dữ liệu OT
            listModel = new List<object>();
            listModel = Common.AddRange(14);
            listModel[2] = dateMinByCutOffDuration;
            listModel[3] = dateMaxByCutOffDuration;

            listModel[11] = ProfileIDs;
            TotalDataByProfileIDs.listOverTime = newBaseService.GetData<Att_OvertimeEntity>(listModel, ConstantSql.hrm_att_sp_get_Overtime_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listOverTime == null ? ConstantSql.hrm_att_sp_get_Overtime_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;

            if (CutOffDuration.BackPayFrom != null && CutOffDuration.BackPayTo != null)
            {
                TotalDataByProfileIDs.listOverTimeByCutOffBackPay = TotalDataByProfileIDs.listOverTime.Where(s => s.WorkDateRoot >= CutOffDuration.BackPayFrom.Value && s.WorkDateRoot <= CutOffDuration.BackPayTo.Value).ToList();
                TotalDataByProfileIDs.listOverTime = TotalDataByProfileIDs.listOverTime.Where(s => s.WorkDateRoot >= CutOffDuration.DateStart && s.WorkDateRoot <= CutOffDuration.DateEnd).ToList();
            }
            #endregion

            #region Dữ liệu ngày nghỉ
            listModel = new List<object>();
            listModel = Common.AddRange(14);
            listModel[2] = CutOffDuration.DateStart;
            // Tung.Tran [0113304][09/03/2020]: Lấy dư thêm 1 tháng để sử dụng cho 1 số pt. 
            listModel[3] = CutOffDuration.DateEnd.AddMonths(1);
            listModel[11] = ProfileIDs;
            TotalDataByProfileIDs.listLeaveDayNotStatus = newBaseService.GetData<Att_LeaveDayEntity>(listModel, ConstantSql.hrm_att_getdata_LeaveDay_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.listLeaveDayNotStatus == null ? ConstantSql.hrm_att_getdata_LeaveDay_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            TotalDataByProfileIDs.listLeaveDay = TotalDataByProfileIDs.listLeaveDayNotStatus.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()).ToList();

            #endregion

            #region Dữ liệu chế độ công nhân viên
            listModel = new List<object>();
            listModel = Common.AddRange(5);
            listModel[1] = CutOffDuration.ID;
            listModel[2] = ProfileIDs;
            TotalDataByProfileIDs.ListAttGrade = newBaseService.GetData<Att_GradeEntity>(listModel, ConstantSql.hrm_att_sp_get_GradeAttendanceByProIdCutID_Sal_Kaizen, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.ListAttGrade == null ? ConstantSql.hrm_att_sp_get_GradeAttendanceByProIdCutID_Sal_Kaizen + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            #endregion

            #region Dữ liệu bảo hiểm
            if (CutOffDuration_Prev != null)
            {
                listModel = Common.AddRange(5);
                listModel[0] = CutOffDuration_Prev.DateStart;
                listModel[1] = CutOffDuration.DateEnd;
                listModel[2] = ProfileIDs;
                TotalDataByProfileIDs.ListInsuranceForPayrollMonthly = newBaseService.GetData<Ins_InsuranceForPayrollMonthlyEntity>(listModel, ConstantSql.hrm_ins_sp_get_InsuranceForPayrollMonthly_Sal_Kaizen, UserLogin, ref status);
                TotalDataByProfileIDs.Status += TotalDataByProfileIDs.ListInsuranceForPayrollMonthly == null ? ConstantSql.hrm_ins_sp_get_InsuranceForPayrollMonthly_Sal_Kaizen + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            }
            else
            {
                TotalDataByProfileIDs.ListInsuranceForPayrollMonthly = new List<Ins_InsuranceForPayrollMonthlyEntity>();
            }
            #endregion

            #region Dữ liệu Att_ProfileTimeSheetEntity
            listModel = Common.AddRange(7);
            listModel[0] = ProfileIDs;
            listModel[2] = CutOffDuration.DateStart;
            listModel[3] = CutOffDuration.DateEnd;
            TotalDataByProfileIDs.ListAtt_ProfileTimeSheet = newBaseService.GetData<Att_ProfileTimeSheetEntity>(listModel, ConstantSql.hrm_att_sp_get_ProfileTimeSheet_Sal, UserLogin, ref status);
            TotalDataByProfileIDs.Status += TotalDataByProfileIDs.ListAtt_ProfileTimeSheet == null ? ConstantSql.hrm_att_sp_get_ProfileTimeSheet_Sal + " : " + status + "," : "";
            if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            #endregion

            #region Dữ liệu phụ cấp lương nhóm
            if (isComputePayrollByGroup == true)
            {
                //[18/12/2017][bang.nguyen][91106][new func]
                listModel = new List<object>();
                listModel = Common.AddRange(4);
                listModel[0] = CutOffDuration.ID;
                listModel[1] = ProfileIDs;
                TotalDataByProfileIDs.ListPerformanceAllowance = newBaseService.GetData<Sal_PerformanceAllowanceEntity>(listModel, ConstantSql.hrm_sal_sp_get_PerformanceAllowance_Sal_Kaizen, UserLogin, ref status);
                TotalDataByProfileIDs.Status += TotalDataByProfileIDs.ListPerformanceAllowance == null ? ConstantSql.hrm_sal_sp_get_PerformanceAllowance_Sal_Kaizen + " : " + status + "," : "";
                if (!string.IsNullOrEmpty(TotalDataByProfileIDs.Status)) return TotalDataByProfileIDs;
            }
            #endregion



            #endregion

            return TotalDataByProfileIDs;
        }

        /// <summary>
        /// Hàm chạy tính hết tất cả các formula có trong grade
        /// Xử lý:
        /// B1: Lấy chế độ lương của nhân viên đang tính
        /// B2: Kiểm tra có sài cấu hình hay không
        /// B3: For qua từng phần tử của chế độ lương
        /// B4: 
        ///     - Đối với TH tính theo thứ tự => Gọi hàm GetStaticValues xử lý tính
        ///     - Đối với TH ko tính theo thứ tự => Gọi hàm ParseFormula đệ quy để tính
        /// </summary>
        /// <param name="listElementFormula"></param>
        /// <param name="listElement"></param>
        /// <param name="TotalData"></param>
        /// <param name="profileItem"></param>
        /// <param name="CutOffDuration"></param>
        /// <param name="listTmpDeduction"></param>
        /// <returns></returns>
        public List<ElementFormula> ParseElementFormulaForComputePayroll(
            ComputePayrollDataModelKZAll TotalDataAll,
            List<ElementFormula> listElementFormula,
            List<Cat_ElementEntity> listGradeElement,
            ComputePayrollDataModelKZ TotalData600,
            Hre_ProfileEntity profileItem,
            Att_CutOffDurationEntity CutOffDuration,
            Att_CutOffDurationEntity CutOffDurationPayBack,
            Sal_GradeEntity GradeElement,
            Dictionary<Guid, ValueCount> listTmpDeduction,
            bool ComputeOrderNumber
            )
        {
            //lấy bảng công của nv trong tháng tính lương
            Att_AttendanceTableEntity objAttendanceTableProCut = new Att_AttendanceTableEntity();

            objAttendanceTableProCut = TotalDataAll.dicAttendanceTable
            .GetValueOrNew(profileItem.ID)
            .Where(m => ((m.CutOffDurationID == CutOffDuration.ID) || (m.CutOffDurationID == null && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart)))
            .FirstOrDefault();

            //lấy bảng công của nv trong tháng tính lương
            Att_RecalAttendanceTableEntity objRecalAttendanceTableProCut = TotalDataAll.dicRecalAttendanceTable.GetValueOrNew(profileItem.ID)
                .Where(m => ((m.CutOffDurationID == CutOffDuration.ID) || (m.CutOffDurationID == null && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart)))
                .FirstOrDefault();

            if (ComputeOrderNumber)
            {
                #region xu ly lấy enum 1 lần cho 1 chế độ lương để biết thứ tự tính => các lần sau chỉ sử dụng
                var gradePayrollID = Guid.Empty;
                if (GradeElement.GradePayrollID != null)
                {
                    gradePayrollID = GradeElement.GradePayrollID.Value;
                }
                if (!TotalData600.listElementForGrade.ContainsKey(gradePayrollID))
                {
                    TotalData600.listEnum = new List<string>();
                    listGradeElement = listGradeElement.OrderBy(m => m.OrderNumber).ToList();
                    var listElementCode = listGradeElement.Select(s => s.ElementCode).ToList();

                    foreach (var elementItem in listGradeElement)
                    {
                        try
                        {
                            //ktra xem co enum chua duoc tinh hay khong
                            //neu con enum chua tinh => tinh gia tri cho enum
                            //neu khong con enum chua tinh => parte song thuc
                            //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                            var listEnum = Common.ParseFormulaToList(elementItem.Formula);
                            listEnum = listEnum.Select(s => s = s.Replace("[", "").Replace("]", "")).ToList();

                            //Các phần tử tính lương chưa có kết quả
                            List<string> ListEnumNotValue = listEnum.Where(m => !listElementFormula.Any(t => t.VariableName == m) && !listElementCode.Contains(m)).ToList();
                            if (ListEnumNotValue.Count > 0)
                            {
                                TotalData600.listEnum.AddRange(ListEnumNotValue.ToList());
                                listElementFormula = GetStaticValues(
                                    TotalDataAll,
                                    TotalData600,
                                    listElementFormula,
                                    profileItem,
                                    CutOffDuration,
                                    CutOffDurationPayBack,
                                    ListEnumNotValue,
                                    GradeElement.GradePayrollID,
                                    objAttendanceTableProCut,
                                    listTmpDeduction,
                                    objRecalAttendanceTableProCut);
                            }

                            //[25/10/2017][bang.nguyen]
                            var result = FormulaHelper.ParseFormula(elementItem.Formula, listElementFormula.Distinct().ToList());
                            listElementFormula.Add(new ElementFormula(elementItem.ElementCode, result.Value, 0, result.ErrorMessage));
                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesage += "ComputeOrderNumber GetStaticValues ParseFormula: Code employee: " + profileItem.CodeEmp
                                  + "; Code Emlement: " + elementItem.ElementCode
                                  + "; Fomular: " + elementItem.Formula
                                  + "; error: " + ex.Message + ex.StackTrace;
                        }
                    }
                    //khi tinh nhiều hơn 1 nv cùng lúc => xử lý bộ thứ tự tính 1 enum 1 lần cho 1 chế độ lương
                    if (TotalData600.totalProfile > 1)
                    {
                        var objElementForGrade = new ElementForGrade { listEnum = TotalData600.listEnum.ToList(), listOrderComputeElement = new List<OrderComputeElement>() };
                        //giữ lại để lần sau lấy ra tính
                        TotalData600.listElementForGrade.Add(gradePayrollID, objElementForGrade);
                    }
                }
                else
                {
                    try
                    {
                        var objElementForGrade = TotalData600.listElementForGrade.GetValueOrNew(gradePayrollID);
                        var listEnum = objElementForGrade.listEnum.ToList();
                        //tinh cho cac enum he thống
                        listElementFormula = GetStaticValues(TotalDataAll,
                            TotalData600,
                            listElementFormula,
                            profileItem,
                            CutOffDuration,
                            null,
                            listEnum,
                            GradeElement.GradePayrollID,
                            objAttendanceTableProCut,
                            listTmpDeduction,
                            objRecalAttendanceTableProCut);
                        listGradeElement = listGradeElement.OrderBy(m => m.OrderNumber).ToList();
                        foreach (var elementItem in listGradeElement)
                        {
                            try
                            {
                                var result = FormulaHelper.ParseFormula(elementItem.Formula, listElementFormula.Distinct().ToList());
                                listElementFormula.Add(new ElementFormula(elementItem.ElementCode, result.Value, 0, result.ErrorMessage));
                            }
                            catch (Exception ex)
                            {
                                TotalData600.strErrMesage += "ComputeOrderNumber ParseFormula: Code employee: " + profileItem.CodeEmp
                                  + "; Code Emlement: " + elementItem.ElementCode
                                  + "; Fomular: " + elementItem.Formula
                                  + "; error: " + ex.Message + ex.StackTrace;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        var objElementForGrade = TotalData600.listElementForGrade[gradePayrollID];
                        TotalData600.strErrMesage += "ComputeOrderNumber GetStaticValues: Code employee: " + profileItem.CodeEmp
                                  + "; list enum : " + objElementForGrade.listEnum.ToList().ToSplitString()
                                  + "; error: " + ex.Message + ex.StackTrace;
                    }
                }
                #endregion
            }
            else
            {
                //khi tính lương không theo thứ tự
                #region xu ly chi de qui 1 lần cho 1 chế độ lương để biết thứ tự tính => các lần sau không cần đệ qui lại
                var gradePayrollID = Guid.Empty;
                if (GradeElement.GradePayrollID != null)
                {
                    gradePayrollID = GradeElement.GradePayrollID.Value;
                }
                if (!TotalData600.listElementForGrade.ContainsKey(gradePayrollID))
                {
                    //khởi tạo lại
                    TotalData600.OrderIndex = 0;
                    TotalData600.listOrderComputeElement = new List<OrderComputeElement>();
                    TotalData600.listEnum = new List<string>();
                    TotalData600.listElementCode = listGradeElement.Select(s => s.ElementCode).ToList();

                    foreach (var elementItem in listGradeElement)
                    {
                        try
                        {
                            listElementFormula = ParseFormulaForComputePayroll(TotalDataAll,
                                elementItem,
                                listElementFormula,
                                TotalData600,
                                profileItem,
                                CutOffDuration,
                                CutOffDurationPayBack,
                                GradeElement.GradePayrollID,
                                objAttendanceTableProCut,
                                objRecalAttendanceTableProCut,
                                listTmpDeduction
                                );
                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesage += "ParseFormulaForComputePayroll: Code employee: " + profileItem.CodeEmp
                                + "; Code Emlement: " + elementItem.ElementCode
                                + "; Fomular: " + elementItem.Formula
                                + "; error: " + ex.Message + ex.StackTrace;
                        }
                    }

                    //ds thứ tự tính (đã được đệ qui 1 lần)
                    if (TotalData600.totalProfile > 1)
                    {
                        var objElementForGrade = new ElementForGrade { listEnum = TotalData600.listEnum.ToList(), listOrderComputeElement = TotalData600.listOrderComputeElement.ToList() };
                        //giữ lại để lần sau lấy ra tính
                        TotalData600.listElementForGrade.Add(gradePayrollID, objElementForGrade);
                    }
                }
                else
                {
                    try
                    {
                        var objElementForGrade = TotalData600.listElementForGrade[gradePayrollID];
                        var listOrderComputeElement = objElementForGrade.listOrderComputeElement.OrderBy(s => s.Order).ToList();
                        var listEnum = objElementForGrade.listEnum.ToList();
                        //tinh cho cac enum he thống
                        listElementFormula = GetStaticValues(TotalDataAll,
                            TotalData600,
                            listElementFormula,
                            profileItem,
                            CutOffDuration,
                            null,
                            listEnum,
                            GradeElement.GradePayrollID,
                            objAttendanceTableProCut,
                            listTmpDeduction,
                            objRecalAttendanceTableProCut);

                        foreach (var orderComputeElement in listOrderComputeElement)
                        {
                            try
                            {
                                var result = FormulaHelper.ParseFormula(orderComputeElement.Formula, listElementFormula.Distinct().ToList());
                                listElementFormula.Add(new ElementFormula(orderComputeElement.ElementCode, result.Value, 0, result.ErrorMessage));
                            }
                            catch (Exception ex)
                            {
                                TotalData600.strErrMesage += "ParseFormula: Code employee: " + profileItem.CodeEmp
                                  + "; Code Emlement: " + orderComputeElement.ElementCode
                                  + "; Fomular: " + orderComputeElement.Formula
                                  + "; error: " + ex.Message + ex.StackTrace;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        var objElementForGrade = TotalData600.listElementForGrade[gradePayrollID];
                        TotalData600.strErrMesage += "GetStaticValues: Code employee: " + profileItem.CodeEmp
                                  + "; list enum : " + objElementForGrade.listEnum.ToList().ToSplitString()
                                  + "; error: " + ex.Message + ex.StackTrace;
                    }
                }
                #endregion
            }
            return listElementFormula;
        }

        /// <summary>
        /// Hàm Parse công thức ra phần tử và lưu vào list tổng 
        /// Xử lý:
        /// B1: Tách lấy chuỗi phần tử từ công thức
        /// B2: Tách lấy phần tử chưa được tính trước đó
        /// B3: For qua từng phần tử chưa được tính
        /// B4: Kiểm tra xem phần tử là Enum hay phần tử công thức
        /// B5: Nếu là enum => Xử lý tính , Nếu là phần tử công thức => Tiếp tục gọi đệ quy tách phần tử
        /// </summary>
        /// <param name="formula"></param>
        /// <param name="listElementFormula"></param>
        /// <param name="TotalData"></param>
        /// <param name="profileItem"></param>
        /// <param name="CutOffDuration"></param>
        /// <param name="listTmpDeduction"></param>
        /// <returns></returns>
        public List<ElementFormula> ParseFormulaForComputePayroll(
            ComputePayrollDataModelKZAll TotalDataAll,
            Cat_ElementEntity formula,
            List<ElementFormula> listElementFormula,
            ComputePayrollDataModelKZ TotalData600,
            Hre_ProfileEntity profileItem,
            Att_CutOffDurationEntity CutOffDuration,
            Att_CutOffDurationEntity CutOffDurationPayBack,
            Guid? GradePayrollID,
            Att_AttendanceTableEntity objAttendanceTableProCut,
            Att_RecalAttendanceTableEntity objRecalAttendanceTableProCut,
            Dictionary<Guid, ValueCount> listTmpDeduction)
        {
            string strFormula = formula.Formula;

            //Các phần tử tính lương tách ra từ 1 chuỗi công thức
            List<string> ListFormula = Common.ParseFormulaToList(strFormula).Where(m => m.IndexOf('[') != -1 && m.IndexOf(']') != -1).ToList();

            //Các phần tử tính lương chưa có kết quả
            ListFormula = ListFormula.Select(s => s = s.Replace("[", "").Replace("]", "")).ToList();
            List<string> ListFormulaNotValue = ListFormula.Where(m => !listElementFormula.Any(t => t.VariableName == m)).ToList();

            //có phần tử chưa được tính trước đó
            if (ListFormulaNotValue != null && ListFormulaNotValue.Count > 0)
            {
                List<string> ListEnumNotValue = ListFormulaNotValue.Where(s => !TotalData600.listElementCode.Contains(s)).ToList();
                foreach (string elementNotValue in ListFormulaNotValue)
                {
                    //khi all các enum và phần tử trong công thức này đã có giá trị thì không kiểm tra nữa
                    if (!ListFormulaNotValue.Any(m => !listElementFormula.Any(t => t.VariableName == m)))
                    {
                        break;
                    }

                    //kiểm tra là Enum hay là phần tử (có giá trị từ 1 enum hay công thức)
                    if (TotalDataAll.listElement_All.Any(m => (m.GradePayrollID != null || m.IsApplyGradeAll == true) && m.ElementCode == elementNotValue))//là phần tử công thức
                    {
                        if (GradePayrollID != null)
                        {
                            listElementFormula = ParseFormulaForComputePayroll(TotalDataAll,
                                TotalDataAll.listElement_All.Where(m => m.ElementCode == elementNotValue && (m.GradePayrollID == GradePayrollID || m.IsApplyGradeAll == true)).FirstOrDefault(),
                                listElementFormula,
                                TotalData600,
                                profileItem,
                                CutOffDuration,
                                CutOffDurationPayBack,
                                GradePayrollID,
                                objAttendanceTableProCut,
                                objRecalAttendanceTableProCut,
                                listTmpDeduction);
                        }
                        else
                        {
                            listElementFormula = ParseFormulaForComputePayroll(TotalDataAll,
                                TotalDataAll.listElement_All.Where(m => m.ElementCode == elementNotValue).FirstOrDefault(),
                                listElementFormula,
                                TotalData600,
                                profileItem,
                                CutOffDuration,
                                CutOffDurationPayBack,
                                GradePayrollID,
                                objAttendanceTableProCut,
                                objRecalAttendanceTableProCut,
                                listTmpDeduction);
                        }
                    }
                    else//là phần tử enum
                    {
                        try
                        {
                            //lọc bớt các enum tính lương chưa có kết quả
                            ListEnumNotValue = ListEnumNotValue.Where(m => !listElementFormula.Any(t => t.VariableName == m)).ToList();
                            //chỉ lấy giá trị các enum nào chưa có giá trị
                            if (ListEnumNotValue.Count > 0)
                            {
                                TotalData600.listEnum.AddRange(ListEnumNotValue);
                                listElementFormula = GetStaticValues(TotalDataAll,
                                    TotalData600,
                                    listElementFormula,
                                    profileItem,
                                    CutOffDuration,
                                    CutOffDurationPayBack,
                                    ListEnumNotValue,
                                    GradePayrollID,
                                    objAttendanceTableProCut,
                                    listTmpDeduction,
                                    objRecalAttendanceTableProCut);
                            }
                        }
                        catch (Exception ex)
                        {
                            TotalData600.strErrMesage += "GetStaticValues: Code employee: " + profileItem.CodeEmp
                                 + "; Emlement: " + elementNotValue
                                 + "; Fomular: " + strFormula
                                 + "; error: " + ex.Message + ex.StackTrace;
                        }
                    }
                }
            }

            if (TotalData600.totalProfile > 1 && !TotalData600.listOrderComputeElement.Any(s => s.ElementCode == formula.ElementCode))
            {
                var objOrderComputeElement = new OrderComputeElement();
                TotalData600.OrderIndex = TotalData600.OrderIndex + 1;
                objOrderComputeElement.Order = TotalData600.OrderIndex;
                objOrderComputeElement.ElementCode = formula.ElementCode;
                objOrderComputeElement.Formula = formula.Formula;
                TotalData600.listOrderComputeElement.Add(objOrderComputeElement);
            }

            //[25/10/2017][bang.nguyen]
            var result = FormulaHelper.ParseFormula(formula.Formula, listElementFormula.Distinct().ToList());
            listElementFormula.Add(new ElementFormula(formula.ElementCode, result.Value, 0, result.ErrorMessage));

            return listElementFormula.Distinct().ToList();
        }

        #region GetStaticValues

        #region Tung.Tran: Nhánh các enum khác
        public void GetStaticValuesOther(
           ComputePayrollDataModelKZAll TotalDataAll,
           ComputePayrollDataModelKZ TotalData600,
           List<ElementFormula> listElementFormula,
           Hre_ProfileEntity profileItem,
           Att_CutOffDurationEntity CutOffDuration,
           List<string> formula,
           Guid? GradePayrollID,
           Att_AttendanceTableEntity objAttendanceTableProCut,
           Dictionary<Guid, ValueCount> listTmpDeduction,
           Sal_GetDataComputePayrollKZServices dataComputeSer,
           Att_CutOffDurationEntity cutOffDurationPre,
           Att_RecalAttendanceTableEntity objRecalAttendanceTableProCut
           )
        {
            ElementFormula item = new ElementFormula();

            #region Các phần tử sử dụng lại của tháng trước payback
            //[21/08/2017][bang.nguyen][86779][Modify Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, "DYN_SALREUSE_",
                new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", "_N_6", "_N_7", "_N_8", "_N_9", "_N_10", "_N_11", "_N_12", "_N_13", "_N_14", "_N_15", "_N_16", "_N_17", "_N_18", }))
            {

                var listEndWithMonthRe = new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", "_N_6", "_N_7", "_N_8", "_N_9", "_N_10", "_N_11", "_N_12", "_N_13", "_N_14", "_N_15", "_N_16", "_N_17", "_N_18" };
                var listElementByReUse = TotalDataAll.listElement_All.Where(s => s.IsReUse == true).ToList();

                var typeDatetime = EnumDropDown.ElementDataType.Datetime.ToString();
                var typeDouble = EnumDropDown.ElementDataType.Double.ToString();
                var typeNvarchar = EnumDropDown.ElementDataType.Nvarchar.ToString();
                var isEncryptData = ConstantPathWeb.Hrm_IsEncryptData;

                var _startWith = "DYN_SALREUSE_";
                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormulaReUse = formula.Where(m => m.StartsWith(_startWith)
                && listEndWithMonthRe.Any(s => m.EndsWith(s))).Distinct().ToList();

                DateTime _monthYear = CutOffDuration.MonthYear;
                List<int> listMonthRe = new List<int>();

                // Lấy tất cả các tháng lùi có trong công thức => để nếu dữ liệu cùng 1 tháng thì lấy 1 lần luôn
                foreach (var objFormulaReUse in ListFormulaReUse)
                {
                    var _element = objFormulaReUse;
                    foreach (var endWithmonthRe in listEndWithMonthRe)
                    {
                        if (_element.EndsWith(endWithmonthRe))
                        {
                            var _value = endWithmonthRe.Replace("_N_", "");
                            int _valueOutPut = 1;
                            //giá trị nhập vào đúng là số
                            if (int.TryParse(_value, out _valueOutPut))
                            {
                                listMonthRe.Add(_valueOutPut);
                            }
                        }
                    }
                }

                using (var context = new VnrHrmDataContext())
                {
                    var unitOfWork = (IUnitOfWork)new UnitOfWork(context);

                    // Xử lý gán giá trị cho phần tử 
                    // Duyệt từng tháng 
                    foreach (var monthRe in listMonthRe)
                    {
                        DateTime _datetemp = _monthYear.AddMonths(-monthRe);
                        var listElementtReByMonth = new List<string>();
                        var _endWith = "_N_" + monthRe.ToString();

                        //lay list phan tu thuoc thang nay
                        foreach (var objFormulaReUse in ListFormulaReUse)
                        {
                            var _element = objFormulaReUse;
                            if (_element.EndsWith(_endWith))
                            {
                                _element = _element.Replace(_startWith, "").Replace(_endWith, "");
                                listElementtReByMonth.Add(_element);
                            }
                        }

                        // Các phần tử không có giá trị thì trả về giá trị mặc định của kiểu dữ liệu đó
                        // Chuỗi và ngày tháng => rỗng
                        // Số => 0

                        if (!TotalData600.dicPayrollTableReUseByMonth.ContainsKey(_datetemp))
                        {
                            // Lấy giá trị các phần tử gọi lại của tháng lùi đang tính
                            // Tung.Tran [20/05/2019][0105678]: Kaizen xử lý lấy cho 600 nhân viên , 1 tháng 1 lần lấy
                            var listPayrollTableReUseByMonth = unitOfWork.CreateQueryable<Sal_PayrollTableReUse>(Guid.Empty,
                               s => s.ProfileID != null
                               && TotalData600.listProfileIds.Contains(s.ProfileID.Value)
                               && s.MonthYear != null
                               && s.MonthYear.Value.Month == _datetemp.Month
                               && s.MonthYear.Value.Year == _datetemp.Year
                               && s.Code != null
                               && s.Code != string.Empty)
                               .Select(s => new Sal_PayrollTableReUseEntity { ProfileID = s.ProfileID, Code = s.Code, Value = s.Value, E_Value = s.E_Value }).ToList();

                            TotalData600.dicPayrollTableReUseByMonth.Add(_datetemp, listPayrollTableReUseByMonth);
                        }

                        var listPayrollTableReUseByProfile = TotalData600.dicPayrollTableReUseByMonth
                                                           .GetValueOrNew(_datetemp)
                                                           .Where(x => x.ProfileID == profileItem.ID);

                        #region Gán giá trị cho all phần tử
                        foreach (var codeElementtReByMonth in listElementtReByMonth)
                        {
                            // Xác định kiểu dữ liệu của phần tử này
                            var objElementByReUse = listElementByReUse.Where(s => s.ElementCode == codeElementtReByMonth).FirstOrDefault();

                            var objPayrollTableReUse = listPayrollTableReUseByProfile.Where(s => s.Code == codeElementtReByMonth).FirstOrDefault();
                            #region Phần tử có dữ liệu Payback tháng trước đó
                            if (objPayrollTableReUse != null)
                            {
                                string _value = string.Empty;
                                if (isEncryptData == true)
                                {
                                    if (!string.IsNullOrEmpty(objPayrollTableReUse.E_Value))
                                    {
                                        _value = objPayrollTableReUse.E_Value.ToString().Decrypt();
                                    }
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(objPayrollTableReUse.Value))
                                    {
                                        _value = objPayrollTableReUse.Value;
                                    }
                                }

                                if (!string.IsNullOrEmpty(_value))
                                {
                                    item = new ElementFormula(_startWith + objPayrollTableReUse.Code + _endWith, _value, 0);
                                    listElementFormula.Add(item);
                                }
                                else
                                {
                                    item = new ElementFormula(_startWith + objPayrollTableReUse.Code + _endWith, 0, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            #endregion
                            #region Không có tháng trước đó => gán giá trị mặc định
                            else
                            {
                                if (objElementByReUse != null && !string.IsNullOrEmpty(objElementByReUse.Type))
                                {
                                    if (objElementByReUse.Type == typeDatetime || objElementByReUse.Type == typeNvarchar)
                                    {
                                        item = new ElementFormula(_startWith + codeElementtReByMonth + _endWith, "", 0);
                                        listElementFormula.Add(item);
                                    }
                                    else if (objElementByReUse.Type == typeDouble)
                                    {
                                        item = new ElementFormula(_startWith + codeElementtReByMonth + _endWith, 0, 0);
                                        listElementFormula.Add(item);
                                    }
                                }
                                else
                                {
                                    item = new ElementFormula(_startWith + codeElementtReByMonth + _endWith, 0, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            #endregion
                        }
                        #endregion

                    }
                }
            }

            #endregion

            #region Quy đổi tiền tệ
            if (CheckIsExistFormula(listElementFormula, ref formula, "", TotalDataAll.listCurrency.Select(m => m.Code + "_BUYING_" + ExchangeRateType.E_RATE_SOCIALINSURANCE.ToString()).ToArray()))
            {
                //list lưu các element 
                var ListExChangeRateElement = TotalDataAll.listElement_All.Where(m => m.ElementCode.EndsWith("_BUYING_" + ExchangeRateType.E_RATE_SOCIALINSURANCE.ToString()) && m.GradePayrollID == null).ToList();
                //list lưu giá trị tiền tệ
                var ListExChangeRateByGrade = TotalDataAll.listExchangeRate.Where(m => m.MonthOfEffect <= CutOffDuration.DateEnd && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID)).ToList();
                foreach (var i in ListExChangeRateElement)
                {
                    string[] arrCurrencyCode = i.ElementCode.Split('_').ToArray();
                    if (arrCurrencyCode.Count() >= 2)
                    {
                        var ExChangeRateItem = ListExChangeRateByGrade.Where(m => m.CurrencyBaseCode == arrCurrencyCode[0] && m.CurrencyDestCode == arrCurrencyCode[1] && m.Type == ExchangeRateType.E_RATE_SOCIALINSURANCE.ToString()).OrderByDescending(m => m.MonthOfEffect).FirstOrDefault();
                        if (ExChangeRateItem != null)
                        {
                            item = new ElementFormula(i.ElementCode, ExChangeRateItem.BuyingRate != null ? ExChangeRateItem.BuyingRate : 0, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(i.ElementCode, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, "", TotalDataAll.listCurrency.Select(m => m.Code + "_SELLING_" + ExchangeRateType.E_RATE_SOCIALINSURANCE.ToString()).ToArray()))
            {
                //list lưu các element 
                var ListExChangeRateElement = TotalDataAll.listElement_All.Where(m => m.ElementCode.EndsWith("_SELLING_" + ExchangeRateType.E_RATE_SOCIALINSURANCE.ToString()) && m.GradePayrollID == null).ToList();
                //list lưu giá trị tiền tệ
                var ListExChangeRateByGrade = TotalDataAll.listExchangeRate.Where(m => m.MonthOfEffect <= CutOffDuration.DateEnd && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID)).ToList();
                foreach (var i in ListExChangeRateElement)
                {
                    string[] arrCurrencyCode = i.ElementCode.Split('_').ToArray();
                    if (arrCurrencyCode.Count() >= 2)
                    {
                        var ExChangeRateItem = ListExChangeRateByGrade.Where(m => m.CurrencyBaseCode == arrCurrencyCode[0] && m.CurrencyDestCode == arrCurrencyCode[1] && m.Type == ExchangeRateType.E_RATE_SOCIALINSURANCE.ToString()).OrderByDescending(m => m.MonthOfEffect).FirstOrDefault();
                        if (ExChangeRateItem != null)
                        {
                            item = new ElementFormula(i.ElementCode, ExChangeRateItem.SellingRate != null ? ExChangeRateItem.SellingRate : 0, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(i.ElementCode, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }


            if (CheckIsExistFormula(listElementFormula, ref formula, "", TotalDataAll.listCurrency.Select(m => m.Code + "_BUYING").ToArray()))
            {
                //list lưu các element 
                var ListExChangeRateElement = TotalDataAll.listElement_All.Where(m => m.ElementCode.EndsWith("_BUYING") && m.GradePayrollID == null).ToList();
                //list lưu giá trị tiền tệ
                var ListExChangeRateByGrade = TotalDataAll.listExchangeRate.Where(m => m.MonthOfEffect <= CutOffDuration.DateEnd && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID)).ToList();
                foreach (var i in ListExChangeRateElement)
                {
                    string[] arrCurrencyCode = i.ElementCode.Split('_').ToArray();
                    if (arrCurrencyCode.Count() == 3)
                    {
                        var ExChangeRateItem = ListExChangeRateByGrade.Where(m => m.CurrencyBaseCode == arrCurrencyCode[0] && m.CurrencyDestCode == arrCurrencyCode[1] && (m.Type == ExchangeRateType.E_RATE_PAYROLL.ToString() || m.Type == null)).OrderByDescending(m => m.MonthOfEffect).FirstOrDefault();
                        if (ExChangeRateItem != null)
                        {
                            item = new ElementFormula(i.ElementCode, ExChangeRateItem.BuyingRate != null ? ExChangeRateItem.BuyingRate : 0, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(i.ElementCode, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            //[05/09/2016][HienNguyen][73048]
            //Phần tử tính lương: lấy tỷ giá tháng N-1
            if (CheckIsExistFormula(listElementFormula, ref formula, "", TotalDataAll.listCurrency.Select(m => m.Code + "_BUYING_PREV").ToArray()))
            {
                //list lưu các element 
                var ListExChangeRateElement = TotalDataAll.listElement_All.Where(m => m.ElementCode.EndsWith("_BUYING_PREV") && m.GradePayrollID == null).ToList();
                //list lưu giá trị tiền tệ
                var ListExChangeRateByGrade = TotalDataAll.listExchangeRate.Where(m => m.MonthOfEffect <= CutOffDuration.DateEnd.AddMonths(-1) && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID)).ToList();
                foreach (var i in ListExChangeRateElement)
                {
                    string[] arrCurrencyCode = i.ElementCode.Split('_').ToArray();
                    if (arrCurrencyCode.Count() == 4)
                    {
                        var ExChangeRateItem = ListExChangeRateByGrade.Where(m => m.CurrencyBaseCode == arrCurrencyCode[0] && m.CurrencyDestCode == arrCurrencyCode[1] && (m.Type == ExchangeRateType.E_RATE_PAYROLL.ToString() || m.Type == null)).OrderByDescending(m => m.MonthOfEffect).FirstOrDefault();
                        if (ExChangeRateItem != null)
                        {
                            item = new ElementFormula(i.ElementCode, ExChangeRateItem.BuyingRate != null ? ExChangeRateItem.BuyingRate : 0, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(i.ElementCode, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            //[05/09/2016][HienNguyen][73048]
            //Phần tử tính lương: lấy tỷ giá tháng N-1
            if (CheckIsExistFormula(listElementFormula, ref formula, "", TotalDataAll.listCurrency.Select(m => m.Code + "_SELLING_PREV").ToArray()))
            {
                //list lưu các element 
                var ListExChangeRateElement = TotalDataAll.listElement_All.Where(m => m.ElementCode.EndsWith("_SELLING_PREV") && m.GradePayrollID == null).ToList();
                //list lưu giá trị tiền tệ
                var ListExChangeRateByGrade = TotalDataAll.listExchangeRate.Where(m => m.MonthOfEffect <= CutOffDuration.DateEnd.AddMonths(-1) && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID)).ToList();
                foreach (var i in ListExChangeRateElement)
                {
                    string[] arrCurrencyCode = i.ElementCode.Split('_').ToArray();
                    if (arrCurrencyCode.Count() == 4)
                    {
                        var ExChangeRateItem = ListExChangeRateByGrade.Where(m => m.CurrencyBaseCode == arrCurrencyCode[0] && m.CurrencyDestCode == arrCurrencyCode[1] && (m.Type == ExchangeRateType.E_RATE_PAYROLL.ToString() || m.Type == null)).OrderByDescending(m => m.MonthOfEffect).FirstOrDefault();
                        if (ExChangeRateItem != null)
                        {
                            item = new ElementFormula(i.ElementCode, ExChangeRateItem.SellingRate, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(i.ElementCode, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, "", TotalDataAll.listCurrency.Select(m => m.Code + "_SELLING").ToArray()))
            {
                //list lưu các element 
                var ListExChangeRateElement = TotalDataAll.listElement_All.Where(m => m.ElementCode.EndsWith("_SELLING") && m.GradePayrollID == null).ToList();
                //list lưu giá trị tiền tệ
                var ListExChangeRateByGrade = TotalDataAll.listExchangeRate.Where(m => m.MonthOfEffect <= CutOffDuration.DateEnd && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID)).ToList();
                foreach (var i in ListExChangeRateElement)
                {
                    string[] arrCurrencyCode = i.ElementCode.Split('_').ToArray();
                    if (arrCurrencyCode.Count() == 3)
                    {
                        var ExChangeRateItem = ListExChangeRateByGrade.Where(m => m.CurrencyBaseCode == arrCurrencyCode[0] && m.CurrencyDestCode == arrCurrencyCode[1] && (m.Type == ExchangeRateType.E_RATE_PAYROLL.ToString() || m.Type == null)).OrderByDescending(m => m.MonthOfEffect).FirstOrDefault();
                        if (ExChangeRateItem != null)
                        {
                            item = new ElementFormula(i.ElementCode, ExChangeRateItem.SellingRate, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(i.ElementCode, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region Kiểm tra xem nhân viên này có phụ cấp phát sinh trong tháng đang tính lương hay không ?
            if (CheckIsExistFormula(listElementFormula, ref formula, TotalDataAll.listUnusualAllowanceCfg.Select(m => m.Code + "_T3").ToArray()))//đã lấy lên chưa ?
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " ( _T3 ) ";
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula(i.Code + "_T3", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {

                    var listUnusualAllowanceProfileT3 = TotalData600.dicUnusualAllowanceT3.GetValueOrNew(profileItem.ID);
                    List<Sal_UnusualAllowanceEntity> listSal_UnusualT3 = new List<Sal_UnusualAllowanceEntity>();
                    listSal_UnusualT3 = listUnusualAllowanceProfileT3.Where(m => m.ProfileID == profileItem.ID).ToList();
                    ElementFormula _tmpitem = new ElementFormula();
                    for (int j = 0; j < TotalDataAll.listUnusualAllowanceCfg.Count; j++)
                    {
                        //lay phu cap thang 3
                        _tmpitem = new ElementFormula();
                        _tmpitem.VariableName = TotalDataAll.listUnusualAllowanceCfg[j].Code + "_T3";
                        var Sal_UnusualItem = listSal_UnusualT3.Where(m => m.UnusualEDTypeID != null && m.MonthStart != null && m.UnusualEDTypeID == TotalDataAll.listUnusualAllowanceCfg[j].ID && m.MonthStart <= CutOffDuration.DateEnd && (m.MonthEnd == null || m.MonthEnd >= CutOffDuration.DateStart)).ToList();
                        if (Sal_UnusualItem != null)
                        {
                            _tmpitem.Value = Sal_UnusualItem.Sum(m => m.Amount != null ? m.Amount : 0);
                            listElementFormula.Add(_tmpitem);
                        }
                        else
                        {
                            _tmpitem.Value = "0";
                            _tmpitem.ErrorMessage = "Không Có Phụ Cấp Trong Tháng 3";
                            listElementFormula.Add(_tmpitem);
                        }
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, TotalDataAll.listUnusualAllowanceCfg.Select(m => m.Code + "_DAYCLOSE_N_1").ToArray()))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " ( _DAYCLOSE_N_1 ) ";
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula(i.Code + "_DAYCLOSE_N_1", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    DateTime Dateform = CutOffDuration.DateStart.AddMonths(-1);
                    DateTime DateTo = CutOffDuration.DateEnd.AddMonths(-1);

                    //Lấy các phần tử tính lương nằm trong Grade của nhân viên
                    Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, Dateform, DateTo);
                    //loại bỏ nhân viên có ngày vào làm sau ngày chốt lương
                    Cat_GradePayrollEntity CatGrade = Grade != null ? TotalDataAll.listCat_GradePayroll.Where(m => m.ID == Grade.GradePayrollID).FirstOrDefault() : null;

                    if (CatGrade != null)
                    {

                        var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                        //ngày bắt đầu chốt lương
                        //DateTime DateClose = new DateTime(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, CatGrade.SalaryDayClose != null ? (int)CatGrade.SalaryDayClose : 1).AddDays(1).AddMonths(-1);
                        //ngày kết thúc chốt lương thang N-1
                        DateTime DateEndCloseN_1 = new DateTime(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, 1);
                        if (CatGrade.SalaryDayClose.HasValue)
                        {
                            DateEndCloseN_1 = Common.GetDateCloseByMonthYear(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, CatGrade.SalaryDayClose.Value);
                        }

                        List<Sal_UnusualAllowanceEntity> ListUnusualAllowanceByProfile = listUnusualAllowanceProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthStart != null && m.MonthStart <= DateEndCloseN_1 && (m.MonthEnd == null || m.MonthEnd >= DateEndCloseN_1)).ToList();

                        ElementFormula _item = new ElementFormula();
                        foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                        {
                            //[06112015][bang.nguyen][59626][bug]
                            // chỉ lấy khi MonthEnd= null hoặc MonthEnd > ngày chốt trong chế độ lương
                            //lấy gần nhất theo điều kiện nếu có MonthEnd thì lấy gần nhất theo MonthEnd, còn nếu k có MonthEnd thì lấy gần nhất theo MonthStart
                            Sal_UnusualAllowanceEntity listValue = null;
                            listValue = ListUnusualAllowanceByProfile.Where(m => m.UnusualEDTypeID == i.ID && m.MonthEnd != null).OrderBy(m => m.MonthEnd).FirstOrDefault();
                            if (listValue == null)
                            {
                                listValue = ListUnusualAllowanceByProfile.Where(m => m.UnusualEDTypeID == i.ID).OrderByDescending(m => m.MonthStart).FirstOrDefault();
                            }
                            if (listValue != null)
                            {
                                _item = new ElementFormula(i.Code + "_DAYCLOSE_N_1", listValue.Amount != null ? listValue.Amount : 0, 0);
                                listElementFormula.Add(_item);
                            }
                            else
                            {
                                _item = new ElementFormula(i.Code + "_DAYCLOSE_N_1", 0, 0);
                                listElementFormula.Add(_item);
                            }
                        }
                    }
                    else
                    {
                        ElementFormula _item = new ElementFormula();
                        foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                        {
                            _item = new ElementFormula(i.Code + "_DAYCLOSE_N_1", 0, 0);
                            listElementFormula.Add(_item);
                        }
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, TotalDataAll.listUnusualAllowanceCfg.Select(m => m.Code + "_DAYCLOSE").ToArray()))
            {

                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " ( TotalDataAll.listUnusualAllowanceCfg.Select ) ";
                    ElementFormula _item = new ElementFormula();
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        _item = new ElementFormula(i.Code + "_DAYCLOSE", 0, 0);
                        listElementFormula.Add(_item);
                    }
                }
                else
                {
                    //Lấy các phần tử tính lương nằm trong Grade của nhân viên
                    Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd);
                    //loại bỏ nhân viên có ngày vào làm sau ngày chốt lương
                    Cat_GradePayrollEntity CatGrade = Grade != null ? TotalDataAll.listCat_GradePayroll.Where(m => m.ID == Grade.GradePayrollID).FirstOrDefault() : null;

                    if (CatGrade != null)
                    {
                        var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                        //ngày bắt đầu chốt lương
                        //DateTime DateClose = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, CatGrade.SalaryDayClose != null ? (int)CatGrade.SalaryDayClose : 1).AddDays(1).AddMonths(-1);
                        //ngày kết thúc chốt lương
                        DateTime DateEndClose = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                        if (CatGrade.SalaryDayClose.HasValue)
                        {
                            DateEndClose = Common.GetDateCloseByMonthYear(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, CatGrade.SalaryDayClose.Value);
                        }

                        //[06112015][bang.nguyen][59626][bug]
                        // chỉ lấy khi MonthEnd= null hoặc MonthEnd > ngày chốt trong chế độ lương
                        List<Sal_UnusualAllowanceEntity> ListUnusualAllowanceByProfile = listUnusualAllowanceProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthStart != null && m.MonthStart <= DateEndClose && (m.MonthEnd == null || m.MonthEnd > DateEndClose)).ToList();


                        ElementFormula _item = new ElementFormula();
                        foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                        {
                            //[06112015][bang.nguyen][59626][bug]
                            // chỉ lấy khi MonthEnd= null hoặc MonthEnd > ngày chốt trong chế độ lương
                            //lấy gần nhất theo điều kiện nếu có MonthEnd thì lấy gần nhất theo MonthEnd, còn nếu k có MonthEnd thì lấy gần nhất theo MonthStart
                            Sal_UnusualAllowanceEntity listValue = null;
                            listValue = ListUnusualAllowanceByProfile.Where(m => m.UnusualEDTypeID == i.ID && m.MonthEnd != null).OrderBy(m => m.MonthEnd).FirstOrDefault();
                            if (listValue == null)
                            {
                                listValue = ListUnusualAllowanceByProfile.Where(m => m.UnusualEDTypeID == i.ID).OrderByDescending(m => m.MonthStart).FirstOrDefault();
                            }
                            if (listValue != null)
                            {
                                _item = new ElementFormula(i.Code + "_DAYCLOSE", listValue.Amount != null ? listValue.Amount : 0, 0);
                                listElementFormula.Add(_item);
                            }
                            else
                            {
                                _item = new ElementFormula(i.Code + "_DAYCLOSE", 0, 0);
                                listElementFormula.Add(_item);
                            }
                        }
                    }
                    else
                    {
                        ElementFormula _item = new ElementFormula();
                        foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                        {
                            _item = new ElementFormula(i.Code + "_DAYCLOSE", 0, 0);
                            listElementFormula.Add(_item);
                        }
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, TotalDataAll.listUnusualAllowanceCfg.Select(m => m.Code + "_AMOUNTOFOFFSET_N_1").ToArray()))
            {

                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " ( _AMOUNTOFOFFSET_N_1 ) ";
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula(i.Code + "_AMOUNTOFOFFSET_N_1", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {

                    DateTime Dateform = CutOffDuration.DateStart.AddMonths(-1);
                    DateTime DateTo = CutOffDuration.DateEnd.AddMonths(-1);

                    //Lấy các phần tử tính lương nằm trong Grade của nhân viên
                    Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, Dateform, DateTo);
                    //loại bỏ nhân viên có ngày vào làm sau ngày chốt lương


                    if (Grade != null)
                    {

                        var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                        Cat_GradePayrollEntity CatGrade = TotalDataAll.listCat_GradePayroll.Where(m => m.ID == Grade.GradePayrollID).FirstOrDefault();
                        if (CatGrade != null)
                        {
                            //ngày bắt đầu chốt lương
                            DateTime DateClose = new DateTime(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, 1);
                            if (CatGrade.SalaryDayClose.HasValue)
                            {
                                DateClose = Common.GetDateCloseByMonthYear(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, CatGrade.SalaryDayClose.Value);
                            }
                            //ngày kết thúc chốt lương
                            //DateTime DateEndClose = new DateTime(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, CatGrade.SalaryDayClose != null ? (int)CatGrade.SalaryDayClose : 1);

                            List<Sal_UnusualAllowanceEntity> listUnusualAllowanceByDateClose = listUnusualAllowanceProfile.Where(m => m.MonthStart != null && m.MonthStart.Value.Year == DateClose.Year && m.MonthStart.Value.Month == DateClose.Month && m.ProfileID == profileItem.ID).ToList();

                            //thay đổi theo task 52059 (code củ ở trên)
                            //List<Sal_UnusualAllowanceEntity> listUnusualAllowanceByDateClose = TotalData600.listSalUnusualAllowance.Where(m => m.MonthStart != null && m.MonthStart <= DateClose && (m.MonthEnd >= DateClose || m.MonthEnd == null) && m.ProfileID == profileItem.ID).ToList();

                            ElementFormula _item = new ElementFormula();
                            foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                            {
                                var listValue = listUnusualAllowanceByDateClose.Where(m => m.UnusualEDTypeID == i.ID).OrderBy(m => m.MonthStart).FirstOrDefault();
                                if (listValue != null)
                                {
                                    _item = new ElementFormula(i.Code + "_AMOUNTOFOFFSET_N_1", listValue != null && listValue.AmountOfOffSet != null ? listValue.AmountOfOffSet : 0, 0);
                                    listElementFormula.Add(_item);
                                }
                                else
                                {
                                    _item = new ElementFormula(i.Code + "_AMOUNTOFOFFSET_N_1", 0, 0);
                                    listElementFormula.Add(_item);
                                }
                            }
                        }
                        else
                        {
                            List<Sal_UnusualAllowanceEntity> listUnusualAllowanceByDateClose = new List<Sal_UnusualAllowanceEntity>();
                            ElementFormula _item = new ElementFormula();
                            foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                            {
                                var listValue = listUnusualAllowanceByDateClose.Where(m => m.UnusualEDTypeID == i.ID).ToList();
                                if (listValue != null && listValue.Count > 0)
                                {
                                    _item = new ElementFormula(i.Code + "_AMOUNTOFOFFSET_N_1", listValue.Sum(m => m.AmountOfOffSet != null ? m.AmountOfOffSet : 0), 0);
                                    listElementFormula.Add(_item);
                                }
                                else
                                {
                                    _item = new ElementFormula(i.Code + "_AMOUNTOFOFFSET_N_1", 0, 0);
                                    listElementFormula.Add(_item);
                                }
                            }
                        }
                    }
                    else
                    {
                        List<Sal_UnusualAllowanceEntity> listUnusualAllowanceByDateClose = new List<Sal_UnusualAllowanceEntity>();
                        ElementFormula _item = new ElementFormula();
                        foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                        {
                            var listValue = listUnusualAllowanceByDateClose.Where(m => m.UnusualEDTypeID == i.ID).ToList();
                            if (listValue != null && listValue.Count > 0)
                            {
                                _item = new ElementFormula(i.Code + "_AMOUNTOFOFFSET_N_1", listValue.Sum(m => m.AmountOfOffSet != null ? m.AmountOfOffSet : 0), 0);
                                listElementFormula.Add(_item);
                            }
                            else
                            {
                                _item = new ElementFormula(i.Code + "_AMOUNTOFOFFSET_N_1", 0, 0);
                                listElementFormula.Add(_item);
                            }
                        }
                    }
                }
            }

            //lấy mức phụ cấp theo timeline tháng n-1
            if (CheckIsExistFormula(listElementFormula, ref formula, TotalDataAll.listUnusualAllowanceCfg.Select(m => m.Code + "_TIMELINE_N_1").ToArray()))
            {
                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (_TIMELINE_N_1) ";
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula(i.Code + "_TIMELINE_N_1", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    DateTime Dateform = CutOffDuration.DateStart.AddMonths(-1);
                    DateTime DateTo = CutOffDuration.DateEnd.AddMonths(-1);

                    #region Kiểm tra xem nv có DK HDT hay không

                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);

                    bool IsHDT = listHDTJobByProfile.Any(m => m.ProfileID == profileItem.ID && m.DateFrom <= DateTo && (m.DateTo >= Dateform || m.DateTo == null) && m.Status == HDTJobStatus.E_APPROVE.ToString());
                    if (!IsHDT)
                    {
                        ElementFormula _item = new ElementFormula();
                        foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                        {
                            _item = new ElementFormula(i.Code + "_TIMELINE_N_1", 0, 0);
                            listElementFormula.Add(_item);
                        }
                    }
                    #endregion

                    if (IsHDT)
                    {
                        //Lấy các phần tử tính lương nằm trong Grade của nhân viên
                        Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, Dateform, DateTo);

                        //loại bỏ nhân viên có ngày vào làm sau ngày chốt lương
                        Cat_GradePayrollEntity CatGrade = Grade != null ? TotalDataAll.listCat_GradePayroll.Where(m => m.ID == Grade.GradePayrollID).FirstOrDefault() : null;

                        if (CatGrade != null)
                        {
                            //ngày bắt đầu chốt lương
                            DateTime DateClose = new DateTime(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, 1);
                            if (CatGrade.SalaryDayClose.HasValue)
                            {
                                DateClose = Common.GetDateCloseByMonthYear(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, CatGrade.SalaryDayClose.Value);
                            }
                            DateClose = DateClose.AddDays(1).AddMonths(-1);
                            //ngày kết thúc chốt lương
                            DateTime DateEndClose = new DateTime(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, 1);
                            if (CatGrade.SalaryDayClose.HasValue)
                            {
                                DateEndClose = Common.GetDateCloseByMonthYear(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, CatGrade.SalaryDayClose.Value);
                            }

                            List<Cat_UnAllowCfgAmountEntity> listUnAllowCfgAmount = TotalDataAll.listUnAllowCfgAmount.Where(m => m.FromDate <= DateEndClose).OrderByDescending(m => m.FromDate).ToList();

                            ElementFormula _item = new ElementFormula();
                            foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                            {
                                var listValue = listUnAllowCfgAmount.Where(m => m.UnusualAllowanceID != null && (Guid)m.UnusualAllowanceID == i.ID).OrderByDescending(m => m.FromDate).FirstOrDefault();
                                if (listValue != null)
                                {
                                    _item = new ElementFormula(i.Code + "_TIMELINE_N_1", listValue.Amount ?? 0, 0);
                                    listElementFormula.Add(_item);
                                }
                                else
                                {
                                    _item = new ElementFormula(i.Code + "_TIMELINE_N_1", 0, 0);
                                    listElementFormula.Add(_item);
                                }
                            }
                        }
                        else
                        {
                            ElementFormula _item = new ElementFormula();
                            foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                            {
                                _item = new ElementFormula(i.Code + "_TIMELINE_N_1", 0, 0);
                                listElementFormula.Add(_item);
                            }
                        }
                    }
                }
            }

            //lấy mức phụ cấp theo timeline
            if (CheckIsExistFormula(listElementFormula, ref formula, TotalDataAll.listUnusualAllowanceCfg.Select(m => m.Code + "_TIMELINE").ToArray()))
            {

                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (_TIMELINE) ";

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula(i.Code + "_TIMELINE", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);

                    #region Kiểm tra xem nv có DK HDT hay không
                    bool IsHDT = listHDTJobByProfile.Any(m => m.ProfileID == profileItem.ID && m.DateFrom <= CutOffDuration.DateEnd && (m.DateTo >= CutOffDuration.DateStart || m.DateTo == null) && m.Status == HDTJobStatus.E_APPROVE.ToString());
                    #endregion

                    //Lấy các phần tử tính lương nằm trong Grade của nhân viên
                    Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd);
                    //loại bỏ nhân viên có ngày vào làm sau ngày chốt lương
                    Cat_GradePayrollEntity CatGrade = Grade != null ? TotalDataAll.listCat_GradePayroll.Where(m => m.ID == Grade.GradePayrollID).FirstOrDefault() : null;

                    if (CatGrade != null)
                    {
                        DateTime DateEndClose = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                        if (CatGrade.SalaryDayClose.HasValue)
                        {
                            DateEndClose = Common.GetDateCloseByMonthYear(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, CatGrade.SalaryDayClose.Value);
                        }

                        List<Cat_UnAllowCfgAmountEntity> listUnAllowCfgAmount = TotalDataAll.listUnAllowCfgAmount.Where(m => m.FromDate <= DateEndClose).OrderByDescending(m => m.FromDate).ToList();

                        ElementFormula _item = new ElementFormula();
                        foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                        {
                            if (i.Code.IndexOf("HDT") != -1 && IsHDT == false)
                            {
                                _item = new ElementFormula(i.Code + "_TIMELINE", 0, 0);
                                listElementFormula.Add(_item);
                                continue;
                            }

                            var listValue = listUnAllowCfgAmount.Where(m => m.UnusualAllowanceID != null && (Guid)m.UnusualAllowanceID == i.ID).OrderByDescending(m => m.FromDate).FirstOrDefault();
                            if (listValue != null)
                            {
                                _item = new ElementFormula(i.Code + "_TIMELINE", listValue.Amount ?? 0, 0);
                                listElementFormula.Add(_item);
                            }
                            else
                            {
                                _item = new ElementFormula(i.Code + "_TIMELINE", 0, 0);
                                listElementFormula.Add(_item);
                            }
                        }
                    }
                }
            }


            if (CheckIsExistFormula(listElementFormula, ref formula, TotalDataAll.listUnusualAllowanceCfg.Select(m => m.Code + "_N_1").ToArray()) || CheckIsExistFormula(listElementFormula, ref formula, TotalDataAll.listUnusualAllowanceCfg.Select(m => m.Code + "_N_2").ToArray()) || CheckIsExistFormula(listElementFormula, ref formula, TotalDataAll.listUnusualAllowanceCfg.Select(m => m.Code + "_N_3").ToArray()))//đã lấy lên chưa ?
            {

                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " ( _N_1 ) ";
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {

                        for (int t = 1; t <= 6; t++)
                        {
                            item = new ElementFormula(i.Code + "_N_" + t.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {

                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);


                    List<Sal_UnusualAllowanceEntity> listSal_Unusual = new List<Sal_UnusualAllowanceEntity>();
                    ElementFormula _tmpitem = new ElementFormula();
                    listSal_Unusual = listUnusualAllowanceProfile.Where(m => m.ProfileID == profileItem.ID).ToList();

                    //lấy các loại phụ cấp của 6 tháng trước tháng tính lương (Honda)
                    for (int j = 0; j < TotalDataAll.listUnusualAllowanceCfg.Count; j++)
                    {
                        for (int t = 1; t <= 6; t++)
                        {
                            _tmpitem = new ElementFormula();
                            _tmpitem.VariableName = TotalDataAll.listUnusualAllowanceCfg[j].Code + "_N_" + t.ToString();
                            //[16122015][bang.nguyen][modify][60715]
                            //sửa phần tử phụ cấp theo ngày chốt
                            DateTime dateClose = CutOffDuration.DateEnd.AddMonths(t * -1);
                            if (t > 1 && t < 6)
                            {
                                Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart.AddMonths(t * -1), CutOffDuration.DateEnd.AddMonths(t * -1));
                                dateClose = InitDateForDayClose(CutOffDuration.DateStart.AddMonths(t * -1), CutOffDuration.DateEnd.AddMonths(t * -1), Grade);
                            }

                            List<Sal_UnusualAllowanceEntity> Sal_UnusualItem = new List<Sal_UnusualAllowanceEntity>();

                            if (TotalDataAll.listUnusualAllowanceCfg[j].Code == Common.ChildCare)
                            {
                                Sal_UnusualItem = listSal_Unusual.Where(m => m.Status == UnusualAllowanceStatus.E_APPROVED.ToString() && m.UnusualEDTypeID == TotalDataAll.listUnusualAllowanceCfg[j].ID && m.MonthStart <= dateClose && (m.MonthEnd == null || m.MonthEnd >= CutOffDuration.DateStart.AddMonths(t * -1))).ToList();
                            }
                            else
                            {
                                Sal_UnusualItem = listSal_Unusual.Where(m => m.UnusualEDTypeID == TotalDataAll.listUnusualAllowanceCfg[j].ID && m.MonthStart <= dateClose && (m.MonthEnd == null || m.MonthEnd >= CutOffDuration.DateStart.AddMonths(t * -1))).ToList();
                            }

                            if (Sal_UnusualItem != null)
                            {

                                _tmpitem.Value = Sal_UnusualItem.Sum(m => m.Amount != null ? m.Amount : 0);
                                listElementFormula.Add(_tmpitem);
                            }
                            else
                            {
                                _tmpitem.Value = "0";
                                _tmpitem.ErrorMessage = "Không Có Phụ Cấp Trong Tháng";
                                listElementFormula.Add(_tmpitem);
                            }
                        }
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, TotalDataAll.listUnusualAllowanceCfg.Select(m => m.Code).ToArray()))//đã lấy lên chưa ?
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " ( Code ) ";
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula(i.Code, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {

                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);


                    List<Sal_UnusualAllowanceEntity> listSal_Unusual = new List<Sal_UnusualAllowanceEntity>();
                    // List<Sal_UnusualAllowanceEntity> listSal_UnusualT3 = new List<Sal_UnusualAllowanceEntity>();
                    listSal_Unusual = listUnusualAllowanceProfile.Where(m => m.ProfileID == profileItem.ID).ToList();
                    //add loại phụ cấp bất thường vào list phần tử(listElement), các loại phụ cấp nào không có thì cho formula = 0
                    for (int j = 0; j < TotalDataAll.listUnusualAllowanceCfg.Count; j++)
                    {
                        ElementFormula _tmpitem = new ElementFormula();
                        _tmpitem.VariableName = TotalDataAll.listUnusualAllowanceCfg[j].Code;
                        var Sal_UnusualItem = listSal_Unusual.Where(m => m.UnusualEDTypeID == TotalDataAll.listUnusualAllowanceCfg[j].ID && m.MonthStart <= CutOffDuration.DateEnd && (m.MonthEnd == null || m.MonthEnd >= CutOffDuration.DateStart)).ToList();
                        if (Sal_UnusualItem != null)
                        {
                            _tmpitem.Value = Sal_UnusualItem.Sum(m => m.Amount != null ? m.Amount : 0);
                            listElementFormula.Add(_tmpitem);
                        }
                        else
                        {
                            _tmpitem.Value = "0";
                            _tmpitem.ErrorMessage = "Không Có Phụ Cấp Trong Tháng";
                            listElementFormula.Add(_tmpitem);
                        }
                    }
                }
            }
            #endregion

            #region  Honda - tổng số ngày làm việc theo từng ca của nhân viên trong tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_SHIFT_", "_HOURS"))
            {
                List<Att_AttendanceTableItemEntity> listAttTableItemByShift = new List<Att_AttendanceTableItemEntity>();
                List<Att_AttendanceTableItemEntity> listAttendanceTableItemByAtt = new List<Att_AttendanceTableItemEntity>();
                if (objAttendanceTableProCut != null)
                {
                    listAttendanceTableItemByAtt = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                }


                for (int j = 0; j < TotalDataAll.listCat_Shift.Count; j++)
                {
                    listAttTableItemByShift = listAttendanceTableItemByAtt.Where(m => m.ShiftID != null && m.ShiftID == TotalDataAll.listCat_Shift[j].ID).ToList();
                    item = new ElementFormula("ATT_SHIFT_" + TotalDataAll.listCat_Shift[j].Code + "_HOURS", listAttTableItemByShift.Sum(m => m.AvailableHours), 0);
                    listElementFormula.Add(item);
                }
            }


            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_SHIFT_", "_DAY"))
            {

                List<Att_AttendanceTableItemEntity> listAttTableItemByShift = new List<Att_AttendanceTableItemEntity>();
                List<Att_AttendanceTableItemEntity> listAttendanceTableItemByAtt = new List<Att_AttendanceTableItemEntity>();
                if (objAttendanceTableProCut != null)
                {
                    listAttendanceTableItemByAtt = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).ToList();
                }

                List<Att_AttendanceTableItemEntity> listAttendanceTableItemByAtt_Prev = new List<Att_AttendanceTableItemEntity>();
                if (TotalDataAll.Att_AttendanceTable_Prev.Count() >= 0)
                {

                    Att_AttendanceTableEntity _tmp = TotalDataAll.Att_AttendanceTable_Prev.Where(t => t.ProfileID == profileItem.ID).FirstOrDefault();
                    Guid _tmpID = Guid.Empty;
                    if (_tmp != null)
                    {
                        _tmpID = _tmp.ID;
                    }
                    listAttendanceTableItemByAtt_Prev = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(_tmpID);
                }

                for (int j = 0; j < TotalDataAll.listCat_Shift.Count; j++)
                {
                    listAttTableItemByShift = listAttendanceTableItemByAtt.Where(m => m.ShiftID != null && m.ShiftID == TotalDataAll.listCat_Shift[j].ID).ToList();
                    if (listAttTableItemByShift != null && listAttTableItemByShift.Count > 0)
                    {
                        item = new ElementFormula("ATT_SHIFT" + "_" + TotalDataAll.listCat_Shift[j].Code + "_" + "DAY", listAttTableItemByShift.Where(d => d.AvailableHours > 0).Sum(d => (d.WorkPaidHours + d.LateEarlyMinutes / 60.0) / d.AvailableHours), 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula("ATT_SHIFT" + "_" + TotalDataAll.listCat_Shift[j].Code + "_" + "DAY", 0, 0);
                        listElementFormula.Add(item);
                    }

                    //tháng N-1
                    listAttTableItemByShift = listAttendanceTableItemByAtt_Prev.Where(m => m.ShiftID != null && m.ShiftID == TotalDataAll.listCat_Shift[j].ID).ToList();
                    if (listAttTableItemByShift != null && listAttTableItemByShift.Count > 0)
                    {
                        item = new ElementFormula("ATT_SHIFT" + "_" + TotalDataAll.listCat_Shift[j].Code + "_" + "DAY_PREV", listAttTableItemByShift.Where(d => d.AvailableHours > 0).Sum(d => (d.WorkPaidHours + d.LateEarlyMinutes / 60.0) / d.AvailableHours), 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula("ATT_SHIFT" + "_" + TotalDataAll.listCat_Shift[j].Code + "_" + "DAY_PREV", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region lấy các phần tử Đánh Giá

            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.Evaluation.ToString().ToUpper(), ""))
            {
                IList<string> List_EvaBonusType = Enum.GetValues(typeof(EvaBonusType))
                                           .Cast<EvaBonusType>()
                                           .Select(x => x.ToString())
                                           .ToList();

                string status = string.Empty;
                dataComputeSer.GetDicEva_BonusSalary(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + CatElementType.Evaluation.ToString() + ") ";
                    foreach (var j in TotalDataAll.listSalesType)
                    {
                        foreach (var t in List_EvaBonusType)
                        {
                            item = new ElementFormula(CatElementType.Evaluation.ToString().ToUpper() + "_" + j.Code + "_" + t, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }

                }
                else
                {
                    if (TotalDataAll.listSalesType != null && TotalDataAll.listSalesType.Count > 0)
                    {
                        var listBonusSalaryByProfile = TotalData600.dicEva_BonusSalary.GetValueOrNew(profileItem.ID);

                        foreach (var j in TotalDataAll.listSalesType)
                        {
                            foreach (var t in List_EvaBonusType)
                            {
                                try
                                {
                                    Eva_BonusSalaryEntity BonusSalaryITem = listBonusSalaryByProfile.Where(m => m.ProfileID == profileItem.ID
                                        && m.SalesTypeID == j.ID
                                        && m.Type == t).FirstOrDefault();
                                    if (BonusSalaryITem != null && BonusSalaryITem.Bonus != null)
                                    {
                                        item = new ElementFormula(CatElementType.Evaluation.ToString().ToUpper() + "_" + j.Code + "_" + t, BonusSalaryITem.Bonus, 0);
                                        listElementFormula.Add(item);
                                    }
                                    else
                                    {
                                        item = new ElementFormula(CatElementType.Evaluation.ToString().ToUpper() + "_" + j.Code + "_" + t, 0, 0);
                                        listElementFormula.Add(item);
                                    }
                                }
                                catch
                                {
                                    item = new ElementFormula(CatElementType.Evaluation.ToString().ToUpper() + "_" + j.Code + "_" + t, 0, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Vietject

            #region Lấy các phần tử đơn giá theo vai trò (Vietject)

            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.FLIGHT.ToString() + "_", "_HOURS") ||
                CheckIsExistFormula(listElementFormula, ref formula, CatElementType.FLIGHT.ToString() + "_", "_ROUTES") ||
                CheckIsExistFormula(listElementFormula, ref formula, CatElementType.FLIGHT.ToString() + "_", "_AMOUNT"))
            {

                string status = string.Empty;
                dataComputeSer.GetDicAtt_TimeSheet(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + CatElementType.FLIGHT.ToString() + ") ";
                    foreach (var Role in TotalDataAll.listCat_Role)
                    {
                        foreach (var JobType in TotalDataAll.listCat_JobType)
                        {
                            item = new ElementFormula(CatElementType.FLIGHT.ToString() + "_" + Role.Code.ReplaceSpace() + "_" + JobType.Code.ReplaceSpace() + "_HOURS", 0, 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula(CatElementType.FLIGHT.ToString() + "_" + Role.Code.ReplaceSpace() + "_" + JobType.Code.ReplaceSpace() + "_ROUTES", 0, 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula(CatElementType.FLIGHT.ToString() + "_" + Role.Code.ReplaceSpace() + "_" + JobType.Code.ReplaceSpace() + "_AMOUNT", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    var listAtt_TimeSheetByProfile = TotalData600.dicAtt_TimeSheet.GetValueOrNew(profileItem.ID);
                    List<Att_TimeSheetEntity> Att_TimeSheetItem = listAtt_TimeSheetByProfile.Where(m => m.ProfileID == profileItem.ID && m.Date <= CutOffDuration.DateEnd && m.Date >= CutOffDuration.DateStart).OrderByDescending(m => m.Date).ToList();
                    List<Cat_UnitPriceEntity> Cat_UnitPrice = TotalDataAll.listCat_UnitPrice.Where(m => m.Date <= CutOffDuration.DateEnd).OrderByDescending(m => m.Date).ToList();
                    if (TotalDataAll.listCat_Role != null && TotalDataAll.listCat_Role.Count > 0 && TotalDataAll.listCat_JobType != null && TotalDataAll.listCat_JobType.Count > 0)
                    {
                        foreach (var Role in TotalDataAll.listCat_Role)
                        {
                            foreach (var JobType in TotalDataAll.listCat_JobType)
                            {
                                var Att_TimeSheetItemByItem = Att_TimeSheetItem.Where(m => m.RoleID == Role.ID && m.JobTypeID == JobType.ID).OrderByDescending(m => m.Date).ToList();
                                var Cat_UnitPriceByItem = Cat_UnitPrice.Where(m => m.RoleID == Role.ID && m.JobTypeID == JobType.ID).OrderByDescending(m => m.Date).FirstOrDefault();
                                //số giờ bay
                                item = new ElementFormula(CatElementType.FLIGHT.ToString() + "_" + Role.Code.ReplaceSpace() + "_" + JobType.Code.ReplaceSpace() + "_HOURS", Att_TimeSheetItemByItem.Sum(m => m.NoHour), 0);
                                listElementFormula.Add(item);
                                //số chặn bay
                                item = new ElementFormula(CatElementType.FLIGHT.ToString() + "_" + Role.Code.ReplaceSpace() + "_" + JobType.Code.ReplaceSpace() + "_ROUTES", Att_TimeSheetItemByItem.Sum(m => m.Sector), 0);
                                listElementFormula.Add(item);

                                //số tiền
                                double Amount = Cat_UnitPriceByItem != null && Cat_UnitPriceByItem.Amount != null ? (double)Cat_UnitPriceByItem.Amount : 0;
                                item = new ElementFormula(CatElementType.FLIGHT.ToString() + "_" + Role.Code.ReplaceSpace() + "_" + JobType.Code.ReplaceSpace() + "_AMOUNT", Amount, 0);
                                listElementFormula.Add(item);
                            }
                        }
                    }
                }
            }

            //[20062016][bang.nguyen][68822][modify]
            #region Số công sản xuất từng loại theo kì công
            if (CheckIsExistFormula(listElementFormula, ref formula, "DYN_PROFILETIMESHEET_", "_WORKINGDAY"))
            {
                var lstJobType = TotalDataAll.listCat_JobType.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                if (lstJobType.Count > 0)
                {
                    var lstlistProfileTimeSheetByPro = TotalDataAll.ListAtt_ProfileTimeSheet.Where(s => s.ProfileID == profileItem.ID
                                                                            && s.WorkDate >= CutOffDuration.DateStart
                                                                            && s.WorkDate <= CutOffDuration.DateEnd
                                                                            && s.JobTypeID != null
                                                                            && s.ActualHours != null).ToList();
                    foreach (var objJobType in lstJobType)
                    {
                        double countTimeSheetByJobType = 0;
                        //xét từng loại công sản xuất
                        var listProfileTimeSheetByJobType = lstlistProfileTimeSheetByPro.Where(s => s.JobTypeID == objJobType.ID).ToList();
                        //truong hop ActualHours > 6 thi đếm = 1
                        countTimeSheetByJobType += listProfileTimeSheetByJobType.Where(s => s.ActualHours > 6).Count();
                        //truong hop ActualHours > 1 và ActualHours <= 6 thì + 0.5
                        countTimeSheetByJobType += listProfileTimeSheetByJobType.Where(s => s.ActualHours > 1 && s.ActualHours <= 6).Count() * 0.5;
                        item = new ElementFormula("DYN_PROFILETIMESHEET_" + objJobType.Code + "_WORKINGDAY", countTimeSheetByJobType, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion
            //[30112016][bang.nguyen][76232][new func]
            #region Số công sản xuất từng loại theo kì công
            if (CheckIsExistFormula(listElementFormula, ref formula, "DYN_PROFILETIMESHEET_", "_ACTUALHOUR"))
            {
                var lstJobType = TotalDataAll.listCat_JobType.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                if (lstJobType.Count > 0)
                {
                    var lstlistProfileTimeSheetByPro = TotalDataAll.ListAtt_ProfileTimeSheet.Where(s => s.ProfileID == profileItem.ID
                                                                            && s.WorkDate >= CutOffDuration.DateStart
                                                                            && s.WorkDate <= CutOffDuration.DateEnd
                                                                            && s.JobTypeID != null
                                                                            && s.ActualHours != null).ToList();
                    foreach (var objJobType in lstJobType)
                    {
                        double sumActualHours = 0;
                        //xét từng loại công sản xuất
                        sumActualHours = lstlistProfileTimeSheetByPro.Where(s => s.JobTypeID == objJobType.ID).Sum(s => s.ActualHours.Value);

                        item = new ElementFormula("DYN_PROFILETIMESHEET_" + objJobType.Code + "_ACTUALHOUR", sumActualHours, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Hệ số công sản xuất- Ca3
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_PROFILETIMESHEET_", "_CA3"))
            {
                var lstJobType = TotalDataAll.listCat_JobType.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                double? countTimeSheet = 0;
                if (lstJobType.Count > 0)
                {
                    //get ca 3
                    var listProfileTimeSheet = new List<Att_ProfileTimeSheetEntity>();
                    var objShift3 = TotalDataAll.listCat_Shift.Where(s => s.Code == "Ca3").FirstOrDefault();
                    if (objShift3 != null)
                    {
                        //công cua nhan viên
                        var objAttendanceTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => (s.CutOffDurationID == CutOffDuration.ID || (s.MonthYear != null && s.MonthYear.Value == CutOffDuration.MonthYear)
                                                                                                )).FirstOrDefault();
                        if (objAttendanceTable != null)
                        {
                            //công chi tiết theo ca 3
                            var lstPayrollTableItemByPro = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTable.ID).Where(s => s.ShiftID == objShift3.ID).ToList();
                            if (lstPayrollTableItemByPro.Count > 0)
                            {
                                var lstWorkDate = lstPayrollTableItemByPro.Select(s => s.WorkDate).ToList();
                                //get Att_ProfileTimeSheet
                                listProfileTimeSheet = TotalDataAll.ListAtt_ProfileTimeSheet.Where(s => s.WorkDate != null
                                                                                                            && lstWorkDate.Contains(s.WorkDate.Value)
                                                                                                            && s.JobTypeID != null
                                                                                                            && s.ActualHours > 1
                                                                                                            && s.ProfileID == profileItem.ID).ToList();
                            }
                        }
                    }
                    foreach (var objJobType in lstJobType)
                    {
                        countTimeSheet = 0;
                        //xét từng loại công sản xuất
                        var listProfileTimeSheetByJobType = listProfileTimeSheet.Where(s => s.JobTypeID == objJobType.ID).ToList();
                        //truong hop ActualHours > 6 thi đếm = 1
                        countTimeSheet += listProfileTimeSheetByJobType.Where(s => s.ActualHours > 6).Count();
                        countTimeSheet += listProfileTimeSheetByJobType.Where(s => s.ActualHours > 1 && s.ActualHours <= 6).Count() * 0.5;
                        item = new ElementFormula("ATT_PROFILETIMESHEET_" + objJobType.Code + "_CA3", countTimeSheet, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Hệ số công sản xuất- ngày chủ nhật
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_PROFILETIMESHEET", "_SUNSHIFT"))
            {
                var lstJobType = TotalDataAll.listCat_JobType.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                double? countSunShift = 0;
                if (lstJobType.Count > 0)
                {
                    var listRosterByProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);

                    //get ca làm việc có đi làm ngày chủ nhật)
                    var lstRosterSunshift = listRosterByProfile.Where(s => s.ProfileID == profileItem.ID
                                                                            && s.DateStart <= CutOffDuration.DateEnd
                                                                            && s.DateEnd >= CutOffDuration.DateStart
                                                                            && s.SunShiftID != null).ToList();
                    var listProfileTimeSheet = new List<Att_ProfileTimeSheetEntity>();
                    if (lstRosterSunshift.Count > 0)
                    {
                        //get lst ngay chủ nhật trong ca
                        var lstDateSun = new List<DateTime>();
                        foreach (var objRosterSunshift in lstRosterSunshift)
                        {
                            DateTime dateStart = objRosterSunshift.DateStart;
                            DateTime dateEnd = objRosterSunshift.DateEnd.Value;
                            for (DateTime date = dateStart; date <= dateEnd && date < DateTime.MaxValue; date = date.AddDays(1))
                            {
                                if (date.DayOfWeek == DayOfWeek.Sunday)
                                {
                                    lstDateSun.Add(date);
                                }
                            }
                        }
                        if (lstDateSun.Count > 0)
                        {
                            //get Att_ProfileTimeSheet
                            listProfileTimeSheet = TotalDataAll.ListAtt_ProfileTimeSheet.Where(s => s.WorkDate != null
                                                                                                        && lstDateSun.Contains(s.WorkDate.Value)
                                                                                                        && s.JobTypeID != null
                                                                                                        && s.ActualHours > 1
                                                                                                        && s.ProfileID == profileItem.ID).ToList();
                        }
                    }
                    foreach (var objJobType in lstJobType)
                    {
                        countSunShift = 0;
                        //xét từng loại công sản xuất
                        var listProfileTimeSheetByJobType = listProfileTimeSheet.Where(s => s.JobTypeID == objJobType.ID).ToList();
                        //truong hop ActualHours > 6 thi đếm = 1
                        countSunShift += listProfileTimeSheetByJobType.Where(s => s.ActualHours > 6).Count();
                        countSunShift += listProfileTimeSheetByJobType.Where(s => s.ActualHours > 1 && s.ActualHours <= 6).Count() * 0.5;
                        item = new ElementFormula("ATT_PROFILETIMESHEET_" + objJobType.Code + "_SUNSHIFT", countSunShift, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #endregion

            #endregion
        }

        #endregion

        #region Tung.Tran Nhánh các enum động
        public void GetStaticValuesDynamic(
           ComputePayrollDataModelKZAll TotalDataAll,
           ComputePayrollDataModelKZ TotalData600,
           List<ElementFormula> listElementFormula,
           Hre_ProfileEntity profileItem,
           Att_CutOffDurationEntity CutOffDuration,
           List<string> formula,
           Guid? GradePayrollID,
           Att_AttendanceTableEntity objAttendanceTableProCut,
           Dictionary<Guid, ValueCount> listTmpDeduction,
           Sal_GetDataComputePayrollKZServices dataComputeSer,
           Att_CutOffDurationEntity cutOffDurationPre,
           Att_RecalAttendanceTableEntity objRecalAttendanceTableProCut
           )
        {
            ElementFormula item = new ElementFormula();

            #region Các phần tử động 

            #region đếm số ngày có số giờ công thực tế trong khoảng truyền vào
            //[16/01/2018][bang.nguyen][92094][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_ATTENDANCETABLE_COUNT_ACTUALWORKHOUR_.ToString(), "_BYFROMANDTO"))
            {
                var strStartsWith = PayrollElement.DYN_ATT_ATTENDANCETABLE_COUNT_ACTUALWORKHOUR_.ToString();
                var strEndWith = "_BYFROMANDTO";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();

                if (objAttendanceTableProCut != null)
                {
                    var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);

                    if (listAttendanceTableItem.Count > 0)
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            double countActualWorkHour = 0;
                            var strHourFromAndTo = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                            if (!string.IsNullOrEmpty(strHourFromAndTo))
                            {
                                var listHourFromAndTo = strHourFromAndTo.Split("_").ToList();
                                if (listHourFromAndTo.Count == 2)
                                {
                                    double valueHourFrom = 0;
                                    double valueHourTo = 0;

                                    if (double.TryParse(listHourFromAndTo[0], out valueHourFrom) && double.TryParse(listHourFromAndTo[1], out valueHourTo))
                                    {
                                        countActualWorkHour = listAttendanceTableItem.Where(s => s.ActualWorkHour >= valueHourFrom && s.ActualWorkHour < valueHourTo).Count();
                                    }
                                }
                            }

                            item = new ElementFormula(_formula, countActualWorkHour, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }


            }
            #endregion

            #region Số lần tăng ca theo ca làm việc >= so gio truyen vao

            #region Số lần tăng ca theo ca làm việc và loại tăng ca >= so gio truyen vao
            //[29/01/2018][bang.nguyen][92670][Modify Func]
            //Số lần tăng ca theo ca làm việc và loại tăng ca >= so gio truyen vao
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN1_ATT_OVERTIME_COUNT_BY_SHIFTCODE_.ToString(), EnumDropDown.ElementDataType.Double))
            {
                //lấy các phần tử cần lấy dữ liệu
                var startWith = PayrollElement.DYN1_ATT_OVERTIME_COUNT_BY_SHIFTCODE_.ToString();
                string strBY_OTTYPECODE_ = "_BYOTTYPECODE_";
                List<string> ListFormula = formula.Where(m => m.StartsWith(startWith)).Distinct().ToList();

                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString()).FirstOrDefault();
                if (objAllSetting != null && !string.IsNullOrEmpty(objAllSetting.Value1))
                {
                    var strOVERTIMESTATUS = objAllSetting.Value1;
                    //[10/07/2018][bang.nguyen][95531][Modify Func]
                    //Điều chỉnh các phần tử lương sau, thêm điều kiện lấy dữ liệu Att_Overtime.IsPayback <> true
                    var listOvertimeByProfile = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID
                        && m.WorkDateRoot <= CutOffDuration.DateEnd
                        && m.WorkDateRoot >= CutOffDuration.DateStart
                        && (m.IsPayback == null || m.IsPayback == false)).ToList();
                    if (listOvertimeByProfile.Count > 0)
                    {
                        var listShift = TotalDataAll.listCat_Shift.ToList();

                        foreach (var objformular in ListFormula)
                        {
                            double totalHours = 0;
                            int _countOverTime = 0;
                            var _element = objformular;
                            var strShiftCodeOTTypeCodeAndHour = objformular.Replace(startWith, "");
                            var listShiftCodeOTTypeCodeAndHour = strShiftCodeOTTypeCodeAndHour.Replace(strBY_OTTYPECODE_, "@").Split('@').ToList();
                            //cong thuc co shift code
                            if (listShiftCodeOTTypeCodeAndHour.Count > 1)
                            {
                                var shiftCode = listShiftCodeOTTypeCodeAndHour[0];
                                var listOTTypeCodeAndHour = listShiftCodeOTTypeCodeAndHour[1].Split('_').ToList();
                                //cong thuc co ot type code va gio
                                if (listOTTypeCodeAndHour.Count > 1)
                                {
                                    string strHour = listOTTypeCodeAndHour[listOTTypeCodeAndHour.Count - 1];
                                    double valueInPutHour = 0;
                                    if (double.TryParse(strHour, out valueInPutHour))
                                    {
                                        string oTTypeCode = listShiftCodeOTTypeCodeAndHour[1].Replace("_" + strHour, "");
                                        var objShiftByCode = listShift.Where(s => s.Code == shiftCode).FirstOrDefault();
                                        var objOverTimeType = TotalDataAll.listOvertimeType.Where(s => s.Code == oTTypeCode).FirstOrDefault();
                                        if (objShiftByCode != null && objOverTimeType != null)
                                        {
                                            var ListOvertimeByProfileAndShiftAndOTType = listOvertimeByProfile.Where(m => m.ShiftID == objShiftByCode.ID && m.OvertimeTypeID == objOverTimeType.ID).ToList();
                                            var listWorkDateRoot = ListOvertimeByProfileAndShiftAndOTType.Where(s => s.WorkDateRoot != null).Select(s => s.WorkDateRoot.Value).Distinct().ToList();
                                            foreach (var workDateRoot in listWorkDateRoot)
                                            {
                                                if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_APPROVED.ToString())
                                                {
                                                    totalHours = ListOvertimeByProfileAndShiftAndOTType.Where(s => s.WorkDateRoot == workDateRoot && s.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()
                                                    && s.ApproveHours != null).Sum(m => m.ApproveHours.Value);
                                                }
                                                else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString())
                                                {
                                                    totalHours = ListOvertimeByProfileAndShiftAndOTType.Where(s => s.WorkDateRoot == workDateRoot && s.Status == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString()).Sum(m => m.ConfirmHours);
                                                }
                                                else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString())
                                                {
                                                    totalHours = ListOvertimeByProfileAndShiftAndOTType.Where(s => s.WorkDateRoot == workDateRoot && s.Status == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString()).Sum(m => m.RegisterHours);
                                                }
                                                else
                                                {
                                                    totalHours = 0;
                                                }
                                                if (totalHours >= valueInPutHour)
                                                {
                                                    _countOverTime += 1;
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            formula.Remove(objformular);
                            item = new ElementFormula(_element, _countOverTime, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var objformular in ListFormula)
                        {
                            formula.Remove(objformular);
                            var _element = objformular;
                            item = new ElementFormula(_element, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }

                }
                else
                {
                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            /// [25/12/2017][bang.nguyen][91485][new func]
            /// Số lần tăng ca theo ca làm việc (DYN_ATT_OVERTIME_COUNT_BY_SHIFTCODE_ + mã ca + số giờ)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_OVERTIME_COUNT_BY_SHIFTCODE_.ToString(), EnumDropDown.ElementDataType.Double))
            {
                //lấy các phần tử cần lấy dữ liệu
                var startWith = PayrollElement.DYN_ATT_OVERTIME_COUNT_BY_SHIFTCODE_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(startWith)).Distinct().ToList();

                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString()).FirstOrDefault();
                if (objAllSetting != null && !string.IsNullOrEmpty(objAllSetting.Value1))
                {
                    var strOVERTIMESTATUS = objAllSetting.Value1;
                    //[10/07/2018][bang.nguyen][95531][Modify Func]
                    //Điều chỉnh các phần tử lương sau, thêm điều kiện lấy dữ liệu Att_Overtime.IsPayback <> true
                    var listOvertimeByProfile = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID
                        && m.WorkDateRoot <= CutOffDuration.DateEnd
                        && m.WorkDateRoot >= CutOffDuration.DateStart
                        && (m.IsPayback == null || m.IsPayback == false)).ToList();
                    if (listOvertimeByProfile.Count > 0)
                    {
                        var listShift = TotalDataAll.listCat_Shift.ToList();

                        foreach (var objformular in ListFormula)
                        {
                            double totalHours = 0;
                            int _countOverTime = 0;
                            var _element = objformular;
                            var lstTemp = _element.Split('_').ToList();
                            var _strvalue = lstTemp[lstTemp.Count() - 1].ToString();
                            //replace dau phẩy để parse số không bị sai
                            var _value = _strvalue.Replace(',', '.');
                            double _valueOutPut = 0;
                            //giá trị nhập vào đúng là số
                            if (double.TryParse(_value, out _valueOutPut))
                            {
                                //lấy mã loại nghỉ được cấu hình trong phần tử
                                int indexVualue = _element.IndexOf(_strvalue);
                                int lenghtDYN = startWith.Length;
                                string _codeShiftFormular = _element.Substring(lenghtDYN, indexVualue - lenghtDYN - 1);
                                var objShiftByCode = listShift.Where(s => s.Code == _codeShiftFormular).FirstOrDefault();
                                //mã loại nghỉ cấu hình hợp lệ
                                if (objShiftByCode != null)
                                {
                                    var ListOvertimeByProfileAndShift = listOvertimeByProfile.Where(m => m.ShiftID == objShiftByCode.ID).ToList();
                                    var listWorkDateRoot = ListOvertimeByProfileAndShift.Where(s => s.WorkDateRoot != null).Select(s => s.WorkDateRoot.Value).Distinct().ToList();
                                    foreach (var workDateRoot in listWorkDateRoot)
                                    {
                                        if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_APPROVED.ToString())
                                        {
                                            totalHours = ListOvertimeByProfileAndShift.Where(s => s.WorkDateRoot == workDateRoot && s.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()
                                            && s.ApproveHours != null).Sum(m => m.ApproveHours.Value);
                                        }
                                        else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString())
                                        {
                                            totalHours = ListOvertimeByProfileAndShift.Where(s => s.WorkDateRoot == workDateRoot && s.Status == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString()).Sum(m => m.ConfirmHours);
                                        }
                                        else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString())
                                        {
                                            totalHours = ListOvertimeByProfileAndShift.Where(s => s.WorkDateRoot == workDateRoot && s.Status == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString()).Sum(m => m.RegisterHours);
                                        }
                                        else
                                        {
                                            totalHours = 0;
                                        }
                                        if (totalHours >= _valueOutPut)
                                        {
                                            _countOverTime += 1;
                                        }
                                    }
                                }
                            }
                            formula.Remove(objformular);
                            item = new ElementFormula(_element, _countOverTime, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var objformular in ListFormula)
                        {
                            formula.Remove(objformular);
                            var _element = objformular;
                            item = new ElementFormula(_element, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }

                }
                else
                {
                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region phan tu dong Số giờ làm việc thực tế theo ca làm việc
            // [18/12/2017][bang.nguyen][91126][new func]
            // Số giờ làm việc thực tế theo ca làm việc (DYN_ATT_ATTENDANCETABLEITEM_SUMWORKHOURS_ + mã ca + _BYCODESHIFT)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_ATTENDANCETABLEITEM_SUM_WORKHOURS_.ToString(), "_BYCODESHIFT"))
            {
                var strStartsWith = PayrollElement.DYN_ATT_ATTENDANCETABLEITEM_SUM_WORKHOURS_.ToString();
                var strEndWith = "_BYCODESHIFT";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();

                var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID)
                    .Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd && s.ShiftID != null).ToList();

                if (listAttendanceTableItem.Count > 0)
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        var _formula = formulaitem;
                        double sumWorkHour = 0;
                        var codeShift = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");

                        var objShift = TotalDataAll.listCat_Shift.Where(s => s.Code == codeShift).FirstOrDefault();
                        if (objShift != null)
                        {
                            sumWorkHour = listAttendanceTableItem.Where(s => s.ShiftID == objShift.ID).Sum(s => s.WorkHours);
                        }

                        item = new ElementFormula(_formula, sumWorkHour, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
            }

            #endregion

            #region Phần tử động đếm số ca làm việc theo từng loại (theo từng mã ca làm việc)
            // [24/04/2018][tung.tran][94376][modify func]
            // Số ca làm việc theo loại(mã) (DYN4_ATT_ROSTER_COUNT_ +"mã ca" + _BYCODESHIFT)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN4_ATT_ROSTER_COUNT_.ToString(), "_BYCODESHIFT"))
            {

                var strStartsWith = PayrollElement.DYN4_ATT_ROSTER_COUNT_.ToString();
                var strEndWith = "_BYCODESHIFT";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();

                var listRosterProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);

                //[Tin.Nguyen - 202020903][117967]Lấy dữ roster theo cấu hình trạng thái dc tính
                var commonServices = new Att_CommonServices();
                var listStatus = commonServices.GetConfigStatusRosterCompute();
                var listRosterByProfile = listRosterProfile.Where(m => m.ProfileID == profileItem.ID &&
                                                                        m.DateStart <= CutOffDuration.DateEnd &&
                                                                        m.DateEnd >= CutOffDuration.DateStart &&
                                                                        listStatus.Contains(m.Status)).ToList();


                //rostergroup thang N
                var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.DateEnd && s.DateEnd >= CutOffDuration.DateStart).ToList();
                //lich lam viec thang N
                var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                    CutOffDuration.DateStart,
                    CutOffDuration.DateEnd,
                    profileItem.ID,
                    listRosterByProfile,
                    listRosterGroup,
                    TotalDataAll.listRosterGroupByOrganization,
                    TotalDataAll.listRosterGroupType,
                    TotalDataAll.listOrgStructure,
                    TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                            .Where(s => s.ProfileID == profileItem.ID
                            && s.DateEffective <= CutOffDuration.DateEnd
                            && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                            .FirstOrDefault());


                if (lstDailyShift.Count > 0)
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        var _formula = formulaitem;
                        int countShift = 0;
                        var codeShift = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                        var objShift = TotalDataAll.listCat_Shift.Where(s => s.Code == codeShift).FirstOrDefault();

                        if (objShift != null)
                        {
                            for (DateTime date = CutOffDuration.DateStart; date <= CutOffDuration.DateEnd; date = date.AddDays(1))
                            {
                                if (lstDailyShift.ContainsKey(date) && lstDailyShift[date] != null)
                                {
                                    var listRoterByDate = lstDailyShift[date];
                                    countShift += listRoterByDate.Where(s => s != null && s != Guid.Empty && s == objShift.ID).Count();
                                }
                            }
                        }

                        item = new ElementFormula(_formula, countShift, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
            }

            #endregion

            #region Phần tử động đếm số giờ OT payback theo loại OT (Theo từng mã loại OT)
            // [01/06/2018][tung.tran][95530][modify func]
            // Số giờ tăng ca theo loại(mã) (DYN6_ATT_OVERTIME_COUNTPAYBACK_ +"mã ca" + _BYOVERTIMETYPE)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN6_ATT_OVERTIME_COUNTPAYBACK_.ToString(), "_BYOVERTIMETYPE"))
            {

                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString()).FirstOrDefault();
                var strStartsWith = PayrollElement.DYN6_ATT_OVERTIME_COUNTPAYBACK_.ToString();
                var strEndWith = "_BYOVERTIMETYPE";
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();


                //lay data nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listOverTimePayBack";

                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.listOverTimePayBack = dataComputeSer.GetOvertimePayBack(TotalData600.strOrderByProfile, CutOffDuration.ID, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông lưu store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN6_ATT_OVERTIME_COUNTPAYBACK_.ToString() + ") ";

                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else
                {
                    if (objAllSetting != null && !string.IsNullOrEmpty(objAllSetting.Value1))
                    {
                        var strOVERTIMESTATUS = objAllSetting.Value1;
                        double totalHoursOT = 0;
                        var listOvertimeTimeOffByProfile = TotalData600.listOverTimePayBack.Where(m => m.ProfileID == profileItem.ID
                                                            && m.PaybackDurationID == CutOffDuration.ID
                                                            && m.IsPayback == true).ToList();

                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            var codeTypeOT = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                            var objOvertime = TotalDataAll.listOvertimeType.Where(s => s.Code == codeTypeOT).FirstOrDefault();

                            if (objOvertime != null)
                            {
                                var ListOvertimeTimeOffByProfileAndType = listOvertimeTimeOffByProfile.Where(m => m.OvertimeTypeID == objOvertime.ID).ToList();

                                if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_APPROVED.ToString())
                                {
                                    totalHoursOT = ListOvertimeTimeOffByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()
                                    && s.ApproveHours != null).Sum(m => m.ApproveHours.Value);
                                }
                                else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString())
                                {
                                    totalHoursOT = ListOvertimeTimeOffByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString()).Sum(m => m.ConfirmHours);
                                }
                                else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString())
                                {
                                    totalHoursOT = ListOvertimeTimeOffByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString()).Sum(m => m.RegisterHours);
                                }
                                else
                                {
                                    totalHoursOT = 0;
                                }
                                item = new ElementFormula(PayrollElement.DYN6_ATT_OVERTIME_COUNTPAYBACK_.ToString() + objOvertime.Code + "_BYOVERTIMETYPE", totalHoursOT, 0);
                                listElementFormula.Add(item);
                            }

                            item = new ElementFormula(_formula, totalHoursOT, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
            }

            #endregion

            #region phan tu dong theo hop dong, so ngay nghi truoc va sau theo loai truoc va sau thay doi hop dong
            //[19/07/2017][bang.nguyen][85222][Modify Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_LEAVEDAYTYPE_SUM_", new string[] { "_BEFORE_CHANGE_CONTRACT", "_AFTER_CHANGE_CONTRACT" }))
            {

                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (ATT_LEAVEDAYTYPE_SUM_) ";


                }
                else
                {
                    var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);

                    var listContract = listContractByProfileDic.Where(s => s.ProfileID == profileItem.ID && s.DateStart <= CutOffDuration.DateEnd && s.Status == ContractSearchStatus.E_APPROVED.ToString())
                    .OrderByDescending(s => s.DateStart).ToList();

                    var listLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code != null && s.Code != string.Empty).ToList();

                    var objContractFirstInMonth = listContract.Where(s => s.DateStart > CutOffDuration.DateStart).FirstOrDefault();
                    if (objContractFirstInMonth != null)
                    {
                        var objAttTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();
                        double _HourOnWorkDate = 0;
                        if (objAttTable != null && objAttTable.GradeAttendanceID != null)
                        {
                            var objGradeAttendance = TotalDataAll.ListCat_GradeAttendance.Where(s => s.ID == objAttTable.GradeAttendanceID).FirstOrDefault();
                            if (objGradeAttendance != null && objGradeAttendance.HourOnWorkDate != null)
                            {
                                _HourOnWorkDate = objGradeAttendance.HourOnWorkDate.Value;
                            }
                        }

                        var listAttendanceTableItemBefore = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                            s.CutOffDurationID == CutOffDuration.ID
                                                            && s.WorkDate >= CutOffDuration.DateStart
                                                            && s.WorkDate < objContractFirstInMonth.DateStart).ToList();


                        var listAttendanceTableItemAfter = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                        s.CutOffDurationID == CutOffDuration.ID
                                                    && s.WorkDate >= objContractFirstInMonth.DateStart
                                                    && s.WorkDate <= CutOffDuration.DateEnd).ToList();


                        foreach (var objLeaveDayType in listLeaveDayType)
                        {
                            double sumLeaveDay = 0;
                            double sumLeaveDayTypeBefore = 0;
                            double sumLeaveDayTypeAfter = 0;

                            #region so ngay nghi theo loai truoc khi thay doi luong trong thang
                            foreach (var objAttendanceTableItem in listAttendanceTableItemBefore)
                            {
                                sumLeaveDay = 0;
                                if (objAttendanceTableItem.LeaveTypeID == objLeaveDayType.ID)
                                {
                                    sumLeaveDay += objAttendanceTableItem.LeaveHours;
                                }
                                if (objAttendanceTableItem.ExtraLeaveTypeID == objLeaveDayType.ID)
                                {
                                    sumLeaveDay += objAttendanceTableItem.ExtraLeaveHours;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType3ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours3 != null)
                                {
                                    sumLeaveDay += objAttendanceTableItem.ExtraLeaveHours3.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType4ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours4 != null)
                                {
                                    sumLeaveDay += objAttendanceTableItem.ExtraLeaveHours4.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType5ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours5 != null)
                                {
                                    sumLeaveDay += objAttendanceTableItem.ExtraLeaveHours5.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType6ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours6 != null)
                                {
                                    sumLeaveDay += objAttendanceTableItem.ExtraLeaveHours6.Value;
                                }

                                if (objAttendanceTableItem.Shift2ID == null && objAttendanceTableItem.ShiftID == null)
                                {
                                    if (_HourOnWorkDate != 0)
                                    {
                                        sumLeaveDayTypeBefore += sumLeaveDay / _HourOnWorkDate;
                                    }
                                }
                                else if (objAttendanceTableItem.Shift2ID == null)
                                {
                                    if (objAttendanceTableItem.ShiftID != null)
                                    {
                                        var objshift = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendanceTableItem.ShiftID).FirstOrDefault();
                                        if (objshift != null && objshift.StdWorkHours != null && objshift.StdWorkHours != 0)
                                        {
                                            sumLeaveDayTypeBefore += sumLeaveDay / objshift.StdWorkHours.Value;
                                        }
                                    }
                                }
                                else if (objAttendanceTableItem.Shift2ID != null)
                                {
                                    var objshift = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendanceTableItem.ShiftID).FirstOrDefault();
                                    double _shiftStdWorkHours = 0;
                                    if (objshift != null && objshift.StdWorkHours != null && objshift.StdWorkHours != 0)
                                    {
                                        _shiftStdWorkHours = objshift.StdWorkHours.Value;
                                    }
                                    double _shift2WorkPaidHours = 0;
                                    var objshitf2 = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendanceTableItem.Shift2ID).FirstOrDefault();
                                    if (objshitf2 != null && objshitf2.StdWorkHours != null && objshitf2.StdWorkHours != 0)
                                    {
                                        _shift2WorkPaidHours = objshitf2.StdWorkHours.Value;
                                    }
                                    double sumshiftStdWorkHours = _shiftStdWorkHours + _shift2WorkPaidHours;
                                    if (sumshiftStdWorkHours != 0)
                                    {
                                        sumLeaveDayTypeBefore += sumLeaveDay / (sumshiftStdWorkHours / 2);
                                    }
                                }
                            }
                            #endregion

                            sumLeaveDay = 0;
                            #region so ngay nghi sau khi thay doi luong trong thang
                            foreach (var objAttendanceTableItem in listAttendanceTableItemAfter)
                            {
                                sumLeaveDay = 0;
                                if (objAttendanceTableItem.LeaveTypeID == objLeaveDayType.ID)
                                {
                                    sumLeaveDay += objAttendanceTableItem.LeaveHours;
                                }
                                if (objAttendanceTableItem.ExtraLeaveTypeID == objLeaveDayType.ID)
                                {
                                    sumLeaveDay += objAttendanceTableItem.ExtraLeaveHours;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType3ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours3 != null)
                                {
                                    sumLeaveDay += objAttendanceTableItem.ExtraLeaveHours3.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType4ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours4 != null)
                                {
                                    sumLeaveDay += objAttendanceTableItem.ExtraLeaveHours4.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType5ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours5 != null)
                                {
                                    sumLeaveDay += objAttendanceTableItem.ExtraLeaveHours5.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType6ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours6 != null)
                                {
                                    sumLeaveDay += objAttendanceTableItem.ExtraLeaveHours6.Value;
                                }

                                if (objAttendanceTableItem.Shift2ID == null && objAttendanceTableItem.ShiftID == null)
                                {
                                    if (_HourOnWorkDate != 0)
                                    {
                                        sumLeaveDayTypeAfter += sumLeaveDay / _HourOnWorkDate;
                                    }
                                }
                                else if (objAttendanceTableItem.Shift2ID == null)
                                {
                                    if (objAttendanceTableItem.ShiftID != null)
                                    {
                                        var objshift = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendanceTableItem.ShiftID).FirstOrDefault();
                                        if (objshift != null && objshift.StdWorkHours != null && objshift.StdWorkHours != 0)
                                        {
                                            sumLeaveDayTypeAfter += sumLeaveDay / objshift.StdWorkHours.Value;
                                        }
                                    }
                                }
                                else if (objAttendanceTableItem.Shift2ID != null)
                                {
                                    var objshift = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendanceTableItem.ShiftID).FirstOrDefault();
                                    double _shiftStdWorkHours = 0;
                                    if (objshift != null && objshift.StdWorkHours != null && objshift.StdWorkHours != 0)
                                    {
                                        _shiftStdWorkHours = objshift.StdWorkHours.Value;
                                    }
                                    double _shift2WorkPaidHours = 0;
                                    var objshitf2 = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendanceTableItem.Shift2ID).FirstOrDefault();
                                    if (objshitf2 != null && objshitf2.StdWorkHours != null && objshitf2.StdWorkHours != 0)
                                    {
                                        _shift2WorkPaidHours = objshitf2.StdWorkHours.Value;
                                    }
                                    double sumshiftStdWorkHours = _shiftStdWorkHours + _shift2WorkPaidHours;
                                    if (sumshiftStdWorkHours != 0)
                                    {
                                        sumLeaveDayTypeAfter += sumLeaveDay / (sumshiftStdWorkHours / 2);
                                    }
                                }
                            }
                            #endregion

                            item = new ElementFormula("ATT_LEAVEDAYTYPE_SUM_" + objLeaveDayType.Code + "_BEFORE_CHANGE_CONTRACT", sumLeaveDayTypeBefore, 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula("ATT_LEAVEDAYTYPE_SUM_" + objLeaveDayType.Code + "_AFTER_CHANGE_CONTRACT", sumLeaveDayTypeAfter, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var objLeaveDayType in listLeaveDayType)
                        {
                            item = new ElementFormula("ATT_LEAVEDAYTYPE_SUM_" + objLeaveDayType.Code + "_BEFORE_CHANGE_CONTRACT", 0, 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula("ATT_LEAVEDAYTYPE_SUM_" + objLeaveDayType.Code + "_AFTER_CHANGE_CONTRACT", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            #endregion

            #region Phần tử động  đếm số ngày làm trả lương có số giờ làm việc lớn hơn gio(truyền vào) trong chu kì công
            //[28/04/2017][bang.nguyen][81669][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_ATTENDANCETABLEITEM_COUNT_WORKPAIDHOURS_.ToString(), EnumDropDown.ElementDataType.Double))
            {
                //lấy các phần tử cần lấy dữ liệu
                int countWorkPaidHours = 0;
                List<string> ListFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN_ATT_ATTENDANCETABLEITEM_COUNT_WORKPAIDHOURS_.ToString())).Distinct().ToList();
                var lstAtttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                if (lstAtttendanceTableItem.Count > 0)
                {
                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        countWorkPaidHours = 0;
                        var _element = objformular;
                        var lstTemp = _element.Split('_').ToList();
                        var _strvalue = lstTemp[lstTemp.Count() - 1].ToString();
                        //replace dau phẩy để parse số không bị sai
                        var _value = _strvalue.Replace(',', '.');
                        double _valueOutPut = 0;
                        //giá trị nhập vào đúng là số
                        if (double.TryParse(_value, out _valueOutPut))
                        {
                            countWorkPaidHours = lstAtttendanceTableItem.Where(s => s.WorkPaidHours > _valueOutPut).Count();
                        }
                        item = new ElementFormula(_element, countWorkPaidHours, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, countWorkPaidHours, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Phần tử động Phần tử lương đếm số giờ OT theo từng loại loại có số giờ >= số giờ truyền vào
            //[28/04/2016][bang.nguyen][81338][Modify Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_ATTENDANCETABLEITEM_COUNT_OVERTIME_.ToString(), EnumDropDown.ElementDataType.Double))
            {
                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN_ATT_ATTENDANCETABLEITEM_COUNT_OVERTIME_.ToString())).Distinct().ToList();
                var lstOvertimeType = TotalDataAll.listOvertimeType.ToList();
                var lstAtttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                if (lstAtttendanceTableItem.Count > 0 && lstOvertimeType.Count > 0)
                {
                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        int _countOverTime = 0;
                        var _element = objformular;
                        var lstTemp = _element.Split('_').ToList();
                        var _strvalue = lstTemp[lstTemp.Count() - 1].ToString();
                        //replace dau phẩy để parse số không bị sai
                        var _value = _strvalue.Replace(',', '.');
                        double _valueOutPut = 0;
                        //giá trị nhập vào đúng là số
                        if (double.TryParse(_value, out _valueOutPut))
                        {

                            //lấy mã loại nghỉ được cấu hình trong phần tử
                            int indexVualue = _element.IndexOf(_strvalue);
                            int lenghtDYN = PayrollElement.DYN_ATT_ATTENDANCETABLEITEM_COUNT_OVERTIME_.ToString().Length;
                            string _codeOverTimeTypeFormular = _element.Substring(lenghtDYN, indexVualue - lenghtDYN - 1);
                            var lstOverTimeByCode = lstOvertimeType.Where(s => s.Code == _codeOverTimeTypeFormular).FirstOrDefault();
                            //mã loại nghỉ cấu hình hợp lệ
                            if (lstOverTimeByCode != null)
                            {
                                var lstAttItemByOverTimeType = lstAtttendanceTableItem.Where(s => s.OvertimeTypeID == lstOverTimeByCode.ID
                                                                                                || s.ExtraOvertimeTypeID == lstOverTimeByCode.ID
                                                                                                || s.ExtraOvertimeType2ID == lstOverTimeByCode.ID
                                                                                                || s.ExtraOvertimeType3ID == lstOverTimeByCode.ID
                                                                                                || s.ExtraOvertimeType4ID == lstOverTimeByCode.ID).ToList();
                                foreach (var objAttItem in lstAttItemByOverTimeType)
                                {
                                    if (objAttItem.OvertimeTypeID == lstOverTimeByCode.ID && objAttItem.OvertimeHours >= _valueOutPut)
                                    {
                                        _countOverTime += 1;
                                    }
                                    if (objAttItem.ExtraOvertimeTypeID == lstOverTimeByCode.ID && objAttItem.ExtraOvertimeHours >= _valueOutPut)
                                    {
                                        _countOverTime += 1;
                                    }
                                    if (objAttItem.ExtraOvertimeType2ID == lstOverTimeByCode.ID && objAttItem.ExtraOvertimeHours2 >= _valueOutPut)
                                    {
                                        _countOverTime += 1;
                                    }
                                    if (objAttItem.ExtraOvertimeType3ID == lstOverTimeByCode.ID && objAttItem.ExtraOvertimeHours3 >= _valueOutPut)
                                    {
                                        _countOverTime += 1;
                                    }
                                    if (objAttItem.ExtraOvertimeType4ID == lstOverTimeByCode.ID && objAttItem.ExtraOvertimeHours4 >= _valueOutPut)
                                    {
                                        _countOverTime += 1;
                                    }
                                }
                            }
                        }
                        item = new ElementFormula(_element, _countOverTime, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Phần tử lương động tương ứng với từng lần thay đổi lương cơ bản trong kỳ lương 
            //[24/12/2016][HienNguyen][77139]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_PREGNANCY_FOR_ATTENDANCE_.ToString()))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                var listBasicSalaryByProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd && m.DateOfEffect >= CutOffDuration.DateStart).OrderBy(m => m.DateOfEffect).ToList();
                var listAttendancetableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.IsHavingPregTreatment == true).ToList();

                for (int i = 0; i < 10; i++)
                {
                    double value = 0;
                    try
                    {
                        if (i == 0)
                        {
                            var basicSalary = listBasicSalaryByProfile[i];
                            value = listAttendancetableItem.Count(m => m.WorkDate <= basicSalary.DateOfEffect && m.WorkDate >= CutOffDuration.DateStart);
                        }
                        else if (i == listBasicSalaryByProfile.Count)
                        {
                            var basicSalary = listBasicSalaryByProfile[i - 1];
                            value = listAttendancetableItem.Count(m => m.WorkDate <= CutOffDuration.DateEnd && m.WorkDate > basicSalary.DateOfEffect);
                        }
                        else
                        {
                            var basicSalaryStart = listBasicSalaryByProfile[i - 1];
                            var basicSalaryEnd = listBasicSalaryByProfile[i];
                            value = listAttendancetableItem.Count(m => m.WorkDate <= basicSalaryEnd.DateOfEffect && m.WorkDate > basicSalaryStart.DateOfEffect);
                        }

                        item = new ElementFormula(PayrollElement.DYN_ATT_PREGNANCY_FOR_ATTENDANCE_.ToString() + (i + 1).ToString(), value, 0);
                        listElementFormula.Add(item);
                    }
                    catch
                    {
                        item = new ElementFormula(PayrollElement.DYN_ATT_PREGNANCY_FOR_ATTENDANCE_.ToString() + i.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        continue;
                    }
                }
            }
            #endregion

            #region Tổng số giờ công tính lương không tính muộn sớm theo ca
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_SUM_SHIFT_PAIDHOURS_NOT_LATEEARLY_.ToString()))
            {
                var listAttendancetableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                foreach (var i in TotalDataAll.listCat_Shift)
                {
                    var listAttendancetableItemByShift = listAttendancetableItem.Where(m => m.ShiftID != null && m.ShiftID == i.ID).ToList();
                    item = new ElementFormula(PayrollElement.DYN_ATT_SUM_SHIFT_PAIDHOURS_NOT_LATEEARLY_.ToString() + i.Code, listAttendancetableItemByShift.Sum(m => m.AvailableHours) - listAttendancetableItemByShift.Sum(m => m.PaidLeaveHours) - listAttendancetableItemByShift.Sum(m => m.UnpaidLeaveHours), 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Số ngày theo loại ngày nghỉ trước thay đổi lương và sau thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_ATTTABLEITEM_SUM_LEAVEDAYS_", new string[] { "_FIRST", "_LAST" }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                List<string> ListFormula = formula.Where(m => m.StartsWith("ATT_ATTTABLEITEM_SUM_LEAVEDAYS_")
                                                            && (m.EndsWith("_FIRST") || m.EndsWith("_LAST"))).ToList();
                var listLeaveDayTypeCode = new List<string>();
                foreach (var objformular in ListFormula)
                {
                    var code = objformular.Replace("ATT_ATTTABLEITEM_SUM_LEAVEDAYS_", "").Replace("_FIRST", "").Replace("_LAST", "");
                    if (!listLeaveDayTypeCode.Contains(code))
                    {
                        listLeaveDayTypeCode.Add(code);
                    }
                }
                var listLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code != null && s.Code != string.Empty && listLeaveDayTypeCode.Contains(s.Code)).ToList();
                if (listLeaveDayType.Count > 0)
                {
                    var listLeaveDayTypeID = listLeaveDayType.Select(s => s.ID).ToList();
                    var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s => s.WorkDate >= CutOffDuration.DateStart
                                                                                                && s.WorkDate <= CutOffDuration.DateEnd
                                                                                                && s.LeaveTypeID != null
                                                                                                && listLeaveDayTypeID.Contains(s.LeaveTypeID.Value)
                                                                                                && s.LeaveDays > 0).ToList();
                    if (listAttendanceTableItemByPro.Count > 0)
                    {
                        double _sumLeaveDays_FIRST = 0;
                        double _sumLeaveDays_LAST = 0;
                        if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                        {
                            //ngay thay doi luong
                            DateTime dateChangeSalary = listBasicSalaryByProfileDic.Where(s => s.ProfileID == profileItem.ID
                                                                                        && s.DateOfEffect > CutOffDuration.DateStart
                                                                                        && s.DateOfEffect <= CutOffDuration.DateEnd)
                                                                                        .OrderByDescending(s => s.DateOfEffect)
                                                                                        .Select(s => s.DateOfEffect).FirstOrDefault();

                            var listAttendanceTableItemByProFirst = listAttendanceTableItemByPro.Where(s => s.WorkDate <= dateChangeSalary.AddDays(-1)).ToList();
                            var listAttendanceTableItemByProLast = listAttendanceTableItemByPro.Where(s => s.WorkDate >= dateChangeSalary).ToList();
                            foreach (var code in listLeaveDayTypeCode)
                            {
                                string elementFormular = "ATT_ATTTABLEITEM_SUM_LEAVEDAYS_" + code;
                                var lstFormularByCode = ListFormula.Where(s => s.StartsWith(elementFormular)).ToList();
                                foreach (var objFormularByCode in lstFormularByCode)
                                {
                                    formula.Remove(objFormularByCode);
                                    var strElement = objFormularByCode;
                                    if (strElement.EndsWith("_LAST"))//PT sau thay đổi lương
                                    {
                                        _sumLeaveDays_LAST = 0;
                                        var objLeaveDayType = listLeaveDayType.Where(s => s.Code == code).FirstOrDefault();
                                        if (objLeaveDayType != null)
                                        {

                                            _sumLeaveDays_LAST = listAttendanceTableItemByProLast.Where(s => s.LeaveTypeID == objLeaveDayType.ID && s.LeaveDays != null)
                                                                                                    .Sum(s => s.LeaveDays.Value);
                                        }
                                        item = new ElementFormula(strElement, _sumLeaveDays_LAST, 0);
                                        listElementFormula.Add(item);
                                    }
                                    else //PT trước thay đổi lương = 0
                                    {
                                        _sumLeaveDays_FIRST = 0;
                                        var objLeaveDayType = listLeaveDayType.Where(s => s.Code == code).FirstOrDefault();
                                        if (objLeaveDayType != null)
                                        {

                                            _sumLeaveDays_FIRST = listAttendanceTableItemByProFirst.Where(s => s.LeaveTypeID == objLeaveDayType.ID && s.LeaveDays != null)
                                                                                                    .Sum(s => s.LeaveDays.Value);
                                        }
                                        item = new ElementFormula(strElement, _sumLeaveDays_FIRST, 0);
                                        listElementFormula.Add(item);
                                    }
                                }
                            }
                        }
                        else // khong thay doi luong
                        {
                            foreach (var code in listLeaveDayTypeCode)
                            {
                                string elementFormular = "ATT_ATTTABLEITEM_SUM_LEAVEDAYS_" + code;
                                var lstFormularByCode = ListFormula.Where(s => s.StartsWith(elementFormular)).ToList();

                                foreach (var objFormularByCode in lstFormularByCode)
                                {
                                    formula.Remove(objFormularByCode);
                                    var strElement = objFormularByCode;
                                    if (strElement.EndsWith("_LAST")) //PT sau thay đổi lương
                                    {
                                        _sumLeaveDays_LAST = 0;
                                        var objLeaveDayType = listLeaveDayType.Where(s => s.Code == code).FirstOrDefault();
                                        if (objLeaveDayType != null)
                                        {
                                            _sumLeaveDays_LAST = listAttendanceTableItemByPro.Where(s => s.LeaveTypeID == objLeaveDayType.ID && s.LeaveDays != null).Sum(s => s.LeaveDays.Value);
                                        }
                                        item = new ElementFormula(strElement, _sumLeaveDays_LAST, 0);
                                        listElementFormula.Add(item);
                                    }
                                    else //PT trước thay đổi lương = 0
                                    {
                                        item = new ElementFormula(strElement, 0, 0);
                                        listElementFormula.Add(item);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
            }

            #endregion

            #region Phần tử tính lương tính số giờ giữa ca
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_MIDDLE_SHIFT_.ToString(), string.Empty))
            {
                string[] listFormulaCountMiddleShift = formula.Where(m => m.StartsWith(PayrollElement.DYN_ATT_MIDDLE_SHIFT_.ToString())).ToArray();
                var listAttendanceTableItemByProfile = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);

                foreach (var i in listFormulaCountMiddleShift)
                {
                    string[] arrCode = i.Split(',');
                    if (arrCode.Count() == 9)
                    {
                        string codeShift = arrCode[4];
                        double shiftHours = double.Parse(arrCode[5]);
                        string codeOT = arrCode[6];
                        double overtimeHours = double.Parse(arrCode[7]);
                        double addHours = double.Parse(arrCode[8]);
                        double resultHours = 0;

                        var shiftByCode = TotalDataAll.listCat_Shift.FirstOrDefault(m => m.Code == codeShift);
                        var overtimeByCode = TotalDataAll.listOvertimeType.FirstOrDefault(m => m.Code == codeOT);
                        if (shiftByCode == null || overtimeByCode == null)
                        {
                            item = new ElementFormula(i, 0, 0);
                            listElementFormula.Add(item);
                            continue;
                        }

                        foreach (var attItem in listAttendanceTableItemByProfile)
                        {
                            if (attItem.ShiftID == shiftByCode.ID
                                && attItem.WorkPaidHours >= shiftHours
                                && ((attItem.OvertimeTypeID == overtimeByCode.ID && attItem.OvertimeHours < overtimeHours) || (attItem.ExtraOvertimeTypeID == overtimeByCode.ID && attItem.ExtraOvertimeHours < overtimeHours)))
                            {
                                resultHours += addHours;
                            }
                        }

                        item = new ElementFormula(i, resultHours, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(i, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Đếm số người thân của từng nhân viên theo loại quan hệ và tuổi

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_HRE_COUNT_RELATIVE_.ToString(), string.Empty))
            {

                string status = string.Empty;
                dataComputeSer.GetDicRelatives(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN_HRE_COUNT_RELATIVE_.ToString() + ") ";
                }
                else
                {
                    var listRelativesByProfileDic = TotalData600.dicRelatives.GetValueOrNew(profileItem.ID);
                    string[] listFormulaRelative = formula.Where(m => m.StartsWith(PayrollElement.DYN_HRE_COUNT_RELATIVE_.ToString())).ToArray();
                    var lstRelatives = new List<Hre_RelativesEntity>();
                    var ListRelativesByProFile = listRelativesByProfileDic.Where(s => s.ProfileID == profileItem.ID && s.YearOfBirth != null && s.YearOfBirth != string.Empty).ToList();
                    //xử lý format lại ngay tháng khi ngay tháng là chuỗi string
                    foreach (var objRelatives in ListRelativesByProFile)
                    {
                        var _dictionnary = Common.GetDateFromString(objRelatives.YearOfBirth, '/');
                        if (_dictionnary.ContainsKey(true))
                        {
                            var _YearOfBirth = _dictionnary[true];
                            if (_YearOfBirth <= CutOffDuration.DateEnd)
                            {
                                lstRelatives.Add(objRelatives);
                            }
                        }
                    }

                    foreach (var relative in listFormulaRelative)
                    {
                        string[] arrItem = relative.Replace(PayrollElement.DYN_HRE_COUNT_RELATIVE_.ToString(), "").Split('_');
                        //Lọc Code Relative
                        string codeRelative = arrItem[0];
                        //Lọc operator
                        string operators = arrItem[1];
                        //lọc số tuổi
                        double age = 0;
                        double.TryParse(arrItem.LastOrDefault(), out age);
                        //Get data Relative by Type Code
                        var listRelativeByCode = lstRelatives.Where(m => m.RelativeTypeCode == codeRelative).ToList();

                        double value = 0;

                        #region For In ListRelative
                        foreach (var relativeItem in listRelativeByCode)
                        {
                            //Nếu Hre_Relatives.IDDateOfExpiry <> null thì thêm điều kiện:
                            //Hre_Relatives.YearOfBirth < Att_CutOffDuration.DateEnd
                            //And(Hre_Relatives.IDDateOfExpiry > Att_CutOffDuration.DateStart)
                            //And(Hre_Relatives.YearOfBirth <= Hre_Relatives.IDDateOfExpiry)
                            if (relativeItem.IDDateOfExpiry.HasValue)
                            {
                                DateTime? yearOfBirth = Common.ConvertYearOfBirthToDateTime(relativeItem.YearOfBirth);
                                //Hien.Le [25/07/2020] 0117575: [Hotifix _SEDO_V8.7.33.01.07.09]: Thêm phần tử lương lấy số lượng người thân theo theo tháng tuổi và loại quan hệ
                                yearOfBirth = yearOfBirth.Value.AddDays(-1);
                                if (yearOfBirth.HasValue)
                                {
                                    if (yearOfBirth < CutOffDuration.DateEnd && relativeItem.IDDateOfExpiry > CutOffDuration.DateStart && yearOfBirth <= relativeItem.IDDateOfExpiry)
                                    {
                                        double totalMonth = ((CutOffDuration.DateEnd.Year - yearOfBirth.Value.Year) * 12) + CutOffDuration.DateEnd.Month - yearOfBirth.Value.Month;
                                        if (Common.CompareByOperator(totalMonth, age, operators))
                                        {
                                            value++;
                                        }
                                    }
                                }
                            }
                            //Nếu Hre_Relatives.IDDateOfExpiry = null thì thêm điều kiện:
                            //Hre_Relatives.YearOfBirth < Att_CutOffDuration.DateEnd
                            else
                            {
                                DateTime? yearOfBirth = Common.ConvertYearOfBirthToDateTime(relativeItem.YearOfBirth);
                                //Hien.Le [25/07/2020] 0117575: [Hotifix _SEDO_V8.7.33.01.07.09]: Thêm phần tử lương lấy số lượng người thân theo theo tháng tuổi và loại quan hệ
                                if (yearOfBirth.HasValue)
                                {
                                    yearOfBirth = yearOfBirth.Value.AddDays(-1);
                                    if (yearOfBirth < CutOffDuration.DateEnd)
                                    {
                                        double totalMonth = ((CutOffDuration.DateEnd.Year - yearOfBirth.Value.Year) * 12) + CutOffDuration.DateEnd.Month - yearOfBirth.Value.Month;
                                        if (Common.CompareByOperator(totalMonth, age, operators))
                                        {
                                            value++;
                                        }
                                    }
                                }
                            }
                        }
                        #endregion

                        item = new ElementFormula(relative, value, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region Phần tử động  Phần tử lương đếm số ngày nghỉ từng loại có số công nghỉ >= số công truyền vào
            //[21072016][bang.nguyen][69104][Modify Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_ATTENDANCETABLEITEM_COUNT_LEAVEDAY_.ToString(), EnumDropDown.ElementDataType.Double))
            {
                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN_ATT_ATTENDANCETABLEITEM_COUNT_LEAVEDAY_.ToString())).Distinct().ToList();
                var lstLeaveDayType = TotalDataAll.listLeavedayType.ToList();
                var lstAtttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(s =>
                                                                                        s.WorkDate >= CutOffDuration.DateStart
                                                                                        && s.WorkDate <= CutOffDuration.DateEnd
                                                                                        && s.LeaveTypeID != null).ToList();
                if (lstAtttendanceTableItem.Count > 0 && lstLeaveDayType.Count > 0)
                {
                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        int _countLeaveDay = 0;
                        var _element = objformular;
                        var lstTemp = _element.Split('_').ToList();
                        var _strvalue = lstTemp[lstTemp.Count() - 1].ToString();
                        //replace dau phẩy để parse số không bị sai
                        var _value = _strvalue.Replace(',', '.');
                        double _valueOutPut = 0;
                        //giá trị nhập vào đúng là số
                        if (double.TryParse(_value, out _valueOutPut))
                        {
                            //HienNguyen - Chia so nay cho 10
                            if (_valueOutPut != 0)
                            {
                                _valueOutPut = _valueOutPut / 10;
                            }

                            //lấy mã loại nghỉ được cấu hình trong phần tử
                            int indexVualue = _element.LastIndexOf(_strvalue);
                            int lenghtDYN = PayrollElement.DYN_ATT_ATTENDANCETABLEITEM_COUNT_LEAVEDAY_.ToString().Length;
                            string _codeLeaveDayTypeFormular = _element.Substring(lenghtDYN, indexVualue - lenghtDYN - 1);
                            var lstLeaveDayByCode = lstLeaveDayType.Where(s => s.Code == _codeLeaveDayTypeFormular).ToList();
                            //mã loại nghỉ cấu hình hợp lệ
                            if (lstLeaveDayByCode.Count > 0)
                            {
                                var lstAttItemByLeaveDayType = lstAtttendanceTableItem.Where(s => s.LeaveTypeID == lstLeaveDayByCode[0].ID).ToList();
                                foreach (var objAttItem in lstAttItemByLeaveDayType)
                                {
                                    if (objAttItem.AvailableHours != 0 && (objAttItem.LeaveHours / objAttItem.AvailableHours) >= _valueOutPut)
                                    {
                                        _countLeaveDay += 1;
                                    }
                                }
                            }
                        }
                        item = new ElementFormula(_element, _countLeaveDay, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Phần tử động kiểm tra làm ca đêm liên tục 
            //[19062016][Bang.nguyen][69105][New func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_IS_CONTINOUS_NIGHTSHIFT_.ToString(), EnumDropDown.ElementDataType.Double))
            {
                var lstAttItemNightShift = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(s => s.ShiftIDIsNightShift == true).ToList();
                var lstAttItemOtNightShift = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(s => (s.OTTypeIDIsNightShift == true
                                                                || s.ExtraOTTypeIDIsNightShift == true
                                                                || s.ExtraOTType2IDIsNightShift == true
                                                                || s.ExtraOTType3IDIsNightShift == true
                                                                || s.ExtraOTType4IDIsNightShift == true)
                                                                ).ToList();
                lstAttItemNightShift.AddRange(lstAttItemOtNightShift);
                lstAttItemNightShift = lstAttItemNightShift.Distinct().OrderBy(s => s.WorkDate).ToList();

                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN_IS_CONTINOUS_NIGHTSHIFT_.ToString())).ToList();


                foreach (var objformular in ListFormula)
                {
                    formula.Remove(objformular);
                    //gia tri được truyền vào từ công thức
                    var _element = objformular.ToString();
                    var lstTemp = _element.Split('_').ToList();
                    var _strvalue = lstTemp[lstTemp.Count() - 1].ToString();
                    double _valueOutPut = 0;
                    if (double.TryParse(_strvalue, out _valueOutPut))
                    {
                        int countContinueNight = 0;
                        int _valueForElement = 0;
                        for (int i = 0; i < lstAttItemNightShift.Count(); i++)
                        {
                            if (i > 0)
                            {
                                // neu tang ca dem vao những ngày liên tiếp nhau thì cộng dồn lại để xét với giá trị nhập vào từ công thức
                                if (lstAttItemNightShift[i].WorkDate.Day == lstAttItemNightShift[i - 1].WorkDate.Day + 1)
                                {
                                    countContinueNight += 1;
                                }
                                else
                                {
                                    if (countContinueNight >= _valueOutPut)
                                    {
                                        _valueForElement = 1;
                                        break;
                                    }
                                    else
                                    {
                                        countContinueNight = 1;
                                    }
                                }
                            }
                            else
                            {
                                countContinueNight += 1;
                            }
                        }
                        item = new ElementFormula(_element, _valueForElement, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region các phần tử lương sản phẩm cá nhân

            //[23/07/2016][bang.nguyen][69881][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_PRODUCTIVE_PRODUCTITEM_SUM_SALARY.ToString()))
            {

                string status = string.Empty;
                dataComputeSer.GetDicProductSalary(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_PRODUCTIVE_PRODUCTITEM_SUM_SALARY.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_PRODUCTIVE_PRODUCTITEM_SUM_SALARY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listProductSalaryByProfileDic = TotalData600.dicProductSalary.GetValueOrNew(profileItem.ID);
                    //[11/05/2017][bang.nguyen][81409][Modify Func]
                    //Điều chỉnh logic phần tử ‘SAL_PRODUCTIVE_PRODUCTITEM_SUM_SALARY’
                    double _AmountReduce = 0;
                    var tempAmountReduce = listProductSalaryByProfileDic.Where(s => s.ProductID == profileItem.ID && s.MonthYear == CutOffDuration.MonthYear).Sum(s => s.AmountReduce);
                    if (tempAmountReduce != null)
                    {
                        _AmountReduce = tempAmountReduce.Value;
                    }
                    item = new ElementFormula(PayrollElement.SAL_PRODUCTIVE_PRODUCTITEM_SUM_SALARY.ToString(), _AmountReduce, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Phần tử đếm số lượng nhân viên trong tháng theo từng loại phòng ban
            //[11052016][bang.nguyen][67162][modify]
            if (CheckIsExistFormula(listElementFormula, ref formula, "TOTALEMP_", "_BYMONTH"))
            {
                Dictionary<string, object> lstElementGeneralValue = new Dictionary<string, object>();
                if (TotalDataAll.ListCat_OrgStructureType != null && TotalDataAll.ListCat_OrgStructureType.Count > 0)
                {
                    var OrgStructureTypeCode = TotalDataAll.ListCat_OrgStructureType[0].OrgStructureTypeCode;
                    string _key = "TOTALEMP_" + OrgStructureTypeCode + "_BYMONTH";
                    //vì những phần tử này chỉ cần tính 1 lần rồi gán cho những những viên còn lại
                    //nếu là lần đầu (trong list chứa dữ liệu tính chưa có mã dạng này) thì đi tính
                    if (TotalData600.ListElementGeneral == null || (TotalData600.ListElementGeneral != null && !TotalData600.ListElementGeneral.Keys.Contains(_key)))
                    {
                        if (TotalDataAll.listOrgStructure != null && TotalDataAll.listOrgStructure.Count > 0)
                        {
                            //xử ly lấy dữ liệu để tính
                            using (var context = new VnrHrmDataContext())
                            {
                                var unitOfWork = (IUnitOfWork)new UnitOfWork(context);
                                var lstWorkHistoryByCutOff = new List<Hre_WorkHistory>().Select(s => new { s.ID, s.ProfileID, s.DateEffective, s.OrganizationStructureID }).ToList();
                                var lstOrgstureID = TotalDataAll.listOrgStructure.Select(s => s.ID).ToList();
                                foreach (var orgstureIDs in lstOrgstureID.Chunk(2000))
                                {
                                    lstWorkHistoryByCutOff.AddRange(unitOfWork.CreateQueryable<Hre_WorkHistory>(Guid.Empty, s => s.OrganizationStructureID != null
                                                                                                                    && s.DateEffective <= CutOffDuration.DateEnd
                                                                                                                    && orgstureIDs.Contains(s.OrganizationStructureID.Value)
                                                                                                                    && s.Hre_Profile.IsDelete == null)
                                                                                                                    .Select(s => new { s.ID, s.ProfileID, s.DateEffective, s.OrganizationStructureID })
                                                                                                                    .ToList());
                                }

                                //lich su gan nhat so voi ki luong
                                lstWorkHistoryByCutOff = lstWorkHistoryByCutOff.GroupBy(s => s.ProfileID).Select(s => s.OrderByDescending(m => m.DateEffective).FirstOrDefault()).ToList();
                                foreach (var objOrgStructureType in TotalDataAll.ListCat_OrgStructureType)
                                {
                                    var lstOrgIDByOrgType = TotalDataAll.listOrgStructure.Where(s => s.OrgStructureTypeID == objOrgStructureType.ID).Select(s => s.ID).ToList();
                                    var TotalEmpByOrg = 0;
                                    if (lstOrgIDByOrgType.Count > 0)
                                    {
                                        TotalEmpByOrg = lstWorkHistoryByCutOff.Where(s => s.OrganizationStructureID != null && lstOrgIDByOrgType.Contains(s.OrganizationStructureID.Value)).Count();
                                    }

                                    item = new ElementFormula("TOTALEMP_" + objOrgStructureType.OrgStructureTypeCode + "_BYMONTH", TotalEmpByOrg, 0);
                                    listElementFormula.Add(item);
                                    lstElementGeneralValue.Add("TOTALEMP_" + objOrgStructureType.OrgStructureTypeCode + "_BYMONTH", TotalEmpByOrg);
                                }
                            }
                        }
                        else
                        {
                            foreach (var objOrgStructureType in TotalDataAll.ListCat_OrgStructureType)
                            {
                                item = new ElementFormula("TOTALEMP_" + objOrgStructureType.OrgStructureTypeCode + "_BYMONTH", 0, 0);
                                listElementFormula.Add(item);
                                lstElementGeneralValue.Add("TOTALEMP_" + objOrgStructureType.OrgStructureTypeCode + "_BYMONTH", 0);
                            }
                        }
                        //gán lại để lấy giá trị cho những lần sau
                        TotalData600.ListElementGeneral = lstElementGeneralValue;
                    }
                    else //những trường hợp sau chỉ gán dữ liệu
                    {
                        foreach (var objOrgStructureType in TotalDataAll.ListCat_OrgStructureType)
                        {
                            var TotalEmpByOrg = 0;
                            string tempKey = "TOTALEMP_" + objOrgStructureType.OrgStructureTypeCode + "_BYMONTH";
                            if (TotalData600.ListElementGeneral.ContainsKey(tempKey))
                            {
                                TotalEmpByOrg = int.Parse(TotalData600.ListElementGeneral[tempKey].ToString());
                            }
                            item = new ElementFormula("TOTALEMP_" + objOrgStructureType.OrgStructureTypeCode + "_BYMONTH", TotalEmpByOrg, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region phan tu tong phut tre som da tru OT
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_LATEEARLY_SUBOT_TOTALMINUTES.ToString()))
            {
                double totalRealLateEarlyMinutes = 0;
                List<Att_AttendanceTableItemEntity> listAttTableItem = new List<Att_AttendanceTableItemEntity>();
                if (objAttendanceTableProCut != null)
                {
                    listAttTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID)
                    .OrderBy(s => s.WorkDate).ToList();
                    foreach (var objAttTableItem in listAttTableItem)
                    {
                        double hourbyOTTypeDay = 0;
                        double remainLateEarlyMinutesByDay = 0;
                        if (objAttTableItem.RealLateEarlyMinutes != null)
                        {
                            var _RealLateEarlyMinutes = objAttTableItem.RealLateEarlyMinutes.Value;
                            hourbyOTTypeDay += objAttTableItem.OvertimeHours;
                            hourbyOTTypeDay += objAttTableItem.ExtraOvertimeHours;
                            hourbyOTTypeDay += objAttTableItem.ExtraOvertimeHours2;
                            hourbyOTTypeDay += objAttTableItem.ExtraOvertimeHours3;
                            if (objAttTableItem.ExtraOvertimeHours4 != null)
                            {
                                hourbyOTTypeDay += objAttTableItem.ExtraOvertimeHours4.Value;
                            }
                            if (_RealLateEarlyMinutes <= hourbyOTTypeDay * 60)
                            {
                                remainLateEarlyMinutesByDay = 0;
                            }
                            else
                            {
                                remainLateEarlyMinutesByDay = _RealLateEarlyMinutes - hourbyOTTypeDay * 60;
                            }
                        }
                        totalRealLateEarlyMinutes += remainLateEarlyMinutesByDay;
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_LATEEARLY_SUBOT_TOTALMINUTES.ToString(), totalRealLateEarlyMinutes, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region phan tu phut tre som da tru OT
            //[01/07/2017][bang.nguyen][84678][Modify Func]
            //phan tu phut tre som da tru OT
            if (CheckIsExistFormula(listElementFormula, ref formula, "DYN_ATT_OVERTIME_", "_SULATEEARLY_TOTALHOURS"))
            {
                var listOverTimeType = TotalDataAll.listOvertimeTypeAll.Where(s => s.Code != null).OrderBy(s => s.Rate).ToList();
                List<Att_AttendanceTableItemEntity> listAttTableItem = new List<Att_AttendanceTableItemEntity>();
                if (objAttendanceTableProCut != null)
                {
                    listAttTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m =>
                         (m.OvertimeTypeID != null
                        || m.ExtraOvertimeTypeID != null)
                        || m.ExtraOvertimeType2ID != null
                        || m.ExtraOvertimeType3ID != null
                        || (m.ExtraOvertimeType4ID != null && m.ExtraOvertimeHours4 != null))
                    .OrderBy(s => s.WorkDate).ToList();
                    double hourOtRemain = 0;
                    int _index = 0;
                    //to chuc luu cac ngay va gio Ot con lai
                    Dictionary<DateTime, double> listRemainOtByDay = new Dictionary<DateTime, double>();

                    foreach (var objOverTimeType in listOverTimeType)
                    {
                        _index++;
                        double totalHourbyOTType = 0;
                        double totalOT = 0;

                        foreach (var objAttTableItem in listAttTableItem)
                        {
                            double hourbyOTTypeDay = 0;
                            if (objAttTableItem.RealLateEarlyMinutes != null)
                            {
                                var _RealLateEarlyMinutesByDay = objAttTableItem.RealLateEarlyMinutes.Value;
                                totalOT += objAttTableItem.OvertimeHours;
                                totalOT += objAttTableItem.ExtraOvertimeHours;
                                totalOT += objAttTableItem.ExtraOvertimeHours2;
                                totalOT += objAttTableItem.ExtraOvertimeHours3;
                                if (objAttTableItem.ExtraOvertimeHours4 != null)
                                {
                                    totalOT += objAttTableItem.ExtraOvertimeHours4.Value;
                                }
                                if (_RealLateEarlyMinutesByDay / 60 >= totalOT)
                                {
                                    hourbyOTTypeDay = 0;
                                }
                                else
                                {
                                    #region tong gio OT theo loai
                                    if (objAttTableItem.OvertimeTypeID == objOverTimeType.ID)
                                    {
                                        hourbyOTTypeDay += objAttTableItem.OvertimeHours;
                                    }
                                    if (objAttTableItem.ExtraOvertimeTypeID == objOverTimeType.ID)
                                    {
                                        hourbyOTTypeDay += objAttTableItem.ExtraOvertimeHours;
                                    }
                                    if (objAttTableItem.ExtraOvertimeType2ID == objOverTimeType.ID)
                                    {
                                        hourbyOTTypeDay += objAttTableItem.ExtraOvertimeHours2;
                                    }
                                    if (objAttTableItem.ExtraOvertimeType3ID == objOverTimeType.ID)
                                    {
                                        hourbyOTTypeDay += objAttTableItem.ExtraOvertimeHours3;
                                    }
                                    if (objAttTableItem.ExtraOvertimeType4ID == objOverTimeType.ID && objAttTableItem.ExtraOvertimeHours4 != null)
                                    {
                                        hourbyOTTypeDay += objAttTableItem.ExtraOvertimeHours4.Value;
                                    }
                                    #endregion
                                    #region xu ly tinh gio OT con lai khi da tru tre som
                                    //xu ly theo logic

                                    if (listRemainOtByDay.Any(m => m.Key == objAttTableItem.WorkDate))
                                    {
                                        hourOtRemain = listRemainOtByDay[objAttTableItem.WorkDate];
                                        //lay tong OT - tre som con lai
                                        hourOtRemain = hourbyOTTypeDay - Math.Abs(hourOtRemain);
                                    }
                                    else
                                    {
                                        hourOtRemain = hourbyOTTypeDay - _RealLateEarlyMinutesByDay / 60;
                                    }

                                    if (hourOtRemain >= 0)//neu gio OT - tre som 
                                    {
                                        hourbyOTTypeDay = hourOtRemain;
                                        //truong hop ot > tre som => gan lai gio con lai = 0
                                        hourOtRemain = 0;
                                    }
                                    else
                                    {
                                        hourbyOTTypeDay = 0;
                                    }

                                    //add vo list ot tung ngay
                                    if (listRemainOtByDay.Any(m => m.Key == objAttTableItem.WorkDate))
                                    {
                                        listRemainOtByDay[objAttTableItem.WorkDate] = hourOtRemain;
                                    }
                                    else
                                    {
                                        listRemainOtByDay.Add(objAttTableItem.WorkDate, hourOtRemain);
                                    }
                                    #endregion
                                }
                            }
                            else
                            {
                                if (objAttTableItem.OvertimeTypeID == objOverTimeType.ID)
                                {
                                    hourbyOTTypeDay += objAttTableItem.OvertimeHours;
                                }
                                if (objAttTableItem.ExtraOvertimeTypeID == objOverTimeType.ID)
                                {
                                    hourbyOTTypeDay += objAttTableItem.ExtraOvertimeHours;
                                }
                                if (objAttTableItem.ExtraOvertimeType2ID == objOverTimeType.ID)
                                {
                                    hourbyOTTypeDay += objAttTableItem.ExtraOvertimeHours2;
                                }
                                if (objAttTableItem.ExtraOvertimeType3ID == objOverTimeType.ID)
                                {
                                    hourbyOTTypeDay += objAttTableItem.ExtraOvertimeHours3;
                                }
                                if (objAttTableItem.ExtraOvertimeType4ID == objOverTimeType.ID && objAttTableItem.ExtraOvertimeHours4 != null)
                                {
                                    hourbyOTTypeDay += objAttTableItem.ExtraOvertimeHours4.Value;
                                }
                            }
                            totalHourbyOTType += hourbyOTTypeDay;
                        }
                        item = new ElementFormula("DYN_ATT_OVERTIME_" + objOverTimeType.Code + "_SULATEEARLY_TOTALHOURS", totalHourbyOTType, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region DYN_COUNTDAYOVERTIMEBYTYPE_
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_COUNTDAYOVERTIMEBYTYPE_.ToString(), new string[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }))
            {
                //tách phần tử ra để lấy tham số
                string Parameter = string.Empty;
                List<string> ListFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN_COUNTDAYOVERTIMEBYTYPE_.ToString())).ToList();

                List<Att_AttendanceTableItemEntity> listAttTableItem = new List<Att_AttendanceTableItemEntity>();
                if (objAttendanceTableProCut != null)
                {
                    listAttTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                }


                //lấy danh sách đăng ký tăng ca
                List<Att_OvertimeEntity> listOverTime = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()).ToList();

                //duyệt qua các phần tử động để lấy tham số
                foreach (var i in ListFormula)
                {
                    string[] listParam = i.Split('_');
                    if (listParam.Count() >= 3)//nếu là 3 phần tử là đúng công thức, ngược lại là sai
                    {
                        string OtTypeCode = i.Replace(PayrollElement.DYN_COUNTDAYOVERTIMEBYTYPE_.ToString(), "").Replace("_" + listParam.LastOrDefault(), "");
                        double number = 0;
                        double CountOtDay = 0;
                        Cat_OvertimeTypeEntity OTType = TotalDataAll.listOvertimeType.Where(m => m.Code == OtTypeCode).FirstOrDefault();

                        List<Att_OvertimeEntity> listOverTimeByTableItem = new List<Att_OvertimeEntity>();
                        Att_OvertimeEntity OverTimeItem = new Att_OvertimeEntity();
                        Cat_Shift ShiftItem = new Cat_Shift();

                        if (double.TryParse(listParam.LastOrDefault(), out number) && OTType != null)
                        {
                            number = number / 10;
                            CountOtDay = 0;
                            //lọc ra các loại OT theo loại
                            foreach (var tableItem in listAttTableItem)
                            {
                                listOverTimeByTableItem = listOverTime.Where(m => m.WorkDate.Date == tableItem.WorkDate.Date).ToList();
                                if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == OTType.ID)
                                {
                                    OverTimeItem = listOverTimeByTableItem.Where(m => m.OvertimeTypeID == (Guid)tableItem.OvertimeTypeID).FirstOrDefault();
                                    if (OverTimeItem != null && OverTimeItem.ShiftID != null)
                                    {
                                        ShiftItem = TotalDataAll.listCat_Shift.Where(m => m.ID == (Guid)OverTimeItem.ShiftID).FirstOrDefault().Copy<Cat_Shift>();
                                        if (tableItem.OvertimeHours != 0)
                                        {
                                            CountOtDay += tableItem.OvertimeHours / ShiftItem.udAvailableHours >= number ? 1 : 0;
                                        }
                                    }
                                }
                                else if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == OTType.ID)
                                {
                                    OverTimeItem = listOverTimeByTableItem.Where(m => m.OvertimeTypeID == (Guid)tableItem.ExtraOvertimeTypeID).FirstOrDefault();
                                    if (OverTimeItem != null && OverTimeItem.ShiftID != null)
                                    {
                                        ShiftItem = TotalDataAll.listCat_Shift.Where(m => m.ID == (Guid)OverTimeItem.ShiftID).FirstOrDefault().Copy<Cat_Shift>();
                                        if (tableItem.ExtraOvertimeHours != 0)
                                        {
                                            CountOtDay += tableItem.ExtraOvertimeHours / ShiftItem.udAvailableHours >= number ? 1 : 0;
                                        }
                                    }
                                }
                                else if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == OTType.ID)
                                {
                                    OverTimeItem = listOverTimeByTableItem.Where(m => m.OvertimeTypeID == (Guid)tableItem.ExtraOvertimeType2ID).FirstOrDefault();
                                    if (OverTimeItem != null && OverTimeItem.ShiftID != null)
                                    {
                                        ShiftItem = TotalDataAll.listCat_Shift.Where(m => m.ID == (Guid)OverTimeItem.ShiftID).FirstOrDefault().Copy<Cat_Shift>();
                                        if (tableItem.ExtraOvertimeHours2 != 0)
                                        {
                                            CountOtDay += tableItem.ExtraOvertimeHours2 / ShiftItem.udAvailableHours >= number ? 1 : 0;
                                        }

                                    }
                                }
                                else if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == OTType.ID)
                                {
                                    OverTimeItem = listOverTimeByTableItem.Where(m => m.OvertimeTypeID == (Guid)tableItem.ExtraOvertimeType3ID).FirstOrDefault();
                                    if (OverTimeItem != null && OverTimeItem.ShiftID != null)
                                    {
                                        ShiftItem = TotalDataAll.listCat_Shift.Where(m => m.ID == (Guid)OverTimeItem.ShiftID).FirstOrDefault().Copy<Cat_Shift>();
                                        if (tableItem.ExtraOvertimeHours3 != 0)
                                        {
                                            CountOtDay += tableItem.ExtraOvertimeHours3 / ShiftItem.udAvailableHours >= number ? 1 : 0;
                                        }

                                    }
                                }
                            }
                            item = new ElementFormula(i, CountOtDay, 0);
                            listElementFormula.Add(item);
                        }
                        else//sai công thức , không convert đc số giờ
                        {
                            item = new ElementFormula(i, 0, 0, "Công thức động sai !");
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        item = new ElementFormula(i, 0, 0, "Công thức động sai !");
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [05/11/2015][hien.nguyen][Modify][59563]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_BIG_.ToString(), new string[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }))
            {
                //[05/11/2015][hien.nguyen][Modify][59563]
                //Tạo ra các phần tử lương tương ứng với phần tử động từ 0 => 9
                List<string> ListFormula = new List<string>() { PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_BIG_.ToString() + "0", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_BIG_.ToString() + "1", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_BIG_.ToString() + "2", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_BIG_.ToString() + "3", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_BIG_.ToString() + "4", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_BIG_.ToString() + "5", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_BIG_.ToString() + "6", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_BIG_.ToString() + "7", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_BIG_.ToString() + "8", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_BIG_.ToString() + "9" };

                foreach (var formulaItem in ListFormula)
                {
                    string formularNew = formulaItem;
                    double NumberHours = 0;
                    double.TryParse(formularNew.Split('_').LastOrDefault(), out NumberHours);

                    double Result = 0;

                    var listAttendanceItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);
                    foreach (var AttItem in listAttendanceItem)
                    {
                        double OverTimeHours = 0;
                        OverTimeHours += AttItem.OvertimeHours;
                        OverTimeHours += AttItem.ExtraOvertimeHours;
                        OverTimeHours += AttItem.ExtraOvertimeHours2;
                        OverTimeHours += AttItem.ExtraOvertimeHours3;
                        if (OverTimeHours >= NumberHours)
                        {
                            Result++;
                        }
                    }

                    item = new ElementFormula(formulaItem, Result, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region [26/11/2015][hien.nguyen][Modify][60691]
            //Số ngày có số giờ tăng ca loại nghỉ bù >=
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_BIG_.ToString(), new string[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }))
            {
                //Tạo ra các phần tử lương tương ứng với phần tử động từ 0 => 9
                List<string> ListFormula = new List<string>() { PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_BIG_.ToString() + "0", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_BIG_.ToString() + "1", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_BIG_.ToString() + "2", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_BIG_.ToString() + "3", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_BIG_.ToString() + "4", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_BIG_.ToString() + "5", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_BIG_.ToString() + "6", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_BIG_.ToString() + "7", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_BIG_.ToString() + "8", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_BIG_.ToString() + "9" };

                foreach (var formulaItem in ListFormula)
                {
                    string formularNew = formulaItem;
                    double NumberHours = 0;
                    double.TryParse(formularNew.Split('_').LastOrDefault(), out NumberHours);
                    double Result = 0;
                    var listAttendanceItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                        m => ((m.OvertimeOFFHours1 != null && m.OvertimeOFFHours1.Value > 0)
                            || (m.OvertimeOFFHours2 != null && m.OvertimeOFFHours2.Value > 0)
                            || (m.OvertimeOFFHours3 != null && m.OvertimeOFFHours3.Value > 0))
                        ).ToList();
                    foreach (var AttItem in listAttendanceItem)
                    {
                        double OverTimeHours = 0;
                        OverTimeHours += AttItem.OvertimeOFFHours1 == null ? 0 : (double)AttItem.OvertimeOFFHours1;
                        OverTimeHours += AttItem.OvertimeOFFHours2 == null ? 0 : (double)AttItem.OvertimeOFFHours2;
                        OverTimeHours += AttItem.OvertimeOFFHours3 == null ? 0 : (double)AttItem.OvertimeOFFHours3;
                        if (OverTimeHours > 0 && OverTimeHours >= NumberHours)
                        {
                            Result++;
                        }
                    }
                    item = new ElementFormula(formulaItem, Result, 0);
                    listElementFormula.Add(item);
                }

            }
            #endregion

            #region [18/03/2016][hien.nguyen][Modify][64067]
            // Phần tử đếm số ca làm việc theo giờ 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_COUNT_SHIFT_WORKPAIDHOURS_.ToString(), new string[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }))
            {
                var _listAttendanceTableItemByProfile = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.CutOffDurationID == CutOffDuration.ID).ToList();
                foreach (var shift in TotalDataAll.listCat_Shift)
                {
                    for (int i = 0; i <= 9; i++)
                    {
                        item = new ElementFormula(PayrollElement.DYN_ATT_COUNT_SHIFT_WORKPAIDHOURS_ + shift.Code + "_" + i.ToString(), _listAttendanceTableItemByProfile.Where(m => m.ShiftID == shift.ID && m.WorkPaidHours >= i).Count(), 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region  [11/05/2016][hien.nguyen][Modify][65629]
            /// Số ngày làm việc ca đêm trong kỳ lương >=
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_COUNT_NIGHT_SHIFT_WORKPAIDHOURS_.ToString(), new string[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }))
            {
                //Lấy cấu hình duyệt tăng ca
                var _overtimeStatus = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString()).Value1;
                //Dữ liệu công chi tiết
                var _listAttendanceTableItemByProfile = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.CutOffDurationID == CutOffDuration.ID && m.ShiftID != null).ToList();
                //Dữ liệu tăng ca
                var _listOvertime = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID).Where(m => m.ShiftID != null && m.ProfileID == profileItem.ID && m.Status == _overtimeStatus).ToList();

                //List chứa DS ngày công tăng ca đếm được trong bảng OT
                List<DateTime> _listDatetimeOT = new List<DateTime>();

                //Đếm số ngày tăng ca
                foreach (var _ot in _listOvertime)
                {
                    var _shift = TotalDataAll.listCat_Shift.FirstOrDefault(m => m.ID == _ot.ShiftID);
                    if (_shift.IsNightShift == true)
                    {
                        _listDatetimeOT.Add(new DateTime(_ot.WorkDate.Year, _ot.WorkDate.Month, _ot.WorkDate.Day));
                    }
                }

                //Lặp qua các số có thể truyền vào
                for (int i = 0; i <= 9; i++)
                {
                    //List chứa DS ngày công tăng ca đếm được trong bảng công
                    List<DateTime> _listDatetimeATT = new List<DateTime>();

                    //Lặp qua dữ liệu công chi tiết
                    foreach (var _attItem in _listAttendanceTableItemByProfile)
                    {
                        var _shift = TotalDataAll.listCat_Shift.FirstOrDefault(m => m.ID == _attItem.ShiftID);
                        if (_shift != null && _shift.IsNightShift == true)
                        {
                            if (_attItem.WorkPaidHours >= i)
                            {
                                _listDatetimeATT.Add(new DateTime(_attItem.WorkDate.Year, _attItem.WorkDate.Month, _attItem.WorkDate.Day));
                            }
                        }
                    }
                    item = new ElementFormula(PayrollElement.DYN_ATT_COUNT_NIGHT_SHIFT_WORKPAIDHOURS_.ToString() + i.ToString(), _listDatetimeATT.Union(_listDatetimeOT).Count(), 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [18/03/2016][hien.nguyen][Modify][64756]
            /// Phần tử tính số tuổi người phụ thuộc
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_HRE_COUNT_DEPENDANT_.ToString(), ""))
            {
                //lọc ra các phần tử cần lấy
                var _listFormulaDependant = formula.Where(m => m.StartsWith(PayrollElement.DYN_HRE_COUNT_DEPENDANT_.ToString())).ToList();

                string status = string.Empty;
                dataComputeSer.GetListDependant(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN_HRE_COUNT_DEPENDANT_.ToString() + ") ";

                    foreach (var i in _listFormulaDependant)
                    {
                        item = new ElementFormula(i, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    var listDependantByProfile = TotalData600.dicDependant.GetValueOrNew(profileItem.ID);

                    //Lấy dữ liệu người phụ thuộc
                    var _listDependant = GetDependantNumber(listDependantByProfile, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd);

                    double _tmp = 0;
                    foreach (var i in _listFormulaDependant)
                    {
                        //Tách số trong phần tử ra
                        _tmp = 0;
                        double.TryParse(i.Split('_').LastOrDefault(), out _tmp);

                        //Lấy tất cảc cac người phụ thuộc
                        item = new ElementFormula(i, _listDependant.Where(m =>
                            m.DateOfBirth != null
                            && Common.CalculateEge((DateTime)m.DateOfBirth, CutOffDuration.DateEnd) <= _tmp).Count(), 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [26/11/2015][hien.nguyen][Modify][60691]
            //Số ngày có số giờ tăng ca loại nghỉ bù <
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_SMALLER_.ToString(), new string[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }))
            {
                //Tạo ra các phần tử lương tương ứng với phần tử động từ 0 => 9
                List<string> ListFormula = new List<string>() { PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_SMALLER_.ToString() + "0", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_SMALLER_.ToString() + "1", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_SMALLER_.ToString() + "2", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_SMALLER_.ToString() + "3", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_SMALLER_.ToString() + "4", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_SMALLER_.ToString() + "5", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_SMALLER_.ToString() + "6", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_SMALLER_.ToString() + "7", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_SMALLER_.ToString() + "8", PayrollElement.DYN_ATT_COUNT_HOURS_OVERTIMEOFF_SMALLER_.ToString() + "9" };

                foreach (var formulaItem in ListFormula)
                {
                    string formularNew = formulaItem;
                    double NumberHours = 0;
                    double.TryParse(formularNew.Split('_').LastOrDefault(), out NumberHours);
                    double Result = 0;
                    var listAttendanceItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(
                        m => ((m.OvertimeOFFHours1 != null && m.OvertimeOFFHours1.Value > 0)
                            || (m.OvertimeOFFHours2 != null && m.OvertimeOFFHours2.Value > 0)
                            || (m.OvertimeOFFHours3 != null && m.OvertimeOFFHours3.Value > 0))
                        ).ToList();
                    foreach (var AttItem in listAttendanceItem)
                    {
                        double OverTimeHours = 0;
                        OverTimeHours += AttItem.OvertimeOFFHours1 == null ? 0 : (double)AttItem.OvertimeOFFHours1;
                        OverTimeHours += AttItem.OvertimeOFFHours2 == null ? 0 : (double)AttItem.OvertimeOFFHours2;
                        OverTimeHours += AttItem.OvertimeOFFHours3 == null ? 0 : (double)AttItem.OvertimeOFFHours3;
                        if (OverTimeHours > 0 && OverTimeHours < NumberHours)
                        {
                            Result++;
                        }
                    }
                    item = new ElementFormula(formulaItem, Result, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [05/11/2015][hien.nguyen][Modify][59563]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_SMALLER_.ToString(), new string[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }))
            {
                //Tạo ra các phần tử lương tương ứng với phần tử động từ 0 => 9
                List<string> ListFormula = new List<string>() { PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_SMALLER_.ToString() + "0", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_SMALLER_.ToString() + "1", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_SMALLER_.ToString() + "2", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_SMALLER_.ToString() + "3", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_SMALLER_.ToString() + "4", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_SMALLER_.ToString() + "5", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_SMALLER_.ToString() + "6", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_SMALLER_.ToString() + "7", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_SMALLER_.ToString() + "8", PayrollElement.DYN_ATT_COUNT_DAY_OVERTIME_SMALLER_.ToString() + "9" };

                foreach (var formulaItem in ListFormula)
                {
                    string formularNew = formulaItem;
                    double NumberHours = 0;
                    double.TryParse(formularNew.Split('_').LastOrDefault(), out NumberHours);

                    double Result = 0;

                    var listAttendanceItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);
                    foreach (var AttItem in listAttendanceItem)
                    {
                        double OverTimeHours = 0;
                        OverTimeHours += AttItem.OvertimeHours;
                        OverTimeHours += AttItem.ExtraOvertimeHours;
                        OverTimeHours += AttItem.ExtraOvertimeHours2;
                        OverTimeHours += AttItem.ExtraOvertimeHours3;
                        if (OverTimeHours > 0 && OverTimeHours < NumberHours)
                        {
                            Result++;
                        }
                    }

                    item = new ElementFormula(formulaItem, Result, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [16/10/2017][bang.nguyen][88650][modify]
            //phần tử đếm ngày có phụ cấp ăn trưa theo loại OT
            if (CheckIsExistFormula(listElementFormula, ref formula, "DYN_ATT_COUNTLUNCHDAY_", new string[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }))
            {
                var strStartsWith = "DYN_ATT_COUNTLUNCHDAY_";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith)).ToList();

                //Lấy cấu hình duyệt OT
                var _statusConfig = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString());
                var listOverTime = new List<Att_OvertimeEntity>();

                if (CutOffDuration.OvertimeStart != null && CutOffDuration.OvertimeEnd != null)
                {
                    string status = string.Empty;
                    dataComputeSer.GetDicOverTimeByCutOffOverTime(TotalData600, CutOffDuration, ref status);
                    if (!string.IsNullOrEmpty(status))
                    {
                        TotalData600.statusBugStore += status + " (DYN_ATT_COUNTLUNCHDAY_) ";
                    }
                    else
                    {
                        var listOverTimeByCutOffOverTimeByProfileDic = TotalData600.dicOverTimeByCutOffOverTime.GetValueOrNew(profileItem.ID);

                        //[10/07/2018][bang.nguyen][95531][Modify Func]
                        //Điều chỉnh các phần tử lương sau, thêm điều kiện lấy dữ liệu Att_Overtime.IsPayback <> true
                        listOverTime = listOverTimeByCutOffOverTimeByProfileDic.Where(m => m.ProfileID == profileItem.ID
                            && m.WorkDate >= CutOffDuration.OvertimeStart
                            && m.WorkDate <= CutOffDuration.OvertimeEnd
                            && (m.IsPayback == null || m.IsPayback == false)).ToList();
                    }
                }
                else
                {
                    //[10/07/2018][bang.nguyen][95531][Modify Func]
                    //Điều chỉnh các phần tử lương sau, thêm điều kiện lấy dữ liệu Att_Overtime.IsPayback <> true
                    listOverTime = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID
                        && m.WorkDate >= CutOffDuration.DateStart
                        && m.WorkDate <= CutOffDuration.DateEnd
                        && (m.IsPayback == null || m.IsPayback == false)).ToList();
                }

                foreach (var formulaitem in ListFormula)
                {
                    var _formula = formulaitem;
                    string param = _formula.Split('_').LastOrDefault();
                    double NumberHours = 0;
                    double Result = 0;

                    var codeOT = _formula.Replace(strStartsWith, "").Replace("_" + param, "");
                    double.TryParse(param, out NumberHours);

                    var objOverTimeType = TotalDataAll.listOvertimeType.Where(s => s.Code == codeOT).FirstOrDefault();
                    if (objOverTimeType != null)
                    {
                        var ListOverTimeByProfile = listOverTime.Where(m => m.OvertimeTypeID == objOverTimeType.ID).ToList();

                        foreach (var OT in ListOverTimeByProfile)
                        {
                            Att_OvertimeEntity ShifID = ListOverTimeByProfile.FirstOrDefault(m => m.OvertimeTypeID == OT.OvertimeTypeID && m.WorkDate.Date == OT.WorkDate.Date);
                            if (ShifID != null)
                            {
                                var ShiftItem = TotalDataAll.listCat_Shift.FirstOrDefault(m => m.ID == ShifID.ShiftID);
                                if (ShiftItem != null && ShiftItem.WorkHours != null && ShiftItem.WorkHours > 0)
                                {
                                    if (_statusConfig != null && _statusConfig.Value1 == EnumDropDown.OverTimeStatus.E_APPROVED.ToString())
                                    {
                                        if (OT.ApproveHours / (double)ShiftItem.WorkHours >= (NumberHours / 10))
                                        {
                                            Result += 1;
                                        }
                                    }
                                    else if (_statusConfig != null && _statusConfig.Value1 == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString())
                                    {
                                        if (OT.ConfirmHours / (double)ShiftItem.WorkHours >= (NumberHours / 10))
                                        {
                                            Result += 1;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    item = new ElementFormula(_formula, Result, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region 51211
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_COUNTLUNCHDAYOVERTIME_.ToString(), new string[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }))
            {
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN_ATT_COUNTLUNCHDAYOVERTIME_.ToString())).ToList();

                //Lấy cấu hình duyệt OT
                var _statusConfig = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString());

                foreach (var formulaitem in ListFormula)
                {
                    string listParam = formulaitem.Split('_').LastOrDefault();
                    double NumberHours = 0;
                    double Result = 0;

                    if (objAttendanceTableProCut != null)
                    {
                        double.TryParse(listParam, out NumberHours);
                        //[10/07/2018][bang.nguyen][95531][Modify Func]
                        //Điều chỉnh các phần tử lương sau, thêm điều kiện lấy dữ liệu Att_Overtime.IsPayback <> true
                        var ListOverTimeByProfile = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && (m.IsPayback == null || m.IsPayback == false)).ToList();

                        var ListAttTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.ShiftID == null).ToList();
                        foreach (var OT in ListOverTimeByProfile)
                        {
                            Att_OvertimeEntity ShifID = ListOverTimeByProfile.FirstOrDefault(m => m.OvertimeTypeID == OT.OvertimeTypeID && m.WorkDate.Date == OT.WorkDate.Date);
                            if (ShifID != null)
                            {
                                var ShiftItem = TotalDataAll.listCat_Shift.FirstOrDefault(m => m.ID == ShifID.ShiftID);
                                if (ShiftItem != null && ShiftItem.WorkHours != null && ShiftItem.WorkHours > 0 && ListAttTableItem.Any(m => m.WorkDate.Date == OT.WorkDate.Date))
                                {
                                    if (_statusConfig != null && _statusConfig.Value1 == EnumDropDown.OverTimeStatus.E_APPROVED.ToString())
                                    {
                                        if (OT.ApproveHours / (double)ShiftItem.WorkHours >= (NumberHours / 10))
                                        {
                                            Result += 1;
                                        }
                                    }
                                    else if (_statusConfig != null && _statusConfig.Value1 == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString())
                                    {
                                        if (OT.ConfirmHours / (double)ShiftItem.WorkHours >= (NumberHours / 10))
                                        {
                                            Result += 1;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    item = new ElementFormula(formulaitem, Result, 0);
                    listElementFormula.Add(item);
                }

            }
            #endregion

            #region Kiểm tra ngày đăng ký nghỉ có trước ngày qui định không
            //[17/10/2016][bang.nguyen][88781][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, "DYN_ATT_LEAVEDAY_VIOLATE_MIN_INFORM_DAY_", EnumDropDown.ElementDataType.Double))
            {
                var strStartsWith = "DYN_ATT_LEAVEDAY_VIOLATE_MIN_INFORM_DAY_";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();

                var listLeaveDay = TotalDataAll.dicLeaveDay.GetValueOrNew(profileItem.ID).Where(
                s => s.ProfileID == profileItem.ID
                && s.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()
                && s.DateStart >= CutOffDuration.DateStart
                && s.DateStart <= CutOffDuration.DateEnd
                && s.LeaveDayTypeID != null).ToList();
                if (listLeaveDay.Count > 0)
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        var _formula = formulaitem;
                        string paramNumber = _formula.Split('_').LastOrDefault();
                        double numberDays = 0;
                        double Result = 0;

                        var codeLeaveDayType = _formula.Replace(strStartsWith, "").Replace("_" + paramNumber, "");
                        double.TryParse(paramNumber, out numberDays);

                        var objLeavedayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();
                        if (objLeavedayType != null)
                        {
                            var listLeaveDayByProfile = listLeaveDay.Where(m => m.LeaveDayTypeID == objLeavedayType.ID).ToList();
                            foreach (var objLeaveDay in listLeaveDayByProfile)
                            {
                                if (objLeaveDay.DateCreate != null)
                                {
                                    if (objLeaveDay.DateCreate > objLeaveDay.DateStart.AddDays(-numberDays))
                                    {
                                        Result = 1;
                                        break;
                                    }
                                }
                            }
                        }

                        item = new ElementFormula(_formula, Result, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region Đếm số ngày nghỉ theo loại, từ ngày nộp đơn đến ngày nghỉ việc - 1
            //[18/10/2017][bang.nguyen][88803][New Func]
            //Đếm số ngày nghỉ theo loại, từ ngày nộp đơn đến ngày nghỉ việc - 1
            if (CheckIsExistFormula(listElementFormula, ref formula, "DYN_ATT_LEAVEDAY_COUNT_LEAVEDAYS_BEFORE_QUIT_", ""))
            {
                var strStartsWith = "DYN_ATT_LEAVEDAY_COUNT_LEAVEDAYS_BEFORE_QUIT_";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();

                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                var objStopWorking = listStopWorkingByProfile.Where(
                    s => s.ProfileID == profileItem.ID
                    && s.DateStop != null
                    && s.RequestDate != null
                    && s.DateStop >= CutOffDuration.DateStart
                    && s.DateStop <= CutOffDuration.DateEnd
                    && s.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString()).OrderByDescending(s => s.DateStop).FirstOrDefault();

                if (objStopWorking != null)
                {
                    var tempDate = objStopWorking.DateStop.Value.AddDays(-1);
                    var listLeaveDay = TotalDataAll.dicLeaveDay.GetValueOrNew(profileItem.ID).Where(
                        s => s.ProfileID == profileItem.ID
                        && s.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()
                        && s.DateStart >= objStopWorking.RequestDate
                        && s.DateStart <= tempDate
                        && s.LeaveDayTypeID != null
                        && s.LeaveDays != null).ToList();
                    if (listLeaveDay.Count > 0)
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            double Result = 0;
                            var codeLeaveDayType = _formula.Replace(strStartsWith, "");

                            var objLeavedayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();
                            if (objLeavedayType != null)
                            {
                                var listLeaveDayByProfile = listLeaveDay.Where(m => m.LeaveDayTypeID == objLeavedayType.ID).ToList();
                                if (listLeaveDayByProfile.Count > 0)
                                {
                                    Result = listLeaveDayByProfile.Sum(s => s.LeaveDays.Value);
                                }
                            }

                            item = new ElementFormula(_formula, Result, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region Phụ cấp công tác phí nước ngoài/trong nước tính theo ngày
            //[19/03/2018][bang.nguyen][93111][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN2_ATT_LEAVEDAYITEM_SUM_COST_.ToString(), ""))
            {
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                var strStartsWith = PayrollElement.DYN2_ATT_LEAVEDAYITEM_SUM_COST_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN2_ATT_LEAVEDAYITEM_SUM_COST_.ToString())).Distinct().ToList();
                //lay data nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listAtt_LeaveDayItem";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.listAtt_LeaveDayItem = dataComputeSer.GetLeaveDayItem(TotalData600, CutOffDuration.DateStart, CutOffDuration.DateEnd, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông lưu store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN2_ATT_LEAVEDAYITEM_SUM_COST_.ToString() + ") ";

                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else
                {
                    //Lấy cấu hình duyệt OT
                    string statusConfigLeave = EnumDropDown.LeavedayComputeStatus.E_APPROVED.ToString();
                    var objConfig = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name == AppConfig.HRM_ATT_ANNUALDETAIL_LEAVEDAYSTATUS.ToString());
                    if (objConfig != null && !string.IsNullOrEmpty(objConfig.Value1))
                    {
                        statusConfigLeave = objConfig.Value1;
                    }
                    foreach (var formulaitem in ListFormula)
                    {
                        var _formula = formulaitem;
                        double sumCost = 0;
                        var codeMissionCostType = _formula.Replace(strStartsWith, "");
                        if (!string.IsNullOrEmpty(codeMissionCostType))
                        {
                            var objMissionCostType = TotalDataAll.listCat_MissionCostType.Where(s => s.Code == codeMissionCostType).FirstOrDefault();
                            if (objMissionCostType != null)
                            {
                                sumCost = TotalData600.listAtt_LeaveDayItem.Where(s => s.ProfileID == profileItem.ID
                                                    && s.MissionCostTypeID == objMissionCostType.ID
                                                    && s.Status == statusConfigLeave
                                                    && s.DateStart >= CutOffDuration.DateStart
                                                    && s.DateStart <= CutOffDuration.DateEnd
                                                    && s.Cost != null)
                                                    .Sum(s => s.Cost.Value);
                            }
                        }

                        item = new ElementFormula(_formula, sumCost, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
            }
            #endregion

            #region Phụ cấp công tác phí nước ngoài/trong nước tính theo ngày
            //[11/06/2018][tung.tran][95765][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN7_ATT_LEAVEDAYITEM_SUM_COST_PREV_.ToString(), ""))
            {
                List<string> ListFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN7_ATT_LEAVEDAYITEM_SUM_COST_PREV_.ToString())).Distinct().ToList();
                if (cutOffDurationPre != null)
                {
                    //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                    var strStartsWith = PayrollElement.DYN7_ATT_LEAVEDAYITEM_SUM_COST_PREV_.ToString();
                    //lay data nếu chưa được lấy trước đó
                    string status = string.Empty;
                    string nameTableGetData = "listAtt_LeaveDayItemPrev";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        TotalData600.listAtt_LeaveDayItemPrev = dataComputeSer.GetLeaveDayItem(TotalData600, cutOffDurationPre.DateStart, cutOffDurationPre.DateEnd, ref status);
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }
                    //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông lưu store lỗi
                    if (!string.IsNullOrEmpty(status))
                    {
                        TotalData600.statusBugStore += status + " (" + PayrollElement.DYN7_ATT_LEAVEDAYITEM_SUM_COST_PREV_.ToString() + ") ";

                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                    else
                    {
                        //Lấy cấu hình duyệt OT
                        string statusConfigLeave = EnumDropDown.LeavedayComputeStatus.E_APPROVED.ToString();
                        var objConfig = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name == AppConfig.HRM_ATT_ANNUALDETAIL_LEAVEDAYSTATUS.ToString());
                        if (objConfig != null && !string.IsNullOrEmpty(objConfig.Value1))
                        {
                            statusConfigLeave = objConfig.Value1;
                        }
                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            double sumCost = 0;
                            var codeMissionCostType = _formula.Replace(strStartsWith, "");
                            if (!string.IsNullOrEmpty(codeMissionCostType))
                            {
                                var objMissionCostType = TotalDataAll.listCat_MissionCostType.Where(s => s.Code == codeMissionCostType).FirstOrDefault();
                                if (objMissionCostType != null)
                                {
                                    sumCost = TotalData600.listAtt_LeaveDayItemPrev.Where(s => s.ProfileID == profileItem.ID
                                                        && s.MissionCostTypeID == objMissionCostType.ID
                                                        && s.Status == statusConfigLeave
                                                        && s.DateStart >= cutOffDurationPre.DateStart
                                                        && s.DateStart <= cutOffDurationPre.DateEnd
                                                        && s.Cost != null)
                                                        .Sum(s => s.Cost.Value);
                                }
                            }

                            item = new ElementFormula(_formula, sumCost, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }

            }
            #endregion

            #region Phần tử động đếm số lần kỷ luật theo mã lý do hoặc mã loại kỷ luật
            //[10/04/2018][bang.nguyen][94294][New Func]
            /// Đếm số lần kỉ luật theo lý do bị kỉ luật (DYN3_HR_COUNT_DISCIPLINE_ + mã lý do kỷ luật + _BYREASONCODE)
            /// Đếm số lần kỉ luật theo loại kỉ luật (DYN3_HR_COUNT_DISCIPLINE_ + mã loại kỷ luật + _BYTYPECODE)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN3_HR_COUNT_DISCIPLINE_.ToString(), new string[] { "_BYREASONCODE", "_BYTYPECODE" }))
            {

                var strStartsWith = PayrollElement.DYN3_HR_COUNT_DISCIPLINE_.ToString();
                var strEndWith = "_BYREASONCODE";
                var strEndWithTypeCode = "_BYTYPECODE";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                List<string> ListFormulaByTypeCode = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWithTypeCode)).Distinct().ToList();

                string status = string.Empty;
                dataComputeSer.GetListDiscipline(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN3_HR_COUNT_DISCIPLINE_.ToString() + ") ";
                    //cac enum theo mã lý do kỷ luật
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                    //các enum theo loại kỷ luật
                    foreach (var formulaitem in ListFormulaByTypeCode)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else
                {

                    var listDisciplineByProfile = TotalData600.dicDiscipline.GetValueOrNew(profileItem.ID);
                    var listDiscipline = listDisciplineByProfile.Where(s =>
                                            s.ProfileID == profileItem.ID
                                            && s.ApproveStatus == EnumDropDown.Status.E_APPROVED.ToString()
                                            && s.DateOfEffective <= CutOffDuration.DateEnd
                                            && (s.DateEndOfViolation >= CutOffDuration.DateStart || s.DateEndOfViolation == null)).ToList();

                    if (listDiscipline.Count > 0)
                    {
                        var listCodeReason = TotalDataAll.ListCat_NameEntity.Where(s => s.NameEntityType == EnumDropDown.EntityType.E_DISCIPLINE_REASON.ToString());
                        //cac enum theo mã lý do kỷ luật
                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            double countDiscipline = 0;
                            var codeReason = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");

                            var objCodeReason = listCodeReason.Where(s => s.Code == codeReason).FirstOrDefault();
                            if (objCodeReason != null)
                            {
                                countDiscipline = listDiscipline.Where(s => s.DisciplineResonID == objCodeReason.ID).Count();
                            }

                            item = new ElementFormula(_formula, countDiscipline, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                        //các enum theo loại kỷ luật
                        foreach (var formulaitem in ListFormulaByTypeCode)
                        {
                            var _formula = formulaitem;
                            double countDisciplineByTypeCode = 0;
                            var codeType = _formula.Replace(strStartsWith, "").Replace(strEndWithTypeCode, "");
                            var objDisciplinedTypes = TotalDataAll.listCat_DisciplinedTypes.Where(s => s.Code == codeType).FirstOrDefault();
                            if (objDisciplinedTypes != null)
                            {
                                countDisciplineByTypeCode = listDiscipline.Where(s => s.DisciplineTypeID == objDisciplinedTypes.ID).Count();
                            }

                            item = new ElementFormula(_formula, countDisciplineByTypeCode, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                    else
                    {
                        //cac enum theo mã lý do kỷ luật
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                        //các enum theo loại kỷ luật
                        foreach (var formulaitem in ListFormulaByTypeCode)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
            }
            #endregion

            #region phan tu dong số giờ làm việc tính lương theo ca làm việc
            // [10/05/2018][bang.nguyen][94910][new func]
            // Số giờ làm việc tính lương theo ca làm việc (DYN5_ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_ + mã ca + _BYCODESHIFT)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN5_ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_.ToString(), "_BYCODESHIFT"))
            {
                var strStartsWith = PayrollElement.DYN5_ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_.ToString();
                var strEndWith = "_BYCODESHIFT";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();

                var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID)
                    .Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd && s.ShiftID != null).ToList();

                if (listAttendanceTableItem.Count > 0)
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        var _formula = formulaitem;
                        double sumWorkPaidHours = 0;
                        var codeShift = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");

                        var objShift = TotalDataAll.listCat_Shift.Where(s => s.Code == codeShift).FirstOrDefault();
                        if (objShift != null)
                        {
                            sumWorkPaidHours = listAttendanceTableItem.Where(s => s.ShiftID == objShift.ID).Sum(s => s.WorkPaidHours);
                        }

                        item = new ElementFormula(_formula, sumWorkPaidHours, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
            }

            #endregion

            #region Số ngày làm việc theo ca và giờ truyền vào
            // [18/06/2018][bang.nguyen][95877][Modify Func]
            // Số ngày làm việc theo ca và giờ truyền vào (DYN8_ATT_ATTENDANCETABLEITEM_COUNT_BYCODESHIFT_ + mã ca + số giờ)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN8_ATT_ATTENDANCETABLEITEM_COUNT_BYCODESHIFT_.ToString(), EnumDropDown.ElementDataType.Double))
            {
                //lấy các phần tử cần lấy dữ liệu
                var startWith = PayrollElement.DYN8_ATT_ATTENDANCETABLEITEM_COUNT_BYCODESHIFT_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(startWith)).Distinct().ToList();

                var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID)
                            .Where(s => s.WorkDate >= CutOffDuration.DateStart
                            && s.WorkDate <= CutOffDuration.DateEnd
                            && s.ShiftID != null).ToList();
                if (listAttendanceTableItem.Count > 0)
                {
                    DateTime dateEnd = CutOffDuration.DateEnd;

                    var listBasicSalaryByPro = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(s => s.ProfileID == profileItem.ID && s.DateOfEffect <= CutOffDuration.DateEnd).ToList();
                    //có thay đổi lương trong tháng
                    if (listBasicSalaryByPro.Count > 1 && CheckIsChangeBasicSalary(listBasicSalaryByPro, CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                    {
                        //ngay thay doi luong
                        dateEnd = listBasicSalaryByPro.OrderByDescending(s => s.DateOfEffect).Select(s => s.DateOfEffect).FirstOrDefault();
                        dateEnd = dateEnd.AddDays(-1);
                        //lay du lieu cong tu ngay dau ky den truoc ngay thay doi luong
                        listAttendanceTableItem = listAttendanceTableItem.Where(s => s.WorkDate <= dateEnd).ToList();
                    }

                    var listShift = TotalDataAll.listCat_Shift.ToList();
                    foreach (var objformular in ListFormula)
                    {
                        double countItem = 0;
                        formula.Remove(objformular);
                        var _element = objformular;
                        var lstTemp = _element.Split('_').ToList();
                        var _strvalue = lstTemp[lstTemp.Count() - 1].ToString();
                        //replace dau phẩy để parse số không bị sai
                        var _value = _strvalue.Replace(',', '.');
                        double _valueInPut = 0;
                        //giá trị nhập vào đúng là số
                        if (double.TryParse(_value, out _valueInPut))
                        {
                            //lấy mã loại nghỉ được cấu hình trong phần tử
                            //[Hien.Le][05/04/2019]  Mã ca làm việc và giờ công thực tế đặt tên trùng nhau
                            var _codeShiftFormular = _element.Replace(startWith, "").Replace("_" + _strvalue, "");
                            var objShiftByCode = listShift.Where(s => s.Code == _codeShiftFormular).FirstOrDefault();
                            //mã loại nghỉ cấu hình hợp lệ
                            if (objShiftByCode != null)
                            {
                                countItem = listAttendanceTableItem.Where(s => s.ShiftID == objShiftByCode.ID && s.WorkPaidHours >= _valueInPut).Count();
                            }
                        }
                        item = new ElementFormula(_element, countItem, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }



            #endregion

            #region Số ngày làm việc theo ca và giờ truyền vào
            // [18/06/2018][bang.nguyen][95877][Modify Func]
            // Số ngày làm việc theo ca và giờ truyền vào sau thay đổi lương (DYN8_ATT_ATTENDANCETABLEITEM_AFTER_COUNT_BYCODESHIFT_ + mã ca + số giờ)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN8_ATT_ATTENDANCETABLEITEM_AFTER_COUNT_BYCODESHIFT_.ToString(), EnumDropDown.ElementDataType.Double))
            {
                //lấy các phần tử cần lấy dữ liệu
                var startWith = PayrollElement.DYN8_ATT_ATTENDANCETABLEITEM_AFTER_COUNT_BYCODESHIFT_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(startWith)).Distinct().ToList();

                var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID)
                    .Where(s => s.WorkDate >= CutOffDuration.DateStart
                            && s.WorkDate <= CutOffDuration.DateEnd
                            && s.ShiftID != null).ToList();
                if (listAttendanceTableItem.Count > 0)
                {
                    DateTime dateStart = CutOffDuration.DateStart;

                    var listBasicSalaryByPro = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(s => s.ProfileID == profileItem.ID && s.DateOfEffect <= CutOffDuration.DateEnd).ToList();
                    //có thay đổi lương trong tháng
                    if (listBasicSalaryByPro.Count > 1 && CheckIsChangeBasicSalary(listBasicSalaryByPro, CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                    {
                        //ngay thay doi luong
                        dateStart = listBasicSalaryByPro.OrderByDescending(s => s.DateOfEffect).Select(s => s.DateOfEffect).FirstOrDefault();
                        //lay du lieu cong tu ngay thay doi luong den cuoi ky luong
                        listAttendanceTableItem = listAttendanceTableItem.Where(s => s.WorkDate >= dateStart).ToList();
                        var listShift = TotalDataAll.listCat_Shift.ToList();
                        foreach (var objformular in ListFormula)
                        {
                            double countItem = 0;
                            formula.Remove(objformular);
                            var _element = objformular;
                            var lstTemp = _element.Split('_').ToList();
                            var _strvalue = lstTemp[lstTemp.Count() - 1].ToString();
                            //replace dau phẩy để parse số không bị sai
                            var _value = _strvalue.Replace(',', '.');
                            double _valueInPut = 0;
                            //giá trị nhập vào đúng là số
                            if (double.TryParse(_value, out _valueInPut))
                            {
                                //lấy mã loại nghỉ được cấu hình trong phần tử
                                int indexVualue = _element.LastIndexOf(_strvalue);
                                int lenghtDYN = startWith.Length;
                                string _codeShiftFormular = _element.Substring(lenghtDYN, indexVualue - lenghtDYN - 1);
                                var objShiftByCode = listShift.Where(s => s.Code == _codeShiftFormular).FirstOrDefault();
                                //mã loại nghỉ cấu hình hợp lệ
                                if (objShiftByCode != null)
                                {
                                    //dem nhung dong công nào có mã = mã cấu hình và giờ >= giờ cấu hình
                                    countItem = listAttendanceTableItem.Where(s => s.ShiftID == objShiftByCode.ID && s.WorkPaidHours >= _valueInPut).Count();
                                }
                            }
                            item = new ElementFormula(_element, countItem, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else // khong thay doi luong
                    {
                        foreach (var objformular in ListFormula)
                        {
                            formula.Remove(objformular);
                            var _element = objformular;
                            item = new ElementFormula(_element, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Phần tử động đếm số giờ OT payback theo loại OT trước và sau khi thay đổi lương (Theo từng mã loại OT)
            // [23/07/2018][tung.tran][0096770: Bổ sung enum tạo phần tử lương số giờ OT Payback tháng n-1 trước và sau thay đổi lương]
            // Số giờ tăng ca theo loại(mã) trước và sau khi thay đổi lương (DYN6_ATT_OVERTIME_COUNTPAYBACK_ +"mã ca" + _BYOVERTIMETYPE)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString(), new string[] { "_BEFORE_BYOVERTIMETYPE", "_AFTER_BYOVERTIMETYPE" }))
            {
                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString()).FirstOrDefault();
                var strStartsWith = PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && (m.EndsWith("_BEFORE_BYOVERTIMETYPE") || m.EndsWith("_AFTER_BYOVERTIMETYPE"))).Distinct().ToList();

                var listOTCode = new List<string>();
                foreach (var objformular in ListFormula)
                {
                    var codeTypeOT = objformular.Replace(strStartsWith, "").Replace("_BEFORE_BYOVERTIMETYPE", "").Replace("_AFTER_BYOVERTIMETYPE", "");
                    if (!listOTCode.Contains(codeTypeOT))
                    {
                        listOTCode.Add(codeTypeOT);
                    }
                }

                //lay data nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listOverTimePayBack";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.listOverTimePayBack = dataComputeSer.GetOvertimePayBack(TotalData600.strOrderByProfile, CutOffDuration.ID, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }

                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông lưu store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString() + ") ";

                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else
                {
                    if (objAllSetting != null && !string.IsNullOrEmpty(objAllSetting.Value1))
                    {
                        var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                        // Lấy kỳ lương N - 1
                        var cutOffDurationN_1 = TotalDataAll.listCutOffDuration.FirstOrDefault(a => a.MonthYear == CutOffDuration.MonthYear.AddMonths(-1));

                        //lấy lương cơ bản của nhân viên
                        List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                        SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= cutOffDurationN_1.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                        if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= cutOffDurationN_1.DateEnd).ToList(), cutOffDurationN_1.DateStart, cutOffDurationN_1.DateEnd, profileItem.ID))
                        {
                            #region Có thay đổi lương trong tháng N - 1
                            double totalHoursOTBefore = 0;
                            double totalHoursOTAfter = 0;
                            var strOVERTIMESTATUS = objAllSetting.Value1;

                            //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                            DateTime dateStart1 = cutOffDurationN_1.DateStart;
                            DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                            // Lấy dữ liệu OT
                            var listOvertimeTimeOffByProfile = TotalData600.listOverTimePayBack.Where(m => m.ProfileID == profileItem.ID
                                   && m.PaybackDurationID == CutOffDuration.ID
                                   && m.IsPayback == true
                                   && m.WorkDateRoot >= cutOffDurationN_1.DateStart
                                   && m.WorkDateRoot <= cutOffDurationN_1.DateEnd
                                   ).ToList();

                            if (listOvertimeTimeOffByProfile != null && listOvertimeTimeOffByProfile.Any())
                            {
                                var lstOTBefore = listOvertimeTimeOffByProfile.Where(m => m.WorkDateRoot >= dateStart1 && m.WorkDateRoot < dateStart2).ToList();
                                var lstOTAfter = listOvertimeTimeOffByProfile.Where(m => m.WorkDateRoot >= dateStart2 && m.WorkDateRoot <= cutOffDurationN_1.DateEnd).ToList();

                                foreach (var OTCode in listOTCode)
                                {
                                    var objOvertime = TotalDataAll.listOvertimeType.Where(s => s.Code == OTCode).FirstOrDefault();

                                    if (objOvertime != null)
                                    {
                                        var ListOvertimeTimeOffByProfileAndTypeBefore = lstOTBefore.Where(m => m.OvertimeTypeID == objOvertime.ID).ToList();
                                        var ListOvertimeTimeOffByProfileAndTypeAfter = lstOTAfter.Where(m => m.OvertimeTypeID == objOvertime.ID).ToList();

                                        if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_APPROVED.ToString())
                                        {
                                            totalHoursOTBefore = ListOvertimeTimeOffByProfileAndTypeBefore.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()
                                            && s.ApproveHours != null).Sum(m => m.ApproveHours.Value);

                                            totalHoursOTAfter = ListOvertimeTimeOffByProfileAndTypeAfter.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()
                                           && s.ApproveHours != null).Sum(m => m.ApproveHours.Value);


                                        }
                                        else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString())
                                        {
                                            totalHoursOTBefore = ListOvertimeTimeOffByProfileAndTypeBefore.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString()).Sum(m => m.ConfirmHours);

                                            totalHoursOTAfter = ListOvertimeTimeOffByProfileAndTypeAfter.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString()).Sum(m => m.ConfirmHours);
                                        }
                                        else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString())
                                        {
                                            totalHoursOTBefore = ListOvertimeTimeOffByProfileAndTypeBefore.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString()).Sum(m => m.RegisterHours);

                                            totalHoursOTAfter = ListOvertimeTimeOffByProfileAndTypeAfter.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString()).Sum(m => m.RegisterHours);
                                        }
                                        else
                                        {
                                            totalHoursOTBefore = 0;
                                        }
                                        item = new ElementFormula(PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString() + objOvertime.Code + "_BEFORE_BYOVERTIMETYPE", totalHoursOTBefore, 0);
                                        listElementFormula.Add(item);

                                        item = new ElementFormula(PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString() + objOvertime.Code + "_AFTER_BYOVERTIMETYPE", totalHoursOTAfter, 0);
                                        listElementFormula.Add(item);

                                    }

                                    item = new ElementFormula(PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString() + objOvertime.Code + "_BEFORE_BYOVERTIMETYPE", 0, 0);
                                    listElementFormula.Add(item);

                                    item = new ElementFormula(PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString() + objOvertime.Code + "_AFTER_BYOVERTIMETYPE", 0, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            #endregion
                        }
                        else
                        {
                            #region Không thay đổi lương trong tháng N - 1
                            double totalHoursOT = 0;
                            var strOVERTIMESTATUS = objAllSetting.Value1;

                            // Lấy dữ liệu OT
                            var listOvertimeTimeOffByProfile = TotalData600.listOverTimePayBack.Where(m => m.ProfileID == profileItem.ID
                                   && m.PaybackDurationID == CutOffDuration.ID
                                   && m.IsPayback == true
                                   && m.WorkDateRoot >= cutOffDurationN_1.DateStart
                                   && m.WorkDateRoot <= cutOffDurationN_1.DateEnd
                                   ).ToList();

                            if (listOvertimeTimeOffByProfile != null && listOvertimeTimeOffByProfile.Any())
                            {
                                foreach (var OTCode in listOTCode)
                                {
                                    var objOvertime = TotalDataAll.listOvertimeType.Where(s => s.Code == OTCode).FirstOrDefault();

                                    if (objOvertime != null)
                                    {
                                        var ListOvertimeTimeOffByProfileAndType = listOvertimeTimeOffByProfile.Where(m => m.OvertimeTypeID == objOvertime.ID).ToList();

                                        if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_APPROVED.ToString())
                                        {
                                            totalHoursOT = ListOvertimeTimeOffByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()
                                            && s.ApproveHours != null).Sum(m => m.ApproveHours.Value);
                                        }
                                        else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString())
                                        {
                                            totalHoursOT = ListOvertimeTimeOffByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString()).Sum(m => m.ConfirmHours);
                                        }
                                        else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString())
                                        {
                                            totalHoursOT = ListOvertimeTimeOffByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString()).Sum(m => m.RegisterHours);
                                        }
                                        else
                                        {
                                            totalHoursOT = 0;
                                        }
                                        item = new ElementFormula(PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString() + objOvertime.Code + "_BEFORE_BYOVERTIMETYPE", totalHoursOT, 0);
                                        listElementFormula.Add(item);

                                        item = new ElementFormula(PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString() + objOvertime.Code + "_AFTER_BYOVERTIMETYPE", 0, 0);
                                        listElementFormula.Add(item);
                                    }

                                    item = new ElementFormula(PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString() + objOvertime.Code + "_BEFORE_BYOVERTIMETYPE", 0, 0);
                                    listElementFormula.Add(item);

                                    item = new ElementFormula(PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString() + objOvertime.Code + "_AFTER_BYOVERTIMETYPE", 0, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            #endregion
                        }
                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
            }

            #endregion

            #region Phần tử động Đếm số người thân của từng nhân viên (làm cùng công ty) theo loại quan hệ
            // [01/08/2018][Tung.Tran][0097043]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN10_HRE_COUNT_RELATIVE_.ToString(), "_BYRELATIVETYPE"))
            {

                var strStartsWith = PayrollElement.DYN10_HRE_COUNT_RELATIVE_.ToString();
                var strEndWith = "_BYRELATIVETYPE";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();

                string status = string.Empty;
                dataComputeSer.GetDicRelatives(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN_HRE_COUNT_RELATIVE_.ToString() + ") ";
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else
                {
                    var listRelativesByProfileDic = TotalData600.dicRelatives.GetValueOrNew(profileItem.ID);
                    var ListRelativesByProFile = listRelativesByProfileDic.Where(a => a.ProfileID == profileItem.ID && a.SameCompanyProfileID != null).ToList();
                    if (ListRelativesByProFile.Count > 0)
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            int countRelatives = 0;
                            var codeRelativeType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");

                            var objRelativeType = TotalDataAll.listCatRelativeType.Where(s => s.Code == codeRelativeType).FirstOrDefault();

                            if (objRelativeType != null)
                            {
                                countRelatives = ListRelativesByProFile.Where(a => a.RelativeTypeID == objRelativeType.ID).ToList().Count;
                            }
                            item = new ElementFormula(_formula, countRelatives, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
            }
            #endregion

            #region Phần tử động Phần tử lương đếm số giờ OT theo từng loại loại có số giờ >= số giờ truyền vào
            //[01/08/2018][tung.tran][97043][Modify Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN11_ATT_ATTENDANCETABLEITEM_COUNT_OVERTIME.ToString(), EnumDropDown.ElementDataType.Double))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                var strStartsWithFirst = PayrollElement.DYN11_ATT_ATTENDANCETABLEITEM_COUNT_OVERTIME.ToString() + "FIRST_";
                var strStartsWithAfter = PayrollElement.DYN11_ATT_ATTENDANCETABLEITEM_COUNT_OVERTIME.ToString() + "AFTER_";
                List<string> ListFormula = formula.Where(m => (m.StartsWith(strStartsWithFirst) || m.StartsWith(strStartsWithAfter))).Distinct().ToList();

                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();


                var lstOvertimeType = TotalDataAll.listOvertimeType.ToList();
                var lstAtttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);

                if (lstAtttendanceTableItem.Count > 0 && lstOvertimeType.Count > 0)
                {
                    if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                    {
                        // Có thay đổi lương trong tháng

                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                        DateTime dateStart1 = CutOffDuration.DateStart;
                        DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                        foreach (var objformular in ListFormula)
                        {
                            formula.Remove(objformular);
                            int _countOverTime = 0;
                            var _element = objformular;
                            var lstTemp = _element.Split('_').ToList();
                            var _strvalue = lstTemp[lstTemp.Count() - 1].ToString();
                            //replace dau phẩy để parse số không bị sai
                            var _value = _strvalue.Replace(',', '.');
                            double _valueOutPut = 0;
                            //giá trị nhập vào đúng là số
                            if (double.TryParse(_value, out _valueOutPut))
                            {
                                //lấy mã loại nghỉ được cấu hình trong phần tử
                                int indexValue = _element.IndexOf("_" + _strvalue) + 1;
                                int lenghtDYN = PayrollElement.DYN11_ATT_ATTENDANCETABLEITEM_COUNT_OVERTIME.ToString().Length + 6;
                                string _codeOverTimeTypeFormular = _element.Substring(lenghtDYN, indexValue - lenghtDYN - 1);
                                var lstOverTimeByCode = lstOvertimeType.Where(s => s.Code == _codeOverTimeTypeFormular).FirstOrDefault();
                                //mã loại nghỉ cấu hình hợp lệ
                                if (lstOverTimeByCode != null)
                                {
                                    // Nếu đang là phần tử trước thay đổi lương
                                    if (_element.Contains(strStartsWithFirst))
                                    {

                                        var lstAttItemByOverTimeTypeFirst = lstAtttendanceTableItem.Where(s => s.WorkDate < dateStart2
                                                                                && (s.OvertimeTypeID == lstOverTimeByCode.ID
                                                                                || s.ExtraOvertimeTypeID == lstOverTimeByCode.ID
                                                                                || s.ExtraOvertimeType2ID == lstOverTimeByCode.ID
                                                                                || s.ExtraOvertimeType3ID == lstOverTimeByCode.ID
                                                                                || s.ExtraOvertimeType4ID == lstOverTimeByCode.ID)).ToList();

                                        foreach (var objAttItem in lstAttItemByOverTimeTypeFirst)
                                        {
                                            if (objAttItem.OvertimeHours >= _valueOutPut && objAttItem.OvertimeTypeID == lstOverTimeByCode.ID)
                                            {
                                                _countOverTime += 1;
                                            }
                                            if (objAttItem.ExtraOvertimeHours >= _valueOutPut && objAttItem.ExtraOvertimeTypeID == lstOverTimeByCode.ID)
                                            {
                                                _countOverTime += 1;
                                            }
                                            if (objAttItem.ExtraOvertimeHours2 >= _valueOutPut && objAttItem.ExtraOvertimeType2ID == lstOverTimeByCode.ID)
                                            {
                                                _countOverTime += 1;
                                            }
                                            if (objAttItem.ExtraOvertimeHours3 >= _valueOutPut && objAttItem.ExtraOvertimeType3ID == lstOverTimeByCode.ID)
                                            {
                                                _countOverTime += 1;
                                            }
                                            if (objAttItem.ExtraOvertimeHours4 >= _valueOutPut && objAttItem.ExtraOvertimeType4ID == lstOverTimeByCode.ID)
                                            {
                                                _countOverTime += 1;
                                            }
                                        }
                                    }

                                    // Nếu đang là phần tử sau thay đổi lương
                                    if (_element.Contains(strStartsWithAfter))
                                    {
                                        var lstAttItemByOverTimeTypeAfter = lstAtttendanceTableItem.Where(s => s.WorkDate >= dateStart2
                                                                                                  && (s.OvertimeTypeID == lstOverTimeByCode.ID
                                                                                                  || s.ExtraOvertimeTypeID == lstOverTimeByCode.ID
                                                                                                  || s.ExtraOvertimeType2ID == lstOverTimeByCode.ID
                                                                                                  || s.ExtraOvertimeType3ID == lstOverTimeByCode.ID
                                                                                                  || s.ExtraOvertimeType4ID == lstOverTimeByCode.ID)).ToList();
                                        foreach (var objAttItem in lstAttItemByOverTimeTypeAfter)
                                        {
                                            if (objAttItem.OvertimeHours >= _valueOutPut && objAttItem.OvertimeTypeID == lstOverTimeByCode.ID)
                                            {
                                                _countOverTime += 1;
                                            }
                                            if (objAttItem.ExtraOvertimeHours >= _valueOutPut && objAttItem.ExtraOvertimeTypeID == lstOverTimeByCode.ID)
                                            {
                                                _countOverTime += 1;
                                            }
                                            if (objAttItem.ExtraOvertimeHours2 >= _valueOutPut && objAttItem.ExtraOvertimeType2ID == lstOverTimeByCode.ID)
                                            {
                                                _countOverTime += 1;
                                            }
                                            if (objAttItem.ExtraOvertimeHours3 >= _valueOutPut && objAttItem.ExtraOvertimeType3ID == lstOverTimeByCode.ID)
                                            {
                                                _countOverTime += 1;
                                            }
                                            if (objAttItem.ExtraOvertimeHours4 >= _valueOutPut && objAttItem.ExtraOvertimeType4ID == lstOverTimeByCode.ID)
                                            {
                                                _countOverTime += 1;
                                            }
                                        }
                                    }
                                }
                            }

                            item = new ElementFormula(_element, _countOverTime, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var objformular in ListFormula)
                        {
                            formula.Remove(objformular);
                            int _countOverTime = 0;
                            var _element = objformular;
                            if (_element.Contains(strStartsWithFirst))
                            {
                                // Nếu không thay đổi lương thì phần tử trước thay đổi  = 0 hết (Yêu cầu BA)
                                item = new ElementFormula(_element, 0, 0);
                                listElementFormula.Add(item);
                                continue;
                            }

                            var lstTemp = _element.Split('_').ToList();
                            var _strvalue = lstTemp[lstTemp.Count() - 1].ToString();
                            //replace dau phẩy để parse số không bị sai
                            var _value = _strvalue.Replace(',', '.');
                            double _valueOutPut = 0;
                            //giá trị nhập vào đúng là số
                            if (double.TryParse(_value, out _valueOutPut))
                            {
                                //lấy mã loại nghỉ được cấu hình trong phần tử
                                int indexValue = _element.IndexOf("_" + _strvalue) + 1;
                                int lenghtDYN = PayrollElement.DYN11_ATT_ATTENDANCETABLEITEM_COUNT_OVERTIME.ToString().Length + 6;
                                string _codeOverTimeTypeFormular = _element.Substring(lenghtDYN, indexValue - lenghtDYN - 1);
                                var lstOverTimeByCode = lstOvertimeType.Where(s => s.Code == _codeOverTimeTypeFormular).FirstOrDefault();
                                //mã loại nghỉ cấu hình hợp lệ
                                if (lstOverTimeByCode != null)
                                {
                                    var lstAttItemByOverTimeType = lstAtttendanceTableItem.Where(s => s.OvertimeTypeID == lstOverTimeByCode.ID
                                                                                                    || s.ExtraOvertimeTypeID == lstOverTimeByCode.ID
                                                                                                    || s.ExtraOvertimeType2ID == lstOverTimeByCode.ID
                                                                                                    || s.ExtraOvertimeType3ID == lstOverTimeByCode.ID
                                                                                                    || s.ExtraOvertimeType4ID == lstOverTimeByCode.ID).ToList();
                                    foreach (var objAttItem in lstAttItemByOverTimeType)
                                    {
                                        if (objAttItem.OvertimeHours >= _valueOutPut && objAttItem.OvertimeTypeID == lstOverTimeByCode.ID)
                                        {
                                            _countOverTime += 1;
                                        }
                                        if (objAttItem.ExtraOvertimeHours >= _valueOutPut && objAttItem.ExtraOvertimeTypeID == lstOverTimeByCode.ID)
                                        {
                                            _countOverTime += 1;
                                        }
                                        if (objAttItem.ExtraOvertimeHours2 >= _valueOutPut && objAttItem.ExtraOvertimeType2ID == lstOverTimeByCode.ID)
                                        {
                                            _countOverTime += 1;
                                        }
                                        if (objAttItem.ExtraOvertimeHours3 >= _valueOutPut && objAttItem.ExtraOvertimeType3ID == lstOverTimeByCode.ID)
                                        {
                                            _countOverTime += 1;
                                        }
                                        if (objAttItem.ExtraOvertimeHours4 >= _valueOutPut && objAttItem.ExtraOvertimeType4ID == lstOverTimeByCode.ID)
                                        {
                                            _countOverTime += 1;
                                        }
                                    }
                                }
                            }
                            item = new ElementFormula(_element, _countOverTime, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [24/11/2018][tung.tran][101329][Modify Func] Phần tử động Sum số lượng chưa thu hồi của nhân viên, đặt động theo chi tiết thiết bị
            // DYN14_HRE_FACILITYISSUE_SUM_NOTEVICTAMOUNT_ + "Mã chi tiết thiết bị"
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN14_HRE_FACILITYISSUE_SUM_NOTEVICTAMOUNT_.ToString(), ""))
            {
                var strStarts = PayrollElement.DYN14_HRE_FACILITYISSUE_SUM_NOTEVICTAMOUNT_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStarts)).Distinct().ToList();

                // Lấy dữ liệu cấp phát của nhân viên (Chỉ lấy những dữ liệu chưa thu hồi hết)
                string status = string.Empty;
                string nameTableGetData = "listHreFacilityIssue";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.listHreFacilityIssue = dataComputeSer.GetHreFacilityIssue(TotalData600, CutOffDuration, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                //Lấy All dữ liệu danh mục chi tiết thiết bị
                string status2 = string.Empty;
                nameTableGetData = "listHreFacilityItem";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listHreFacilityItem = dataComputeSer.GetHreFacilityItem(ref status2);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }

                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status2))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN14_HRE_FACILITYISSUE_SUM_NOTEVICTAMOUNT_.ToString() + ") ";

                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var objformular in ListFormula)
                    {
                        int sumNotEvictAmount = 0;
                        formula.Remove(objformular);
                        // Tách chuỗi lấy mã chi tiết thiết bị
                        var codeFacilityItem = objformular.Replace(PayrollElement.DYN14_HRE_FACILITYISSUE_SUM_NOTEVICTAMOUNT_.ToString(), "");
                        // Lấy dữ liệu chi tiết thiết bị
                        var objFacilityItem = TotalData600.listHreFacilityItem.FirstOrDefault(x => x.Code == codeFacilityItem);
                        if (objFacilityItem != null)
                        {
                            // Lấy danh sách cấp phát của nhân viên chưa thu hồi hết ứng với chi tiết thiết bị 
                            var listFacilityIssueByProfile = TotalData600.listHreFacilityIssue.Where(x =>
                            x.NotEvictAmount != null
                            && x.FacilityItemID == objFacilityItem.ID  // Ứng với chi tiết thiết bị
                            && x.ProfileID == profileItem.ID // Ứng với nhân viên
                            && x.IsEviction != true // Chưa thu hồi hết
                            && x.NotEvictAmount > 0 // Còn số lượng chưa thu hồi
                            ).ToList();

                            if (listFacilityIssueByProfile != null)
                            {
                                sumNotEvictAmount = listFacilityIssueByProfile.Sum(x => x.NotEvictAmount.Value);
                            }
                        }

                        item = new ElementFormula(objformular, sumNotEvictAmount, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [24/11/2018][tung.tran][101329][Modify Func]  Phần tử động lấy đơn giá chi tiết thiết bị (AmountLimit) theo mã động chi tiết thiết bị truyền vào
            // DYN15_HRE_FACILITYITEM_AMOUNTLIMIT_ + "Mã chi tiết thiết bị"
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN15_HRE_FACILITYITEM_AMOUNTLIMIT_.ToString(), ""))
            {
                var strStarts = PayrollElement.DYN15_HRE_FACILITYITEM_AMOUNTLIMIT_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStarts)).Distinct().ToList();

                //Lấy All dữ liệu danh mục chi tiết thiết bị
                string status = string.Empty;
                var nameTableGetData = "listHreFacilityItem";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listHreFacilityItem = dataComputeSer.GetHreFacilityItem(ref status);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN15_HRE_FACILITYITEM_AMOUNTLIMIT_.ToString() + ") ";

                    foreach (var objformular in ListFormula)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var objformular in ListFormula)
                    {
                        double amountLimit = 0;
                        formula.Remove(objformular);
                        // Tách chuỗi lấy mã chi tiết thiết bị
                        var codeFacilityItem = objformular.Replace(PayrollElement.DYN15_HRE_FACILITYITEM_AMOUNTLIMIT_.ToString(), "");
                        // Lấy dữ liệu chi tiết thiết bị
                        var objFacilityItem = TotalData600.listHreFacilityItem.FirstOrDefault(x => x.Code == codeFacilityItem);
                        if (objFacilityItem != null && objFacilityItem.AmountLimit != null)
                        {
                            amountLimit = objFacilityItem.AmountLimit.Value;
                        }
                        item = new ElementFormula(objformular, amountLimit, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [05/12/2018][tung.tran][101573] Bộ phần tử lương sản phẩm

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN17_SAL_PRODUCTIVE_PRODUCTITEMCODE_.ToString(), "")
                || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN18_SAL_PRODUCTIVE_PRODUCTITEMNAME_.ToString(), "")
                || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN19_SAL_PRODUCTIVE_PRODUCTITEMNOTE1_.ToString(), "")
                || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN20_SAL_PRODUCTIVE_SUMQUANTITY_.ToString(), "")
                || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN21_SAL_PRODUCTIVE_UNITPRICE_.ToString(), "")
                || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN22_SAL_PRODUCTIVE_SUMPRICESUBSIDY_.ToString(), "")
                )
            {

                //Lấy All dữ liệu danh mục chi tiết thiết bị
                string status = string.Empty;
                var nameTableGetData = "listProductItemPrice";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listProductItemPrice = dataComputeSer.GetProductItemPrice(ref status);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN21_SAL_PRODUCTIVE_UNITPRICE_.ToString() + ") ";

                    #region Bộ phần tử lấy mã => Xét  = 0 nếu lỗi store
                    var strStartCode = PayrollElement.DYN17_SAL_PRODUCTIVE_PRODUCTITEMCODE_.ToString();
                    List<string> ListFormulaCode = formula.Where(m => m.StartsWith(strStartCode)).Distinct().ToList();
                    foreach (var objformular in ListFormulaCode)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                    #endregion

                    #region Bộ phần tử lấy Tên => Xét  = 0 nếu lỗi store
                    var strStartName = PayrollElement.DYN18_SAL_PRODUCTIVE_PRODUCTITEMNAME_.ToString();
                    List<string> ListFormulaName = formula.Where(m => m.StartsWith(strStartName)).Distinct().ToList();
                    foreach (var objformular in ListFormulaName)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                    #endregion

                    #region Bộ phần tử lấy ghi chú 1 => Xét  = 0 nếu lỗi store
                    var strStartNote1 = PayrollElement.DYN19_SAL_PRODUCTIVE_PRODUCTITEMNOTE1_.ToString();
                    List<string> ListFormulaNote1 = formula.Where(m => m.StartsWith(strStartNote1)).Distinct().ToList();
                    foreach (var objformular in ListFormulaNote1)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                    #endregion

                    #region Bộ phần tử sum quantity => Xét = 0 nếu lỗi store
                    var strStartQuantity = PayrollElement.DYN20_SAL_PRODUCTIVE_SUMQUANTITY_.ToString();
                    List<string> ListFormulaQuantity = formula.Where(m => m.StartsWith(strStartQuantity)).Distinct().ToList();
                    foreach (var objformular in ListFormulaQuantity)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                    #endregion

                    #region Bộ phần tử lấy đơn giá => Xét = 0 nếu lỗi store
                    var strStartUnitPrice = PayrollElement.DYN21_SAL_PRODUCTIVE_UNITPRICE_.ToString();
                    List<string> ListFormulaUnitPrice = formula.Where(m => m.StartsWith(strStartUnitPrice)).Distinct().ToList();
                    foreach (var objformular in ListFormulaUnitPrice)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                    #endregion

                    #region Bộ phần tử sum trợ giá => Xét = 0 nếu lỗi store
                    var strStartPriceSubsidy = PayrollElement.DYN22_SAL_PRODUCTIVE_SUMPRICESUBSIDY_.ToString();
                    List<string> ListFormulaPriceSubsidy = formula.Where(m => m.StartsWith(strStartPriceSubsidy)).Distinct().ToList();
                    foreach (var objformular in ListFormulaPriceSubsidy)
                    {
                        formula.Remove(objformular);
                        var _element = objformular;
                        item = new ElementFormula(_element, 0, 0);
                        listElementFormula.Add(item);
                    }
                    #endregion
                }
                else
                {
                    #region Lấy dữ liệu, gôm nhóm
                    // Lấy danh sách sản phẩm nhân viên trong kỳ công
                    var listProductiveByProfile = TotalDataAll.dicProductive.GetValueOrNew(profileItem.ID).Where(
                        x => x.StartDate != null && x.EndDate != null
                        && x.ProfileID == profileItem.ID
                        && x.StartDate.Value.Date <= CutOffDuration.DateEnd.Date
                        && x.EndDate.Value.Date >= CutOffDuration.DateStart.Date
                        ).ToList();

                    // Nhóm theo ProductItemID 
                    var listProductiveGroupByItem = listProductiveByProfile.GroupBy(x => new { x.ProductItemID }).Select(x => x.FirstOrDefault()).OrderBy(x => x.ProductItemCode).ToList();
                    // Đếm số nhóm gôm được
                    int countGroup = listProductiveGroupByItem != null ? listProductiveGroupByItem.Count : 0;
                    #endregion

                    #region Bộ phần tử lấy mã (ProductItemID.Code)
                    var strStartCode = PayrollElement.DYN17_SAL_PRODUCTIVE_PRODUCTITEMCODE_.ToString();
                    List<string> ListFormulaCode = formula.Where(m => m.StartsWith(strStartCode)).Distinct().ToList();

                    foreach (var objformular in ListFormulaCode)
                    {
                        var productItemCode = string.Empty;
                        // Tách chuỗi lấy số thứ tự của phần tử code
                        var index = objformular.Replace(PayrollElement.DYN17_SAL_PRODUCTIVE_PRODUCTITEMCODE_.ToString(), "");
                        int indexConfig = 0;
                        if (int.TryParse(index, out indexConfig))
                        {
                            if (indexConfig <= countGroup)
                            {
                                if (listProductiveGroupByItem[indexConfig - 1] != null && !string.IsNullOrEmpty(listProductiveGroupByItem[indexConfig - 1].ProductItemCode))
                                {
                                    productItemCode = listProductiveGroupByItem[indexConfig - 1].ProductItemCode;
                                }
                            }
                        }

                        item = new ElementFormula(objformular, productItemCode, 0);
                        listElementFormula.Add(item);
                        formula.Remove(objformular);
                    }
                    #endregion

                    #region Bộ phần tử lấy tên (ProductItemID.ProductItemName)
                    var strStartName = PayrollElement.DYN18_SAL_PRODUCTIVE_PRODUCTITEMNAME_.ToString();
                    List<string> ListFormulaName = formula.Where(m => m.StartsWith(strStartName)).Distinct().ToList();

                    foreach (var objformular in ListFormulaName)
                    {
                        var productItemName = string.Empty;

                        // Tách chuỗi lấy số thứ tự của phần tử code
                        var index = objformular.Replace(PayrollElement.DYN18_SAL_PRODUCTIVE_PRODUCTITEMNAME_.ToString(), "");
                        int indexConfig = 0;
                        if (int.TryParse(index, out indexConfig))
                        {
                            if (indexConfig <= countGroup)
                            {
                                if (listProductiveGroupByItem[indexConfig - 1] != null && !string.IsNullOrEmpty(listProductiveGroupByItem[indexConfig - 1].ProductItemName))
                                {
                                    productItemName = listProductiveGroupByItem[indexConfig - 1].ProductItemName;
                                }
                            }
                        }

                        item = new ElementFormula(objformular, productItemName, 0);
                        listElementFormula.Add(item);
                        formula.Remove(objformular);
                    }
                    #endregion

                    #region Bộ phần tử lấy ghi chú 1 (ProductItemID.Note1)
                    var strStartNote1 = PayrollElement.DYN19_SAL_PRODUCTIVE_PRODUCTITEMNOTE1_.ToString();
                    List<string> ListFormulaNote1 = formula.Where(m => m.StartsWith(strStartNote1)).Distinct().ToList();

                    foreach (var objformular in ListFormulaNote1)
                    {
                        var productItemNote1 = string.Empty;

                        // Tách chuỗi lấy số thứ tự của phần tử code
                        var index = objformular.Replace(PayrollElement.DYN19_SAL_PRODUCTIVE_PRODUCTITEMNOTE1_.ToString(), "");
                        int indexConfig = 0;
                        if (int.TryParse(index, out indexConfig))
                        {
                            if (indexConfig <= countGroup)
                            {
                                if (listProductiveGroupByItem[indexConfig - 1] != null && !string.IsNullOrEmpty(listProductiveGroupByItem[indexConfig - 1].ProductItemNote1))
                                {
                                    productItemNote1 = listProductiveGroupByItem[indexConfig - 1].ProductItemNote1;
                                }
                            }
                        }

                        item = new ElementFormula(objformular, productItemNote1, 0);
                        listElementFormula.Add(item);
                        formula.Remove(objformular);
                    }
                    #endregion

                    #region Bộ phần tử lấy sản lượng nhân viên trong kỳ lương làm được, nhóm theo chi tiết sp (Sal_Productive.Quantity)
                    var strStartQuantity = PayrollElement.DYN20_SAL_PRODUCTIVE_SUMQUANTITY_.ToString();
                    List<string> ListFormulaQuantity = formula.Where(m => m.StartsWith(strStartQuantity)).Distinct().ToList();

                    foreach (var objformular in ListFormulaQuantity)
                    {
                        double sumQuantity = 0;

                        // Tách chuỗi lấy số thứ tự của phần tử code
                        var index = objformular.Replace(PayrollElement.DYN20_SAL_PRODUCTIVE_SUMQUANTITY_.ToString(), "");
                        int indexConfig = 0;
                        if (int.TryParse(index, out indexConfig))
                        {
                            if (indexConfig <= countGroup)
                            {
                                if (listProductiveGroupByItem[indexConfig - 1] != null && !Common.IsNullOrGuidEmpty(listProductiveGroupByItem[indexConfig - 1].ProductItemID))
                                {
                                    sumQuantity = listProductiveByProfile.Where(x =>
                                    x.Quantity != null &&
                                    x.ProductItemID == listProductiveGroupByItem[indexConfig - 1].ProductItemID).Sum(x => x.Quantity.Value);
                                }
                            }
                        }

                        item = new ElementFormula(objformular, sumQuantity, 0);
                        listElementFormula.Add(item);
                        formula.Remove(objformular);
                    }
                    #endregion

                    #region Phần tử lấy Đơn giá Sản phẩm chi tiết hiệu lực trong kỳ lương Cat_ProductItemPrice.UnitPrice
                    var strStartUnitPrice = PayrollElement.DYN21_SAL_PRODUCTIVE_UNITPRICE_.ToString();
                    List<string> ListFormulaUnitPrice = formula.Where(m => m.StartsWith(strStartUnitPrice)).Distinct().ToList();

                    foreach (var objformular in ListFormulaUnitPrice)
                    {
                        double unitPrice = 0;

                        // Tách chuỗi lấy số thứ tự của phần tử code
                        var index = objformular.Replace(PayrollElement.DYN21_SAL_PRODUCTIVE_UNITPRICE_.ToString(), "");
                        int indexConfig = 0;
                        if (int.TryParse(index, out indexConfig))
                        {
                            if (indexConfig <= countGroup)
                            {
                                if (listProductiveGroupByItem[indexConfig - 1] != null && !Common.IsNullOrGuidEmpty(listProductiveGroupByItem[indexConfig - 1].ProductItemID))
                                {

                                    // Lấy đơn giá của sản phẩm chi tiết
                                    var objProductItemPrice = TotalData600.listProductItemPrice.Where(x =>
                                                x.ProductItemID == listProductiveGroupByItem[indexConfig - 1].ProductItemID
                                                && x.DateEffect != null
                                                && x.DateEffect <= CutOffDuration.DateEnd
                                    ).OrderByDescending(x => x.DateEffect).FirstOrDefault();


                                    if (objProductItemPrice != null && objProductItemPrice.UnitPrice != null)
                                    {
                                        unitPrice = objProductItemPrice.UnitPrice.Value;
                                    }
                                }
                            }
                        }

                        item = new ElementFormula(objformular, unitPrice, 0);
                        listElementFormula.Add(item);
                        formula.Remove(objformular);
                    }
                    #endregion

                    #region Phần tử lấy Trợ giá cho từng sản phẩm Sum PriceSubsidy gôm nhóm theo Sal_Productive.ProductItemID
                    var strStartPriceSubsidy = PayrollElement.DYN22_SAL_PRODUCTIVE_SUMPRICESUBSIDY_.ToString();
                    List<string> ListFormulaPriceSubsidy = formula.Where(m => m.StartsWith(strStartPriceSubsidy)).Distinct().ToList();

                    foreach (var objformular in ListFormulaPriceSubsidy)
                    {
                        double sumPriceSubsidy = 0;

                        // Tách chuỗi lấy số thứ tự của phần tử code
                        var index = objformular.Replace(PayrollElement.DYN22_SAL_PRODUCTIVE_SUMPRICESUBSIDY_.ToString(), "");
                        int indexConfig = 0;
                        if (int.TryParse(index, out indexConfig))
                        {
                            if (indexConfig <= countGroup)
                            {
                                if (listProductiveGroupByItem[indexConfig - 1] != null && !Common.IsNullOrGuidEmpty(listProductiveGroupByItem[indexConfig - 1].ProductItemID))
                                {
                                    sumPriceSubsidy = listProductiveByProfile.Where(x =>
                                    x.PriceSubsidy != null &&
                                    x.ProductItemID == listProductiveGroupByItem[indexConfig - 1].ProductItemID).Sum(x => x.PriceSubsidy.Value);
                                }
                            }
                        }

                        item = new ElementFormula(objformular, sumPriceSubsidy, 0);
                        listElementFormula.Add(item);
                        formula.Remove(objformular);
                    }
                    #endregion
                }
            }

            #endregion

            #region Số tiền và ngày kết thúc bảo hiểm tự nguyện theo loại
            //[26/12/2018][bang.nguyen][101989][Modify Func]
            //Số tiền và ngày kết thúc bảo hiểm tự nguyện theo loại
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN23_INS_VOLUNTARYINSINFO_.ToString(), new string[] { "_MONTHLYPAID", "_ENDDATE" }))
            {
                var strStartsWith = PayrollElement.DYN23_INS_VOLUNTARYINSINFO_.ToString();
                var strEndWith = "_MONTHLYPAID";
                var strEndWithEndDate = "_ENDDATE";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                List<string> ListFormulaByEndDate = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWithEndDate)).Distinct().ToList();

                string status = string.Empty;
                string status2 = string.Empty;
                dataComputeSer.GetDicVoluntaryInsInfo(TotalData600, CutOffDuration, ref status);
                string nameTableGetData = "listCat_VoluntaryInsType";

                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listCat_VoluntaryInsType = dataComputeSer.GetVoluntaryInsType(ref status2);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }


                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN23_INS_VOLUNTARYINSINFO_.ToString() + ") ";
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                    foreach (var formulaitem in ListFormulaByEndDate)
                    {
                        item = new ElementFormula(formulaitem, "", 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else if (!string.IsNullOrEmpty(status2))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN23_INS_VOLUNTARYINSINFO_.ToString() + ") ";
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                    foreach (var formulaitem in ListFormulaByEndDate)
                    {
                        item = new ElementFormula(formulaitem, "", 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else
                {
                    var listVoluntaryInsInfoByProfileDic = TotalData600.dicVoluntaryInsInfo.GetValueOrNew(profileItem.ID);
                    var listCat_VoluntaryInsType = TotalData600.listCat_VoluntaryInsType.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                    var listVoluntaryInsInfo = listVoluntaryInsInfoByProfileDic
                            .Where(s => s.ProfieldID == profileItem.ID && s.StartDate <= CutOffDuration.DateEnd && (s.EndDate == null || s.EndDate >= CutOffDuration.DateStart)).ToList();
                    if (listCat_VoluntaryInsType.Count > 0 && listVoluntaryInsInfo.Count > 0)
                    {
                        //cac enum tien theo loai bảo hiểm
                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            double monthlyPaid = 0;
                            var codeVoluntaryInsType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");

                            var objVoluntaryInsType = listCat_VoluntaryInsType.Where(s => s.Code == codeVoluntaryInsType).FirstOrDefault();
                            if (objVoluntaryInsType != null)
                            {
                                var objVoluntaryInsInfo = listVoluntaryInsInfo.Where(s => s.VoluntaryInsTypeID == objVoluntaryInsType.ID).OrderByDescending(s => s.StartDate).FirstOrDefault();
                                if (objVoluntaryInsInfo != null && objVoluntaryInsInfo.MonthlyPaid != null)
                                {
                                    monthlyPaid = objVoluntaryInsInfo.MonthlyPaid.Value;
                                }
                            }

                            item = new ElementFormula(_formula, monthlyPaid, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                        //ngày kết thúc theo loại bảo hiểm
                        foreach (var formulaitem in ListFormulaByEndDate)
                        {
                            var _formula = formulaitem;
                            DateTime endDate = DateTime.MinValue;
                            bool isHaveValue = false;
                            var codeVoluntaryInsType = _formula.Replace(strStartsWith, "").Replace(strEndWithEndDate, "");
                            var objVoluntaryInsType = listCat_VoluntaryInsType.Where(s => s.Code == codeVoluntaryInsType).FirstOrDefault();
                            if (objVoluntaryInsType != null)
                            {
                                var objVoluntaryInsInfo = listVoluntaryInsInfo.Where(s => s.VoluntaryInsTypeID == objVoluntaryInsType.ID).OrderByDescending(s => s.StartDate).FirstOrDefault();
                                if (objVoluntaryInsInfo != null && objVoluntaryInsInfo.EndDate != null)
                                {
                                    endDate = objVoluntaryInsInfo.EndDate.Value;
                                    isHaveValue = true;
                                }
                            }
                            if (isHaveValue)
                            {
                                item = new ElementFormula(_formula, endDate, 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(_formula, "", 0);
                                listElementFormula.Add(item);
                            }

                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }

                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                        foreach (var formulaitem in ListFormulaByEndDate)
                        {
                            item = new ElementFormula(formulaitem, "", 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
            }
            #endregion

            #region Số ngày, giờ quyết toán phép hàng tháng theo loại
            // [31/12/2018][bang.nguyen][102248][modify]
            // Số ngày, giờ quyết toán phép hàng tháng theo loại
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN25_ATT_PAYMENTLEAVE_.ToString(), new string[] { "_FORDAY", "_FORHOUR" }))
            {
                var strStartsWith = PayrollElement.DYN25_ATT_PAYMENTLEAVE_.ToString();
                var strEndWith = "_FORDAY";
                var strEndWithForHour = "_FORHOUR";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                List<string> ListFormulaByForHour = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWithForHour)).Distinct().ToList();

                string status = string.Empty;
                string nameTableGetData = "listAtt_PaymentLeave";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.listAtt_PaymentLeave = dataComputeSer.GetPaymentLeave(TotalData600, CutOffDuration.MonthYear, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN25_ATT_PAYMENTLEAVE_.ToString() + ") ";

                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                    foreach (var formulaitem in ListFormulaByForHour)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else
                {
                    var listPaymentLeaveByMonth = TotalData600.listAtt_PaymentLeave.Where(s => s.ProfileID == profileItem.ID && s.MonthYear == CutOffDuration.MonthYear).ToList();
                    if (listPaymentLeaveByMonth.Count > 0)
                    {
                        //cac enum lay giá trị theo loại ngày
                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            double valueDay = 0;
                            var enumDay = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");

                            if (!string.IsNullOrEmpty(enumDay))
                            {
                                var objPaymentLeave = listPaymentLeaveByMonth.Where(s => s.Type == enumDay && s.Unit == UnitTime.E_DAY.ToString()).FirstOrDefault();
                                if (objPaymentLeave != null && objPaymentLeave.Value != null)
                                {
                                    valueDay = objPaymentLeave.Value.Value;
                                }
                            }

                            item = new ElementFormula(_formula, valueDay, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                        //cac enum lay giá trị theo loại giờ
                        foreach (var formulaitem in ListFormulaByForHour)
                        {
                            var _formula = formulaitem;
                            double valueHour = 0;
                            var enumHour = _formula.Replace(strStartsWith, "").Replace(strEndWithForHour, "");
                            if (!string.IsNullOrEmpty(enumHour))
                            {
                                var objPaymentLeave = listPaymentLeaveByMonth.Where(s => s.Type == enumHour && s.Unit == UnitTime.E_HOUR.ToString()).FirstOrDefault();
                                if (objPaymentLeave != null && objPaymentLeave.Value != null)
                                {
                                    valueHour = objPaymentLeave.Value.Value;
                                }
                            }
                            item = new ElementFormula(_formula, valueHour, 0);
                            listElementFormula.Add(item);

                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }

                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                        foreach (var formulaitem in ListFormulaByForHour)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
            }
            #endregion

            #region [12/03/2019][tung.tran][103561] Đếm số người thân của từng nhân viên theo loại quan hệ và tuổi
            // Cách đặt CT: DYN27_COUNT_HRE_RELATIVE_ + "Loại quan hệ" + "_" + "Loại datetime so sánh" + "_" + "Chặn đầu" + "_" +  "Chặn cuối"
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN27_COUNT_HRE_RELATIVE_.ToString(), string.Empty))
            {
                string[] listFormulaRelative = formula.Where(m => m.StartsWith(PayrollElement.DYN27_COUNT_HRE_RELATIVE_.ToString())).ToArray();

                string status = string.Empty;
                dataComputeSer.GetDicRelatives(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN27_COUNT_HRE_RELATIVE_.ToString() + ") ";

                    foreach (var itemRelativeFormula in listFormulaRelative)
                    {
                        item = new ElementFormula(itemRelativeFormula, 0, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemRelativeFormula);
                    }
                }
                else
                {
                    var listRelativesByProfileDic = TotalData600.dicRelatives.GetValueOrNew(profileItem.ID);

                    var lstRelatives = new List<Hre_RelativesEntity>();
                    var ListRelativesByProFile = listRelativesByProfileDic.Where(s => s.ProfileID == profileItem.ID && !string.IsNullOrEmpty(s.YearOfBirth)).ToList();
                    //xử lý format lại ngay tháng khi ngay tháng là chuỗi string
                    foreach (var objRelatives in ListRelativesByProFile)
                    {
                        var _dictionnary = Common.GetDateFromString(objRelatives.YearOfBirth, '/');
                        if (_dictionnary.ContainsKey(true))
                        {
                            var _YearOfBirth = _dictionnary[true];
                            if (_YearOfBirth <= CutOffDuration.DateEnd)
                            {
                                objRelatives.YearOfBirthDateTime = _YearOfBirth;
                                lstRelatives.Add(objRelatives);
                            }
                        }
                    }

                    foreach (var itemRelativeFormula in listFormulaRelative)
                    {
                        int countRelative = 0;

                        #region Xử lý cắt chuỗi + Kiểm tra công thức

                        string[] arrItem = itemRelativeFormula.Replace(PayrollElement.DYN27_COUNT_HRE_RELATIVE_.ToString(), "").Split('_');

                        bool IsConfigError = false;

                        if (arrItem == null && arrItem.Length < 4)
                        {
                            // Cấu hình sai
                            IsConfigError = true;
                        }

                        // Cấu hình tuổi lớn nhất
                        var maxAgeStr = arrItem[arrItem.Length - 1];
                        int maxAge = 0;
                        if (!IsConfigError && !int.TryParse(maxAgeStr, out maxAge))
                        {
                            // Cấu hình sai
                            IsConfigError = true;
                        }

                        // Cấu hình tuổi nhỏ nhất
                        var minAgeStr = arrItem[arrItem.Length - 2];
                        int minAge = 0;
                        if (!IsConfigError && !int.TryParse(minAgeStr, out minAge))
                        {
                            // Cấu hình sai
                            IsConfigError = true;
                        }

                        // Cấu hình loại datetime so sánh
                        var typeDateTimeCompare = arrItem[arrItem.Length - 3];
                        if (!IsConfigError && typeDateTimeCompare != "DAY" && typeDateTimeCompare != "MONTH" && typeDateTimeCompare != "YEAR")
                        {
                            // Cấu hình sai
                            IsConfigError = true;
                        }

                        var codeTypeRelative = itemRelativeFormula.Replace(PayrollElement.DYN27_COUNT_HRE_RELATIVE_.ToString(), "").Replace("_" + typeDateTimeCompare + "_" + minAgeStr + "_" + maxAgeStr, "");
                        var objRelativeByCode = TotalDataAll.listCatRelativeType.Where(m => m.Code == codeTypeRelative).FirstOrDefault();
                        if (!IsConfigError && objRelativeByCode == null)
                        {
                            // Cấu hình sai
                            IsConfigError = true;
                        }

                        if (IsConfigError)
                        {
                            item = new ElementFormula(itemRelativeFormula, 0, 0);
                            listElementFormula.Add(item);
                            continue;
                        }

                        #endregion


                        if (typeDateTimeCompare == "DAY")
                        {
                            countRelative = lstRelatives.Where(m =>
                                     m.RelativeTypeID == objRelativeByCode.ID
                                     && m.YearOfBirthDateTime <= CutOffDuration.DateEnd
                                     && (m.YearOfLose == null || (m.YearOfLose != null && m.YearOfLose >= CutOffDuration.DateStart))
                                     && (CutOffDuration.DateEnd - m.YearOfBirthDateTime).TotalDays >= minAge
                                     && (CutOffDuration.DateEnd - m.YearOfBirthDateTime).TotalDays <= maxAge
                                     ).Count();
                        }
                        else if (typeDateTimeCompare == "MONTH")
                        {
                            countRelative = lstRelatives.Where(m =>
                                    m.RelativeTypeID == objRelativeByCode.ID
                                    && m.YearOfBirthDateTime <= CutOffDuration.DateEnd
                                    && (m.YearOfLose == null || (m.YearOfLose != null && m.YearOfLose >= CutOffDuration.DateStart))
                                    && Common.CalMonthDiff(CutOffDuration.DateEnd, m.YearOfBirthDateTime) >= minAge
                                    && Common.CalMonthDiff(CutOffDuration.DateEnd, m.YearOfBirthDateTime) <= maxAge
                                    ).Count();
                        }
                        else if (typeDateTimeCompare == "YEAR")
                        {
                            countRelative = lstRelatives.Where(m =>
                                    m.RelativeTypeID == objRelativeByCode.ID
                                    && m.YearOfBirthDateTime <= CutOffDuration.DateEnd
                                    && (m.YearOfLose == null || (m.YearOfLose != null && m.YearOfLose >= CutOffDuration.DateStart))
                                    && (CutOffDuration.DateEnd.Year - m.YearOfBirthDateTime.Year) >= minAge
                                    && (CutOffDuration.DateEnd.Year - m.YearOfBirthDateTime.Year) <= maxAge
                                    ).Count();
                        }

                        item = new ElementFormula(itemRelativeFormula, countRelative, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemRelativeFormula);
                    }
                }
            }

            #endregion

            #region [19/03/2019][tung.tran][103652] Lấy enum nơi đi, nơi đến của phụ cấp phát sinh (Động theo mã phần tử)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN28_SAL_UNUSUALALLOWANCE_PLACEFROM_.ToString(), string.Empty))
            {
                string[] listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN28_SAL_UNUSUALALLOWANCE_PLACEFROM_.ToString())).ToArray();

                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN28_SAL_UNUSUALALLOWANCE_PLACEFROM_.ToString() + ") ";
                    foreach (var itemFormula in listFormula)
                    {
                        item = new ElementFormula(itemFormula, string.Empty, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                    foreach (var itemFormula in listFormula)
                    {
                        var placeFrom = string.Empty;
                        var placeTo = string.Empty;
                        var codeUnusualAllowanceCfg = itemFormula.Replace(PayrollElement.DYN28_SAL_UNUSUALALLOWANCE_PLACEFROM_.ToString(), "");
                        var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(s => s.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                        if (objUnusualAllowanceCfg != null)
                        {


                            var objUnusualAllwance = listUnusualAllowanceProfile.Where(x => x.ProfileID == profileItem.ID
                                                                             && x.MonthStart <= CutOffDuration.DateEnd
                                                                             && (x.MonthEnd == null || (x.MonthEnd != null && x.MonthEnd >= CutOffDuration.DateStart))
                                                                             && x.UnusualEDTypeID == objUnusualAllowanceCfg.ID).OrderByDescending(x => x.MonthStart).FirstOrDefault();
                            if (objUnusualAllwance != null)
                            {
                                placeFrom = objUnusualAllwance.PlaceFrom;
                            }
                        }

                        item = new ElementFormula(itemFormula, placeFrom, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region [19/03/2019][tung.tran][103652] Lấy enum nơi đi, nơi đến của phụ cấp phát sinh (Động theo mã phần tử)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN29_SAL_UNUSUALALLOWANCE_PLACETO_.ToString(), string.Empty))
            {
                string[] listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN29_SAL_UNUSUALALLOWANCE_PLACETO_.ToString())).ToArray();

                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN29_SAL_UNUSUALALLOWANCE_PLACETO_.ToString() + ") ";
                    foreach (var itemFormula in listFormula)
                    {
                        item = new ElementFormula(itemFormula, string.Empty, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                    foreach (var itemFormula in listFormula)
                    {
                        var placeFrom = string.Empty;
                        var placeTo = string.Empty;
                        var codeUnusualAllowanceCfg = itemFormula.Replace(PayrollElement.DYN29_SAL_UNUSUALALLOWANCE_PLACETO_.ToString(), "");
                        var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(s => s.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                        if (objUnusualAllowanceCfg != null)
                        {

                            var objUnusualAllwance = listUnusualAllowanceProfile.Where(x => x.ProfileID == profileItem.ID
                                                                             && x.MonthStart <= CutOffDuration.DateEnd
                                                                             && (x.MonthEnd == null || (x.MonthEnd != null && x.MonthEnd >= CutOffDuration.DateStart))
                                                                             && x.UnusualEDTypeID == objUnusualAllowanceCfg.ID).OrderByDescending(x => x.MonthStart).FirstOrDefault();
                            if (objUnusualAllwance != null)
                            {
                                placeTo = objUnusualAllwance.PlaceTo;
                            }
                        }

                        item = new ElementFormula(itemFormula, placeTo, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
            }

            #endregion

            #region [19/03/2019][tung.tran][103669] Kiểm tra có tồn tại đăng dòng ký nghỉ trong tháng hay không ? (Kiểm tra field DateStart) 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN30_EXIST_ATT_LEAVEDAY_DATESTART_.ToString(), string.Empty))
            {
                var lisLeaveDayNotStatusByProfileDic = TotalDataAll.dicLeaveDayNotStatus.GetValueOrNew(profileItem.ID);

                var strLeaveDayStatus = string.Empty;
                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_ANNUALDETAIL_LEAVEDAYSTATUS.ToString()).FirstOrDefault();
                if (objAllSetting != null)
                {
                    strLeaveDayStatus = objAllSetting.Value1;
                }
                string[] listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN30_EXIST_ATT_LEAVEDAY_DATESTART_.ToString())).ToArray();

                foreach (var itemFormula in listFormula)
                {
                    bool isExist = false;

                    var codeUnusualAllowanceCfg = itemFormula.Replace(PayrollElement.DYN30_EXIST_ATT_LEAVEDAY_DATESTART_.ToString(), "");
                    if (codeUnusualAllowanceCfg == "FULL_LEAVEDAYTYPE")
                    {
                        var objLeaveDay = lisLeaveDayNotStatusByProfileDic.Where(x => x.ProfileID == profileItem.ID
                                                                   && x.DateStart >= CutOffDuration.DateStart
                                                                   && x.DateStart <= CutOffDuration.DateEnd
                                                                   && x.Status == strLeaveDayStatus
                                                                   ).FirstOrDefault();
                        if (objLeaveDay != null)
                        {
                            isExist = true;
                        }
                    }
                    else
                    {
                        var objLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                        if (objLeaveDayType != null)
                        {
                            var objLeaveDay = lisLeaveDayNotStatusByProfileDic.Where(x => x.ProfileID == profileItem.ID
                                                                    && x.DateStart >= CutOffDuration.DateStart
                                                                    && x.DateStart <= CutOffDuration.DateEnd
                                                                    && x.Status == strLeaveDayStatus
                                                                    && x.LeaveDayTypeID == objLeaveDayType.ID
                                                                    ).FirstOrDefault();
                            if (objLeaveDay != null)
                            {
                                isExist = true;
                            }
                        }
                    }
                    item = new ElementFormula(itemFormula, isExist, 0);
                    listElementFormula.Add(item);
                    formula.Remove(itemFormula);
                }
            }
            #endregion

            #region [19/03/2019][tung.tran][103669] Kiểm tra có tồn tại đăng dòng ký nghỉ trong tháng hay không ? (Kiểm tra field DateEnd) 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN31_EXIST_ATT_LEAVEDAY_DATEEND_.ToString(), string.Empty))
            {
                var lisLeaveDayNotStatusByProfileDic = TotalDataAll.dicLeaveDayNotStatus.GetValueOrNew(profileItem.ID);
                var strLeaveDayStatus = string.Empty;
                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_ANNUALDETAIL_LEAVEDAYSTATUS.ToString()).FirstOrDefault();
                if (objAllSetting != null)
                {
                    strLeaveDayStatus = objAllSetting.Value1;
                }
                string[] listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN31_EXIST_ATT_LEAVEDAY_DATEEND_.ToString())).ToArray();

                foreach (var itemFormula in listFormula)
                {

                    bool isExist = false;
                    var codeUnusualAllowanceCfg = itemFormula.Replace(PayrollElement.DYN31_EXIST_ATT_LEAVEDAY_DATEEND_.ToString(), "");
                    if (codeUnusualAllowanceCfg == "FULL_LEAVEDAYTYPE")
                    {
                        // TH1: Kiểm tra all loại ngày nghỉ => Chỉ cần có 1 dòng => Có tồn tại
                        var objLeaveDay = lisLeaveDayNotStatusByProfileDic.Where(x => x.ProfileID == profileItem.ID
                                                                    && x.DateEnd != null
                                                                    && x.DateEnd >= CutOffDuration.DateStart
                                                                    && x.DateEnd <= CutOffDuration.DateEnd
                                                                    && x.Status == strLeaveDayStatus
                                                                    ).FirstOrDefault();
                        if (objLeaveDay != null)
                        {
                            isExist = true;
                        }
                    }
                    else
                    {
                        // TH2: Kiểm tra theo loại ngày nghỉ => Chỉ cần có 1 dòng => Có tồn tại
                        var objLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                        if (objLeaveDayType != null)
                        {
                            var objLeaveDay = lisLeaveDayNotStatusByProfileDic.Where(x => x.ProfileID == profileItem.ID
                                                                    && x.DateEnd != null
                                                                    && x.DateEnd >= CutOffDuration.DateStart
                                                                    && x.DateEnd <= CutOffDuration.DateEnd
                                                                    && x.Status == strLeaveDayStatus
                                                                    && x.LeaveDayTypeID == objLeaveDayType.ID
                                                                    ).FirstOrDefault();
                            if (objLeaveDay != null)
                            {
                                isExist = true;
                            }
                        }
                    }
                    item = new ElementFormula(itemFormula, isExist, 0);
                    listElementFormula.Add(item);
                    formula.Remove(itemFormula);
                }
            }
            #endregion

            #region [20/03/2019][tung.tran][103644] Đếm số ngày có ca làm việc của kỳ ứng công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN32_COUNT_ATT_ROSTER_ADPAY_.ToString(), "_BYCODESHIFT"))
            {


                List<string> listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN32_COUNT_ATT_ROSTER_ADPAY_.ToString()) && m.EndsWith("_BYCODESHIFT")).Distinct().ToList();

                var listRosterByProfileDic = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);
                // Ds ca Roster theo profileID và kỳ ứng công
                var listRosterByProfile = listRosterByProfileDic.Where(m => m.ProfileID == profileItem.ID
                                            && CutOffDuration.AdPayTo != null
                                            && CutOffDuration.AdPayFrom != null
                                            && m.DateStart <= CutOffDuration.AdPayTo
                                            && m.DateEnd >= CutOffDuration.AdPayFrom
                                            && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                //DS RosterGroup của kỳ công
                var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s =>
                                        s.Status == RosterStatus.E_APPROVED.ToString()
                                        && CutOffDuration.AdPayTo != null
                                        && CutOffDuration.AdPayFrom != null
                                        && s.DateStart <= CutOffDuration.AdPayTo
                                        && s.DateEnd >= CutOffDuration.AdPayFrom).ToList();


                var adPayFrom = DateTime.MinValue;
                var adPayTo = DateTime.MinValue;
                if (CutOffDuration.AdPayFrom != null)
                {
                    adPayFrom = CutOffDuration.AdPayFrom.Value;
                }

                if (CutOffDuration.AdPayFrom != null)
                {
                    adPayTo = CutOffDuration.AdPayTo.Value;
                }

                //Lịch làm việc của tháng N
                var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                    adPayFrom,
                    adPayTo,
                    profileItem.ID,
                    listRosterByProfile,
                    listRosterGroup,
                    TotalDataAll.listRosterGroupByOrganization,
                    TotalDataAll.listRosterGroupType,
                    TotalDataAll.listOrgStructure,
                    TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                            .Where(s => s.ProfileID == profileItem.ID
                            && s.DateEffective <= adPayTo
                            && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                            .FirstOrDefault());

                if (lstDailyShift.Count > 0)
                {
                    foreach (var itemFormula in listFormula)
                    {
                        int countShift = 0;
                        var codeShift = itemFormula.Replace(PayrollElement.DYN32_COUNT_ATT_ROSTER_ADPAY_.ToString(), "").Replace("_BYCODESHIFT", "");
                        var objShift = TotalDataAll.listCat_Shift.FirstOrDefault(x => x.Code == codeShift);

                        if (objShift != null)
                        {
                            var adPayFromTemp = adPayFrom;
                            while (adPayFromTemp <= adPayTo)
                            {
                                if (lstDailyShift.ContainsKey(adPayFromTemp) && lstDailyShift[adPayFromTemp] != null)
                                {
                                    var listRoterByDate = lstDailyShift[adPayFromTemp];
                                    countShift += listRoterByDate.Where(s => s != null && s != Guid.Empty && s == objShift.ID).Count();
                                }
                                adPayFromTemp = adPayFromTemp.AddDays(1);
                            }
                        }

                        item = new ElementFormula(itemFormula, countShift, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    foreach (var itemFormula in listFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region [20/03/2019][tung.tran][103644] Đếm số ngày có ca làm việc của kỳ trừ công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN33_COUNT_ATT_ROSTER_BACKPAY_.ToString(), "_BYCODESHIFT"))
            {
                List<string> listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN33_COUNT_ATT_ROSTER_BACKPAY_.ToString()) && m.EndsWith("_BYCODESHIFT")).Distinct().ToList();

                var listRosterByProfileDic = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);

                // Ds ca Roster theo profileID và kỳ ứng công
                var listRosterByProfile = listRosterByProfileDic.Where(m => m.ProfileID == profileItem.ID
                                            && CutOffDuration.BackPayTo != null
                                            && CutOffDuration.BackPayFrom != null
                                            && m.DateStart <= CutOffDuration.BackPayTo
                                            && m.DateEnd >= CutOffDuration.BackPayFrom
                                            && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                //DS RosterGroup của kỳ công
                var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s =>
                                        s.Status == RosterStatus.E_APPROVED.ToString()
                                        && CutOffDuration.BackPayTo != null
                                        && CutOffDuration.BackPayFrom != null
                                        && s.DateStart <= CutOffDuration.BackPayTo
                                        && s.DateEnd >= CutOffDuration.BackPayFrom).ToList();


                var backPayFrom = DateTime.MinValue;
                var backPayTo = DateTime.MinValue;
                if (CutOffDuration.BackPayFrom != null)
                {
                    backPayFrom = CutOffDuration.BackPayFrom.Value;
                }

                if (CutOffDuration.BackPayTo != null)
                {
                    backPayTo = CutOffDuration.BackPayTo.Value;
                }

                //Lịch làm việc của tháng N
                var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                    backPayFrom,
                    backPayTo,
                    profileItem.ID,
                    listRosterByProfile,
                    listRosterGroup,
                    TotalDataAll.listRosterGroupByOrganization,
                    TotalDataAll.listRosterGroupType,
                    TotalDataAll.listOrgStructure,
                    TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                            .Where(s => s.ProfileID == profileItem.ID
                            && s.DateEffective <= backPayTo
                            && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                            .FirstOrDefault());

                if (lstDailyShift.Count > 0)
                {
                    foreach (var itemFormula in listFormula)
                    {
                        int countShift = 0;
                        var codeShift = itemFormula.Replace(PayrollElement.DYN33_COUNT_ATT_ROSTER_BACKPAY_.ToString(), "").Replace("_BYCODESHIFT", "");
                        var objShift = TotalDataAll.listCat_Shift.FirstOrDefault(x => x.Code == codeShift);

                        if (objShift != null)
                        {
                            var backPayFromTemp = backPayFrom;
                            while (backPayFromTemp <= backPayTo)
                            {
                                if (lstDailyShift.ContainsKey(backPayFromTemp) && lstDailyShift[backPayFromTemp] != null)
                                {
                                    var listRoterByDate = lstDailyShift[backPayFromTemp];
                                    countShift += listRoterByDate.Where(s => s != null && s != Guid.Empty && s == objShift.ID).Count();
                                }
                                backPayFromTemp = backPayFromTemp.AddDays(1);
                            }
                        }
                        item = new ElementFormula(itemFormula, countShift, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    foreach (var itemFormula in listFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region [17/04/2019][Tung.Tran][Modify][104452]: Số ngày có ca làm việc sau khi thay đổi lương trong kỳ ứng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN36_SAL_COUNTDAYS_AFTER_CHANGESALARY_ADPAYDURATION_.ToString(), "_BYCODESHIFT"))
            {
                List<string> listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN36_SAL_COUNTDAYS_AFTER_CHANGESALARY_ADPAYDURATION_.ToString()) && m.EndsWith("_BYCODESHIFT")).Distinct().ToList();
                if (!(CutOffDuration != null && CutOffDuration.AdPayFrom != null && CutOffDuration.AdPayTo != null))
                {
                    foreach (var itemFormula in listFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    foreach (var itemFormula in listFormula)
                    {
                        int countShitftAfter = 0;

                        var codeShift = itemFormula.Replace(PayrollElement.DYN36_SAL_COUNTDAYS_AFTER_CHANGESALARY_ADPAYDURATION_.ToString(), "").Replace("_BYCODESHIFT", "");
                        var objShift = TotalDataAll.listCat_Shift.FirstOrDefault(x => x.Code == codeShift);
                        if (objShift != null)
                        {
                            var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);

                            // B1: Xác định ngày thay đổi lương trong kỳ ứng
                            if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic, CutOffDuration.AdPayFrom.Value, CutOffDuration.AdPayTo.Value, profileItem.ID))
                            {
                                //Ngày thay đổi lương trong kỳ ứng
                                DateTime dateChangeBasicSalary = listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.AdPayTo).OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                                // Nếu có thay đổi => Phần tử đi tính
                                var listRosterByProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID).Where(m => m.DateStart <= CutOffDuration.AdPayTo.Value && m.DateEnd >= CutOffDuration.AdPayFrom.Value && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                                //rostergroup thang N
                                var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.AdPayTo.Value && s.DateEnd >= CutOffDuration.AdPayFrom.Value).ToList();

                                // B2: Hàm này dùng để lấy ca làm việc của nhân viên từ ngày đến ngày truyền vào
                                var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                                    CutOffDuration.AdPayFrom.Value,
                                    CutOffDuration.AdPayTo.Value,
                                    profileItem.ID,
                                    listRosterByProfile,
                                    listRosterGroup,
                                    TotalDataAll.listRosterGroupByOrganization,
                                    TotalDataAll.listRosterGroupType,
                                    TotalDataAll.listOrgStructure,
                                    TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                            .Where(s => s.ProfileID == profileItem.ID
                                            && s.DateEffective <= CutOffDuration.AdPayTo.Value
                                            && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                            .FirstOrDefault());

                                countShitftAfter = lstDailyShift.Where(x =>
                                             x.Key >= dateChangeBasicSalary
                                             && x.Key <= CutOffDuration.AdPayTo.Value
                                             && x.Value != null && x.Value.Contains(objShift.ID)).Count();
                            }
                        }

                        item = new ElementFormula(itemFormula, countShitftAfter, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
            }

            #endregion

            #region [17/04/2019][Tung.Tran][Modify][104452]: Số ngày có ca làm việc trước khi thay đổi lương trong kỳ ứng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN37_SAL_COUNTDAYS_BEFORE_CHANGESALARY_ADPAYDURATION_.ToString(), "_BYCODESHIFT"))
            {
                List<string> listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN37_SAL_COUNTDAYS_BEFORE_CHANGESALARY_ADPAYDURATION_.ToString()) && m.EndsWith("_BYCODESHIFT")).Distinct().ToList();
                if (!(CutOffDuration != null && CutOffDuration.AdPayFrom != null && CutOffDuration.AdPayTo != null))
                {
                    foreach (var itemFormula in listFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    foreach (var itemFormula in listFormula)
                    {
                        int countShitftBefore = 0;

                        var codeShift = itemFormula.Replace(PayrollElement.DYN37_SAL_COUNTDAYS_BEFORE_CHANGESALARY_ADPAYDURATION_.ToString(), "").Replace("_BYCODESHIFT", "");
                        var objShift = TotalDataAll.listCat_Shift.FirstOrDefault(x => x.Code == codeShift);
                        if (objShift != null)
                        {
                            var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);

                            // B1: Xác định ngày thay đổi lương trong kỳ ứng
                            if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic, CutOffDuration.AdPayFrom.Value, CutOffDuration.AdPayTo.Value, profileItem.ID))
                            {
                                //Ngày thay đổi lương trong kỳ ứng
                                DateTime dateChangeBasicSalary = listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.AdPayTo).OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                                // Nếu có thay đổi => Phần tử đi tính
                                var listRosterByProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID).Where(m => m.DateStart <= CutOffDuration.AdPayTo.Value && m.DateEnd >= CutOffDuration.AdPayFrom.Value && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                                //rostergroup thang N
                                var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.AdPayTo.Value && s.DateEnd >= CutOffDuration.AdPayFrom.Value).ToList();

                                // B2: Hàm này dùng để lấy ca làm việc của nhân viên từ ngày đến ngày truyền vào
                                var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                                    CutOffDuration.AdPayFrom.Value,
                                    CutOffDuration.AdPayTo.Value,
                                    profileItem.ID,
                                    listRosterByProfile,
                                    listRosterGroup,
                                    TotalDataAll.listRosterGroupByOrganization,
                                    TotalDataAll.listRosterGroupType,
                                    TotalDataAll.listOrgStructure,
                                    TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                            .Where(s => s.ProfileID == profileItem.ID
                                            && s.DateEffective <= CutOffDuration.AdPayTo.Value
                                            && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                            .FirstOrDefault());

                                countShitftBefore = lstDailyShift.Where(x =>
                                        x.Key >= CutOffDuration.AdPayFrom.Value
                                        && x.Key < dateChangeBasicSalary
                                        && x.Value != null && x.Value.Contains(objShift.ID)).Count();
                            }
                        }

                        item = new ElementFormula(itemFormula, countShitftBefore, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
            }

            #endregion

            #region [23/05/2019] [Hien.Le][Modify] [0105518] Tính số con nhỏ trong danh sách người thân theo loại quan hệ và tuổi, dựa vào ngày bắt đầu chu kỳ lương

            // Cách đặt CT: DYN39_COUNT_HRE_RELATIVE_ + "Loại quan hệ" + "_" + "Loại datetime so sánh" + "_" + "Chặn đầu" + "_" +  "Chặn cuối"
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN39_COUNT_HRE_RELATIVE_.ToString(), string.Empty))
            {
                string[] listFormulaRelative = formula.Where(m => m.StartsWith(PayrollElement.DYN39_COUNT_HRE_RELATIVE_.ToString())).ToArray();

                string status = string.Empty;
                dataComputeSer.GetDicRelatives(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN39_COUNT_HRE_RELATIVE_.ToString() + ") ";

                    foreach (var itemRelativeFormula in listFormulaRelative)
                    {
                        item = new ElementFormula(itemRelativeFormula, 0, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemRelativeFormula);
                    }
                }
                else
                {
                    var listRelativesByProfileDic = TotalData600.dicRelatives.GetValueOrNew(profileItem.ID);

                    var lstRelatives = new List<Hre_RelativesEntity>();
                    var ListRelativesByProFile = listRelativesByProfileDic.Where(s => s.ProfileID == profileItem.ID && !string.IsNullOrEmpty(s.YearOfBirth)).ToList();
                    //xử lý format lại ngay tháng khi ngay tháng là chuỗi string
                    foreach (var objRelatives in ListRelativesByProFile)
                    {
                        var _dictionnary = Common.GetDateFromString(objRelatives.YearOfBirth, '/');
                        if (_dictionnary.ContainsKey(true))
                        {
                            var _YearOfBirth = _dictionnary[true];
                            if (_YearOfBirth <= CutOffDuration.DateStart)
                            {
                                objRelatives.YearOfBirthDateTime = _YearOfBirth;
                                lstRelatives.Add(objRelatives);
                            }
                        }
                    }

                    foreach (var itemRelativeFormula in listFormulaRelative)
                    {
                        int countRelative = 0;

                        #region Xử lý cắt chuỗi + Kiểm tra công thức

                        string[] arrItem = itemRelativeFormula.Replace(PayrollElement.DYN39_COUNT_HRE_RELATIVE_.ToString(), "").Split('_');

                        bool IsConfigError = false;

                        if (arrItem == null && arrItem.Length < 4)
                        {
                            // Cấu hình sai
                            IsConfigError = true;
                        }

                        // Cấu hình tuổi lớn nhất
                        var maxAgeStr = arrItem[arrItem.Length - 1];
                        int maxAge = 0;
                        if (!IsConfigError && !int.TryParse(maxAgeStr, out maxAge))
                        {
                            // Cấu hình sai
                            IsConfigError = true;
                        }

                        // Cấu hình tuổi nhỏ nhất
                        var minAgeStr = arrItem[arrItem.Length - 2];
                        int minAge = 0;
                        if (!IsConfigError && !int.TryParse(minAgeStr, out minAge))
                        {
                            // Cấu hình sai
                            IsConfigError = true;
                        }

                        // Cấu hình loại datetime so sánh
                        var typeDateTimeCompare = arrItem[arrItem.Length - 3];
                        if (!IsConfigError && typeDateTimeCompare != "DAY" && typeDateTimeCompare != "MONTH" && typeDateTimeCompare != "YEAR")
                        {
                            // Cấu hình sai
                            IsConfigError = true;
                        }

                        var codeTypeRelative = itemRelativeFormula.Replace(PayrollElement.DYN39_COUNT_HRE_RELATIVE_.ToString(), "").Replace("_" + typeDateTimeCompare + "_" + minAgeStr + "_" + maxAgeStr, "");
                        var objRelativeByCode = TotalDataAll.listCatRelativeType.Where(m => m.Code == codeTypeRelative).FirstOrDefault();
                        if (!IsConfigError && objRelativeByCode == null)
                        {
                            // Cấu hình sai
                            IsConfigError = true;
                        }

                        if (IsConfigError)
                        {
                            item = new ElementFormula(itemRelativeFormula, 0, 0);
                            listElementFormula.Add(item);
                            continue;
                        }

                        #endregion


                        if (typeDateTimeCompare == "DAY")
                        {
                            countRelative = lstRelatives.Where(m =>
                                     m.RelativeTypeID == objRelativeByCode.ID
                                     && m.YearOfBirthDateTime <= CutOffDuration.DateStart
                                     && (m.YearOfLose == null || (m.YearOfLose != null && m.YearOfLose >= CutOffDuration.DateStart))
                                     && (m.IDDateOfExpiry == null || (m.IDDateOfExpiry != null && m.IDDateOfExpiry > CutOffDuration.DateStart))
                                     && (CutOffDuration.DateStart - m.YearOfBirthDateTime).TotalDays >= minAge
                                     && (CutOffDuration.DateStart - m.YearOfBirthDateTime).TotalDays <= maxAge
                                     ).Count();
                        }
                        else if (typeDateTimeCompare == "MONTH")
                        {
                            countRelative = lstRelatives.Where(m =>
                                    m.RelativeTypeID == objRelativeByCode.ID
                                    && m.YearOfBirthDateTime <= CutOffDuration.DateStart
                                    && (m.YearOfLose == null || (m.YearOfLose != null && m.YearOfLose >= CutOffDuration.DateStart))
                                    && (m.IDDateOfExpiry == null || (m.IDDateOfExpiry != null && m.IDDateOfExpiry > CutOffDuration.DateStart))
                                    && Common.CalMonthDiff(CutOffDuration.DateStart, m.YearOfBirthDateTime) >= minAge
                                    && Common.CalMonthDiff(CutOffDuration.DateStart, m.YearOfBirthDateTime) <= maxAge
                                    ).Count();


                        }
                        else if (typeDateTimeCompare == "YEAR")
                        {
                            countRelative = lstRelatives.Where(m =>
                                    m.RelativeTypeID == objRelativeByCode.ID
                                    && m.YearOfBirthDateTime <= CutOffDuration.DateStart
                                    && (m.YearOfLose == null || (m.YearOfLose != null && m.YearOfLose >= CutOffDuration.DateStart))
                                    && (m.IDDateOfExpiry == null || (m.IDDateOfExpiry != null && m.IDDateOfExpiry > CutOffDuration.DateStart))
                                    && (CutOffDuration.DateStart.Year - m.YearOfBirthDateTime.Year) >= minAge
                                    && (CutOffDuration.DateStart.Year - m.YearOfBirthDateTime.Year) <= maxAge
                                    ).Count();
                        }

                        item = new ElementFormula(itemRelativeFormula, countRelative, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemRelativeFormula);
                    }
                }
            }

            #endregion

            #region Hien.Le [08/07/2019] [106932] Thêm phần tử số ngày nghỉ từng loại kỳ ứng công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN43_COUNT_ATT_ADPAYDURATION_LEAVEDAY_.ToString(), "_LEAVEDAYS"))
            {
                List<string> listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN43_COUNT_ATT_ADPAYDURATION_LEAVEDAY_.ToString()) && m.EndsWith("_LEAVEDAYS")).Distinct().ToList();

                string status = string.Empty;
                dataComputeSer.GetDicLeaveDayAdPay(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN43_COUNT_ATT_ADPAYDURATION_LEAVEDAY_.ToString() + ") ";

                    foreach (var itemFormula in listFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }

                else
                {
                    if (!(CutOffDuration != null && CutOffDuration.AdPayFrom != null && CutOffDuration.AdPayTo != null))
                    {
                        foreach (var itemFormula in listFormula)
                        {
                            item = new ElementFormula(itemFormula, 0, 0);
                            listElementFormula.Add(item);
                            formula.Remove(itemFormula);
                        }
                    }
                    else
                    {
                        var listRosterProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);

                        var listRosterByProfile = listRosterProfile.Where(m => m.ProfileID == profileItem.ID &&
                                                                                m.DateStart <= CutOffDuration.AdPayTo.Value &&
                                                                                m.DateEnd >= CutOffDuration.AdPayFrom.Value &&
                                                                                m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                        //rostergroup thang N
                        var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.AdPayTo.Value && s.DateEnd >= CutOffDuration.AdPayFrom.Value).ToList();
                        //lich lam viec thang N
                        var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                            CutOffDuration.AdPayFrom.Value,
                            CutOffDuration.AdPayTo.Value,
                            profileItem.ID,
                            listRosterByProfile,
                            listRosterGroup,
                            TotalDataAll.listRosterGroupByOrganization,
                            TotalDataAll.listRosterGroupType,
                            TotalDataAll.listOrgStructure,
                            TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                    .Where(s => s.ProfileID == profileItem.ID
                                    && s.DateEffective <= CutOffDuration.AdPayTo.Value
                                    && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                    .FirstOrDefault());

                        //Lấy cấu hình Ngày nghỉ được tính Ở trạng thái
                        var listStrLeaveDayStatus = new List<string>();
                        var strLeaveDayStatus = string.Empty;

                        var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_ANNUALDETAIL_LEAVEDAYSTATUS.ToString()).FirstOrDefault();

                        if (objAllSetting != null)
                        {
                            strLeaveDayStatus = objAllSetting.Value1;
                            if (!string.IsNullOrEmpty(strLeaveDayStatus))
                            {
                                listStrLeaveDayStatus = strLeaveDayStatus.Split(',').ToList();
                            }
                        }

                        foreach (var itemFormula in listFormula)
                        {
                            int countLeaveDay = 0;

                            var codeLeaveDayType = itemFormula.Replace(PayrollElement.DYN43_COUNT_ATT_ADPAYDURATION_LEAVEDAY_.ToString(), "").Replace("_LEAVEDAYS", "");

                            var objLeaveDayType = TotalDataAll.listLeavedayType.FirstOrDefault(x => x.Code == codeLeaveDayType);

                            if (objLeaveDayType != null)
                            {
                                //Lấy các dòng ngày nghỉ giao với kỳ ứng công Từ AdPayFrom đến AdPayTo của Att_CutOffDuration
                                var listLeaveDayByProfile = TotalData600.dicLeaveDayByAdPay.GetValueOrNew(profileItem.ID);

                                var listLeaveDayByAdPay = listLeaveDayByProfile.Where(p => p.DateEnd >= CutOffDuration.AdPayFrom.Value
                                                                                                            && p.DateStart <= CutOffDuration.AdPayTo.Value
                                                                                                            && p.LeaveDayTypeID == objLeaveDayType.ID
                                                                                                            && ((string.IsNullOrEmpty(strLeaveDayStatus) && p.Status == WorkdayStatus.E_APPROVED.ToString())
                                                                                                            || (!string.IsNullOrEmpty(strLeaveDayStatus) && listStrLeaveDayStatus.Contains(p.Status)))).ToList();
                                //Duyệt qua từng ngày giao
                                foreach (var leaveDayItem in listLeaveDayByAdPay)
                                {
                                    //Đếm qua từng ngày kiểm tra có ca hay không
                                    for (DateTime leaveDayCurrent = leaveDayItem.DateStart.Date; leaveDayCurrent <= leaveDayItem.DateEnd.Date; leaveDayCurrent = leaveDayCurrent.AddDays(1))
                                    {
                                        if (leaveDayCurrent >= CutOffDuration.AdPayFrom.Value && leaveDayCurrent <= CutOffDuration.AdPayTo.Value)
                                        {
                                            if (lstDailyShift.Any(x => x.Key == leaveDayCurrent && x.Value != null && x.Value.Count > 0))
                                            {
                                                countLeaveDay++;
                                            }
                                        }
                                    }
                                }
                            }

                            item = new ElementFormula(itemFormula, countLeaveDay, 0);
                            listElementFormula.Add(item);
                            formula.Remove(itemFormula);
                        }
                    }
                }
            }
            #endregion

            #region Hien.Le [19/09/2019] [108456]: [HOT_FIX_FEPV_v8.7.35.01.05.05] Lấy thêm phần tử lấy lương cơ bản và phụ cấp của 6 tháng liền trước
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN51_SAL_BASIC_SALARY_GROSSAMOUNT.ToString(), new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", "_N_6", "_N_7", "_N_8", "_N_9", "_N_10", "_N_11", "_N_12", }))
            {
                var listEndWithMonthRe = new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", "_N_6", "_N_7", "_N_8", "_N_9", "_N_10", "_N_11", "_N_12", };

                var _startWith = PayrollElement.DYN51_SAL_BASIC_SALARY_GROSSAMOUNT.ToString();

                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith) && listEndWithMonthRe.Any(s => m.EndsWith(s))).Distinct().ToList();

                // Lấy tất cả các tháng lùi có trong công thức => để nếu dữ liệu cùng 1 tháng thì lấy 1 lần luôn
                foreach (var objFormula in ListFormula)
                {
                    int month = 0;
                    var nameElement = objFormula;
                    // DYN51_SAL_BASIC_SALARY_GROSSAMOUNT_N_12
                    var monthPre = nameElement.Replace(_startWith + "_N_", "");

                    if (int.TryParse(monthPre, out month))
                    {
                        //Lấy ra kỳ công _N_
                        var cutOffDurationPre_N_ = TotalDataAll.listCutOffDuration.FirstOrDefault(p => p.MonthYear == CutOffDuration.MonthYear.AddMonths(-month));

                        if (cutOffDurationPre_N_ != null)
                        {
                            //Lấy lương cơ bản _N_
                            var basicSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                            var basicSalary = basicSalaryProfile.Where(m => m.ProfileID == profileItem.ID
                                                                                                              && m.DateOfEffect <= cutOffDurationPre_N_.DateEnd)
                                                                                                              .OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                            double? grossAmount = 0;
                            //có lương cơ bản
                            if (basicSalary != null)
                            {
                                if (!string.IsNullOrEmpty(basicSalary.GrossAmount))
                                {
                                    grossAmount = basicSalary.GrossAmount.ToDouble();
                                }
                            }
                            item = new ElementFormula(PayrollElement.DYN51_SAL_BASIC_SALARY_GROSSAMOUNT + "_N_" + monthPre.ToString(), grossAmount, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN52_SAL_BASIC_SALARY_ALLOWANCES_AMOUNT_.ToString(),
                new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", "_N_6", "_N_7", "_N_8", "_N_9", "_N_10", "_N_11", "_N_12", }))
            {
                var _startWith = PayrollElement.DYN52_SAL_BASIC_SALARY_ALLOWANCES_AMOUNT_.ToString();

                var listEndWithMonthRe = new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", "_N_6", "_N_7", "_N_8", "_N_9", "_N_10", "_N_11", "_N_12", };

                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith) && listEndWithMonthRe.Any(s => m.EndsWith(s))).Distinct().ToList();

                foreach (var objFormula in ListFormula)
                {
                    int month = 0;
                    var nameElement = objFormula;
                    // DYN51_SAL_BASIC_SALARY_GROSSAMOUNT_N_3
                    var monthPre = nameElement.Split("_N_").LastOrDefault();

                    //DYN52_SAL_BASIC_SALARY_ALLOWANCES_AMOUNT_PC1_N_1
                    var codeAllowancesPre = nameElement.Replace(_startWith, "");
                    //PC1_N_1

                    var codeCurrent = codeAllowancesPre.Split("_N_").FirstOrDefault();
                    if (int.TryParse(monthPre, out month))
                    {
                        double? totalAmount = 0;
                        //Lấy ra kỳ công _N_
                        var cutOffDurationPre_N_ = TotalDataAll.listCutOffDuration.FirstOrDefault(p => p.MonthYear == CutOffDuration.MonthYear.AddMonths(-month));
                        if (cutOffDurationPre_N_ != null)
                        {
                            //Lấy lương cơ bản _N_
                            var basicSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                            var basicSalary = basicSalaryProfile.Where(m => m.ProfileID == profileItem.ID
                                                                                                              && m.DateOfEffect <= cutOffDurationPre_N_.DateEnd)
                                                                                                              .OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                            //có lương cơ bản
                            if (basicSalary != null)
                            {
                                //Cat_UsualAllowance
                                var allowancePre = TotalDataAll.listUsualAllowance.FirstOrDefault(p => p.Code == codeCurrent);
                                if (allowancePre != null)
                                {
                                    if (basicSalary.AllowanceType1ID == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount1 ?? 0;
                                    }
                                    if (basicSalary.AllowanceType2ID == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount2 ?? 0;
                                    }
                                    if (basicSalary.AllowanceType3ID == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount3 ?? 0;
                                    }
                                    if (basicSalary.AllowanceType4ID == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount4 ?? 0;
                                    }
                                    if (basicSalary.AllowanceTypeID5 == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount5 ?? 0;
                                    }
                                    if (basicSalary.AllowanceTypeID6 == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount6 ?? 0;
                                    }
                                    if (basicSalary.AllowanceTypeID7 == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount7 ?? 0;
                                    }
                                    if (basicSalary.AllowanceTypeID8 == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount8 ?? 0;
                                    }
                                    if (basicSalary.AllowanceTypeID9 == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount9 ?? 0;
                                    }
                                    if (basicSalary.AllowanceTypeID10 == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount10 ?? 0;
                                    }
                                    if (basicSalary.AllowanceTypeID11 == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount11 ?? 0;
                                    }
                                    if (basicSalary.AllowanceTypeID12 == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount12 ?? 0;
                                    }
                                    if (basicSalary.AllowanceTypeID13 == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount13 ?? 0;
                                    }
                                    if (basicSalary.AllowanceTypeID14 == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount14 ?? 0;
                                    }
                                    if (basicSalary.AllowanceTypeID15 == allowancePre.ID)
                                    {
                                        totalAmount += basicSalary.AllowanceAmount15 ?? 0;
                                    }
                                }
                            }
                        }
                        item = new ElementFormula(PayrollElement.DYN52_SAL_BASIC_SALARY_ALLOWANCES_AMOUNT_ + codeCurrent + "_N_" + monthPre.ToString(), totalAmount, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Hien.Le [20/09/2019] [108569]: [HOT_FIX_FEPV_v8.7.35.01.05.05] Lấy thêm các phần tử lương để tính trợ cấp thôi việc]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN53_SAL_BASIC_SALARY_GROSSAMOUNT.ToString(),
                new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", "_N_6", "_N_7", "_N_8", "_N_9", "_N_10", "_N_11", "_N_12", }))
            {
                var listEndWithMonthRe = new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", "_N_6", "_N_7", "_N_8", "_N_9", "_N_10", "_N_11", "_N_12", };

                var _startWith = PayrollElement.DYN53_SAL_BASIC_SALARY_GROSSAMOUNT.ToString();

                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith) && listEndWithMonthRe.Any(s => m.EndsWith(s))).Distinct().ToList();

                // Lấy tất cả các tháng lùi có trong công thức => để nếu dữ liệu cùng 1 tháng thì lấy 1 lần luôn
                foreach (var objFormula in ListFormula)
                {
                    int month = 0;
                    int dayDefaultFrom = 0;

                    var nameElement = objFormula;
                    var monthPre = nameElement.Replace(_startWith + "_N_", "");

                    if (int.TryParse(monthPre, out month))
                    {
                        var configInsurance = TotalDataAll.listAllSettingEntity.FirstOrDefault(p => p.Name == AppConfig.HRM_INS_CONFIG_PERIODINSURANCEDAYDEFAULTTO.ToString());

                        if (configInsurance != null)
                        {
                            var dateInsurance = configInsurance.Value1;

                            if (int.TryParse(dateInsurance, out dayDefaultFrom))
                            {
                                //Lấy ra kỳ công _N_
                                var cutOffDurationPrev = TotalDataAll.listCutOffDuration.FirstOrDefault(p => p.MonthYear == CutOffDuration.MonthYear.AddMonths(-month));

                                //Lấy lương cơ bản _N_
                                var basicSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                                var basicSalary = basicSalaryProfile.Where(m => m.ProfileID == profileItem.ID
                                                                                                                  && m.DateOfEffect <= new DateTime(cutOffDurationPrev.MonthYear.Year, cutOffDurationPrev.MonthYear.Month, dayDefaultFrom))
                                                                                                                  .OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                                double? grossAmount = 0;
                                //có lương cơ bản
                                if (basicSalary != null)
                                {
                                    if (!string.IsNullOrEmpty(basicSalary.GrossAmount))
                                    {
                                        grossAmount = basicSalary.GrossAmount.ToDouble();
                                    }
                                }
                                item = new ElementFormula(PayrollElement.DYN53_SAL_BASIC_SALARY_GROSSAMOUNT + "_N_" + monthPre.ToString(), grossAmount, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.DYN53_SAL_BASIC_SALARY_GROSSAMOUNT + "_N_" + monthPre.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN54_SAL_BASIC_SALARY_ALLOWANCES_AMOUNT_.ToString(),
               new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", "_N_6", "_N_7", "_N_8", "_N_9", "_N_10", "_N_11", "_N_12", }))
            {
                var listEndWithMonthRe = new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", "_N_6", "_N_7", "_N_8", "_N_9", "_N_10", "_N_11", "_N_12", };

                var _startWith = PayrollElement.DYN54_SAL_BASIC_SALARY_ALLOWANCES_AMOUNT_.ToString();

                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith) && listEndWithMonthRe.Any(s => m.EndsWith(s))).Distinct().ToList();

                // Lấy tất cả các tháng lùi có trong công thức => để nếu dữ liệu cùng 1 tháng thì lấy 1 lần luôn
                foreach (var objFormula in ListFormula)
                {
                    int month = 0;
                    int dayDefaultFrom = 0;
                    var nameElement = objFormula;
                    //DYN54_SAL_BASIC_SALARY_ALLOWANCES_AMOUNT_PC1_N_1
                    var monthPre = nameElement.Split("_N_").LastOrDefault();

                    //DYN54_SAL_BASIC_SALARY_ALLOWANCES_AMOUNT_PC1_N_1
                    var codeAllowancesPre = nameElement.Replace(_startWith, "");
                    //PC1_N_1
                    var codeCurrent = codeAllowancesPre.Split("_N_").FirstOrDefault();

                    if (int.TryParse(monthPre, out month))
                    {
                        var configInsurance = TotalDataAll.listAllSettingEntity.FirstOrDefault(p => p.Name == AppConfig.HRM_INS_CONFIG_PERIODINSURANCEDAYDEFAULTTO.ToString());
                        if (configInsurance != null)
                        {
                            var dateInsurance = configInsurance.Value1;
                            if (int.TryParse(dateInsurance, out dayDefaultFrom))
                            {
                                //Lấy ra kỳ công _N_
                                var cutOffDurationPrev = TotalDataAll.listCutOffDuration.FirstOrDefault(p => p.MonthYear == CutOffDuration.MonthYear.AddMonths(-month));

                                //Lấy lương cơ bản _N_
                                var basicSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                                var basicSalary = basicSalaryProfile.Where(m => m.ProfileID == profileItem.ID
                                                                                                                  && m.DateOfEffect <= new DateTime(cutOffDurationPrev.MonthYear.Year, cutOffDurationPrev.MonthYear.Month, dayDefaultFrom))
                                                                                                                  .OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                                double? totalAmount = 0;
                                //Có lương cơ bản
                                if (basicSalary != null)
                                {
                                    //Cat_UsualAllowance
                                    var allowancePre = TotalDataAll.listUsualAllowance.FirstOrDefault(p => p.Code == codeCurrent);
                                    if (allowancePre != null)
                                    {
                                        if (basicSalary.AllowanceType1ID == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount1 ?? 0;
                                        }
                                        if (basicSalary.AllowanceType2ID == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount2 ?? 0;
                                        }
                                        if (basicSalary.AllowanceType3ID == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount3 ?? 0;
                                        }
                                        if (basicSalary.AllowanceType4ID == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount4 ?? 0;
                                        }
                                        if (basicSalary.AllowanceTypeID5 == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount5 ?? 0;
                                        }
                                        if (basicSalary.AllowanceTypeID6 == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount6 ?? 0;
                                        }
                                        if (basicSalary.AllowanceTypeID7 == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount7 ?? 0;
                                        }
                                        if (basicSalary.AllowanceTypeID8 == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount8 ?? 0;
                                        }
                                        if (basicSalary.AllowanceTypeID9 == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount9 ?? 0;
                                        }
                                        if (basicSalary.AllowanceTypeID10 == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount10 ?? 0;
                                        }
                                        if (basicSalary.AllowanceTypeID11 == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount11 ?? 0;
                                        }
                                        if (basicSalary.AllowanceTypeID12 == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount12 ?? 0;
                                        }
                                        if (basicSalary.AllowanceTypeID13 == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount13 ?? 0;
                                        }
                                        if (basicSalary.AllowanceTypeID14 == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount14 ?? 0;
                                        }
                                        if (basicSalary.AllowanceTypeID15 == allowancePre.ID)
                                        {
                                            totalAmount += basicSalary.AllowanceAmount15 ?? 0;
                                        }
                                    }
                                }
                                item = new ElementFormula(PayrollElement.DYN54_SAL_BASIC_SALARY_ALLOWANCES_AMOUNT_ + codeCurrent + "_N_" + monthPre.ToString(), totalAmount, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.DYN54_SAL_BASIC_SALARY_ALLOWANCES_AMOUNT_ + codeCurrent + "_N_" + monthPre.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            #endregion

            #region Hien.Le [17/10/2019] [107507] [Hotfix_OIBJC_v8.7.35.01.06] Thêm phần tử lương Lấy số giờ OT payback theo từng tháng và loại tăng ca
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN55_ATT_OVERTIME_PAYBACK_.ToString(),
               new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", "_N_6", "_N_7", "_N_8", "_N_9", "_N_10", "_N_11", "_N_12", }))
            {
                string status = string.Empty;
                string nameTableGetData = "listOverTimePayBack";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    Sal_GetDataComputePayrollKZServices getDataComputePayrollServices = new Sal_GetDataComputePayrollKZServices();
                    getDataComputePayrollServices.UserLogin = TotalDataAll.UserLogin;
                    TotalData600.listOverTimePayBack = getDataComputePayrollServices.GetOvertimePayBack(TotalData600.strOrderByProfile, CutOffDuration.ID, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN55_ATT_OVERTIME_PAYBACK_.ToString() + ") ";
                }
                else
                {
                    var listEndWithMonthRe = new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", "_N_6", "_N_7", "_N_8", "_N_9", "_N_10", "_N_11", "_N_12", };

                    var _startWith = PayrollElement.DYN55_ATT_OVERTIME_PAYBACK_.ToString();

                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith) && listEndWithMonthRe.Any(s => m.EndsWith(s))).Distinct().ToList();

                    var getStaticValuesServices = new Sal_GetStaticValuesKZServices();
                    // Lấy tất cả các tháng lùi có trong công thức => để nếu dữ liệu cùng 1 tháng thì lấy 1 lần luôn
                    foreach (var objFormula in ListFormula)
                    {
                        string statusOT = string.Empty;
                        int month = 0;
                        double sumOverTimeHourTotal = 0;

                        var nameElement = objFormula;
                        //DYN55_ATT_OVERTIME_PAYBACK_
                        var monthPre = nameElement.Split("_N_").LastOrDefault();

                        //DYN55_ATT_OVERTIME_PAYBACK_E_WORKDAY_N_1
                        var codeOvertimeTypePre = nameElement.Replace(_startWith, "");
                        //E_WORKDAY
                        var codeCurrent = codeOvertimeTypePre.Split("_N_").FirstOrDefault();

                        if (int.TryParse(monthPre, out month))
                        {
                            //Lấy ra kỳ công _N_
                            var cutOffDurationPrev = TotalDataAll.listCutOffDuration.FirstOrDefault(p => p.MonthYear == CutOffDuration.MonthYear.AddMonths(-month));

                            //Cấu hình OT
                            var sysAttendanceConfig = TotalDataAll.listAllSettingEntity.FirstOrDefault(p => p.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString());

                            if (sysAttendanceConfig != null)
                            {
                                statusOT = sysAttendanceConfig.Value1;
                            }
                            //Loại OT
                            var objOverTimeType = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(p => p.Code == codeCurrent);

                            if (objOverTimeType != null)
                            {
                                var lisAttOverTime = TotalData600.listOverTimePayBack.Where(p => p.ProfileID == profileItem.ID
                                                                                                                        && p.IsPayback == true
                                                                                                                        && p.Status == statusOT
                                                                                                                        && p.OvertimeTypeID == objOverTimeType.ID).ToList();

                                if (statusOT == EnumDropDown.OverTimeStatus.E_APPROVED.ToString())
                                {
                                    sumOverTimeHourTotal = lisAttOverTime.Where(p => p.WorkDateRoot >= cutOffDurationPrev.BackPayFrom && p.WorkDateRoot <= cutOffDurationPrev.BackPayTo && p.ApproveHours != null).Sum(p => p.ApproveHours.Value);
                                }
                                else if (statusOT == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString())
                                {
                                    sumOverTimeHourTotal = lisAttOverTime.Where(p => p.WorkDateRoot >= cutOffDurationPrev.BackPayFrom && p.WorkDateRoot <= cutOffDurationPrev.BackPayTo && p.ConfirmHours != null).Sum(p => p.ConfirmHours);
                                }
                                else
                                {
                                    sumOverTimeHourTotal = lisAttOverTime.Where(p => p.WorkDateRoot >= cutOffDurationPrev.BackPayFrom && p.WorkDateRoot <= cutOffDurationPrev.BackPayTo && p.RegisterHours != null).Sum(p => p.RegisterHours);
                                }

                                item = new ElementFormula(PayrollElement.DYN55_ATT_OVERTIME_PAYBACK_ + codeCurrent + "_N_" + monthPre.ToString(), sumOverTimeHourTotal, 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.DYN55_ATT_OVERTIME_PAYBACK_ + codeCurrent + "_N_" + monthPre.ToString(), 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                    }
                }

            }
            #endregion

            #region Hien.Le [06/11/2019] [0109745] : [HRM8PRO.BMP] Bổ sung chức năng tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN56_SUM_VALUE_ELEMENT_CODE_PAYROLLGROUP_.ToString(), string.Empty))
            {
                var strStartsWith = PayrollElement.DYN56_SUM_VALUE_ELEMENT_CODE_PAYROLLGROUP_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                var listElementCode = lstFormulaCheck.Select(x => x.Replace(strStartsWith, "").Split("_AND_").FirstOrDefault()).ToList();
                string status = string.Empty;
                string nameTableGetData = string.Join(",", listElementCode);
                //Lưu vết mã phần tử lương.
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    dataComputeSer.GetlistSalPayrollTableItem(TotalData600, CutOffDuration, listElementCode, ref status);
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN56_SUM_VALUE_ELEMENT_CODE_PAYROLLGROUP_.ToString() + ") ";
                }
                else
                {
                    double sumValue = 0;
                    double outCheck = 0;
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        var elementCode = itemFormula.Replace(strStartsWith, "").Split("_AND_").FirstOrDefault();

                        var payrollGroupCode = itemFormula.Replace(strStartsWith, "").Split("_AND_").LastOrDefault();

                        var objPayrollGroup = TotalDataAll.listPayrollGroup.FirstOrDefault(p => p.Code == payrollGroupCode);

                        if (objPayrollGroup != null)
                        {
                            var listSalPayrollTableItem = TotalData600.listSalPayrollTableItemByElementCode.Where(p => p.Code == elementCode
                                                                                                                                             && p.ValueType == EnumDropDown.ElementDataType.Double.ToString()
                                                                                                                                             && p.PayrollGroupID != null
                                                                                                                                             && p.PayrollGroupID.Value == objPayrollGroup.ID
                                                                                                                                             && p.Value != null
                                                                                                                                             && p.Value != string.Empty
                                                                                                                                             && double.TryParse(p.Value, out outCheck)).ToList();
                            sumValue = listSalPayrollTableItem.Sum(s => double.Parse(s.Value));
                        }
                        item = new ElementFormula(PayrollElement.DYN56_SUM_VALUE_ELEMENT_CODE_PAYROLLGROUP_ + elementCode + "_AND_" + payrollGroupCode, sumValue, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Hien.Le [06/11/2019] [0109745] : [HRM8PRO.BMP] Bổ sung chức năng tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN57_SUM_AMOUNT_CAT_UNUSUALALLOWANCECFG_.ToString(), string.Empty))
            {
                var strStartsWith = PayrollElement.DYN57_SUM_AMOUNT_CAT_UNUSUALALLOWANCECFG_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                var listUnusualAllowanceCfg = lstFormulaCheck.Select(x => x.Replace(strStartsWith, "")).ToList();
                string status = string.Empty;
                string nameTableGetData = string.Join(",", listUnusualAllowanceCfg);
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    dataComputeSer.GetlistSalGradePayrollAllowance(TotalData600, CutOffDuration, listUnusualAllowanceCfg, ref status);
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN56_SUM_VALUE_ELEMENT_CODE_PAYROLLGROUP_.ToString() + ") ";
                }
                else
                {
                    double sumAmount = 0;
                    //Lấy các phần tử tính lương nằm trong Grade của nhân viên
                    Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd);
                    //loại bỏ nhân viên có ngày vào làm sau ngày chốt lương
                    Cat_GradePayrollEntity CatGrade = Grade != null ? TotalDataAll.listCat_GradePayroll.Where(m => m.ID == Grade.GradePayrollID).FirstOrDefault() : null;
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        var unusualAllowanceCfgCode = itemFormula.Replace(strStartsWith, "");
                        if (CatGrade != null)
                        {
                            sumAmount = TotalData600.listSalGradePayrollAllowance.Where(p => p.GradePayrollID != null
                                                                                                                                        && p.GradePayrollID == CatGrade.ID
                                                                                                                                        && p.Amount != null
                                                                                                                                        ).Sum(x => x.Amount.Value);
                        }
                        item = new ElementFormula(PayrollElement.DYN57_SUM_AMOUNT_CAT_UNUSUALALLOWANCECFG_ + unusualAllowanceCfgCode, sumAmount, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Hien.Le [21/11/2019] 0110367: [Hotfix source SAITEX_ v8.6.49.03.27] Bổ sung phần tử lương thể hiện giờ OT yêu cầu
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN58_ATT_OVERTIME_SUM_REGISTERHOURS_.ToString(), string.Empty))
            {
                //Lấy data nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listOverTimeByWorkDateRoot";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.listOverTimeByWorkDateRoot = dataComputeSer.GetListOvertimeByWorkDateRoot_Sal(TotalData600.strOrderByProfile, CutOffDuration, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN58_ATT_OVERTIME_SUM_REGISTERHOURS_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN58_ATT_OVERTIME_SUM_REGISTERHOURS_.ToString(), 0, 0);
                }
                else
                {
                    var strStartsWith = PayrollElement.DYN58_ATT_OVERTIME_SUM_REGISTERHOURS_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();

                    foreach (var formulaCheck in lstFormulaCheck)
                    {
                        double sumOverTimeHourTotal = 0;
                        //Loại OT
                        var overtimeTypeCode = formulaCheck.Replace(strStartsWith, "");
                        //Cấu hình OT
                        string statusOT = EnumDropDown.OverTimeStatus.E_APPROVED.ToString();
                        var sysAttendanceConfig = TotalDataAll.listAllSettingEntity.FirstOrDefault(p => p.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString());
                        if (sysAttendanceConfig != null)
                        {
                            statusOT = sysAttendanceConfig.Value1;
                        }
                        //Loại OT
                        var objOverTimeType = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(p => p.Code == overtimeTypeCode);
                        if (objOverTimeType != null)
                        {
                            var lisAttOverTime = TotalData600.listOverTimeByWorkDateRoot.Where(m => m.ProfileID == profileItem.ID
                                && m.WorkDateRoot >= CutOffDuration.DateStart
                                && m.WorkDateRoot <= CutOffDuration.DateEnd
                                && m.Status == statusOT
                                && m.OvertimeTypeID != null
                                && m.OvertimeTypeID == objOverTimeType.ID).ToList();

                            sumOverTimeHourTotal = lisAttOverTime.Sum(p => p.RegisterHours);

                            item = new ElementFormula(PayrollElement.DYN58_ATT_OVERTIME_SUM_REGISTERHOURS_.ToString() + overtimeTypeCode, sumOverTimeHourTotal, 0, string.Empty);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.DYN58_ATT_OVERTIME_SUM_REGISTERHOURS_.ToString(), 0, 0, string.Empty);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN59_ATT_OVERTIME_SUM_REGISTERHOUR_BEFORE_CHANGEBASICSALARY_.ToString(), string.Empty))
            {
                //Lấy data nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listOverTimeByWorkDateRoot";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.listOverTimeByWorkDateRoot = dataComputeSer.GetListOvertimeByWorkDateRoot_Sal(TotalData600.strOrderByProfile, CutOffDuration, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN59_ATT_OVERTIME_SUM_REGISTERHOUR_BEFORE_CHANGEBASICSALARY_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN59_ATT_OVERTIME_SUM_REGISTERHOUR_BEFORE_CHANGEBASICSALARY_.ToString(), 0, 0);
                }
                else
                {
                    var strStartsWith = PayrollElement.DYN59_ATT_OVERTIME_SUM_REGISTERHOUR_BEFORE_CHANGEBASICSALARY_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                    foreach (var formulaCheck in lstFormulaCheck)
                    {
                        //Loại OT
                        var overtimeTypeCode = formulaCheck.Replace(strStartsWith, "");

                        //Lấy lương cơ bản của nhân viên
                        List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                        SalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                        //Nếu có thay đổi lương
                        if (CheckIsChangeBasicSalary(TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                        {
                            double sumOverTimeHourTotal = 0;

                            //Cấu hình OT
                            string statusOT = EnumDropDown.OverTimeStatus.E_APPROVED.ToString();
                            var sysAttendanceConfig = TotalDataAll.listAllSettingEntity.FirstOrDefault(p => p.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString());

                            if (sysAttendanceConfig != null)
                            {
                                statusOT = sysAttendanceConfig.Value1;
                            }
                            var objBasicSalary = SalaryProfile.Where(p => p.ProfileID == profileItem.ID).FirstOrDefault();

                            var objOverTimeType = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(p => p.Code == overtimeTypeCode);

                            if (objOverTimeType != null)
                            {
                                var lisAttOverTime = TotalData600.listOverTimeByWorkDateRoot.Where
                                                            (m => m.ProfileID == profileItem.ID
                                                            && m.WorkDateRoot >= CutOffDuration.DateStart
                                                            && m.WorkDateRoot < objBasicSalary.DateOfEffect
                                                            && m.Status == statusOT
                                                            && m.OvertimeTypeID != null
                                                            && m.OvertimeTypeID == objOverTimeType.ID).ToList();

                                sumOverTimeHourTotal = lisAttOverTime.Sum(p => p.RegisterHours);

                                item = new ElementFormula(PayrollElement.DYN59_ATT_OVERTIME_SUM_REGISTERHOUR_BEFORE_CHANGEBASICSALARY_.ToString() + overtimeTypeCode, sumOverTimeHourTotal, 0, string.Empty);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.DYN59_ATT_OVERTIME_SUM_REGISTERHOUR_BEFORE_CHANGEBASICSALARY_.ToString(), 0, 0, string.Empty);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.DYN59_ATT_OVERTIME_SUM_REGISTERHOUR_BEFORE_CHANGEBASICSALARY_.ToString(), 0, 0, string.Empty);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN60_ATT_OVERTIME_SUM_REGISTERHOUR_AFTER_CHANGEBASICSALARY_.ToString(), string.Empty))
            {
                //Lấy data nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listOverTimeByWorkDateRoot";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.listOverTimeByWorkDateRoot = dataComputeSer.GetListOvertimeByWorkDateRoot_Sal(TotalData600.strOrderByProfile, CutOffDuration, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN60_ATT_OVERTIME_SUM_REGISTERHOUR_AFTER_CHANGEBASICSALARY_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN60_ATT_OVERTIME_SUM_REGISTERHOUR_AFTER_CHANGEBASICSALARY_.ToString(), 0, 0);
                }
                else
                {
                    var strStartsWith = PayrollElement.DYN60_ATT_OVERTIME_SUM_REGISTERHOUR_AFTER_CHANGEBASICSALARY_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                    foreach (var formulaCheck in lstFormulaCheck)
                    {
                        //Loại OT
                        var overtimeTypeCode = formulaCheck.Replace(strStartsWith, "");

                        //Lấy lương cơ bản của nhân viên
                        List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                        SalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                        //Cấu hình OT
                        string statusOT = EnumDropDown.OverTimeStatus.E_APPROVED.ToString();
                        double sumOverTimeHourTotal = 0;
                        var sysAttendanceConfig = TotalDataAll.listAllSettingEntity.FirstOrDefault(p => p.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString());
                        if (sysAttendanceConfig != null)
                        {
                            statusOT = sysAttendanceConfig.Value1;
                        }
                        var objBasicSalary = SalaryProfile.Where(p => p.ProfileID == profileItem.ID).FirstOrDefault();

                        var objOverTimeType = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(p => p.Code == overtimeTypeCode);

                        //Nếu có thay đổi lương
                        if (CheckIsChangeBasicSalary(TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                        {
                            if (objOverTimeType != null)
                            {
                                var lisAttOverTime = TotalData600.listOverTimeByWorkDateRoot.Where
                                                                            (m => m.ProfileID == profileItem.ID
                                                                            && m.WorkDateRoot >= objBasicSalary.DateOfEffect
                                                                            && m.WorkDateRoot <= CutOffDuration.DateEnd
                                                                            && m.Status == statusOT
                                                                            && m.OvertimeTypeID != null
                                                                            && m.OvertimeTypeID == objOverTimeType.ID).ToList();

                                sumOverTimeHourTotal = lisAttOverTime.Sum(p => p.RegisterHours);

                                item = new ElementFormula(PayrollElement.DYN60_ATT_OVERTIME_SUM_REGISTERHOUR_AFTER_CHANGEBASICSALARY_.ToString() + overtimeTypeCode, sumOverTimeHourTotal, 0, string.Empty);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.DYN60_ATT_OVERTIME_SUM_REGISTERHOUR_AFTER_CHANGEBASICSALARY_.ToString(), 0, 0, string.Empty);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            if (objOverTimeType != null)
                            {
                                var lisAttOverTime = TotalData600.listOverTimeByWorkDateRoot.Where
                                                                                (m => m.ProfileID == profileItem.ID
                                                                                && m.WorkDateRoot >= CutOffDuration.DateStart
                                                                                && m.WorkDateRoot <= CutOffDuration.DateEnd
                                                                                && m.Status == statusOT
                                                                                && m.OvertimeTypeID != null
                                                                                && m.OvertimeTypeID == objOverTimeType.ID).ToList();

                                sumOverTimeHourTotal = lisAttOverTime.Sum(p => p.RegisterHours);

                                item = new ElementFormula(PayrollElement.DYN60_ATT_OVERTIME_SUM_REGISTERHOUR_AFTER_CHANGEBASICSALARY_.ToString() + overtimeTypeCode, sumOverTimeHourTotal, 0, string.Empty);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.DYN60_ATT_OVERTIME_SUM_REGISTERHOUR_AFTER_CHANGEBASICSALARY_.ToString(), 0, 0, string.Empty);
                                listElementFormula.Add(item);
                            }
                        }
                    }
                }
            }

            #endregion

            #region Hien.Le [20/12/2019] 0111234: [Hotfix source Vinasoy_8.7.44] Thêm phần tử lương: Phần tử lấy Số tiền ở màn hình Phụ cấp để tính lương	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN61_UNUSUALALLOWANCECFG_AMOUNT_.ToString(), string.Empty))
            {
                var _startWith = PayrollElement.DYN61_UNUSUALALLOWANCECFG_AMOUNT_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                foreach (var itemFormula in ListFormula)
                {
                    double amountAllowance = 0;
                    var codeUnusualAllowanceCfg = itemFormula.Replace(_startWith, "");

                    var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.FirstOrDefault(p => p.Code == codeUnusualAllowanceCfg);
                    if (objUnusualAllowanceCfg != null)
                    {
                        amountAllowance = objUnusualAllowanceCfg.Amount;
                    }
                    item = new ElementFormula(PayrollElement.DYN61_UNUSUALALLOWANCECFG_AMOUNT_ + codeUnusualAllowanceCfg, amountAllowance, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Hien.Le [26/12/2019] [111155]: [New] Phần tử động lấy ra giá trị phần tử lương đã xử lý ở kỳ ứng đưa qua kỳ chính
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN62_RECALL_ELEMENT_ADVANCE_AMOUNT_.ToString(),
                new string[] { "_ADV_1", "_ADV_2" }))
            {
                //Lấy data nếu chưa được lấy trước đó
                string statusCutOffDurationTemp = string.Empty;
                string statusPayrollTableAdvance = string.Empty;
                //Lấy dữ liệu kỳ công ứng theo kỳ lương chính
                dataComputeSer.GetlistAttCutOffDurationTemp(TotalData600, CutOffDuration, ref statusCutOffDurationTemp);
                if (!string.IsNullOrEmpty(statusCutOffDurationTemp))
                {
                    TotalData600.statusBugStore += statusCutOffDurationTemp + " (" + PayrollElement.DYN62_RECALL_ELEMENT_ADVANCE_AMOUNT_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN62_RECALL_ELEMENT_ADVANCE_AMOUNT_.ToString(), 0, 0);
                }
                //Lấy dữ liệu bảng lương kỳ ứng theo kỳ lương chính
                dataComputeSer.GetDicSalPayrollTableAdvance(TotalData600, CutOffDuration, ref statusPayrollTableAdvance);
                if (!string.IsNullOrEmpty(statusPayrollTableAdvance))
                {
                    TotalData600.statusBugStore += statusPayrollTableAdvance + " (" + PayrollElement.DYN62_RECALL_ELEMENT_ADVANCE_AMOUNT_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN62_RECALL_ELEMENT_ADVANCE_AMOUNT_.ToString(), 0, 0);
                }
                var _startWith = PayrollElement.DYN62_RECALL_ELEMENT_ADVANCE_AMOUNT_.ToString();
                var listEndWithCutOffDurationTemp = new string[] { "_ADV_1", "_ADV_2" };
                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith) && listEndWithCutOffDurationTemp.Any(s => m.EndsWith(s))).Distinct().ToList();
                foreach (var itemFormula in ListFormula)
                {
                    var _formula = itemFormula;
                    var numberADV = 0;
                    //DYN62_RECALL_ELEMENT_ADVANCE_AMOUNT_
                    var cutOffDurationTempNumber = _formula.Split("_ADV_").LastOrDefault();

                    //DYN62_RECALL_ELEMENT_ADVANCE_AMOUNT_ABC_ADV_1
                    var codeElementAdvanceUp = _formula.Replace(_startWith, "");
                    //ABC
                    var codeElementAdvance = codeElementAdvanceUp.Split("_ADV_").FirstOrDefault();

                    var listAttCutOffDurationTemp2Item = TotalData600.listAttCutOffDurationTemp.Take(2);

                    if (int.TryParse(cutOffDurationTempNumber, out numberADV))
                    {
                        Att_CutOffDurationTempEntity objAttCutOffDurationTemp = new Att_CutOffDurationTempEntity();
                        //Kỳ ứng đầu
                        if (numberADV == 1)
                        {
                            objAttCutOffDurationTemp = listAttCutOffDurationTemp2Item.OrderBy(p => p.DateStart).FirstOrDefault();
                        }
                        //Kỳ ứng sau
                        else
                        {
                            objAttCutOffDurationTemp = listAttCutOffDurationTemp2Item.OrderBy(p => p.DateStart).LastOrDefault();
                        }
                        if (objAttCutOffDurationTemp != null)
                        {
                            double doubleTry = 0;
                            double sumValue = 0;
                            var listPayrollTableAdvanceProfileDic = TotalData600.dicPayrollTableAdvance.GetValueOrNew(profileItem.ID);
                            listPayrollTableAdvanceProfileDic = listPayrollTableAdvanceProfileDic.Where(p =>
                                                                            p.CutOffDurationTempID == objAttCutOffDurationTemp.ID
                                                                            && p.Code == codeElementAdvance).ToList();

                            sumValue = listPayrollTableAdvanceProfileDic.Where(s => s.ValueType == EnumDropDown.ElementDataType.Double.ToString()
                                        && !string.IsNullOrEmpty(s.ValueAdvance)
                                        && double.TryParse(s.E_Value.Decrypt(), out doubleTry))
                                        .Sum(s => double.Parse(s.E_Value.Decrypt()));

                            item = new ElementFormula(_formula, sumValue, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(itemFormula);
                        }
                    }
                }
            }
            #endregion

            #region Hien.Le [30/12/2019] [111145] : [Hotfix SEDO.V8.7.33.01] Thêm phần tử lương: lấy ngày bắt đầu và ngày kết thúc hưởng chế độ	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN63_ATT_PREGNANCY_DATESTART_.ToString(), string.Empty))
            {
                //lay data nếu chưa được lấy trước đó
                string status = string.Empty;
                dataComputeSer.GetDicPregnancy(TotalData600, CutOffDuration, ref status);
                //Trường hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN63_ATT_PREGNANCY_DATESTART_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN63_ATT_PREGNANCY_DATESTART_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN63_ATT_PREGNANCY_DATESTART_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    string pregnancyType = string.Empty;

                    foreach (var itemFormula in ListFormula)
                    {
                        DateTime? dateStartPregnacy = null;

                        pregnancyType = itemFormula.Replace(_startWith, "");

                        var listPregnancyByProfileAll = TotalData600.dicAttPregnancy.GetValueOrNew(profileItem.ID);

                        var objAttPregnancy = listPregnancyByProfileAll.Where(
                                                                                            x => x.DateStart != null
                                                                                            && x.Type == pregnancyType)
                                                                                            .OrderByDescending(x => x.DateStart).FirstOrDefault();
                        if (objAttPregnancy != null)
                        {
                            dateStartPregnacy = objAttPregnancy.DateStart;

                            //(Ưu tiên lấy dòng IsAdjustment = true nếu trùng DateStart)
                            var listPregnancyByProfileDuplicateDateStart = listPregnancyByProfileAll.Where(p => p.DateStart == dateStartPregnacy).OrderByDescending(p => p.DateStart).ToList();

                            if (listPregnancyByProfileDuplicateDateStart.Count > 0)
                            {
                                //Lấy ra các dòng có IsAdjustment = true xong lấy ra DateStart.
                                var objAttPregnancyIsAdjustment = listPregnancyByProfileDuplicateDateStart.Where(p => p.IsAdjustment == true).FirstOrDefault();

                                if (objAttPregnancyIsAdjustment != null)
                                {
                                    dateStartPregnacy = objAttPregnancyIsAdjustment.DateStart;
                                }
                            }
                        }
                        item = new ElementFormula(PayrollElement.DYN63_ATT_PREGNANCY_DATESTART_.ToString() + pregnancyType, dateStartPregnacy, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN64_ATT_PREGNANCY_DATEEND_.ToString(), string.Empty))
            {
                //lay data nếu chưa được lấy trước đó
                string status = string.Empty;
                dataComputeSer.GetDicPregnancy(TotalData600, CutOffDuration, ref status);
                //Trường hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN64_ATT_PREGNANCY_DATEEND_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN64_ATT_PREGNANCY_DATEEND_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN64_ATT_PREGNANCY_DATEEND_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    string pregnancyType = string.Empty;

                    foreach (var itemFormula in ListFormula)
                    {
                        DateTime? dateEndPregnacy = null;

                        pregnancyType = itemFormula.Replace(_startWith, "");

                        var listPregnancyByProfileAll = TotalData600.dicAttPregnancy.GetValueOrNew(profileItem.ID);

                        var objAttPregnancy = listPregnancyByProfileAll.Where(
                                                                                            x => x.DateStart != null
                                                                                            && x.Type == pregnancyType)
                                                                                            .OrderByDescending(x => x.DateStart).FirstOrDefault();
                        if (objAttPregnancy != null)
                        {
                            dateEndPregnacy = objAttPregnancy.DateEnd;

                            //(Ưu tiên lấy dòng IsAdjustment = true nếu trùng DateStart)
                            var listPregnancyByProfileDuplicateDateStart = listPregnancyByProfileAll.Where(p => p.DateStart == objAttPregnancy.DateStart).OrderByDescending(p => p.DateStart).ToList();

                            if (listPregnancyByProfileDuplicateDateStart.Count > 0)
                            {
                                //Lấy ra các dòng có IsAdjustment = true xong lấy ra DateStart.
                                var objAttPregnancyIsAdjustment = listPregnancyByProfileDuplicateDateStart.Where(p => p.IsAdjustment == true).FirstOrDefault();

                                if (objAttPregnancyIsAdjustment != null)
                                {
                                    dateEndPregnacy = objAttPregnancyIsAdjustment.DateEnd;
                                }
                            }
                        }
                        item = new ElementFormula(PayrollElement.DYN64_ATT_PREGNANCY_DATEEND_.ToString() + pregnancyType, dateEndPregnacy, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [17/01/2020][tung.tran][111080][modify Func]:  Phần tử động lấy giá trị phần tử lương của tháng giữ lương N
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN65_SAL_PAYROLLTABLEITEM_VALUE_.ToString(), ""))
            {
                string status = string.Empty;
                List<string> listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN65_SAL_PAYROLLTABLEITEM_VALUE_.ToString())).ToList();
                var listElementCode = listFormula.Select(
                                        x => x.Substring(0, x.IndexOf("_BYELEMENT_")).Replace(PayrollElement.DYN65_SAL_PAYROLLTABLEITEM_VALUE_.ToString(), "")).ToList();

                dataComputeSer.GetElementDYN65(TotalData600, CutOffDuration, listElementCode, true, ref status);

                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN65_SAL_PAYROLLTABLEITEM_VALUE_.ToString() + ") ";
                    foreach (var itemFormula in listFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    var listPayrollTableByProfile = TotalData600.dicPayrollTableDYN65.GetValueOrNew(profileItem.ID);
                    foreach (var itemFormula in listFormula)
                    {
                        string value = string.Empty;
                        // Lấy mã phần tử cấu hình
                        var elementCode = itemFormula.Substring(0, itemFormula.IndexOf("_BYELEMENT_")).Replace(PayrollElement.DYN65_SAL_PAYROLLTABLEITEM_VALUE_.ToString(), "");
                        // Lấy số dòng cấu hình 
                        string index = itemFormula.Split("_BYELEMENT_N_").LastOrDefault();
                        // Vị trí cần lấy
                        int take = 0;
                        // Kiểm tra cấu hình có đúng là số
                        if (int.TryParse(index, out take))
                        {
                            var listPayrollByElementCode = listPayrollTableByProfile.Where(x => x.Code == elementCode).ToList();
                            if (listPayrollByElementCode.Count >= take)
                            {
                                var objPayrollTable = listPayrollByElementCode.OrderByDescending(x => x.MonthYear).ToList()[take - 1];
                                if (objPayrollTable != null)
                                {
                                    value = objPayrollTable.Value;
                                }
                            }
                        }
                        item = new ElementFormula(itemFormula, value, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region [5/4/2021][Nghia.dang][125638][modify Func]:  Enum động theo phần tử lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN104_SAL_PAYROLLTABLEITEM_VALUE_.ToString(), ""))
            {
                string status = string.Empty;
                List<string> listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN104_SAL_PAYROLLTABLEITEM_VALUE_.ToString())).ToList();
                var listElementCode = listFormula.Select(
                                        x => x.Replace(PayrollElement.DYN104_SAL_PAYROLLTABLEITEM_VALUE_.ToString(), "")).ToList();

                dataComputeSer.GetElementDYN65(TotalData600, CutOffDuration, listElementCode, null, ref status);

                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN104_SAL_PAYROLLTABLEITEM_VALUE_.ToString() + ") ";
                    foreach (var itemFormula in listFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    var listPayrollTableByProfile = TotalData600.dicPayrollTableDYN65.GetValueOrNew(profileItem.ID);
                    foreach (var itemFormula in listFormula)
                    {
                        string value = string.Empty;
                        // Lấy mã phần tử cấu hình
                        var elementCode = itemFormula.Replace(PayrollElement.DYN104_SAL_PAYROLLTABLEITEM_VALUE_.ToString(), "");
                        // Lấy số dòng cấu hình 

                        var objPayrollByElementCode = listPayrollTableByProfile.Where(x => x.Code == elementCode && x.MonthYear == CutOffDuration.MonthYear).FirstOrDefault();
                        if (objPayrollByElementCode != null)
                        {
                            value = objPayrollByElementCode.Value;
                        }
                        item = new ElementFormula(itemFormula, value, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Hien.Le [06/02/2020] [111930]: Thêm Bộ Enum Phần Tử Lương Lấy Số Tiền Bảo Hiểm Mua Ngoài	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN66_INS_VOLUNTARYINSINFO_SUM_EMPPAID_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                dataComputeSer.GetDicVoluntaryInsInfo(TotalData600, CutOffDuration, ref status);
                string nameTableGetData = "listCat_VoluntaryInsType";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listCat_VoluntaryInsType = dataComputeSer.GetVoluntaryInsType(ref status2);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN66_INS_VOLUNTARYINSINFO_SUM_EMPPAID_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN66_INS_VOLUNTARYINSINFO_SUM_EMPPAID_.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN66_INS_VOLUNTARYINSINFO_SUM_EMPPAID_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    string voluntaryInsTypeCode = string.Empty;
                    foreach (var itemFormula in ListFormula)
                    {
                        double valueEmpPaid = 0;
                        voluntaryInsTypeCode = itemFormula.Replace(_startWith, "");

                        var listVoluntaryInsInfoByProfile = TotalData600.dicVoluntaryInsInfo.GetValueOrNew(profileItem.ID);

                        var voluntaryInsTypeID = TotalData600.listCat_VoluntaryInsType.FirstOrDefault(p => p.Code == voluntaryInsTypeCode);
                        if (voluntaryInsTypeID != null)
                        {
                            listVoluntaryInsInfoByProfile = listVoluntaryInsInfoByProfile.Where(p => p.RelativeID == null
                                                                                                        && p.VoluntaryInsTypeID == voluntaryInsTypeID.ID).ToList();
                        }
                        valueEmpPaid = listVoluntaryInsInfoByProfile.Where(p => p.EmpPaid != null).Sum(p => p.EmpPaid.Value);

                        item = new ElementFormula(PayrollElement.DYN66_INS_VOLUNTARYINSINFO_SUM_EMPPAID_.ToString() + voluntaryInsTypeCode, valueEmpPaid, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Hien.Le [06/02/2020] [111930]: Thêm Bộ Enum Phần Tử Lương Lấy Số Tiền Bảo Hiểm Mua Ngoài	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN67_INS_VOLUNTARYINSINFO_SUM_COMPAID_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                dataComputeSer.GetDicVoluntaryInsInfo(TotalData600, CutOffDuration, ref status);
                string nameTableGetData = "listCat_VoluntaryInsType";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listCat_VoluntaryInsType = dataComputeSer.GetVoluntaryInsType(ref status2);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN67_INS_VOLUNTARYINSINFO_SUM_COMPAID_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN67_INS_VOLUNTARYINSINFO_SUM_COMPAID_.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN67_INS_VOLUNTARYINSINFO_SUM_COMPAID_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    string voluntaryInsTypeCode = string.Empty;
                    foreach (var itemFormula in ListFormula)
                    {
                        double valueComPaid = 0;
                        voluntaryInsTypeCode = itemFormula.Replace(_startWith, "");

                        var listVoluntaryInsInfoByProfile = TotalData600.dicVoluntaryInsInfo.GetValueOrNew(profileItem.ID);

                        var voluntaryInsTypeID = TotalData600.listCat_VoluntaryInsType.FirstOrDefault(p => p.Code == voluntaryInsTypeCode);
                        if (voluntaryInsTypeID != null)
                        {
                            listVoluntaryInsInfoByProfile = listVoluntaryInsInfoByProfile.Where(p => p.RelativeID == null
                                                                                                        && p.VoluntaryInsTypeID == voluntaryInsTypeID.ID).ToList();
                        }
                        valueComPaid = listVoluntaryInsInfoByProfile.Where(p => p.ComPaid != null).Sum(p => p.ComPaid.Value);

                        item = new ElementFormula(PayrollElement.DYN67_INS_VOLUNTARYINSINFO_SUM_COMPAID_.ToString() + voluntaryInsTypeCode, valueComPaid, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Hien.Le [06/02/2020] [111930]: Thêm Bộ Enum Phần Tử Lương Lấy Số Tiền Bảo Hiểm Mua Ngoài	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN68_INS_VOLUNTARYINSINFO_SUM_MONTH_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                dataComputeSer.GetDicVoluntaryInsInfo(TotalData600, CutOffDuration, ref status);
                string nameTableGetData = "listCat_VoluntaryInsType";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listCat_VoluntaryInsType = dataComputeSer.GetVoluntaryInsType(ref status2);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN68_INS_VOLUNTARYINSINFO_SUM_MONTH_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN68_INS_VOLUNTARYINSINFO_SUM_MONTH_.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN68_INS_VOLUNTARYINSINFO_SUM_MONTH_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    string voluntaryInsTypeCode = string.Empty;
                    foreach (var itemFormula in ListFormula)
                    {
                        double valueMonth = 0;
                        voluntaryInsTypeCode = itemFormula.Replace(_startWith, "");

                        var listVoluntaryInsInfoByProfile = TotalData600.dicVoluntaryInsInfo.GetValueOrNew(profileItem.ID);

                        var voluntaryInsTypeID = TotalData600.listCat_VoluntaryInsType.FirstOrDefault(p => p.Code == voluntaryInsTypeCode);
                        if (voluntaryInsTypeID != null)
                        {
                            listVoluntaryInsInfoByProfile = listVoluntaryInsInfoByProfile.Where(p => p.RelativeID == null
                                                                                                        && p.VoluntaryInsTypeID == voluntaryInsTypeID.ID).ToList();
                        }
                        valueMonth = listVoluntaryInsInfoByProfile.Where(p => p.Month != null).Sum(p => p.Month.Value);

                        item = new ElementFormula(PayrollElement.DYN68_INS_VOLUNTARYINSINFO_SUM_MONTH_.ToString() + voluntaryInsTypeCode, valueMonth, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Hien.Le [06/02/2020] [111930]: Thêm Bộ Enum Phần Tử Lương Lấy Số Tiền Bảo Hiểm Mua Ngoài	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN69_INS_VOLUNTARYINSINFO_SUM_MONTHLYPAID_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                dataComputeSer.GetDicVoluntaryInsInfo(TotalData600, CutOffDuration, ref status);
                string nameTableGetData = "listCat_VoluntaryInsType";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listCat_VoluntaryInsType = dataComputeSer.GetVoluntaryInsType(ref status2);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN69_INS_VOLUNTARYINSINFO_SUM_MONTHLYPAID_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN69_INS_VOLUNTARYINSINFO_SUM_MONTHLYPAID_.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN69_INS_VOLUNTARYINSINFO_SUM_MONTHLYPAID_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    string voluntaryInsTypeCode = string.Empty;
                    foreach (var itemFormula in ListFormula)
                    {
                        double valueMonthlyPaid = 0;
                        voluntaryInsTypeCode = itemFormula.Replace(_startWith, "");

                        var listVoluntaryInsInfoByProfile = TotalData600.dicVoluntaryInsInfo.GetValueOrNew(profileItem.ID);

                        var voluntaryInsTypeID = TotalData600.listCat_VoluntaryInsType.FirstOrDefault(p => p.Code == voluntaryInsTypeCode);
                        if (voluntaryInsTypeID != null)
                        {
                            listVoluntaryInsInfoByProfile = listVoluntaryInsInfoByProfile.Where(p => p.RelativeID == null
                                                                                                        && p.VoluntaryInsTypeID == voluntaryInsTypeID.ID).ToList();
                        }
                        valueMonthlyPaid = listVoluntaryInsInfoByProfile.Where(p => p.MonthlyPaid != null).Sum(p => p.MonthlyPaid.Value);

                        item = new ElementFormula(PayrollElement.DYN69_INS_VOLUNTARYINSINFO_SUM_MONTHLYPAID_.ToString() + voluntaryInsTypeCode, valueMonthlyPaid, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Hien.Le [20/02/2020]	0112104: Thêm phần tử lương đếm số ca làm việc kỳ ứng đến ngày nhân viên nghỉ việc
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN70_ATT_CUTOFFDURATION_COUNT_BYCODESHIFT_.ToString(), string.Empty))
            {
                var _startWith = PayrollElement.DYN70_ATT_CUTOFFDURATION_COUNT_BYCODESHIFT_.ToString();

                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                string codeShift = string.Empty;

                DateTime? hreDateStop = null;

                var HreStopWorking = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                var objHreStopWorking = HreStopWorking.FirstOrDefault
                        (p => p.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                 && p.DateStop != null && p.DateStop > CutOffDuration.AdPayFrom
                                 && p.DateStop <= CutOffDuration.AdPayTo);

                //Thoả điều kiện mới đi tính
                foreach (var itemFormula in ListFormula)
                {
                    codeShift = itemFormula.Replace(_startWith, "");
                    DateTime? adPayFrom = CutOffDuration.AdPayFrom;
                    DateTime? adPayTo = CutOffDuration.AdPayTo;
                    if (objHreStopWorking != null && adPayFrom != null && adPayTo != null)
                    {
                        hreDateStop = objHreStopWorking?.DateStop ?? hreDateStop;
                        //Gọi hàm cắt ca bên công.
                        var shiftID = new Guid();
                        int countRosterBeforeDateStop = 0;
                        //Cat_Shift
                        var objCatShift = TotalDataAll.listCat_Shift.FirstOrDefault(p => p.Code == codeShift);
                        if (objCatShift != null)
                        {
                            shiftID = objCatShift.ID;
                        }
                        //Att_Roster
                        var listRosterByProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);

                        listRosterByProfile = listRosterByProfile.Where(m => m.DateStart <= CutOffDuration.AdPayTo && m.DateEnd >= CutOffDuration.AdPayFrom && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                        //Att_RosterGroup thang N
                        var listRosterGroupN = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.AdPayTo && s.DateEnd >= CutOffDuration.AdPayFrom).ToList();

                        //lich lam viec thang N
                        var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                            adPayFrom.Value,
                            hreDateStop.Value,
                            profileItem.ID,
                            listRosterByProfile,
                            listRosterGroupN,
                            TotalDataAll.listRosterGroupByOrganization,
                            TotalDataAll.listRosterGroupType,
                            TotalDataAll.listOrgStructure,
                            TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                    .Where(s => s.ProfileID == profileItem.ID
                                    && s.DateEffective <= hreDateStop.Value
                                    && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                    .FirstOrDefault());

                        if (lstDailyShift.Count > 0)
                        {
                            for (DateTime date = adPayFrom.Value; date < hreDateStop; date = date.AddDays(1))
                            {
                                if (lstDailyShift.ContainsKey(date) && lstDailyShift[date] != null)
                                {
                                    var listRoterByDate = lstDailyShift[date];
                                    countRosterBeforeDateStop += listRoterByDate.Where(s => s != null && s != Guid.Empty && s == shiftID).Count();
                                }
                            }
                        }
                        item = new ElementFormula(PayrollElement.DYN70_ATT_CUTOFFDURATION_COUNT_BYCODESHIFT_.ToString() + codeShift, countRosterBeforeDateStop, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.DYN70_ATT_CUTOFFDURATION_COUNT_BYCODESHIFT_.ToString() + codeShift, 0, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Hien.Le [23/04/2020] [114539] Lấy phần tử tính lương theo tháng (động theo Mã sản phẩm)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN72_SUM_QUANTITY_SAL_PRODUCTIVE_.ToString(), string.Empty))
            {
                var _startWith = PayrollElement.DYN72_SUM_QUANTITY_SAL_PRODUCTIVE_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                string codeProduct = string.Empty;
                foreach (var itemFormula in ListFormula)
                {
                    double sumQuantity = 0;
                    codeProduct = itemFormula.Replace(_startWith, "");
                    var objCatProduct = TotalDataAll.ListProduct.FirstOrDefault(p => p.Code == codeProduct);
                    if (objCatProduct != null)
                    {
                        // Lấy danh sách sản phẩm nhân viên trong kỳ công
                        var listProductiveByProfile = TotalDataAll.dicProductive.GetValueOrNew(profileItem.ID).Where(
                            x => x.StartDate != null && x.EndDate != null
                            && x.ProfileID == profileItem.ID
                            && x.StartDate.Value.Date <= CutOffDuration.DateEnd.Date
                            && x.EndDate.Value.Date >= CutOffDuration.DateStart.Date
                            ).ToList();

                        if (listProductiveByProfile.Count > 0)
                        {
                            var listProductiveByProfileTemp = listProductiveByProfile.Where(p => p.Quantity != null && p.ProductID == objCatProduct.ID).ToList();
                            sumQuantity = listProductiveByProfileTemp.Sum(p => p.Quantity.Value);
                        }
                    }
                    item = new ElementFormula(PayrollElement.DYN72_SUM_QUANTITY_SAL_PRODUCTIVE_.ToString() + codeProduct, sumQuantity, 0, string.Empty);
                    listElementFormula.Add(item);
                    //xoa cac enum da xu ly trong list enum tong
                    formula.Remove(itemFormula);
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN73_PRODUCTIONTIME_CAT_PRODUCT_.ToString(), string.Empty))
            {
                var _startWith = PayrollElement.DYN73_PRODUCTIONTIME_CAT_PRODUCT_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                string codeProduct = string.Empty;
                foreach (var itemFormula in ListFormula)
                {
                    double ProductionTime = 0;
                    codeProduct = itemFormula.Replace(_startWith, "");
                    var objCatProduct = TotalDataAll.ListProduct.FirstOrDefault(p => p.Code == codeProduct);
                    if (objCatProduct != null)
                    {
                        ProductionTime = objCatProduct?.ProductionTime ?? 0;
                    }
                    item = new ElementFormula(PayrollElement.DYN73_PRODUCTIONTIME_CAT_PRODUCT_.ToString() + codeProduct, ProductionTime, 0, string.Empty);
                    listElementFormula.Add(item);
                    //xoa cac enum da xu ly trong list enum tong
                    formula.Remove(itemFormula);
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN74_BONUSPERUNIT_CAT_PRODUCT_.ToString(), string.Empty))
            {
                var _startWith = PayrollElement.DYN74_BONUSPERUNIT_CAT_PRODUCT_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                string codeProduct = string.Empty;
                foreach (var itemFormula in ListFormula)
                {
                    double bonusPerUnit = 0;
                    codeProduct = itemFormula.Replace(_startWith, "");
                    var objCatProduct = TotalDataAll.ListProduct.FirstOrDefault(p => p.Code == codeProduct);
                    if (objCatProduct != null)
                    {
                        bonusPerUnit = objCatProduct?.BonusPerUnit ?? 0;
                    }
                    item = new ElementFormula(PayrollElement.DYN74_BONUSPERUNIT_CAT_PRODUCT_.ToString() + codeProduct, bonusPerUnit, 0, string.Empty);
                    listElementFormula.Add(item);
                    //xoa cac enum da xu ly trong list enum tong
                    formula.Remove(itemFormula);
                }
            }
            #endregion

            #region Hien.Le [04/05/2020] 0115025: Bổ sung phần tử tính lương	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN75_SUM_ANLVALUE_ANNUALLEAVEMONTHBYTYPE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                dataComputeSer.GetDicAnnualLeaveMonthByType(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN75_SUM_ANLVALUE_ANNUALLEAVEMONTHBYTYPE_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN75_SUM_ANLVALUE_ANNUALLEAVEMONTHBYTYPE_.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN75_SUM_ANLVALUE_ANNUALLEAVEMONTHBYTYPE_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    string annualLeaveType = string.Empty;
                    List<string> listAnnualLeaveType = new List<string>
                {
                    AnnualLeaveType.E_ANNUALLEAVE.ToString(),
                    AnnualLeaveType.E_COMPENSATORYLEAVE.ToString(),
                    AnnualLeaveType.E_DECREENO85LEAVE.ToString(),
                    AnnualLeaveType.E_REMAININGLEAVE.ToString(),
                    AnnualLeaveType.E_SICKLEAVE.ToString(),
                };
                    foreach (var itemFormula in ListFormula)
                    {
                        double anlValue = 0;
                        annualLeaveType = itemFormula.Replace(_startWith, "");
                        var objAnnualLeaveMonthByType = listAnnualLeaveType.Where(p => p == annualLeaveType);
                        if (objAnnualLeaveMonthByType != null)
                        {
                            var listAnnualLeaveMonthByType = TotalData600.dicAttAnnualLeaveMonthByType.GetValueOrNew(profileItem.ID);
                            anlValue = listAnnualLeaveMonthByType.Where(p => !string.IsNullOrEmpty(p.AnnualLeaveType) && p.AnlValue != null && p.AnnualLeaveType == annualLeaveType).Sum(p => p.AnlValue.Value);
                        }
                        item = new ElementFormula(PayrollElement.DYN75_SUM_ANLVALUE_ANNUALLEAVEMONTHBYTYPE_.ToString() + annualLeaveType, anlValue, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }

            }

            #endregion

            #region Hien.Le [05/06/2020] [0116280]: Bổ sung Enum tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN76_SUM_UNUSUALALLOWANCE_AMOUNT_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                dataComputeSer.GetListWorkHistoryFullProfile(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN76_SUM_UNUSUALALLOWANCE_AMOUNT_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN76_SUM_UNUSUALALLOWANCE_AMOUNT_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {

                    var _startWith = PayrollElement.DYN76_SUM_UNUSUALALLOWANCE_AMOUNT_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                    //B1: Lấy các dòng nhân viên của Hre_WorkHistory thỏa
                    var listWorkHistoryByProfileAll = TotalData600.listWorkHistoryFullProfile
                                        .Where(x =>
                                            x.DateEffective <= CutOffDuration.DateEnd
                                            && x.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                        .OrderByDescending(s => s.DateEffective)
                                        .GroupBy(x => x.ProfileID)
                                        .Select(x => x.FirstOrDefault())
                                        .ToList();

                    if (!Common.IsNullOrGuidEmpty(profileItem.PayrollGroupID))
                    {
                        listWorkHistoryByProfileAll = listWorkHistoryByProfileAll.Where(p => p.PayrollGroupID == profileItem.PayrollGroupID).ToList();
                        var listProfileIDByHistory = listWorkHistoryByProfileAll.Select(p => p.ProfileID).Distinct().ToList();
                        //Lấy DS Sal_UnusualAllowance theo ProfileID của Hre_WorkHistory
                        dataComputeSer.GetListSalUnusualAllowanceByProfileIDs(TotalData600, CutOffDuration, profileItem.PayrollGroupID.Value, string.Join(",", listProfileIDByHistory), ref status2);
                    }

                    List<string> listStatusExclusion = new List<string>
                    {
                        EnumDropDown.StopWorkStatus.E_REJECT.ToString(),
                        EnumDropDown.StopWorkStatus.E_CANCEL.ToString()
                    };

                    foreach (var itemFormula in ListFormula)
                    {
                        double amountUnusualAllowance = 0;
                        var codeUnusualAllowanceCfg = itemFormula.Replace(_startWith, "");
                        var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.FirstOrDefault(p => p.Code == codeUnusualAllowanceCfg);
                        if (objUnusualAllowanceCfg != null)
                        {
                            //Tung.Tran [116891]: Thêm kiểm tra null chung với task 116891 (kaizen)
                            if (!Common.IsNullOrGuidEmpty(profileItem.PayrollGroupID))
                            {
                                var listSalUnusualAllowanceByProfile = TotalData600.dicSalUnusualAllowanceByPayrollGroup.GetValueOrNew(profileItem.PayrollGroupID.Value);
                                amountUnusualAllowance = listSalUnusualAllowanceByProfile.Where(p =>
                                p.UnusualEDTypeID != null
                                && p.UnusualEDTypeID == objUnusualAllowanceCfg.ID
                                && p.Amount != null
                                && !listStatusExclusion.Contains(p.Status))
                                .Sum(p => p.Amount.Value);
                            }
                        }

                        item = new ElementFormula(PayrollElement.DYN76_SUM_UNUSUALALLOWANCE_AMOUNT_.ToString() + codeUnusualAllowanceCfg, amountUnusualAllowance, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Hien.Le [25/06/2020] [0116693] : [Skypec] Thêm phần tử lương lấy dữ liệu Mức tiền trong Chi tiết Bậc lương (Phần tử lương)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN77_CAT_AMOUNTOFSALARYRANK_SALARY_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                dataComputeSer.GetListAmountOfSalaryRank(TotalData600, ref status);
                if (!String.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN77_CAT_AMOUNTOFSALARYRANK_SALARY_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN77_CAT_AMOUNTOFSALARYRANK_SALARY_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN77_CAT_AMOUNTOFSALARYRANK_SALARY_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    var amountOfSalaryRank = 0;
                    double salaryRank = 0;

                    var dicBasicSalary = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                    var objBasicSalary = dicBasicSalary.Where
                                                     (p => p.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                                        && p.DateOfEffect <= CutOffDuration.DateEnd)
                                                        .OrderByDescending(p => p.DateOfEffect).FirstOrDefault();

                    foreach (var itemFormula in ListFormula)
                    {
                        int.TryParse(itemFormula.Replace(_startWith, ""), out amountOfSalaryRank);
                        if (objBasicSalary != null)
                        {
                            var objAmountOfSalaryRank = TotalData600.listAmountOfSalaryRank.
                                      Where(p => p.SalaryRankID == objBasicSalary.RankRateID
                                                    && p.DateOfEffect <= CutOffDuration.DateEnd
                                                    && p.AmountOfSalaryRank == amountOfSalaryRank).OrderByDescending(p => p.DateOfEffect).FirstOrDefault();
                            salaryRank = objAmountOfSalaryRank?.Salary ?? 0;
                        }
                        item = new ElementFormula(PayrollElement.DYN77_CAT_AMOUNTOFSALARYRANK_SALARY_.ToString() + amountOfSalaryRank, salaryRank, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN78_CAT_AMOUNTOFSALARYRANK_SALARY_BEFORECHANGESALARY_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                dataComputeSer.GetListAmountOfSalaryRank(TotalData600, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN78_CAT_AMOUNTOFSALARYRANK_SALARY_BEFORECHANGESALARY_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN78_CAT_AMOUNTOFSALARYRANK_SALARY_BEFORECHANGESALARY_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                    //Biến kiểm tra có thay đổi lương trong tháng hay ko
                    bool IsChangeBasicSalary = CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID);

                    var _startWith = PayrollElement.DYN78_CAT_AMOUNTOFSALARYRANK_SALARY_BEFORECHANGESALARY_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                    var amountOfSalaryRank = 0;
                    double salaryRankBefore = 0;

                    foreach (var itemFormula in ListFormula)
                    {
                        if (IsChangeBasicSalary)
                        {
                            var objSalaryChange = listBasicSalaryByProfileDic.Where(p => p.Status == EnumDropDown.Status.E_APPROVED.ToString() && p.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(p => p.DateOfEffect).FirstOrDefault();
                            int.TryParse(itemFormula.Replace(_startWith, ""), out amountOfSalaryRank);
                            if (objSalaryChange != null)
                            {
                                var objBasicSalaryBeforeChange = listBasicSalaryByProfileDic.Where(p => p.Status == EnumDropDown.Status.E_APPROVED.ToString() && p.DateOfEffect < objSalaryChange.DateOfEffect).OrderByDescending(p => p.DateOfEffect).FirstOrDefault();
                                //Trước thay đổi lương
                                var objAmountOfSalaryRankBefore = TotalData600.listAmountOfSalaryRank.
                                      Where(p => p.SalaryRankID == objBasicSalaryBeforeChange.RankRateID
                                                    && p.DateOfEffect < objSalaryChange.DateOfEffect
                                                    && p.AmountOfSalaryRank == amountOfSalaryRank).OrderByDescending(p => p.DateOfEffect).FirstOrDefault();
                                salaryRankBefore = objAmountOfSalaryRankBefore?.Salary ?? 0;
                            }
                        }
                        item = new ElementFormula(PayrollElement.DYN78_CAT_AMOUNTOFSALARYRANK_SALARY_BEFORECHANGESALARY_.ToString() + amountOfSalaryRank, salaryRankBefore, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula,
                PayrollElement.DYN79_CAT_AMOUNTOFSALARYRANK_SALARY_AFTERCHANGESALARY_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                dataComputeSer.GetListAmountOfSalaryRank(TotalData600, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN79_CAT_AMOUNTOFSALARYRANK_SALARY_AFTERCHANGESALARY_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN79_CAT_AMOUNTOFSALARYRANK_SALARY_AFTERCHANGESALARY_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                    //Biến kiểm tra có thay đổi lương trong tháng hay ko
                    bool IsChangeBasicSalary = CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID);

                    var _startWith = PayrollElement.DYN79_CAT_AMOUNTOFSALARYRANK_SALARY_AFTERCHANGESALARY_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                    var amountOfSalaryRank = 0;
                    double salaryRankAfter = 0;

                    foreach (var itemFormula in ListFormula)
                    {
                        if (IsChangeBasicSalary)
                        {
                            var objSalaryChange = listBasicSalaryByProfileDic.Where(p => p.Status == EnumDropDown.Status.E_APPROVED.ToString() && p.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(p => p.DateOfEffect).FirstOrDefault();
                            int.TryParse(itemFormula.Replace(_startWith, ""), out amountOfSalaryRank);
                            if (objSalaryChange != null)
                            {
                                //Sau thay đổi lương
                                var objAmountOfSalaryRankAfter = TotalData600.listAmountOfSalaryRank.
                                      Where(p => p.SalaryRankID == objSalaryChange.RankRateID
                                                    && p.DateOfEffect <= CutOffDuration.DateEnd
                                                    && p.AmountOfSalaryRank == amountOfSalaryRank).OrderByDescending(p => p.DateOfEffect).FirstOrDefault();
                                salaryRankAfter = objAmountOfSalaryRankAfter?.Salary ?? 0;
                            }
                        }
                        item = new ElementFormula(PayrollElement.DYN79_CAT_AMOUNTOFSALARYRANK_SALARY_AFTERCHANGESALARY_.ToString() + amountOfSalaryRank, salaryRankAfter, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Khoa.nguyen [05/08/2020] [117804]:Thêm phần tử lương lấy Ngày đầu tiên đi làm lại sau khi nghỉ thai sản 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN80_ATT_LEAVEDAY_DATERETURNTOWORK_.ToString(), string.Empty))
            {
                string status = string.Empty;

                dataComputeSer.GetDicAttLeaveDayWithSetting(TotalData600, CutOffDuration, ref status);

                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN80_ATT_LEAVEDAY_DATERETURNTOWORK_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN80_ATT_LEAVEDAY_DATERETURNTOWORK_.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN80_ATT_LEAVEDAY_DATERETURNTOWORK_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    string leaveDayTypeCode = string.Empty;
                    DateTime? dateReturnToWork = null;
                    foreach (var itemFormula in ListFormula)
                    {
                        leaveDayTypeCode = itemFormula.Replace(_startWith, "");
                        var objAttLeaveDayDateReturnToWork = TotalData600.dicAttLeaveDayDateReturnToWork.GetValueOrNew(profileItem.ID).Where(x =>
                         x.LeaveDayTypeCode == leaveDayTypeCode
                        ).FirstOrDefault();
                        if (objAttLeaveDayDateReturnToWork != null)
                        {
                            dateReturnToWork = objAttLeaveDayDateReturnToWork.DateReturnToWork.Value;
                        }

                        item = new ElementFormula(PayrollElement.DYN80_ATT_LEAVEDAY_DATERETURNTOWORK_.ToString() + leaveDayTypeCode, dateReturnToWork, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Hien.Le [06/08/2020] [0117797]: Thêm các enum phần tử lương kỷ luật
            // Enum đếm số dòng kỷ luật có hiệu lực trong kỳ lương động theo mã lý do kỷ luật
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN81_HRE_DISCIPLINE_COUNT_DISCIPLINERESON_.ToString(), string.Empty))
            {
                string status = string.Empty;
                dataComputeSer.GetListDiscipline(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN81_HRE_DISCIPLINE_COUNT_DISCIPLINERESON_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN81_HRE_DISCIPLINE_COUNT_DISCIPLINERESON_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN81_HRE_DISCIPLINE_COUNT_DISCIPLINERESON_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                    string disciplineResonCode = string.Empty;
                    int numberDisciplineReson = 0;

                    foreach (var itemFormula in ListFormula)
                    {
                        disciplineResonCode = itemFormula.Replace(_startWith, "");
                        var listHreDiscipline = TotalData600.dicDiscipline.GetValueOrNew(profileItem.ID);
                        var objCatNameEntity = TotalDataAll.ListCat_NameEntity.Where(p => p.NameEntityType == EnumDropDown.EntityType.E_DISCIPLINE_REASON.ToString() && p.Code == disciplineResonCode).FirstOrDefault();
                        if (objCatNameEntity != null)
                        {
                            numberDisciplineReson = listHreDiscipline.Where(
                                                                    p => p.DateOfEffective <= CutOffDuration.DateEnd
                                                                    && (p.DateEndOfViolation >= CutOffDuration.DateStart || p.DateEndOfViolation == null)
                                                                    && p.ApproveStatus == EnumDropDown.Status.E_APPROVED.ToString()
                                                                    && p.DisciplineResonID == objCatNameEntity.ID).ToList().Count();
                        }
                        item = new ElementFormula(PayrollElement.DYN81_HRE_DISCIPLINE_COUNT_DISCIPLINERESON_.ToString() + disciplineResonCode, numberDisciplineReson, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }

            // Enum Tổng tỷ lệ % giảm trừ của loại PC của các dòng kỷ luật có hiệu lực trong kỳ lương động theo mã phụ cấp
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN82_HRE_DISCIPLINE_SUM_PERCENTDEDUCTION_.ToString(), string.Empty))
            {
                string status = string.Empty;
                dataComputeSer.GetListDiscipline(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN82_HRE_DISCIPLINE_SUM_PERCENTDEDUCTION_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN82_HRE_DISCIPLINE_SUM_PERCENTDEDUCTION_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN82_HRE_DISCIPLINE_SUM_PERCENTDEDUCTION_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                    string usualAllowanceCode = string.Empty;

                    foreach (var itemFormula in ListFormula)
                    {
                        usualAllowanceCode = itemFormula.Replace(_startWith, "");
                        var listHreDiscipline = TotalData600.dicDiscipline.GetValueOrNew(profileItem.ID).Where(p => p.ApproveStatus == EnumDropDown.Status.E_APPROVED.ToString()).ToList();
                        var objUsualAllowance = TotalDataAll.listUsualAllowance.Where(p => p.Code == usualAllowanceCode.ToString()).FirstOrDefault();
                        double percentDeductionN = 0;
                        if (objUsualAllowance != null)
                        {
                            foreach (var itemHreDiscipline in listHreDiscipline)
                            {
                                if (itemHreDiscipline.AllowanceID1 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom1 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom1.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo1 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo1.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction1 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID2 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom2 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom2.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo2 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo2.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction2 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID3 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom3 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom3.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo3 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo3.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction3 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID4 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom4 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom4.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo4 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo4.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction4 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID5 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom5 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom5.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo5 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo5.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction5 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID6 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom6 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom6.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo6 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo6.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction6 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID7 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom7 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom7.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo7 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo7.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction7 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID8 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom8 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom8.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo8 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo8.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction8 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID9 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom9 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom9.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo9 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo9.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction9 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID10 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom10 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom10.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo10 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo10.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction10 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID11 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom11 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom11.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo11 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo11.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction11 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID12 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom12 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom12.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo12 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo12.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction12 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID13 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom13 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom13.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo13 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo13.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction13 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID14 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom14 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom14.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo14 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo14.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction14 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID15 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom15 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom15.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo15 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo15.Value) >= CutOffDuration.MonthYear)
                                {
                                    percentDeductionN += itemHreDiscipline?.PercentDeduction15 ?? 0;
                                }
                            }
                        }
                        item = new ElementFormula(PayrollElement.DYN82_HRE_DISCIPLINE_SUM_PERCENTDEDUCTION_.ToString() + usualAllowanceCode, percentDeductionN, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }

            // Enum Tổng số tiền giảm trừ của loại PC của các dòng kỷ luật có hiệu lực trong kỳ lương động theo mã phụ cấp
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN83_HRE_DISCIPLINE_SUM_ALLOWANCE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                dataComputeSer.GetListDiscipline(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN83_HRE_DISCIPLINE_SUM_ALLOWANCE_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN83_HRE_DISCIPLINE_SUM_ALLOWANCE_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN83_HRE_DISCIPLINE_SUM_ALLOWANCE_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    string usualAllowanceCode = string.Empty;
                    foreach (var itemFormula in ListFormula)
                    {
                        usualAllowanceCode = itemFormula.Replace(_startWith, "");
                        var listHreDiscipline = TotalData600.dicDiscipline.GetValueOrNew(profileItem.ID).Where(p => p.ApproveStatus == EnumDropDown.Status.E_APPROVED.ToString()).ToList();
                        var objUsualAllowance = TotalDataAll.listUsualAllowance.Where(p => p.Code == usualAllowanceCode.ToString()).FirstOrDefault();
                        double allowanceAmountN = 0;
                        if (objUsualAllowance != null)
                        {
                            foreach (var itemHreDiscipline in listHreDiscipline)
                            {
                                if (itemHreDiscipline.AllowanceID1 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom1 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom1.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo1 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo1.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance1 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID2 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom2 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom2.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo2 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo2.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance2 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID3 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom3 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom3.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo3 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo3.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance3 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID4 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom4 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom4.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo4 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo4.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance4 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID5 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom5 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom5.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo5 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo5.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance5 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID6 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom6 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom6.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo6 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo6.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance6 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID7 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom7 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom7.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo7 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo7.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance7 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID8 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom8 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom8.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo8 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo8.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance8 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID9 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom9 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom9.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo9 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo9.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance9 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID10 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom10 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom10.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo10 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo10.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance10 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID11 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom11 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom11.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo11 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo11.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance11 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID12 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom12 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom12.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo12 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo12.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance12 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID13 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom13 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom13.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo13 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo13.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance13 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID14 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom14 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom14.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo14 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo14.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance14 ?? 0;
                                }
                                if (itemHreDiscipline.AllowanceID15 == objUsualAllowance.ID && (itemHreDiscipline.DateFrom15 == null ? DateTime.MinValue : itemHreDiscipline.DateFrom15.Value) <= CutOffDuration.MonthYear && (itemHreDiscipline.DateTo15 == null ? DateTime.MaxValue : itemHreDiscipline.DateTo15.Value) >= CutOffDuration.MonthYear)
                                {
                                    allowanceAmountN += itemHreDiscipline?.Allowance15 ?? 0;
                                }
                            }
                        }
                        item = new ElementFormula(PayrollElement.DYN83_HRE_DISCIPLINE_SUM_ALLOWANCE_.ToString() + usualAllowanceCode, allowanceAmountN, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }

            //Enum Đếm số dòng kỷ luật có hiệu lực trong năm tài chính động theo mã lý do kỷ luật
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN84_HRE_DISCIPLINE_COUNT_IN_YEAR_DISCIPLINERESON_.ToString(), string.Empty))
            {
                string status = string.Empty;
                dataComputeSer.GetListDiscipline(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN84_HRE_DISCIPLINE_COUNT_IN_YEAR_DISCIPLINERESON_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN84_HRE_DISCIPLINE_COUNT_IN_YEAR_DISCIPLINERESON_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN84_HRE_DISCIPLINE_COUNT_IN_YEAR_DISCIPLINERESON_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                    //Bước 1: Từ kỳ lương và nhân viên truyền vào, lấy ra kỳ lương tháng 1 và kỳ lương tháng 12 của năm đang tính lương thỏa
                    //Lấy ra kỳ lương tháng 1
                    var listCutOffDurationJanuary = TotalDataAll.listCutOffDuration.Where(p => p.MonthYear == new DateTime(CutOffDuration.MonthYear.Year, 01, 01)).ToList();
                    //Lấy ra kỳ lương tháng 12
                    var listCutOffDurationDecember = TotalDataAll.listCutOffDuration.Where(p => p.MonthYear == new DateTime(CutOffDuration.MonthYear.Year, 12, 01)).ToList();
                    var cutOffDurationJanuary = new Att_CutOffDurationEntity();
                    var cutOffDurationDecember = new Att_CutOffDurationEntity();
                    if (listCutOffDurationJanuary.Count > 0 && listCutOffDurationDecember.Count > 0)
                    {
                        //Kiểm tra tháng 1 có 1 dòng hay không
                        if (listCutOffDurationJanuary.Count == 1)
                        {
                            cutOffDurationJanuary = listCutOffDurationJanuary.FirstOrDefault();
                        }
                        else
                        {
                            //Chế độ lương NV
                            //hrm_sal_sp_get_Grade_Sal_Kaizen
                            var objSalGrade = TotalDataAll.dicGrade.GetValueOrNew(profileItem.ID).FirstOrDefault();
                            if (objSalGrade != null)
                            {
                                //Kỳ lương tháng 1
                                cutOffDurationJanuary = listCutOffDurationJanuary.FirstOrDefault(p => p.TypeDurationID == objSalGrade.TypeDurationID);
                                if (cutOffDurationJanuary == null)
                                {
                                    cutOffDurationJanuary = listCutOffDurationJanuary.ElementAtOrDefault(new System.Random().Next() % listCutOffDurationJanuary.Count());
                                }
                            }
                        }
                        //Kiểm tra tháng 12 có 1 dòng hay không
                        if (listCutOffDurationDecember.Count == 1)
                        {
                            cutOffDurationDecember = listCutOffDurationDecember.FirstOrDefault();
                        }
                        else
                        {
                            //Chế độ lương NV
                            //hrm_sal_sp_get_Grade_Sal_Kaizen
                            var objSalGrade = TotalDataAll.dicGrade.GetValueOrNew(profileItem.ID).FirstOrDefault();
                            if (objSalGrade != null)
                            {
                                //Kỳ lương tháng 12
                                cutOffDurationDecember = listCutOffDurationDecember.FirstOrDefault(p => p.TypeDurationID == objSalGrade.TypeDurationID);
                                if (cutOffDurationDecember == null)
                                {
                                    cutOffDurationDecember = listCutOffDurationDecember.ElementAtOrDefault(new System.Random().Next() % listCutOffDurationDecember.Count());
                                }
                            }
                        }
                    }
                    //Bước 2: Lấy ra Ngày bắt đầu (Att_CutOffDuration.DateStart) của kỳ lương tháng 1 và Ngày kết thúc (Att_CutOffDuration.DateEnd) của kỳ lương tháng 12
                    DateTime? dateStart = cutOffDurationJanuary?.DateStart ?? null;
                    DateTime? dateEnd = cutOffDurationDecember?.DateEnd ?? null;
                    var disciplineResonCode = string.Empty;
                    var numberDisciplineResonInYear = 0;
                    foreach (var itemFormula in ListFormula)
                    {
                        disciplineResonCode = itemFormula.Replace(_startWith, "");
                        //Bước 3: Lấy ra các dòng kỷ luật thỏa
                        var listHreDiscipline = TotalData600.dicDiscipline.GetValueOrNew(profileItem.ID);
                        var objCatNameEntity = TotalDataAll.ListCat_NameEntity.Where(p => p.NameEntityType == EnumDropDown.EntityType.E_DISCIPLINE_REASON.ToString() && p.Code == disciplineResonCode).FirstOrDefault();
                        if (objCatNameEntity != null)
                        {
                            //Bước 4: Số lần bị kỷ luật theo mã lý do kỷ luật
                            numberDisciplineResonInYear = listHreDiscipline.Where(p => p.DateOfEffective != null
                                           && p.DateOfEffective.Value <= dateEnd
                                           && p.DateOfEffective.Value >= dateStart
                                           && p.ApproveStatus == EnumDropDown.StatusApproved.E_APPROVED.ToString()
                                           && p.DisciplineResonID == objCatNameEntity.ID).ToList().Count();
                        }
                        item = new ElementFormula(PayrollElement.DYN84_HRE_DISCIPLINE_COUNT_IN_YEAR_DISCIPLINERESON_.ToString() + disciplineResonCode, numberDisciplineResonInYear, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Khoa.nguyen [13/08/2020] [0117798]: Thêm các enum phần tử lương khen thưởng	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN85_HRE_REWARA_SUM_REWARDVALUE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status1 = string.Empty;

                dataComputeSer.GetlistCatRewardedTitles(TotalData600, CutOffDuration, ref status);
                dataComputeSer.GetDicReward(TotalData600, CutOffDuration, ref status1);

                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status1))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN85_HRE_REWARA_SUM_REWARDVALUE_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN85_HRE_REWARA_SUM_REWARDVALUE_.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN85_HRE_REWARA_SUM_REWARDVALUE_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    string rewardedTitlesCode = string.Empty;
                    double? sumHreRewardValue = 0.0;
                    foreach (var itemFormula in ListFormula)
                    {
                        rewardedTitlesCode = itemFormula.Replace(_startWith, "");
                        var objcatRewardtitles = TotalData600.listcatRewardedTitles.FirstOrDefault(x => x.Code == rewardedTitlesCode);
                        if (objcatRewardtitles != null)
                        {
                            sumHreRewardValue = TotalData600.dicReward.GetValueOrNew(profileItem.ID).Where(x => x.Status == "E_APPROVED"
                             && (x.RewardedTitleID != null && x.RewardedTitleID.Value == objcatRewardtitles.ID)).Sum(s => s.RewardValue);
                        }

                        item = new ElementFormula(PayrollElement.DYN85_HRE_REWARA_SUM_REWARDVALUE_.ToString() + rewardedTitlesCode, sumHreRewardValue, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Khoa.nguyen [13/08/2020] [0117798]: Thêm các enum phần tử lương khen thưởng	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN86_HRE_REWARA_COUNT_REWARDOBJ_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status1 = string.Empty;

                dataComputeSer.GetlistCatRewardedTitles(TotalData600, CutOffDuration, ref status);
                dataComputeSer.GetDicReward(TotalData600, CutOffDuration, ref status1);

                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status1))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN86_HRE_REWARA_COUNT_REWARDOBJ_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN86_HRE_REWARA_COUNT_REWARDOBJ_.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN86_HRE_REWARA_COUNT_REWARDOBJ_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    string rewardedTitlesCode = string.Empty;
                    double? countHreRewardValue = 0;
                    foreach (var itemFormula in ListFormula)
                    {
                        rewardedTitlesCode = itemFormula.Replace(_startWith, "");
                        var objcatRewardtitles = TotalData600.listcatRewardedTitles.FirstOrDefault(x => x.Code == rewardedTitlesCode);
                        if (objcatRewardtitles != null)
                        {
                            countHreRewardValue = TotalData600.dicReward.GetValueOrNew(profileItem.ID).Where(x => x.Status == "E_APPROVED"
                             && (x.RewardedTitleID != null && x.RewardedTitleID.Value == objcatRewardtitles.ID)).Count();
                        }

                        item = new ElementFormula(PayrollElement.DYN86_HRE_REWARA_COUNT_REWARDOBJ_.ToString() + rewardedTitlesCode, countHreRewardValue, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Khoa.nguyen [14/08/2020] 0118587: [Bản đóng gói] Thêm phần tử lương hệ số trả lương ngày nghỉ, tăng ca	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN87_CAT_OVERTIMETYPE_RATEOFCASHWITHTIMEOFF_.ToString(), string.Empty))
            {
                var _startWith = PayrollElement.DYN87_CAT_OVERTIMETYPE_RATEOFCASHWITHTIMEOFF_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                string rateofCashWithTimeOffCode = string.Empty;
                double? rateofCashWithTimeOffValue = 0.0;
                foreach (var itemFormula in ListFormula)
                {
                    rateofCashWithTimeOffCode = itemFormula.Replace(_startWith, "");
                    var objOverTimeTypeAll = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(x => x.Code == rateofCashWithTimeOffCode);
                    if (objOverTimeTypeAll != null)
                    {
                        rateofCashWithTimeOffValue = objOverTimeTypeAll.RateofCashWithTimeOff;
                    }

                    item = new ElementFormula(PayrollElement.DYN87_CAT_OVERTIMETYPE_RATEOFCASHWITHTIMEOFF_.ToString() + rateofCashWithTimeOffCode, rateofCashWithTimeOffValue, 0, string.Empty);
                    listElementFormula.Add(item);
                    //xoa cac enum da xu ly trong list enum tong
                    formula.Remove(itemFormula);
                }
            }
            #endregion

            #region Khoa.nguyen [14/08/2020] 0118587: [Bản đóng gói] Thêm phần tử lương hệ số trả lương ngày nghỉ, tăng ca	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN88_CAT_LEAVEDAYTYPE_PAIDRATE_.ToString(), string.Empty))
            {
                var _startWith = PayrollElement.DYN88_CAT_LEAVEDAYTYPE_PAIDRATE_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                foreach (var itemFormula in ListFormula)
                {
                    string paidRateCode = string.Empty;
                    double? paidRateValue = 0.0;
                    paidRateCode = itemFormula.Replace(_startWith, "");
                    var objcatLeavedayType = TotalDataAll.listLeavedayType.FirstOrDefault(x => x.Code == paidRateCode);
                    if (objcatLeavedayType != null)
                    {
                        paidRateValue = objcatLeavedayType.PaidRate;
                    }

                    item = new ElementFormula(PayrollElement.DYN88_CAT_LEAVEDAYTYPE_PAIDRATE_.ToString() + paidRateCode, paidRateValue, 0, string.Empty);
                    listElementFormula.Add(item);
                    //xoa cac enum da xu ly trong list enum tong
                    formula.Remove(itemFormula);
                }
            }
            #endregion

            #region Khoa.nguyen [17/08/2020] 0117799: Thêm enum phần tử lương lấy ra NBĐ, NKT và số ngày bảng LeaveDay - phần tử động
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN89_ATT_LEAVEDAY_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN89_ATT_LEAVEDAY_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                var lstleaveTypeCode = ListFormula.Select(x => x.Replace(_startWith, "").Split("_AND_").FirstOrDefault()).ToList();

                dataComputeSer.GetDicAttLeaveDayStartEndLeaveDays(TotalData600, CutOffDuration, lstleaveTypeCode, ref status);

                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN89_ATT_LEAVEDAY_.ToString() + ") ";
                    foreach (var itemFormula in ListFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    //DYN88_LEAVEYDAY_MACODE_AND_DATESTART_AND_N_1
                    foreach (var itemFormula in ListFormula)
                    {
                        //MACODE_AND_DATESTART_AND_N_1
                        var formularReplace = itemFormula.Replace(_startWith, "");

                        //_MACODE_AND_DATESTART_AND_N_1
                        var listFormularSplitAfter = formularReplace.Split("_AND_");
                        DateTime? date = null;
                        double? leaveDay = 0;
                        int take = 0;
                        var variableDate = string.Empty;
                        if (listFormularSplitAfter.Count == 3)
                        {
                            var codeTypeLeave = listFormularSplitAfter.FirstOrDefault();
                            variableDate = listFormularSplitAfter[1];
                            var index = listFormularSplitAfter.LastOrDefault().Split("N_").FirstOrDefault();

                            if (int.TryParse(index, out take))
                            {
                                var listLeaveDayByProfile = TotalData600.dicAttLeaveDayEntityLeaveDays.GetValueOrNew(profileItem.ID)
                                    .Where(p => p.LeaveDayTypeCode == codeTypeLeave
                                    && profileItem.DatehireNew != null ? (p.DateStart >= profileItem.DatehireNew && p.DateStart <= profileItem.DateQuit)
                                    : (p.DateStart >= profileItem.DateHire && p.DateStart <= profileItem.DateQuit)
                                    ).Take(6).ToList();

                                if (listLeaveDayByProfile.Count >= take)
                                {
                                    var objLeaveDay = listLeaveDayByProfile.OrderBy(p => p.DateStart).ToList()[take - 1];
                                    switch (variableDate)
                                    {
                                        case "DATESTART":
                                            date = objLeaveDay?.DateStart ?? null;
                                            break;
                                        case "DATEEND":
                                            date = objLeaveDay?.DateEnd ?? null;
                                            break;
                                        default:
                                            leaveDay = objLeaveDay?.LeaveDays ?? 0;
                                            break;
                                    }
                                }
                            }
                        }
                        if (variableDate.IndexOf("DATESTART") != -1 || variableDate.IndexOf("DATEEND") != -1)
                        {
                            item = new ElementFormula(itemFormula, date, 0);
                            listElementFormula.Add(item);
                            formula.Remove(itemFormula);
                        }
                        else if (variableDate.IndexOf("LEAVEDAYS") != -1)
                        {
                            item = new ElementFormula(itemFormula, leaveDay, 0);
                            listElementFormula.Add(item);
                            formula.Remove(itemFormula);
                        }
                        else
                        {
                            item = new ElementFormula(itemFormula, null, 0);
                            listElementFormula.Add(item);
                            formula.Remove(itemFormula);
                        }
                    }
                }
            }
            #endregion

            #region Khoa.nguyen [06/10/2020] 119675: Modify lấy thêm phần tử lương	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN90_SAL_PRODUCTIVEBUSINESS_SUMTARGETQTY_.ToString(), "")
                || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN91_SAL_PRODUCTIVEBUSINESS_SUMACTUALQTY_.ToString(), "")
                || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN92_SAL_PRODUCTIVEBUSINESS_SUMOVERQTY_.ToString(), "")
                || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN93_SAL_PRODUCTIVEBUSINESS_PRODUCTNAME_.ToString(), "")
                || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN94_SAL_PRODUCTIVEBUSINESS_PRODUCTCODE_.ToString(), "")
                || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN95_SAL_SALARYBUSINESS_AMOUNT_.ToString(), "")
                )
            {
                string status = string.Empty;
                string status2 = string.Empty;
                dataComputeSer.GetDicSalaryProductiveBusiness(TotalData600, CutOffDuration, ref status);
                dataComputeSer.GetDicSalaryBusiness(TotalData600, CutOffDuration, ref status2);

                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status2))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN90_SAL_PRODUCTIVEBUSINESS_SUMTARGETQTY_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN90_SAL_PRODUCTIVEBUSINESS_SUMTARGETQTY_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);

                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN91_SAL_PRODUCTIVEBUSINESS_SUMACTUALQTY_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN91_SAL_PRODUCTIVEBUSINESS_SUMACTUALQTY_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);

                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN92_SAL_PRODUCTIVEBUSINESS_SUMOVERQTY_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN92_SAL_PRODUCTIVEBUSINESS_SUMOVERQTY_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);

                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN93_SAL_PRODUCTIVEBUSINESS_PRODUCTNAME_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN93_SAL_PRODUCTIVEBUSINESS_PRODUCTNAME_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);

                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN94_SAL_PRODUCTIVEBUSINESS_PRODUCTCODE_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN94_SAL_PRODUCTIVEBUSINESS_PRODUCTCODE_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);

                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN95_SAL_SALARYBUSINESS_AMOUNT_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN95_SAL_SALARYBUSINESS_AMOUNT_.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    //Lấy dữ liệu gom nhóm
                    var lstProductiveBusinessProfile = TotalData600.dicSalProductiveBusiness.GetValueOrNew(profileItem.ID).ToList();
                    // Nhóm theo ProductID 
                    var lstProductiveBusinessGroup = lstProductiveBusinessProfile.GroupBy(x => new { x.ProductID }).Select(x => x.FirstOrDefault()).OrderBy(x => x.ProductCode).ToList();
                    // Đếm số nhóm gôm được
                    int countGroup = lstProductiveBusinessGroup != null ? lstProductiveBusinessGroup.Count : 0;

                    #region phần tử lấy lượng chỉ tiêu trong kỳ lương
                    var strStartTargetQty = PayrollElement.DYN90_SAL_PRODUCTIVEBUSINESS_SUMTARGETQTY_.ToString();
                    List<string> ListFormulaTargetQty = formula.Where(m => m.StartsWith(strStartTargetQty)).Distinct().ToList();

                    foreach (var objformular in ListFormulaTargetQty)
                    {
                        double sumQuantity = 0;
                        // Tách chuỗi lấy số thứ tự của phần tử code
                        var index = objformular.Replace(PayrollElement.DYN90_SAL_PRODUCTIVEBUSINESS_SUMTARGETQTY_.ToString(), "");
                        int indexConfig = 0;
                        if (int.TryParse(index, out indexConfig))
                        {
                            if (indexConfig <= countGroup)
                            {
                                if (lstProductiveBusinessGroup[indexConfig - 1] != null && !Common.IsNullOrGuidEmpty(lstProductiveBusinessGroup[indexConfig - 1].ProductID))
                                {
                                    sumQuantity = lstProductiveBusinessProfile.Where(x =>
                                    x.TargetQty != null &&
                                    x.ProductID == lstProductiveBusinessGroup[indexConfig - 1].ProductID).Sum(x => x.TargetQty.Value);
                                }
                            }
                        }

                        item = new ElementFormula(objformular, sumQuantity, 0);
                        listElementFormula.Add(item);
                        formula.Remove(objformular);
                    }
                    #endregion

                    #region Phần tử lấy Sản lượng thực đạt đã làm trong kỳ lương
                    var strStartActualQty = PayrollElement.DYN91_SAL_PRODUCTIVEBUSINESS_SUMACTUALQTY_.ToString();
                    List<string> ListFormulaActualQty = formula.Where(m => m.StartsWith(strStartActualQty)).Distinct().ToList();

                    foreach (var objformular in ListFormulaActualQty)
                    {
                        double sumActualQty = 0;
                        // Tách chuỗi lấy số thứ tự của phần tử code
                        var index = objformular.Replace(PayrollElement.DYN91_SAL_PRODUCTIVEBUSINESS_SUMACTUALQTY_.ToString(), "");
                        int indexConfig = 0;
                        if (int.TryParse(index, out indexConfig))
                        {
                            if (indexConfig <= countGroup)
                            {
                                if (lstProductiveBusinessGroup[indexConfig - 1] != null && !Common.IsNullOrGuidEmpty(lstProductiveBusinessGroup[indexConfig - 1].ProductID))
                                {
                                    sumActualQty = lstProductiveBusinessProfile.Where(x =>
                                    x.ActualQty != null &&
                                    x.ProductID == lstProductiveBusinessGroup[indexConfig - 1].ProductID).Sum(x => x.ActualQty.Value);
                                }
                            }
                        }

                        item = new ElementFormula(objformular, sumActualQty, 0);
                        listElementFormula.Add(item);
                        formula.Remove(objformular);
                    }
                    #endregion

                    #region Phần tử lấy Sản lượng vượt chỉ tiêu đã làm trong kỳ lương
                    var strStartOverQty = PayrollElement.DYN92_SAL_PRODUCTIVEBUSINESS_SUMOVERQTY_.ToString();
                    List<string> ListFormulaOverQty = formula.Where(m => m.StartsWith(strStartOverQty)).Distinct().ToList();

                    foreach (var objformular in ListFormulaOverQty)
                    {
                        double sumOverQty = 0;
                        // Tách chuỗi lấy số thứ tự của phần tử code
                        var index = objformular.Replace(PayrollElement.DYN92_SAL_PRODUCTIVEBUSINESS_SUMOVERQTY_.ToString(), "");
                        int indexConfig = 0;
                        if (int.TryParse(index, out indexConfig))
                        {
                            if (indexConfig <= countGroup)
                            {
                                if (lstProductiveBusinessGroup[indexConfig - 1] != null && !Common.IsNullOrGuidEmpty(lstProductiveBusinessGroup[indexConfig - 1].ProductID))
                                {
                                    sumOverQty = lstProductiveBusinessProfile.Where(x =>
                                    x.OverQty != null &&
                                    x.ProductID == lstProductiveBusinessGroup[indexConfig - 1].ProductID).Sum(x => x.OverQty.Value);
                                }
                            }
                        }

                        item = new ElementFormula(objformular, sumOverQty, 0);
                        listElementFormula.Add(item);
                        formula.Remove(objformular);
                    }
                    #endregion

                    #region Phần tử ProductName
                    var strStartProductName = PayrollElement.DYN93_SAL_PRODUCTIVEBUSINESS_PRODUCTNAME_.ToString();
                    List<string> ListFormulaProductName = formula.Where(m => m.StartsWith(strStartProductName)).Distinct().ToList();

                    foreach (var objformular in ListFormulaProductName)
                    {
                        var productName = string.Empty;
                        // Tách chuỗi lấy số thứ tự của phần tử code
                        var index = objformular.Replace(PayrollElement.DYN93_SAL_PRODUCTIVEBUSINESS_PRODUCTNAME_.ToString(), "");
                        int indexConfig = 0;
                        if (int.TryParse(index, out indexConfig))
                        {
                            if (indexConfig <= countGroup)
                            {
                                if (lstProductiveBusinessGroup[indexConfig - 1] != null && !string.IsNullOrEmpty(lstProductiveBusinessGroup[indexConfig - 1].ProductName))
                                {
                                    productName = lstProductiveBusinessGroup[indexConfig - 1].ProductName;
                                }
                            }
                        }

                        item = new ElementFormula(objformular, productName, 0);
                        listElementFormula.Add(item);
                        formula.Remove(objformular);
                    }
                    #endregion

                    #region Phần tử Code
                    var strStartProductCode = PayrollElement.DYN94_SAL_PRODUCTIVEBUSINESS_PRODUCTCODE_.ToString();
                    List<string> ListFormulaProductCode = formula.Where(m => m.StartsWith(strStartProductCode)).Distinct().ToList();

                    foreach (var objformular in ListFormulaProductCode)
                    {
                        var productCode = string.Empty;
                        // Tách chuỗi lấy số thứ tự của phần tử code
                        var index = objformular.Replace(PayrollElement.DYN94_SAL_PRODUCTIVEBUSINESS_PRODUCTCODE_.ToString(), "");
                        int indexConfig = 0;
                        if (int.TryParse(index, out indexConfig))
                        {
                            if (indexConfig <= countGroup)
                            {
                                if (lstProductiveBusinessGroup[indexConfig - 1] != null && !string.IsNullOrEmpty(lstProductiveBusinessGroup[indexConfig - 1].ProductCode))
                                {
                                    productCode = lstProductiveBusinessGroup[indexConfig - 1].ProductCode;
                                }
                            }
                        }

                        item = new ElementFormula(objformular, productCode, 0);
                        listElementFormula.Add(item);
                        formula.Remove(objformular);
                    }
                    #endregion

                    #region Phần tử lương Số tiền của từng sản phẩm
                    var strStartProductAmount = PayrollElement.DYN95_SAL_SALARYBUSINESS_AMOUNT_.ToString();
                    List<string> ListFormulaProductAmout = formula.Where(m => m.StartsWith(strStartProductAmount)).Distinct().ToList();

                    foreach (var objformular in ListFormulaProductAmout)
                    {
                        double sumAmount = 0;
                        // Tách chuỗi lấy số thứ tự của phần tử code
                        var index = objformular.Replace(PayrollElement.DYN95_SAL_SALARYBUSINESS_AMOUNT_.ToString(), "");
                        int indexConfig = 0;
                        if (int.TryParse(index, out indexConfig))
                        {
                            if (indexConfig <= countGroup)
                            {
                                if (lstProductiveBusinessGroup[indexConfig - 1] != null && !Common.IsNullOrGuidEmpty(lstProductiveBusinessGroup[indexConfig - 1].ProductID))
                                {
                                    sumAmount = TotalData600.dicSalaryBusiness.GetValueOrNew(profileItem.ID).Where(x => x.Type == Sal_ProductiveBusinessType.E_Month.ToString()
                                     && x.ProductID == lstProductiveBusinessGroup[indexConfig - 1].ProductID
                                     && x.Amount != null
                                    ).Sum(s => s.Amount.Value);
                                }
                            }
                        }

                        item = new ElementFormula(objformular, sumAmount, 0);
                        listElementFormula.Add(item);
                        formula.Remove(objformular);
                    }
                    #endregion
                }
            }
            #endregion

            #region Hien.Le [29/10/2020] 0119670 Phần tử tính lương: Thêm phần tử lương giờ nghỉ bù trạng thái thanh toán
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN96_ATT_FINALIZELEAVE_SUM_AVAILABLETRANSFER_.ToString(), string.Empty))
            {
                string status = string.Empty;
                dataComputeSer.GetdicAttFinalizeLeave(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN96_ATT_FINALIZELEAVE_SUM_AVAILABLETRANSFER_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN96_ATT_FINALIZELEAVE_SUM_AVAILABLETRANSFER_.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN96_ATT_FINALIZELEAVE_SUM_AVAILABLETRANSFER_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    string methodPayment = string.Empty;
                    double? availableTransfer = 0;
                    foreach (var itemFormula in ListFormula)
                    {
                        methodPayment = itemFormula.Replace(_startWith, "");

                        var listAttFinalizeLeave = TotalData600.dicAttFinalizeLeave.GetValueOrNew(profileItem.ID);
                        availableTransfer = listAttFinalizeLeave.Where(p => p.AvailableTransfer != null && p.MethodPayment == methodPayment).Sum(p => p.AvailableTransfer.Value);

                        item = new ElementFormula(PayrollElement.DYN96_ATT_FINALIZELEAVE_SUM_AVAILABLETRANSFER_.ToString() + methodPayment, availableTransfer, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region [NghiaDang] [29/10/2020] [120497] : Phần tử tính lương động: Số ngày nghỉ theo mã loại ngày nghỉ trên bàng công tháng tính lương -1 đến -12
            //Số ngày nghỉ tháng lùi
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN97_ATT_LEAVE_SUM_.ToString(), string.Empty))
            {
                string strStartsWith = PayrollElement.DYN97_ATT_LEAVE_SUM_.ToString();

                var listElement = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();

                var _tmpAttendanceTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID);
                foreach (var element in listElement)
                {
                    var currentElementSplit = element.Replace(strStartsWith, "");
                    string[] arrCurrencyCode = currentElementSplit.Split("_BY_N_").ToArray();
                    var itemLeaveday = TotalDataAll.listLeavedayType.Where(m => m.Code == arrCurrencyCode[0]).FirstOrDefault();

                    var prevMonth = CutOffDuration.MonthYear.AddMonths(-(Int32.Parse(arrCurrencyCode[1])));
                    var _tmpAttendanceTableByMonthBefore = _tmpAttendanceTable.Where(x => x.MonthYear.Value.Month == prevMonth.Month && x.MonthYear.Value.Year == prevMonth.Year).FirstOrDefault();
                    double value = 0;
                    if (itemLeaveday != null && _tmpAttendanceTableByMonthBefore != null)
                    {
                        if (_tmpAttendanceTableByMonthBefore.LeaveDay1Type != null && _tmpAttendanceTableByMonthBefore.LeaveDay1Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTableByMonthBefore.LeaveDay1Days != null ? (double)_tmpAttendanceTableByMonthBefore.LeaveDay1Days : 0;
                        }
                        if (_tmpAttendanceTableByMonthBefore.LeaveDay2Type != null && _tmpAttendanceTableByMonthBefore.LeaveDay2Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTableByMonthBefore.LeaveDay2Days != null ? (double)_tmpAttendanceTableByMonthBefore.LeaveDay2Days : 0;
                        }
                        if (_tmpAttendanceTableByMonthBefore.LeaveDay3Type != null && _tmpAttendanceTableByMonthBefore.LeaveDay3Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTableByMonthBefore.LeaveDay3Days != null ? (double)_tmpAttendanceTableByMonthBefore.LeaveDay3Days : 0;
                        }
                        if (_tmpAttendanceTableByMonthBefore.LeaveDay4Type != null && _tmpAttendanceTableByMonthBefore.LeaveDay4Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTableByMonthBefore.LeaveDay4Days != null ? (double)_tmpAttendanceTableByMonthBefore.LeaveDay4Days : 0;
                        }
                        if (_tmpAttendanceTableByMonthBefore.LeaveDay5Type != null && _tmpAttendanceTableByMonthBefore.LeaveDay5Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTableByMonthBefore.LeaveDay5Days != null ? (double)_tmpAttendanceTableByMonthBefore.LeaveDay5Days : 0;
                        }
                        if (_tmpAttendanceTableByMonthBefore.LeaveDay6Type != null && _tmpAttendanceTableByMonthBefore.LeaveDay6Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTableByMonthBefore.LeaveDay6Days != null ? (double)_tmpAttendanceTableByMonthBefore.LeaveDay6Days : 0;
                        }
                        if (_tmpAttendanceTableByMonthBefore.LeaveDay7Type != null && _tmpAttendanceTableByMonthBefore.LeaveDay7Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTableByMonthBefore.LeaveDay7Days != null ? (double)_tmpAttendanceTableByMonthBefore.LeaveDay7Days : 0;
                        }
                        if (_tmpAttendanceTableByMonthBefore.LeaveDay8Type != null && _tmpAttendanceTableByMonthBefore.LeaveDay8Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTableByMonthBefore.LeaveDay8Days != null ? (double)_tmpAttendanceTableByMonthBefore.LeaveDay8Days : 0;
                        }
                        if (_tmpAttendanceTableByMonthBefore.LeaveDay9Type != null && _tmpAttendanceTableByMonthBefore.LeaveDay9Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTableByMonthBefore.LeaveDay9Days != null ? (double)_tmpAttendanceTableByMonthBefore.LeaveDay9Days : 0;
                        }
                        if (_tmpAttendanceTableByMonthBefore.LeaveDay10Type != null && _tmpAttendanceTableByMonthBefore.LeaveDay10Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTableByMonthBefore.LeaveDay10Days != null ? (double)_tmpAttendanceTableByMonthBefore.LeaveDay10Days : 0;
                        }
                        if (_tmpAttendanceTableByMonthBefore.LeaveDay11Type != null && _tmpAttendanceTableByMonthBefore.LeaveDay11Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTableByMonthBefore.LeaveDay11Days != null ? (double)_tmpAttendanceTableByMonthBefore.LeaveDay11Days : 0;
                        }
                        if (_tmpAttendanceTableByMonthBefore.LeaveDay12Type != null && _tmpAttendanceTableByMonthBefore.LeaveDay12Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTableByMonthBefore.LeaveDay12Days != null ? (double)_tmpAttendanceTableByMonthBefore.LeaveDay12Days : 0;
                        }
                    }
                    item = new ElementFormula(element, value, 0);
                    listElementFormula.Add(item);
                    formula.Remove(element);
                }
            }
            #endregion

            #region Khoa.nguyen [24/12/2020] 0121400: đếm số ngày công hưởng lương cho trường hợp phụ cấp phát sinh tính theo ngày	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN98_ALLOWANCE_.ToString(), string.Empty)
                )
            {

                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN98_ALLOWANCE_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN98_ALLOWANCE_.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);


                }
                else
                {
                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                    var splitAnd = string.Empty;
                    var placeFrom = string.Empty;
                    var placeTo = string.Empty;
                    var codeUnusualAllowanceSlpit = new List<string>();
                    var codeUnusualAllowanceCfgStart = formula.Where(m => m.StartsWith(PayrollElement.DYN98_ALLOWANCE_.ToString())).FirstOrDefault();
                    if (codeUnusualAllowanceCfgStart != null)
                    {
                        splitAnd = codeUnusualAllowanceCfgStart.Replace(PayrollElement.DYN98_ALLOWANCE_.ToString(), "");
                    }
                    codeUnusualAllowanceSlpit = splitAnd.Split("_AND_");

                    DateTime? monthStart1 = null;
                    DateTime? monthStart2 = null;
                    DateTime? monthStart3 = null;
                    DateTime? monthStart4 = null;
                    DateTime? monthStart5 = null;
                    DateTime? monthEnd1 = null;
                    DateTime? monthEnd2 = null;
                    DateTime? monthEnd3 = null;
                    DateTime? monthEnd4 = null;
                    DateTime? monthEnd5 = null;

                    if (codeUnusualAllowanceSlpit.Count > 1 && !string.IsNullOrEmpty(codeUnusualAllowanceSlpit[1]))
                    {
                        var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(s => s.Code == codeUnusualAllowanceSlpit[1]).FirstOrDefault();
                        if (objUnusualAllowanceCfg != null)
                        {

                            var lstUnusualAllwance = listUnusualAllowanceProfile.Where(x => x.ProfileID == profileItem.ID
                                                                             && (x.MonthStart != null && x.MonthStart <= CutOffDuration.DateEnd)
                                                                             && (x.MonthEnd == null ? DateTime.MaxValue >= CutOffDuration.DateStart : x.MonthEnd >= CutOffDuration.DateStart)
                                                                             && (x.UnusualEDTypeID != null && x.UnusualEDTypeID == objUnusualAllowanceCfg.ID)).OrderBy(x => x.MonthStart).ToList();
                            if (lstUnusualAllwance.Count > 0)
                            {
                                if (lstUnusualAllwance.Count >= 1)
                                {
                                    monthStart1 = lstUnusualAllwance[0].MonthStart;
                                    monthEnd1 = lstUnusualAllwance[0].MonthEnd;
                                }
                                if (lstUnusualAllwance.Count >= 2)
                                {
                                    monthStart2 = lstUnusualAllwance[1].MonthStart;
                                    monthEnd2 = lstUnusualAllwance[1].MonthEnd;
                                }
                                if (lstUnusualAllwance.Count >= 3)
                                {
                                    monthStart3 = lstUnusualAllwance[2].MonthStart;
                                    monthEnd3 = lstUnusualAllwance[2].MonthEnd;
                                }
                                if (lstUnusualAllwance.Count >= 4)
                                {
                                    monthStart4 = lstUnusualAllwance[3].MonthStart;
                                    monthEnd4 = lstUnusualAllwance[3].MonthEnd;
                                }
                                if (lstUnusualAllwance.Count >= 5)
                                {
                                    monthStart5 = lstUnusualAllwance[4].MonthStart;
                                    monthEnd5 = lstUnusualAllwance[4].MonthEnd;
                                }
                            }
                        }
                    }

                    item = new ElementFormula(PayrollElement.DYN98_ALLOWANCE_.ToString() + "MSTART_" + "1" + "_AND_" + codeUnusualAllowanceSlpit[1], monthStart1.ToString() ?? string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.DYN98_ALLOWANCE_.ToString() + "MSTART_" + "2" + "_AND_" + codeUnusualAllowanceSlpit[1], monthStart2.ToString() ?? string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.DYN98_ALLOWANCE_.ToString() + "MSTART_" + "3" + "_AND_" + codeUnusualAllowanceSlpit[1], monthStart3.ToString() ?? string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.DYN98_ALLOWANCE_.ToString() + "MSTART_" + "4" + "_AND_" + codeUnusualAllowanceSlpit[1], monthStart4.ToString() ?? string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.DYN98_ALLOWANCE_.ToString() + "MSTART_" + "5" + "_AND_" + codeUnusualAllowanceSlpit[1], monthStart5.ToString() ?? string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.DYN98_ALLOWANCE_.ToString() + "MEND_" + "1" + "_AND_" + codeUnusualAllowanceSlpit[1], monthEnd1.ToString() ?? string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.DYN98_ALLOWANCE_.ToString() + "MEND_" + "2" + "_AND_" + codeUnusualAllowanceSlpit[1], monthEnd2.ToString() ?? string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.DYN98_ALLOWANCE_.ToString() + "MEND_" + "3" + "_AND_" + codeUnusualAllowanceSlpit[1], monthEnd3.ToString() ?? string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.DYN98_ALLOWANCE_.ToString() + "MEND_" + "4" + "_AND_" + codeUnusualAllowanceSlpit[1], monthEnd4.ToString() ?? string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.DYN98_ALLOWANCE_.ToString() + "MEND_" + "5" + "_AND_" + codeUnusualAllowanceSlpit[1], monthEnd5.ToString() ?? string.Empty, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Phần tử kết quả đánh giá gần nhất theo ngày cuối kỳ lương
            //[07032016][bang.nguyen][63743][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN99_PERFORMANCE_TOTALMARK_.ToString(), string.Empty))
            {
                string strStartsWith = PayrollElement.DYN99_PERFORMANCE_TOTALMARK_.ToString();
                var listElement = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();

                string status = string.Empty;
                dataComputeSer.GetDicPerformance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN99_PERFORMANCE_TOTALMARK_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN99_PERFORMANCE_TOTALMARK_.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listPerformanceByProfile = TotalData600.dicPerformance.GetValueOrNew(profileItem.ID);

                    foreach (var element in listElement)
                    {
                        var evaPerformanceCode = element.Replace(strStartsWith, "");
                        var objPerformanceType = TotalDataAll.listPerformanceType.Where(m => m.Code == evaPerformanceCode).FirstOrDefault();
                        double _totalMark = 0;
                        //lần đánh giá gần nhất so với ngày cuối kì lương
                        var objPerformentceByProfile = new Eva_PerformanceEntity();
                        if (objPerformanceType != null)
                        {
                            objPerformentceByProfile = listPerformanceByProfile.Where(s => s.PeriodFromDate <= CutOffDuration.DateEnd
                                                                                       && s.Status == PerformaceEvaStatus.E_APPROVE_END.ToString()
                                                                                       && s.PerformanceTypeID == objPerformanceType.ID).OrderByDescending(s => s.PeriodFromDate).FirstOrDefault();
                        }
                        if (objPerformentceByProfile != null && objPerformentceByProfile.TotalMark != null)
                        {
                            _totalMark = objPerformentceByProfile.TotalMark.Value;
                        }
                        item = new ElementFormula(element, _totalMark, 0);
                        listElementFormula.Add(item);
                        formula.Remove(element);
                    }
                }
            }
            #endregion

            #region Hien.Le [08/01/2021] 123092: [Spindex] Lấy phần tử lương cơ bản,Tổng số giờ tăng ca trước/ sau trong kỳ tăng ca
            //Trước thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN100_SUM_ATTI_OT_BEFORE_CHANGESALARY_.ToString(), string.Empty))
            {
                if (CutOffDuration.OvertimeStart != null && CutOffDuration.OvertimeEnd != null)
                {
                    string status = string.Empty;
                    dataComputeSer.GetdicAttendanceTableItemAll(TotalData600, TotalData600.strOrderByProfile, CutOffDuration, ref status);
                    if (!string.IsNullOrEmpty(status))
                    {
                        TotalData600.statusBugStore += status + " (DYN100_SUM_ATTI_OT_BEFORE_CHANGESALARY_) ";
                        item = new ElementFormula("DYN100_SUM_ATTI_OT_BEFORE_CHANGESALARY_", 0, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        //Lương cơ bản theo kỳ lương
                        var listBasicSalaryByProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID)
                               .Where(p => p.ProfileID == profileItem.ID
                           && p.DateOfEffect <= CutOffDuration.OvertimeEnd
                           && p.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(p => p.DateOfEffect).ToList();

                        var _startWith = PayrollElement.DYN100_SUM_ATTI_OT_BEFORE_CHANGESALARY_.ToString();

                        //lấy các phần tử cần lấy dữ liệu
                        List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                        string overTimeTypeCode = string.Empty;

                        foreach (var itemFormula in ListFormula)
                        {
                            double? totalOverTime = 0;
                            overTimeTypeCode = itemFormula.Replace(_startWith, "");
                            var objOverTimeType = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(p => p.Code == overTimeTypeCode);

                            if (CheckIsChangeBasicSalary(listBasicSalaryByProfile, CutOffDuration.OvertimeStart.Value, CutOffDuration.OvertimeEnd.Value, profileItem.ID))
                            {
                                var objSalaryChange = listBasicSalaryByProfile.
                                    Where(p => p.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                & p.DateOfEffect <= CutOffDuration.OvertimeEnd).OrderByDescending(p => p.DateOfEffect).FirstOrDefault();

                                if (objSalaryChange != null)
                                {
                                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                                    DateTime dateStart1 = CutOffDuration.OvertimeStart.Value;
                                    DateTime dateStart2 = objSalaryChange.DateOfEffect;

                                    if (objAttendanceTableProCut != null)
                                    {
                                        //Dữ liệu công chi tiết
                                        var _listAttendanceItemByProfile = TotalData600.dicAttAttendanceTableItemOvertime.GetValueOrNew(profileItem.ID).Where(m => m.WorkDate < dateStart2 && m.WorkDate >= dateStart1).ToList();
                                        foreach (var tableItem in _listAttendanceItemByProfile)
                                        {
                                            if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == objOverTimeType.ID)
                                            {
                                                totalOverTime += tableItem.OvertimeHours;
                                            }
                                            if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == objOverTimeType.ID)
                                            {
                                                totalOverTime += tableItem.ExtraOvertimeHours;
                                            }
                                            if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == objOverTimeType.ID)
                                            {
                                                totalOverTime += tableItem.ExtraOvertimeHours2;
                                            }
                                            if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == objOverTimeType.ID)
                                            {
                                                totalOverTime += tableItem.ExtraOvertimeHours3;
                                            }
                                            if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == objOverTimeType.ID)
                                            {
                                                totalOverTime += tableItem.ExtraOvertimeHours4.Value;
                                            }
                                        }
                                    }
                                }
                                item = new ElementFormula(PayrollElement.DYN100_SUM_ATTI_OT_BEFORE_CHANGESALARY_.ToString() + overTimeTypeCode, totalOverTime, 0, string.Empty);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.DYN100_SUM_ATTI_OT_BEFORE_CHANGESALARY_.ToString() + overTimeTypeCode, totalOverTime, 0, string.Empty);
                            }
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(itemFormula);
                        }
                    }
                }
            }
            //Sau thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN101_SUM_ATTI_OT_AFTER_CHANGESALARY_.ToString(), string.Empty))
            {
                if (CutOffDuration.OvertimeStart != null && CutOffDuration.OvertimeEnd != null)
                {
                    string status = string.Empty;
                    dataComputeSer.GetdicAttendanceTableItemAll(TotalData600, TotalData600.strOrderByProfile, CutOffDuration, ref status);
                    if (!string.IsNullOrEmpty(status))
                    {
                        TotalData600.statusBugStore += status + " (DYN101_SUM_ATTI_OT_AFTER_CHANGESALARY_) ";
                        item = new ElementFormula("DYN101_SUM_ATTI_OT_AFTER_CHANGESALARY_", 0, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        //Lương cơ bản theo kỳ lương
                        var listBasicSalaryByProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID)
                               .Where(p => p.ProfileID == profileItem.ID
                           && p.DateOfEffect <= CutOffDuration.OvertimeEnd
                           && p.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(p => p.DateOfEffect).ToList();

                        var _startWith = PayrollElement.DYN101_SUM_ATTI_OT_AFTER_CHANGESALARY_.ToString();

                        //lấy các phần tử cần lấy dữ liệu
                        List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                        string overTimeTypeCode = string.Empty;

                        foreach (var itemFormula in ListFormula)
                        {
                            double? totalOverTime = 0;
                            overTimeTypeCode = itemFormula.Replace(_startWith, "");
                            var objOverTimeType = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(p => p.Code == overTimeTypeCode);

                            if (CheckIsChangeBasicSalary(listBasicSalaryByProfile, CutOffDuration.OvertimeStart.Value, CutOffDuration.OvertimeEnd.Value, profileItem.ID))
                            {
                                var objSalaryChange = listBasicSalaryByProfile.
                                    Where(p => p.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                & p.DateOfEffect <= CutOffDuration.OvertimeEnd).OrderByDescending(p => p.DateOfEffect).FirstOrDefault();
                                if (objSalaryChange != null)
                                {
                                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                                    DateTime dateStart1 = objSalaryChange.DateOfEffect;
                                    DateTime dateStart2 = CutOffDuration.OvertimeEnd.Value;

                                    if (objAttendanceTableProCut != null)
                                    {
                                        //Dữ liệu công chi tiết
                                        var _listAttendanceItemByProfile = TotalData600.dicAttAttendanceTableItemOvertime.GetValueOrNew(profileItem.ID).Where(m => m.WorkDate <= dateStart2 && m.WorkDate >= dateStart1).ToList();

                                        foreach (var tableItem in _listAttendanceItemByProfile)
                                        {
                                            if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == objOverTimeType.ID)
                                            {
                                                totalOverTime += tableItem.OvertimeHours;
                                            }
                                            if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == objOverTimeType.ID)
                                            {
                                                totalOverTime += tableItem.ExtraOvertimeHours;
                                            }
                                            if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == objOverTimeType.ID)
                                            {
                                                totalOverTime += tableItem.ExtraOvertimeHours2;
                                            }
                                            if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == objOverTimeType.ID)
                                            {
                                                totalOverTime += tableItem.ExtraOvertimeHours3;
                                            }
                                            if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == objOverTimeType.ID)
                                            {
                                                totalOverTime += tableItem.ExtraOvertimeHours4.Value;
                                            }
                                        }
                                    }
                                }
                                item = new ElementFormula(PayrollElement.DYN101_SUM_ATTI_OT_AFTER_CHANGESALARY_.ToString() + overTimeTypeCode, totalOverTime, 0, string.Empty);
                            }
                            else //Không đổi thay lương trong tháng
                            {
                                //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                                DateTime dateStart1 = CutOffDuration.OvertimeStart.Value;
                                DateTime dateStart2 = CutOffDuration.OvertimeEnd.Value;
                                if (objAttendanceTableProCut != null)
                                {
                                    //Dữ liệu công chi tiết
                                    var _listAttendanceItemByProfile = TotalData600.dicAttAttendanceTableItemOvertime.GetValueOrNew(profileItem.ID).Where(m => m.WorkDate <= dateStart2 && m.WorkDate >= dateStart1).ToList();
                                    foreach (var tableItem in _listAttendanceItemByProfile)
                                    {
                                        if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == objOverTimeType.ID)
                                        {
                                            totalOverTime += tableItem.OvertimeHours;
                                        }
                                        if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == objOverTimeType.ID)
                                        {
                                            totalOverTime += tableItem.ExtraOvertimeHours;
                                        }
                                        if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == objOverTimeType.ID)
                                        {
                                            totalOverTime += tableItem.ExtraOvertimeHours2;
                                        }
                                        if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == objOverTimeType.ID)
                                        {
                                            totalOverTime += tableItem.ExtraOvertimeHours3;
                                        }
                                        if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == objOverTimeType.ID)
                                        {
                                            totalOverTime += tableItem.ExtraOvertimeHours4.Value;
                                        }
                                    }
                                }
                                item = new ElementFormula(PayrollElement.DYN101_SUM_ATTI_OT_AFTER_CHANGESALARY_.ToString() + overTimeTypeCode, totalOverTime, 0, string.Empty);
                            }
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(itemFormula);
                        }
                    }
                }
            }
            #endregion

            #region Hien.Le [29/01/2021] 0123762: [HRMPro8.COLGATE v8.7.08.04.25.01] Lấy lên mức kỉ luật 3 tháng liền trước tháng tính lương để tạo phần tử tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN102_SAL_SUM_DISCIPLINE_AMOUNTOFFINE_INMONTH.ToString(), new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", }))
            {
                string status = string.Empty;
                dataComputeSer.GetListDiscipline(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN102_SAL_SUM_DISCIPLINE_AMOUNTOFFINE_INMONTH.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN102_SAL_SUM_DISCIPLINE_AMOUNTOFFINE_INMONTH.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listEndWithMonthRe = new string[] { "_N_1", "_N_2", "_N_3", "_N_4", "_N_5", };
                    var _startWith = PayrollElement.DYN102_SAL_SUM_DISCIPLINE_AMOUNTOFFINE_INMONTH.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith) && listEndWithMonthRe.Any(s => m.EndsWith(s))).Distinct().ToList();
                    // Lấy tất cả các tháng lùi có trong công thức => để nếu dữ liệu cùng 1 tháng thì lấy 1 lần luôn
                    foreach (var formulaitem in ListFormula)
                    {
                        int month = 0;
                        //DYN101_SAL_SUM_DISCIPLINE_AMOUNTOFFINE_INMONTH
                        var monthPre = formulaitem.Replace(_startWith + "_N_", "");

                        if (int.TryParse(monthPre, out month))
                        {
                            //Lấy ra kỳ công N - x
                            //x là số tháng lùi
                            var cutOffDurationPre_N_ = TotalDataAll.listCutOffDuration.FirstOrDefault(p => p.MonthYear == CutOffDuration.MonthYear.AddMonths(-month));
                            if (cutOffDurationPre_N_ != null)
                            {
                                double _sumAmountOfFine = 0;
                                var listDisciplineByProfile = TotalData600.dicDiscipline.GetValueOrNew(profileItem.ID);
                                var listDisciplineProfile = listDisciplineByProfile
                                                             .Where(m =>
                                                             m.ProfileID == profileItem.ID
                                                             && m.DateOfEffective <= cutOffDurationPre_N_.DateEnd
                                                             && cutOffDurationPre_N_.DateStart <= m.DateEndOfViolation
                                                             && m.ApproveStatus == EnumDropDown.StatusApproved.E_APPROVED.ToString()
                                                             //Hien.Le [125306]: [Hotfix Colgate_v8.7.08.04.25.02] Thay đổi logic lấy mức kỷ luật trong tháng
                                                             && m.AmountOfFine != null).OrderByDescending(p => p.AmountOfFine).Take(1).ToList();
                                if (listDisciplineProfile.Count > 0)
                                {
                                    foreach (var objDiscipline in listDisciplineProfile)
                                    {
                                        if (objDiscipline.DateEndOfViolation != null && objDiscipline.DateOfEffective != null && objDiscipline.AmountOfFine != null)
                                        {
                                            var numberMonthEffective = ((objDiscipline.DateEndOfViolation.Value.Year - objDiscipline.DateOfEffective.Value.Year) * 12) + objDiscipline.DateEndOfViolation.Value.Month - objDiscipline.DateOfEffective.Value.Month + 1;

                                            if (numberMonthEffective != 0)
                                            {
                                                _sumAmountOfFine += objDiscipline.AmountOfFine.Value / numberMonthEffective;
                                            }
                                        }
                                    }
                                }
                                item = new ElementFormula(PayrollElement.DYN102_SAL_SUM_DISCIPLINE_AMOUNTOFFINE_INMONTH.ToString() + "_N_" + month, _sumAmountOfFine, 0);
                                listElementFormula.Add(item);
                            }
                        }
                    }
                }
            }
            #endregion

            #region Hien.Le [27/02/2021] 0123864: thêm phần tử lương lấy lên phụ cấp hiểu hỷ theo kỳ tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN103_SAL_SUM_AMOUNT_UNUSUALALLOWANCE_BY_.ToString(), string.Empty))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN103_SAL_SUM_AMOUNT_UNUSUALALLOWANCE_BY_.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.DYN103_SAL_SUM_AMOUNT_UNUSUALALLOWANCE_BY_.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var _startWith = PayrollElement.DYN103_SAL_SUM_AMOUNT_UNUSUALALLOWANCE_BY_.ToString();
                    //lấy các phần tử cần lấy dữ liệu
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                    // Lấy tất cả các tháng lùi có trong công thức => để nếu dữ liệu cùng 1 tháng thì lấy 1 lần luôn
                    double? sumAmount = 0;
                    foreach (var formulaitem in ListFormula)
                    {
                        //DYN103_SAL_SUM_AMOUNT_UNUSUALALLOWANCE_BY_
                        var codeUnusualAllowanceCfg = formulaitem.Replace(_startWith, string.Empty);
                        var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.FirstOrDefault(p => p.Code == codeUnusualAllowanceCfg);
                        if (objUnusualAllowanceCfg != null)
                        {
                            var listSalUnusualAllowance = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                            sumAmount = listSalUnusualAllowance.Where(m =>
                            m.ProfileID == profileItem.ID
                            && m.MonthStart >= CutOffDuration.DateStart
                            && m.MonthStart <= CutOffDuration.DateEnd
                            && (m.Status == null || m.Status == EnumDropDown.Status.E_APPROVED.ToString())
                            && m.UnusualEDTypeID == objUnusualAllowanceCfg.ID
                            && m.Amount != null).Sum(p => p.Amount);
                        }
                        item = new ElementFormula(PayrollElement.DYN103_SAL_SUM_AMOUNT_UNUSUALALLOWANCE_BY_.ToString() + codeUnusualAllowanceCfg, sumAmount, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Khoa.nguyen 15/04/2021 0126165: [Hotfix_Spindex_12] thêm enum phẩn tử lương tổng số giờ tăng ca trước và sau thay đổi lương	
            //Trước thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN105_SUM_BEFORE_ATT_OVERTIME_OVERTIMETYPE_.ToString(), string.Empty))
            {
                if (CutOffDuration.OvertimeStart != null && CutOffDuration.OvertimeEnd != null)
                {
                    string status = string.Empty;
                    dataComputeSer.GetDicOverTimeByCutOffOverTime(TotalData600, CutOffDuration, ref status);
                    if (!string.IsNullOrEmpty(status))
                    {
                        TotalData600.statusBugStore += status + " (DYN105_SUM_BEFORE_ATT_OVERTIME_OVERTIMETYPE_) ";
                        item = new ElementFormula("DYN105_SUM_BEFORE_ATT_OVERTIME_OVERTIMETYPE_", 0, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        //Lương cơ bản theo kỳ lương
                        var listBasicSalaryByProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID)
                               .Where(p => p.ProfileID == profileItem.ID
                           && p.DateOfEffect <= CutOffDuration.OvertimeEnd
                           && p.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(p => p.DateOfEffect).ToList();

                        var _startWith = PayrollElement.DYN105_SUM_BEFORE_ATT_OVERTIME_OVERTIMETYPE_.ToString();

                        //lấy các phần tử cần lấy dữ liệu
                        List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                        string overTimeTypeCode = string.Empty;

                        foreach (var itemFormula in ListFormula)
                        {
                            double? totalOverTime = 0;
                            overTimeTypeCode = itemFormula.Replace(_startWith, "");
                            var objOverTimeType = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(p => p.Code == overTimeTypeCode);

                            if (CheckIsChangeBasicSalary(listBasicSalaryByProfile, CutOffDuration.OvertimeStart.Value, CutOffDuration.OvertimeEnd.Value, profileItem.ID))
                            {

                                if (objOverTimeType != null)
                                {
                                    var objSalaryChange = listBasicSalaryByProfile.
                                    Where(p => p.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                    & p.DateOfEffect <= CutOffDuration.OvertimeEnd).OrderByDescending(p => p.DateOfEffect).FirstOrDefault();

                                    if (objSalaryChange != null)
                                    {
                                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                                        DateTime dateStart1 = CutOffDuration.OvertimeStart.Value;
                                        DateTime dateStart2 = objSalaryChange.DateOfEffect;

                                        var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString()).FirstOrDefault();
                                        var strOVERTIMESTATUS = string.Empty;

                                        if (objAllSetting != null)
                                        {

                                            if (!string.IsNullOrEmpty(objAllSetting.Value1))
                                            {
                                                strOVERTIMESTATUS = objAllSetting.Value1;
                                            }
                                            else
                                            {
                                                strOVERTIMESTATUS = EnumDropDown.Status.E_APPROVED.ToString();
                                            }

                                            var listSumOverTime = TotalData600.dicOverTimeByCutOffOverTime.GetValueOrNew(profileItem.ID).Where(x => x.ProfileID == profileItem.ID
                                             && x.WorkDateRoot >= dateStart1
                                             && x.WorkDateRoot < dateStart2
                                             && x.OvertimeTypeID == objOverTimeType.ID
                                             && x.Status == strOVERTIMESTATUS
                                             ).ToList();

                                            if (strOVERTIMESTATUS == EnumDropDown.Status.E_APPROVED.ToString())
                                            {
                                                totalOverTime = listSumOverTime.Sum(x => x.ApproveHours);
                                            }
                                            else if (strOVERTIMESTATUS == EnumDropDown.OvertimeConfirm.E_CONFIRM.ToString())
                                            {
                                                totalOverTime = listSumOverTime.Sum(x => x.ConfirmHours);
                                            }
                                            else
                                            {
                                                totalOverTime = listSumOverTime.Sum(x => x.RegisterHours);
                                            }

                                        }
                                    }
                                }
                                item = new ElementFormula(PayrollElement.DYN105_SUM_BEFORE_ATT_OVERTIME_OVERTIMETYPE_.ToString() + overTimeTypeCode, totalOverTime, 0, string.Empty);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.DYN105_SUM_BEFORE_ATT_OVERTIME_OVERTIMETYPE_.ToString() + overTimeTypeCode, totalOverTime, 0, string.Empty);
                            }
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(itemFormula);
                        }
                    }
                }
            }



            //Sau thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN105_SUM_AFTER_ATT_OVERTIME_OVERTIMETYPE_.ToString(), string.Empty))
            {
                if (CutOffDuration.OvertimeStart != null && CutOffDuration.OvertimeEnd != null)
                {
                    string status = string.Empty;
                    dataComputeSer.GetDicOverTimeByCutOffOverTime(TotalData600, CutOffDuration, ref status);
                    if (!string.IsNullOrEmpty(status))
                    {
                        TotalData600.statusBugStore += status + " (DYN105_SUM_AFTER_ATT_OVERTIME_OVERTIMETYPE_) ";
                        item = new ElementFormula("DYN105_SUM_AFTER_ATT_OVERTIME_OVERTIMETYPE_", 0, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        //Lương cơ bản theo kỳ lương
                        var listBasicSalaryByProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID)
                               .Where(p => p.ProfileID == profileItem.ID
                           && p.DateOfEffect <= CutOffDuration.OvertimeEnd
                           && p.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(p => p.DateOfEffect).ToList();

                        var _startWith = PayrollElement.DYN105_SUM_AFTER_ATT_OVERTIME_OVERTIMETYPE_.ToString();

                        //lấy các phần tử cần lấy dữ liệu
                        List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                        string overTimeTypeCode = string.Empty;

                        foreach (var itemFormula in ListFormula)
                        {
                            double? totalOverTime = 0;
                            overTimeTypeCode = itemFormula.Replace(_startWith, "");
                            var objOverTimeType = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(p => p.Code == overTimeTypeCode);

                            if (CheckIsChangeBasicSalary(listBasicSalaryByProfile, CutOffDuration.OvertimeStart.Value, CutOffDuration.OvertimeEnd.Value, profileItem.ID))
                            {

                                if (objOverTimeType != null)
                                {
                                    var objSalaryChange = listBasicSalaryByProfile.
                                    Where(p => p.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                    & p.DateOfEffect <= CutOffDuration.OvertimeEnd).OrderByDescending(p => p.DateOfEffect).FirstOrDefault();

                                    if (objSalaryChange != null)
                                    {
                                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                                        DateTime dateStart1 = CutOffDuration.OvertimeStart.Value;
                                        DateTime dateStart2 = objSalaryChange.DateOfEffect;
                                        DateTime dateStart3 = CutOffDuration.OvertimeEnd.Value;

                                        var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString()).FirstOrDefault();
                                        var strOVERTIMESTATUS = string.Empty;

                                        if (objAllSetting != null)
                                        {

                                            if (!string.IsNullOrEmpty(objAllSetting.Value1))
                                            {
                                                strOVERTIMESTATUS = objAllSetting.Value1;
                                            }
                                            else
                                            {
                                                strOVERTIMESTATUS = EnumDropDown.Status.E_APPROVED.ToString();
                                            }

                                            var listSumOverTime = TotalData600.dicOverTimeByCutOffOverTime.GetValueOrNew(profileItem.ID).Where(x => x.ProfileID == profileItem.ID
                                             && x.WorkDateRoot >= dateStart2
                                             && x.WorkDateRoot <= dateStart3
                                             && x.OvertimeTypeID == objOverTimeType.ID
                                             && x.Status == strOVERTIMESTATUS
                                             ).ToList();

                                            if (strOVERTIMESTATUS == EnumDropDown.Status.E_APPROVED.ToString())
                                            {
                                                totalOverTime = listSumOverTime.Sum(x => x.ApproveHours);
                                            }
                                            else if (strOVERTIMESTATUS == EnumDropDown.OvertimeConfirm.E_CONFIRM.ToString())
                                            {
                                                totalOverTime = listSumOverTime.Sum(x => x.ConfirmHours);
                                            }
                                            else
                                            {
                                                totalOverTime = listSumOverTime.Sum(x => x.RegisterHours);
                                            }

                                        }
                                    }
                                }
                                item = new ElementFormula(PayrollElement.DYN105_SUM_AFTER_ATT_OVERTIME_OVERTIMETYPE_.ToString() + overTimeTypeCode, totalOverTime, 0, string.Empty);
                            }
                            else
                            {
                                if (objOverTimeType != null)
                                {
                                    var objSalaryChange = listBasicSalaryByProfile.
                                    Where(p => p.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                    & p.DateOfEffect <= CutOffDuration.OvertimeEnd).OrderByDescending(p => p.DateOfEffect).FirstOrDefault();

                                    if (objSalaryChange != null)
                                    {
                                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                                        DateTime dateStart1 = CutOffDuration.OvertimeStart.Value;
                                        DateTime dateStart2 = objSalaryChange.DateOfEffect;
                                        DateTime dateStart3 = CutOffDuration.OvertimeEnd.Value;

                                        var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString()).FirstOrDefault();
                                        var strOVERTIMESTATUS = string.Empty;

                                        if (objAllSetting != null)
                                        {

                                            if (!string.IsNullOrEmpty(objAllSetting.Value1))
                                            {
                                                strOVERTIMESTATUS = objAllSetting.Value1;
                                            }
                                            else
                                            {
                                                strOVERTIMESTATUS = EnumDropDown.Status.E_APPROVED.ToString();
                                            }

                                            var listSumOverTime = TotalData600.dicOverTimeByCutOffOverTime.GetValueOrNew(profileItem.ID).Where(x => x.ProfileID == profileItem.ID
                                             && x.WorkDateRoot >= dateStart1
                                             && x.WorkDateRoot <= dateStart3
                                             && x.OvertimeTypeID == objOverTimeType.ID
                                             && x.Status == strOVERTIMESTATUS
                                             ).ToList();

                                            if (strOVERTIMESTATUS == EnumDropDown.Status.E_APPROVED.ToString())
                                            {
                                                totalOverTime = listSumOverTime.Sum(x => x.ApproveHours);
                                            }
                                            else if (strOVERTIMESTATUS == EnumDropDown.OvertimeConfirm.E_CONFIRM.ToString())
                                            {
                                                totalOverTime = listSumOverTime.Sum(x => x.ConfirmHours);
                                            }
                                            else
                                            {
                                                totalOverTime = listSumOverTime.Sum(x => x.RegisterHours);
                                            }

                                        }
                                    }
                                }

                                item = new ElementFormula(PayrollElement.DYN105_SUM_AFTER_ATT_OVERTIME_OVERTIMETYPE_.ToString() + overTimeTypeCode, totalOverTime, 0, string.Empty);
                            }
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(itemFormula);
                        }
                    }
                }
            }
            #endregion
            #region Khoa.nguyen 16/04/2021 125724 Bổ sung phần tử lương lấy khoản trừ chi phí thẻ đeo
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN106_SUM_HRE_PROFILECARD_COSTLEVEL_.ToString(), string.Empty))
            {
                if (CutOffDuration != null)
                {
                    string status = string.Empty;
                    dataComputeSer.GetDicProfileCardSal(TotalData600, CutOffDuration, ref status);
                    if (!string.IsNullOrEmpty(status))
                    {
                        TotalData600.statusBugStore += status + " (DYN106_SUM_HRE_PROFILECARD_COSTLEVEL_) ";
                        item = new ElementFormula("DYN106_SUM_HRE_PROFILECARD_COSTLEVEL_", 0, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        var _startWith = PayrollElement.DYN106_SUM_HRE_PROFILECARD_COSTLEVEL_.ToString();

                        //lấy các phần tử cần lấy dữ liệu
                        List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                        string CodeCatCardType = string.Empty;

                        foreach (var itemFormula in ListFormula)
                        {
                            double? costLevel = 0;
                            CodeCatCardType = itemFormula.Replace(_startWith, "");
                            var objCatCardType = TotalDataAll.listCatCardTypeAll.FirstOrDefault(p => p.Code == CodeCatCardType);

                            if (objCatCardType != null)
                            {
                                costLevel = TotalData600.dicHreProfileCard.GetValueOrNew(profileItem.ID).Where(s => s.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                && s.IsCostDeduction == true
                                && s.CardTypeID == objCatCardType.ID
                                ).Sum(x => x.CostLevel);
                            }

                            item = new ElementFormula(PayrollElement.DYN106_SUM_HRE_PROFILECARD_COSTLEVEL_.ToString() + CodeCatCardType, costLevel, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }


            #endregion

            #region nghia.dang 22/5/2021 125749 Phần tử lương động lấy dữ liệu từ DS Thanh toán chi phí
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN107_SUM_SAL_PAYMENTCOST_COSTAMOUNT_.ToString(), string.Empty))
            {
                if (CutOffDuration != null)
                {
                    string status = string.Empty;
                    dataComputeSer.GetDicSalPaymentCost(TotalData600, CutOffDuration, ref status);
                    if (!string.IsNullOrEmpty(status))
                    {
                        TotalData600.statusBugStore += status + " (DYN107_SUM_SAL_PAYMENTCOST_COSTAMOUNT_) ";
                        item = new ElementFormula("DYN107_SUM_SAL_PAYMENTCOST_COSTAMOUNT_", 0, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        var _startWith = PayrollElement.DYN107_SUM_SAL_PAYMENTCOST_COSTAMOUNT_.ToString();
                        //lấy các phần tử cần lấy dữ liệu
                        List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                        string PaymentAmounCode = string.Empty;
                        foreach (var itemFormula in ListFormula)
                        {
                            double? costAmount = 0;
                            PaymentAmounCode = itemFormula.Replace(_startWith, "");
                            var objPaymentAmount = TotalDataAll.listPaymentAmountAll.FirstOrDefault(p => p.Code == PaymentAmounCode);
                            if (objPaymentAmount != null)
                            {
                                costAmount = TotalData600.dicSalPaymentCost.GetValueOrNew(profileItem.ID)
                                    .Where(s => s.PaymentAmountID == objPaymentAmount.ID
                                        && s.PayMonth.Value.Month == CutOffDuration.MonthYear.Month
                                        && s.PayMonth.Value.Year == CutOffDuration.MonthYear.Year)
                                    .Sum(x => x.TotalAmount);
                            }
                            item = new ElementFormula(PayrollElement.DYN107_SUM_SAL_PAYMENTCOST_COSTAMOUNT_.ToString() + PaymentAmounCode, costAmount, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region Tung.Tran 07/03/2022 139744 Phần tử lương động lấy dữ liệu từ DS Thanh toán chi phí
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN129_SUM_PAYMENTCOST_AMOUNT_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                var _startWith = PayrollElement.DYN129_SUM_PAYMENTCOST_AMOUNT_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                dataComputeSer.GetDicPaymentCostRegister(TotalData600, CutOffDuration, ref status);
                dataComputeSer.GetDicSalPaymentCost(TotalData600, CutOffDuration, ref status2);
                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status2))
                {
                    TotalData600.statusBugStore += status + PayrollElement.DYN129_SUM_PAYMENTCOST_AMOUNT_.ToString();
                    foreach (var itemFormula in ListFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    var listPaymentCostRegisterID = TotalData600.dicPaymentCostRegister.GetValueOrNew(profileItem.ID)
                        .Where(x =>
                            x.PaymentPeriod == CutOffDuration.ID
                            && x.Status == PaymenCostRegisterStatus.E_APPROVED.ToString())
                        .Select(x => x.ID)
                        .ToList();

                    var listPaymentCost = TotalData600.dicSalPaymentCost.GetValueOrNew(profileItem.ID)
                            .Where(x => x.PaymentCostRegisterID != null && listPaymentCostRegisterID.Contains(x.PaymentCostRegisterID.Value))
                            .ToList();

                    foreach (var itemFormula in ListFormula)
                    {
                        double? costAmount = 0;
                        string PaymentAmounCode = itemFormula.Replace(_startWith, "");
                        var objPaymentAmount = TotalDataAll.listPaymentAmountAll.FirstOrDefault(p => p.Code == PaymentAmounCode);
                        if (objPaymentAmount != null)
                        {
                            costAmount = listPaymentCost.Where(s => s.PaymentAmountID == objPaymentAmount.ID)
                                .Sum(x => x.TotalAmount);
                        }
                        item = new ElementFormula(PayrollElement.DYN129_SUM_PAYMENTCOST_AMOUNT_.ToString() + PaymentAmounCode, costAmount, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Khoa.nguyen [05/06/2021] 128929  Số ngày tăng ca được duyệt theo loại = số giờ tăng ca động theo loại
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN108_SUM_ATT_ATTENDANCEITEM_OT_STDWORKHOURS_.ToString(), string.Empty))
            {
                //lấy dữ liệu công theo cutoff
                List<Att_AttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                var _startWith = PayrollElement.DYN108_SUM_ATT_ATTENDANCEITEM_OT_STDWORKHOURS_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                string overTimeTypeCode = string.Empty;

                foreach (var itemFormula in ListFormula)
                {
                    double OtHour = 0;
                    overTimeTypeCode = itemFormula.Replace(_startWith, "");
                    var objOverTimeType = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(p => p.Code == overTimeTypeCode);
                    if (objOverTimeType != null)
                    {
                        if (listAttTableItem != null && listAttTableItem.Count > 0)
                        {
                            var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                                   s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();
                            if (objAllSettingDayKeepUnusualPay != null)
                            {
                                int dayKeepUnusualPay = 0;
                                if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                                {
                                    DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);

                                    listAttTableItem = listAttTableItem.Where(m =>
                                    m.WorkDate >= CutOffDuration.DateStart
                                    && m.WorkDate <= monthYearKeepUnusualPay
                                    ).ToList();

                                    //tính số giờ OT của từng loại
                                    foreach (var tableItem in listAttTableItem)
                                    {
                                        if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == objOverTimeType.ID)
                                        {
                                            OtHour += tableItem.OvertimeHours;
                                        }
                                        if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == objOverTimeType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours;
                                        }
                                        if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == objOverTimeType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours2;
                                        }
                                        if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == objOverTimeType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours3;
                                        }
                                        if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == objOverTimeType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours4.Value;
                                        }
                                    }

                                }
                            }
                            item = new ElementFormula(PayrollElement.DYN108_SUM_ATT_ATTENDANCEITEM_OT_STDWORKHOURS_.ToString() + overTimeTypeCode, OtHour, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.DYN108_SUM_ATT_ATTENDANCEITEM_OT_STDWORKHOURS_.ToString() + overTimeTypeCode, 0, 0);
                        listElementFormula.Add(item);
                    }


                }
            }
            #endregion

            #region Khoa.nguyen [12/06/2021] 0129288  (Hotfix AVN tuần 19) Phần tử lương ngày hiệu lực dòng điều động mới nhất theo loại điều chuyển
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN109_HRE_WORKHISTORY_DATEEFFECTIVE_.ToString(), string.Empty))
            {

                var _startWith = PayrollElement.DYN109_HRE_WORKHISTORY_DATEEFFECTIVE_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                string code = string.Empty;
                DateTime? dateEffective = null;
                foreach (var itemFormula in ListFormula)
                {
                    code = itemFormula.Replace(_startWith, "");
                    var objCatNameEntity = TotalDataAll.ListCat_NameEntity.FirstOrDefault(p => 
                                            p.Code == code 
                                            && p.NameEntityType == EnumDropDown.EntityType.E_TYPEOFTRANSFER.ToString());

                    if (objCatNameEntity != null)
                    {
                        var objWorkHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.TypeOfTransferID == objCatNameEntity.ID
                        && m.Status == EnumDropDown.Status.E_APPROVED.ToString()
                        && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                        if (objWorkHistoryByProfile != null)
                        {
                            dateEffective = objWorkHistoryByProfile.DateEffective;
                        }
                    }
                    item = new ElementFormula(PayrollElement.DYN109_HRE_WORKHISTORY_DATEEFFECTIVE_.ToString() + code, dateEffective, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Nghia.Dang [29/06/2021] [129675][130817] Phần tử lương: Bổ sung phần tử lương tháng
            //Tung.Tran [23/06/2021][0130817]: Đổi logic enum
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN111_ATT_BUSSINESSTRAVELTRANSFER_SUM_HOURSTOTAL_BYCODE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_CONFIG_TRAVELTIMEREQUESTHASSTATUS.ToString()).FirstOrDefault();
                var _startWith = PayrollElement.DYN111_ATT_BUSSINESSTRAVELTRANSFER_SUM_HOURSTOTAL_BYCODE_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                string code = string.Empty;
                dataComputeSer.GetDicBusinessTravelTransfer(TotalData600, CutOffDuration, ref status);

                var nameTableGetData = "listMovementTypes";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listMovementTypes = dataComputeSer.GetCat_MovementTypes(ref status2);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }
                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status2))
                {
                    TotalData600.statusBugStore += status + " (DYN111_ATT_BUSSINESSTRAVELTRANSFER_SUM_HOURSTOTAL_BYCODE_) ";
                    item = new ElementFormula("DYN111_ATT_BUSSINESSTRAVELTRANSFER_SUM_HOURSTOTAL_BYCODE_", 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    foreach (var itemFormula in ListFormula)
                    {
                        double total = 0;
                        code = itemFormula.Replace(_startWith, "");
                        var objMovementTypes = TotalData600.listMovementTypes.Where(x => x.MovementTypeCode == code).FirstOrDefault();
                        if (objMovementTypes != null)
                        {
                            var lstBusinessTravelTransfer = TotalData600.dicBusinessTravelTransfer.GetValueOrNew(profileItem.ID).Where(m =>
                                                       m.HourTotal != null
                                                       && m.TransferDate.Value >= CutOffDuration.DateStart
                                                       && m.TransferDate.Value <= CutOffDuration.DateEnd
                                                       && (objAllSetting == null || string.IsNullOrEmpty(objAllSetting.Value1) || m.Status == objAllSetting.Value1)
                                                       && m.TransferTypeID == objMovementTypes.ID).ToList();
                            if (lstBusinessTravelTransfer != null)
                            {
                                total = lstBusinessTravelTransfer.Sum(x => x.HourTotal.Value);
                            }
                        }

                        item = new ElementFormula(itemFormula, total, 0);
                        listElementFormula.Add(item);
                    }

                }
            }
            #endregion

            #region Nghia.Dang [29/06/2021] [129675] Phần tử lương: Bổ sung phần tử lương tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN112_CAT_CARDTYPE_COSTLEVEL_BYCODE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN112_CAT_CARDTYPE_COSTLEVEL_BYCODE_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                string code = string.Empty;
                foreach (var itemFormula in ListFormula)
                {
                    double total = 0;
                    code = itemFormula.Replace(_startWith, "");
                    var objCardType = TotalDataAll.listCatCardTypeAll.Where(x => x.Code == code && x.CostLevel != null).FirstOrDefault();
                    if (objCardType != null)
                    {
                        total = objCardType.CostLevel.Value;
                    }
                    item = new ElementFormula(itemFormula, total, 0);
                    listElementFormula.Add(item);
                }

            }
            #endregion

            #region Nghia.Dang [30/07/2021] [130701] Số tháng hưởng hệ số cá nhân tính lương theo lương cơ bản
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN113_SAL_COUNT_TOTALMONTH_RANKRATE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN113_SAL_COUNT_TOTALMONTH_RANKRATE_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                string personalRate = string.Empty;
                foreach (var itemFormula in ListFormula)
                {
                    double total = 0;
                    personalRate = itemFormula.Replace(_startWith, "");
                    var objSalaryRank = TotalDataAll.listSalaryRank.Where(x => x.Code == personalRate).FirstOrDefault();
                    if (objSalaryRank != null)
                    {
                        var objBasicSalaryByRate = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(x => x.DateOfEffect <= CutOffDuration.MonthYear
                        && x.RankRateID != null && x.RankRateID == objSalaryRank.ID && x.Status == StatusApprovedGradeBasicSalary.E_APPROVED.ToString()).OrderBy(x => x.DateOfEffect).FirstOrDefault();

                        if (objBasicSalaryByRate != null)
                        {
                            var objBasicSalaryChangeNext = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(x => x.DateOfEffect <= CutOffDuration.MonthYear && x.DateOfEffect > objBasicSalaryByRate.DateOfEffect
                            && x.RankRateID != null && x.RankRateID != objSalaryRank.ID && x.Status == StatusApprovedGradeBasicSalary.E_APPROVED.ToString()).OrderBy(x => x.DateOfEffect).FirstOrDefault();
                            var monthFrom = objBasicSalaryByRate.DateOfEffect;
                            var monthTo = CutOffDuration.MonthYear;
                            if (objBasicSalaryChangeNext != null)
                            {
                                monthTo = objBasicSalaryChangeNext.DateOfEffect;
                            }
                            total = Common.CalMonthDiff(monthTo, monthFrom);
                        }
                    }
                    item = new ElementFormula(itemFormula, total, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Nghia.Dang [18/06/2021] [127949] [Modify] Phần tử tên loại cửa hàng - Lấy từ bảng lương nhóm(hỗ trợ tối đa 10 nhóm)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN110_SAL_PAYROLLGROUPTABLEITEM_BYCODE_.ToString(), new string[] { "GROUP1", "GROUP2", "GROUP3", "GROUP4", "GROUP5", "GROUP6", "GROUP7", "GROUP8", "GROUP9", "GROUP10" }))
            {
                var strStartsWith = PayrollElement.DYN110_SAL_PAYROLLGROUPTABLEITEM_BYCODE_.ToString();
                var listEndWith = new List<string>() { "GROUP1", "GROUP2", "GROUP3", "GROUP4", "GROUP5", "GROUP6", "GROUP7", "GROUP8", "GROUP9", "GROUP10" };
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && listEndWith.Any(s => m.EndsWith(s))).Distinct().ToList();
                var listPayrollGroupTableID = TotalData600.ListSal_PayrollGroupTable.Where(s => s.ProfileID == profileItem.ID && s.CutOffDurationID == CutOffDuration.ID).Select(s => s.ID).ToList();
                if (listPayrollGroupTableID.Count > 0)
                {
                    var listPayrollGroupTableItem = TotalData600.ListSal_PayrollGroupTableItem.Where(s => listPayrollGroupTableID.Contains(s.PayrollGroupTableID)).ToList();
                    if (listPayrollGroupTableItem.Count > 0)
                    {
                        foreach (var itemEnd in ListFormula)
                        {
                            var _enum = itemEnd.Replace(PayrollElement.DYN110_SAL_PAYROLLGROUPTABLEITEM_BYCODE_.ToString(), "");
                            int number = 0;
                            double value = 0;
                            var split = _enum.Split("_GROUP");
                            if (split != null && split.Count == 2)
                            {
                                var listPayrollGroupTableItemByCode = listPayrollGroupTableItem.Where(x => x.Code == split[0]).Select(x => x.Value).Take(10).ToList();
                                if (int.TryParse(split[1], out number) && number <= listPayrollGroupTableItemByCode.Count && double.TryParse(listPayrollGroupTableItemByCode[number - 1], out value))
                                {
                                    item = new ElementFormula(itemEnd, value, 0);
                                    listElementFormula.Add(item);
                                    continue;
                                }
                            }
                            item = new ElementFormula(itemEnd, value, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var itemEnd in ListFormula)
                        {
                            item = new ElementFormula(itemEnd, string.Empty, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var itemEnd in ListFormula)
                    {
                        item = new ElementFormula(itemEnd, string.Empty, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion


            #region Nghia.Dang [22/8/2021] [130265] Lấy phần từ lương động theo mã công việc trả về giá trị cột “Expense”
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN114_HRE_STOPWORKING_WORKLIST_EXPENSE_BYCODE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN114_HRE_STOPWORKING_WORKLIST_EXPENSE_BYCODE_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                var objAllSettingEntity = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name != null && m.Name == AppConfig.HRM_HRE_CONFIG_QUITCAL.ToString());

                var objStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID).Where(
                                       p => p.DateStop <= CutOffDuration.DateEnd
                                       && p.DateStop >= CutOffDuration.DateStart
                                       && ((objAllSettingEntity == null || string.IsNullOrEmpty(objAllSettingEntity.Value1)) || (p.Status == objAllSettingEntity.Value1))).OrderByDescending(x => x.DateStop).FirstOrDefault();
                string code = string.Empty;
                if (objStopWorkingByProfile != null)
                {
                    dataComputeSer.GetListProfileWorkList(TotalData600, ref status);
                    var listWorkList = TotalData600.dicProfileWorkList.GetValueOrNew(objStopWorkingByProfile.ID).ToList();

                    foreach (var itemFormula in ListFormula)
                    {
                        double expense = 0;
                        code = itemFormula.Replace(_startWith, "");
                        var objCardType = listWorkList.Where(x => x.Code == code).FirstOrDefault();
                        if (objCardType != null && objCardType.Expense != null)
                        {
                            expense = objCardType.Expense.Value;
                        }
                        item = new ElementFormula(itemFormula, expense, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var itemFormula in ListFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                    }
                }

            }
            #endregion

            #region kiet.nguyen[11/10/2021]---133505: Thêm phần tử lương ngày bắt đầu, ngày kết thúc theo loại ngày nghỉ
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN115_ATT_LEAVEDAY_DATESTART_BYLEAVEDAYTYPECODE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN115_ATT_LEAVEDAY_DATESTART_BYLEAVEDAYTYPECODE_.ToString();
                List<string> listElement = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                foreach (var element in listElement)
                {
                    var CatTypeLeavecode = element.Replace(_startWith, "");
                    var objcodeTypeLeave = TotalDataAll.listLeavedayType.Where(m => m.Code == CatTypeLeavecode).FirstOrDefault();

                    var obj = TotalDataAll.listLeaveDay.Where(m => m.LeaveDayTypeID == objcodeTypeLeave.ID && m.DateStart <= CutOffDuration.DateEnd).OrderBy(p => p.DateStart).FirstOrDefault();
                    DateTime? date = null;
                    if (obj != null && obj.DateStart != null)
                    {
                        date = obj.DateStart;
                    }
                    item = new ElementFormula(element, date, 0);
                    listElementFormula.Add(item);
                    //xoa cac enum da xu ly trong list enum tong
                    formula.Remove(element);
                }
            }
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN116_ATT_LEAVEDAY_DATEEND_BYLEAVEDAYTYPECODE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN116_ATT_LEAVEDAY_DATEEND_BYLEAVEDAYTYPECODE_.ToString();
                List<string> listElement = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                foreach (var element in listElement)
                {
                    var CatTypeLeavecode = element.Replace(_startWith, "");
                    var objcodeTypeLeave = TotalDataAll.listLeavedayType.Where(m => m.Code == CatTypeLeavecode).FirstOrDefault();

                    var obj = TotalDataAll.listLeaveDay.Where(m => m.LeaveDayTypeID == objcodeTypeLeave.ID).OrderBy(p => p.DateStart).FirstOrDefault();
                    DateTime? date = null;
                    if (obj != null && obj.DateEnd != null)
                    {
                        date = obj.DateEnd;
                    }
                    item = new ElementFormula(element, date, 0);
                    listElementFormula.Add(item);
                    //xoa cac enum da xu ly trong list enum tong
                    formula.Remove(element);
                }
            }
            #endregion

            #region Kiet.Nguyen 0134604: [HTC] Thêm phần tử lương tính tiền phụ cấp theo nơi làm việc truyền động Mã phụ cấp và Mã nơi làm việc theo danh mục phụ lục mức thưởng phụ cấp
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN122_CAT_ALLOWANCECFGAREAPOSTJOBWORK_.ToString(), string.Empty))
            {
                var strStartsWith = PayrollElement.DYN122_CAT_ALLOWANCECFGAREAPOSTJOBWORK_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                var listElementCode = lstFormulaCheck.Select(x => x.Replace(strStartsWith, "").Split("_AND_").FirstOrDefault()).ToList();
                string status = string.Empty;
                string nameTableGetData = string.Join(",", listElementCode);
                //Lưu vết mã phần tử lương.
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    dataComputeSer.GetlistSalPayrollTableItem(TotalData600, CutOffDuration, listElementCode, ref status);
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN122_CAT_ALLOWANCECFGAREAPOSTJOBWORK_.ToString() + ") ";
                }
                else
                {

                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        double? objAmount = 0;
                        var codeUnusualAllowanceCfg = itemFormula.Replace(strStartsWith, "").Split("_AND_").FirstOrDefault();
                        var codeWorkPlace = itemFormula.Replace(strStartsWith, "").Split("_AND_").LastOrDefault();

                        if (codeWorkPlace != null && codeUnusualAllowanceCfg != null)
                        {
                            var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(m => m.Code == codeUnusualAllowanceCfg).FirstOrDefault();
                            var objWorkPlace = TotalDataAll.lstWorkPlace.Where(m => m.Code == codeWorkPlace).FirstOrDefault();

                            if (objWorkPlace != null && objUnusualAllowanceCfg != null)
                            {
                                var listAllowanceCfgAreaPostJobWork = TotalDataAll.listCat_AllowanceCfgAreaPostJobWork.Where(p => p.UnusualAllowanceCfgID == objUnusualAllowanceCfg.ID
                                                                                                                  && p.WorkPlaceID == objWorkPlace.ID).FirstOrDefault();
                                if (listAllowanceCfgAreaPostJobWork != null && listAllowanceCfgAreaPostJobWork.Amount != null)
                                {
                                    objAmount = listAllowanceCfgAreaPostJobWork.Amount.Value;
                                }
                            }
                        }
                        item = new ElementFormula(itemFormula, objAmount.ToString(), 0);
                        // item = new ElementFormula(PayrollElement.DYN122_CAT_ALLOWANCECFGAREAPOSTJOBWORK_ + codeUnusualAllowanceCfg + "_AND_" + codeWorkPlace, objAmount.ToString(), 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);

                    }
                }
            }
            #endregion

            #region Nghia.Dang [22/8/2021] [130265] Lấy phần từ lương động theo mã công việc trả về giá trị cột “Expense”
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN123_CAT_UNUSUALALLOWANCECFG_ISCHARGEPIT_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN123_CAT_UNUSUALALLOWANCECFG_ISCHARGEPIT_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                string code = string.Empty;

                foreach (var itemFormula in ListFormula)
                {
                    bool expense = false;
                    code = itemFormula.Replace(_startWith, "");
                    var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == code).FirstOrDefault();
                    if (objUnusualAllowanceCfg != null && objUnusualAllowanceCfg.IsChargePIT == true)
                    {
                        expense = true;
                    }
                    item = new ElementFormula(itemFormula, expense, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion
            #region Nghia.Dang [22/8/2021] [130265] Lấy phần từ lương động theo mã công việc trả về giá trị cột “Expense”
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN123_CAT_UNUSUALALLOWANCECFG_TAXLIMIT_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN123_CAT_UNUSUALALLOWANCECFG_TAXLIMIT_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                string code = string.Empty;

                foreach (var itemFormula in ListFormula)
                {
                    double taxLimit = 0;
                    code = itemFormula.Replace(_startWith, "");
                    var objUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == code).FirstOrDefault();
                    if (objUnusualAllowanceCfg != null && objUnusualAllowanceCfg.TaxLimit != null)
                    {
                        taxLimit = objUnusualAllowanceCfg.TaxLimit.Value;
                    }
                    item = new ElementFormula(itemFormula, taxLimit, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Nghia.Dang [22/8/2021] [130265] Lấy phần từ lương động theo mã công việc trả về giá trị cột “Expense”
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN124_CAT_UNUSUALALLOWANCE_ISCHARGEPIT_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN124_CAT_UNUSUALALLOWANCE_ISCHARGEPIT_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                string code = string.Empty;

                foreach (var itemFormula in ListFormula)
                {
                    bool expense = false;
                    code = itemFormula.Replace(_startWith, "");
                    var objUsualAllowance = TotalDataAll.listUsualAllowance.Where(x => x.Code == code).FirstOrDefault();
                    if (objUsualAllowance != null && objUsualAllowance.IsChargePIT == true)
                    {
                        expense = true;
                    }
                    item = new ElementFormula(itemFormula, expense, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion
            #region Nghia.Dang [22/8/2021] [130265] Lấy phần từ lương động theo mã công việc trả về giá trị cột “Expense”
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN124_CAT_UNUSUALALLOWANCE_TAXLIMIT_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN124_CAT_UNUSUALALLOWANCE_TAXLIMIT_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                string code = string.Empty;

                foreach (var itemFormula in ListFormula)
                {
                    double taxLimit = 0;
                    code = itemFormula.Replace(_startWith, "");
                    var objUsualAllowance = TotalDataAll.listUsualAllowance.Where(x => x.Code == code).FirstOrDefault();
                    if (objUsualAllowance != null && objUsualAllowance.TaxLimit != null)
                    {
                        taxLimit = objUsualAllowance.TaxLimit.Value;
                    }
                    item = new ElementFormula(itemFormula, taxLimit, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Nghia.Dang [21/01/2022] [134888] : Phần tử lương từ bảng tính bù lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN126_SAL_PAYROLLPAYBACKITEM_VALUE_BYCODE_.ToString(), string.Empty))
            {
                var strStartsWith = PayrollElement.DYN126_SAL_PAYROLLPAYBACKITEM_VALUE_BYCODE_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                var listElementCode = lstFormulaCheck.Select(x => x.Replace(strStartsWith, "")).ToList();
                string status = string.Empty;
                string nameTableGetData = string.Join(",", listElementCode);
                //Lưu vết mã phần tử lương.
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    dataComputeSer.GetlistSalPayrollPaybackItem(TotalData600, CutOffDuration, listElementCode, ref status);
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN126_SAL_PAYROLLPAYBACKITEM_VALUE_BYCODE_.ToString() + ") ";
                }
                else
                {
                    double Value = 0;
                    double outCheck = 0;
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        var elementCode = itemFormula.Replace(strStartsWith, "");
                        var objSalPayrollPaybackItem = TotalData600.listSalPayrollPaybackItemByElementCode.Where(p => p.Code == elementCode
                                                                && p.ValueType == EnumDropDown.ElementDataType.Double.ToString()
                                                                && p.CutOffDurationID == CutOffDuration.ID
                                                                && p.ProfileID == profileItem.ID
                                                                && !string.IsNullOrEmpty(p.Value)
                                                                && double.TryParse(p.Value, out outCheck)).FirstOrDefault();
                        if (objSalPayrollPaybackItem != null && objSalPayrollPaybackItem.Value != null)
                        {
                            Value = outCheck;
                        }
                        item = new ElementFormula(itemFormula, Value, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion
            #endregion

            // Nhánh enum động V2 (Tach code de debug khong bi treo)
            GetStaticValuesDynamicSplitV2(
                TotalDataAll,
                TotalData600,
                listElementFormula,
                profileItem,
                CutOffDuration,
                formula,
                GradePayrollID,
                objAttendanceTableProCut,
                listTmpDeduction,
                dataComputeSer,
                cutOffDurationPre,
                objRecalAttendanceTableProCut
                );

        }

        public void GetStaticValuesDynamicSplitV2(
        ComputePayrollDataModelKZAll TotalDataAll,
        ComputePayrollDataModelKZ TotalData600,
        List<ElementFormula> listElementFormula,
        Hre_ProfileEntity profileItem,
        Att_CutOffDurationEntity CutOffDuration,
        List<string> formula,
        Guid? GradePayrollID,
        Att_AttendanceTableEntity objAttendanceTableProCut,
        Dictionary<Guid, ValueCount> listTmpDeduction,
        Sal_GetDataComputePayrollKZServices dataComputeSer,
        Att_CutOffDurationEntity cutOffDurationPre,
        Att_RecalAttendanceTableEntity objRecalAttendanceTableProCut
        )
        {
            ElementFormula item = new ElementFormula();

            #region Tung.Tran [10/11/2021][135001]: Đếm số NV được NLĐ giới thiệu: truyền động Mã Loại nhân viên và số tháng thâm niên.
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN117_PROFILE_COUNT_INTRODUCER_BY_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN117_PROFILE_COUNT_INTRODUCER_BY_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                dataComputeSer.GetListProfileIntroduce(TotalData600, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (DYN117_PROFILE_COUNT_INTRODUCER_BY_) ";
                    foreach (var itemFormula in ListFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0, string.Empty);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    var lstProfileMoreInfo = TotalData600.dicProfileIntroduce.GetValueOrNew(profileItem.ID);
                    foreach (var itemFormula in ListFormula)
                    {
                        int countProfileID = 0;
                        var typeEmpTypeAndNumber = itemFormula.Replace(PayrollElement.DYN117_PROFILE_COUNT_INTRODUCER_BY_.ToString(), "");
                        var splitTypeEmpTypeAndNumber = typeEmpTypeAndNumber.Split("_AND_");
                        if (splitTypeEmpTypeAndNumber.Count == 2)
                        {
                            string empTypeCode = splitTypeEmpTypeAndNumber[0];
                            string numberMonth = splitTypeEmpTypeAndNumber[1];
                            var objEmployeeType = TotalDataAll.listEmployeeType.FirstOrDefault(x => x.Code == empTypeCode);
                            if (objEmployeeType != null && int.TryParse(numberMonth, out int number))
                            {
                                countProfileID = lstProfileMoreInfo.Where(x =>
                                {
                                    //Neu nhan vien co loai nhan vien khac loai nhan vien dang cau hinh => Khong dem
                                    if (objEmployeeType.ID != x.EmpTypeID)
                                    {
                                        return false;
                                    }
                                    //Neu nhan vien nghi viec trong ky hoac nhan vien co so thang nam nien != so dang cau hinh => Khong dem 
                                    if (
                                        (x.DateQuit != null && x.DateQuit > CutOffDuration.DateStart && x.DateQuit <= CutOffDuration.DateEnd)
                                        || (Common.CalMonthDiff(CutOffDuration.DateEnd, x.DateHire.Value) != number))
                                    {
                                        return false;
                                    }
                                    return true;
                                }).Count();

                            }
                        }

                        item = new ElementFormula(itemFormula, countProfileID, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion
            #region Tung.Tran [10/11/2021][135001]: Đếm số ngày nghỉ liên tục: truyền động Mã loại ngày nghỉ và Số ngày nghỉ, trả về true/false. 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN118_SAL_IS_LEAVEDAY_CONTINUOUS_BY_.ToString(), string.Empty))
            {
                var strStartsWith = PayrollElement.DYN118_SAL_IS_LEAVEDAY_CONTINUOUS_BY_.ToString();
                var strEndWith = string.Empty;
                int isLeaveDay = 0;
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                foreach (var formulaitem in ListFormula)
                {
                    var _formula = formulaitem;
                    string status = string.Empty;
                    var typeLeaveAndNumber = _formula.Replace(strStartsWith, "");
                    var splittypeLeaveAndNumber = typeLeaveAndNumber.Split("_AND_");

                    if (splittypeLeaveAndNumber.Count == 2)
                    {
                        string typeLeaveCode = splittypeLeaveAndNumber[0];
                        string numberDay = splittypeLeaveAndNumber[1];
                        var objLeavedayType = TotalDataAll.listLeavedayType.Where(s => s.Code == typeLeaveCode).FirstOrDefault();
                        if (objLeavedayType != null)
                        {
                            if (objAttendanceTableProCut.LeaveDay1Hours != 0
                                 || objAttendanceTableProCut.LeaveDay2Hours != 0
                                 || objAttendanceTableProCut.LeaveDay3Hours != 0
                                 || objAttendanceTableProCut.LeaveDay4Hours != 0
                                 || objAttendanceTableProCut.LeaveDay5Hours != 0
                                 || objAttendanceTableProCut.LeaveDay6Hours != 0
                                 || objAttendanceTableProCut.LeaveDay7Hours != 0
                                 || objAttendanceTableProCut.LeaveDay8Hours != 0
                                 || objAttendanceTableProCut.LeaveDay9Hours != 0
                                 || objAttendanceTableProCut.LeaveDay10Hours != 0
                                 || objAttendanceTableProCut.LeaveDay11Hours != 0
                                 || objAttendanceTableProCut.LeaveDay12Hours != 0
                                 )
                            {

                                var listAttendanceTableItem = TotalDataAll
                                    .dicAttendanceTableItem
                                    .GetValueOrNew(objAttendanceTableProCut.ID)
                                    .OrderBy(x => x.WorkDate)
                                    .ToList();

                                //CountDay = số ngày liên tục đang kiểm tra
                                int countDay = 0;
                                //countDayBefore = số ngày liên tục kiểm tra được Lưu vết lại TH đứt đoạn)
                                int countDayBefore = 0;
                                foreach (var itemTemp in listAttendanceTableItem)
                                {
                                    //Kiem tra tung ngay
                                    if (itemTemp.ShiftID != null && itemTemp.IsHoliday == false
                                            && (itemTemp.LeaveTypeID == objLeavedayType.ID
                                            || itemTemp.ExtraLeaveTypeID == objLeavedayType.ID
                                            || itemTemp.ExtraLeaveType3ID == objLeavedayType.ID
                                            || itemTemp.ExtraLeaveType4ID == objLeavedayType.ID
                                            || itemTemp.ExtraLeaveType5ID == objLeavedayType.ID
                                            || itemTemp.ExtraLeaveType6ID == objLeavedayType.ID
                                            )
                                       )
                                    {
                                        countDay++;
                                    }
                                    else
                                    {
                                        //Neu ngay hien tai khong thoa (Bi dut doan) => Set countDay = 0
                                        if (countDay > countDayBefore)
                                        {
                                            countDayBefore = countDay;
                                        }
                                        countDay = 0;
                                    }
                                }
                                //Kiem tra ngoai vong for (TH ngay cuoi cung la ngay cuoi thang)
                                if (countDay > countDayBefore)
                                {
                                    countDayBefore = countDay;
                                }
                                if (countDayBefore >= int.Parse(numberDay))
                                {
                                    isLeaveDay = 1;
                                }
                            }
                        }
                    }
                    item = new ElementFormula(formulaitem, isLeaveDay, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Tung.Tran [10/11/2021][135001]: Tổng quỹ lương trực tiếp SP theo Mã phòng ban truyền động vào
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN119_PRODUCTSALARY_SUMAMOUNT_BY_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string strOrderNumber = string.Empty;
                string status2 = string.Empty;
                var _startWith = PayrollElement.DYN119_PRODUCTSALARY_SUMAMOUNT_BY_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                dataComputeSer.GetDicProductSalaryAll(TotalData600, CutOffDuration, ref status);
                dataComputeSer.ListWorkHistoryAllProfile(TotalData600, CutOffDuration, ref status2);

                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status2))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN119_PRODUCTSALARY_SUMAMOUNT_BY_.ToString() + ") ";
                    foreach (var itemFormula in ListFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    foreach (var itemFormula in ListFormula)
                    {
                        double sumAmount = 0;
                        var orgCode = itemFormula.Replace(PayrollElement.DYN119_PRODUCTSALARY_SUMAMOUNT_BY_.ToString(), "");
                        var objOrg = TotalDataAll.listOrgStructure.FirstOrDefault(x => x.Code == orgCode);
                        if (objOrg != null)
                        {
                            var listOrderNumber = Sal_CommonServices.GetChildOrgOrderNumber(
                                TotalDataAll.listOrgStructure,
                                objOrg.ID,
                                strOrderNumber);

                            if (!string.IsNullOrEmpty(listOrderNumber))
                            {
                                var lstOrderNumber = listOrderNumber.Split(",")
                                    .Select(s => int.Parse(s))
                                    .Distinct()
                                    .ToList();
                                var lstHreWorkhistory = TotalData600.listWorkHistoryAllProfile
                                        .OrderByDescending(x => x.DateEffective)
                                        .GroupBy(s => s.ProfileID)
                                        .Select(s => s.FirstOrDefault())
                                        .ToList();

                                if (lstHreWorkhistory.Count > 0)
                                {
                                    var listProfileIDs = lstHreWorkhistory.Where(x => x.OrderNumber != null && lstOrderNumber.Contains(x.OrderNumber.Value)).Select(x => x.ProfileID).ToList();
                                    sumAmount = TotalData600.ListProductSalaryAll
                                        .Where(x => x.ProfileID != null && listProfileIDs.Contains(x.ProfileID.Value) && x.MonthYear == CutOffDuration.MonthYear)
                                        .Where(x => x.Amount != null)
                                        .Sum(x => x.Amount.Value);
                                }
                            }
                        }
                        item = new ElementFormula(itemFormula, sumAmount, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Tung.Tran [10/11/2021][135001]: Tổng quỹ lương gián tiếp theo phòng ban truyền động vào
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN120_PRODUCTSALARY_SUMAMOUNTINCENTIVE_BY_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string strOrderNumber = string.Empty;
                string status2 = string.Empty;
                var _startWith = PayrollElement.DYN120_PRODUCTSALARY_SUMAMOUNTINCENTIVE_BY_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                dataComputeSer.GetDicPayrollIncentiveAll(TotalData600, CutOffDuration, ref status);
                dataComputeSer.ListWorkHistoryAllProfile(TotalData600, CutOffDuration, ref status2);

                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status2))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN120_PRODUCTSALARY_SUMAMOUNTINCENTIVE_BY_.ToString() + ") ";
                    foreach (var itemFormula in ListFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    foreach (var itemFormula in ListFormula)
                    {
                        double sumAmountIncentive = 0;
                        var orgCode = itemFormula.Replace(PayrollElement.DYN120_PRODUCTSALARY_SUMAMOUNTINCENTIVE_BY_.ToString(), "");
                        var objOrg = TotalDataAll.listOrgStructure.FirstOrDefault(x => x.Code == orgCode);
                        if (objOrg != null)
                        {
                            var listOrderNumber = Sal_CommonServices.GetChildOrgOrderNumber(
                                TotalDataAll.listOrgStructure,
                                objOrg.ID,
                                strOrderNumber);

                            if (!string.IsNullOrEmpty(listOrderNumber))
                            {
                                var lstOrderNumber = listOrderNumber.Split(",")
                                    .Select(s => int.Parse(s))
                                    .Distinct()
                                    .ToList();
                                var lstHreWorkhistory = TotalData600.listWorkHistoryAllProfile
                                        .OrderByDescending(x => x.DateEffective)
                                        .GroupBy(s => s.ProfileID)
                                        .Select(s => s.FirstOrDefault())
                                        .ToList();

                                if (lstHreWorkhistory.Count > 0)
                                {
                                    var listProfileIDs = lstHreWorkhistory.Where(x => x.OrderNumber != null && lstOrderNumber.Contains(x.OrderNumber.Value)).Select(x => x.ProfileID).ToList();
                                    sumAmountIncentive = TotalData600.ListPayrollIncentiveAll
                                        .Where(x => x.ProfileID != null && listProfileIDs.Contains(x.ProfileID.Value) && x.MonthEffect == CutOffDuration.MonthYear)
                                        .Where(x => x.AmountIncentive != null)
                                        .Sum(x => x.AmountIncentive.Value);
                                }
                            }
                        }
                        item = new ElementFormula(itemFormula, sumAmountIncentive, 0, string.Empty);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Tung.Tran [10/11/2021][135001]: Tổng số lượng phòng ban con theo phòng ban truyền vào
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN121_COUNT_ORGCHILD_BY_.ToString(), string.Empty))
            {
                string status = string.Empty;
                string strOrderNumber = string.Empty;
                string status2 = string.Empty;
                var _startWith = PayrollElement.DYN121_COUNT_ORGCHILD_BY_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                foreach (var itemFormula in ListFormula)
                {
                    double countOrgChild = 0;
                    var orgCode = itemFormula.Replace(PayrollElement.DYN121_COUNT_ORGCHILD_BY_.ToString(), "");
                    var objOrg = TotalDataAll.listOrgStructure.FirstOrDefault(x => x.Code == orgCode);
                    if (objOrg != null)
                    {
                        var listOrderNumber = Sal_CommonServices.GetChildOrgOrderNumber(
                            TotalDataAll.listOrgStructure,
                            objOrg.ID,
                            strOrderNumber);

                        if (!string.IsNullOrEmpty(listOrderNumber))
                        {
                            countOrgChild = listOrderNumber.Split(",")
                                .Where(s => int.TryParse(s, out int test))
                                .Select(s => int.Parse(s))
                                .Where(s => s != objOrg.OrderNumber)
                                .Distinct()
                                .Count();
                        }
                    }
                    item = new ElementFormula(itemFormula, countOrgChild, 0, string.Empty);
                    listElementFormula.Add(item);
                    //xoa cac enum da xu ly trong list enum tong
                    formula.Remove(itemFormula);
                }
            }
            #endregion
            #region minhnguyenvan [20/12/2021] 0134912: [AVN - SAL] Bổ sung phần tử lương: Lương tính trợ cấp thôi việc
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN125_SAL_SEVERANCEALLOWANCEITEM_VALUE_BYCODE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN125_SAL_SEVERANCEALLOWANCEITEM_VALUE_BYCODE_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                var objSeveranceAllowanceByProfile = TotalDataAll.dicSal_SeveranceAllowance.GetValueOrNew(profileItem.ID).Where(
                                       p => p.PayCutOffDurationID != null && p.PayCutOffDurationID.Value == CutOffDuration.ID
                                       && p.Status == EnumDropDown.Sal_SeveranceAllowanceStatus.E_CONFIRMED.ToString()
                                       && p.SeveranceAllowanceType == EnumDropDown.Sal_SeveranceAllowanceType.E_TERMINATION_ALLOWANCE.ToString()).FirstOrDefault();
                string code = string.Empty;
                if (objSeveranceAllowanceByProfile != null)
                {

                    var listSeveranceAllowanceItem = TotalDataAll.listSal_SeveranceAllowanceItem.Where(s => s.SeveranceAllowanceID == objSeveranceAllowanceByProfile.ID).ToList();
                    foreach (var itemFormula in ListFormula)
                    {
                        double? value = 0;
                        code = itemFormula.Replace(_startWith, "");
                        if (listSeveranceAllowanceItem != null)
                        {
                            var objSeveranceAllowanceItem = listSeveranceAllowanceItem.Where(x => x.ElementCode == code).FirstOrDefault();
                            if (objSeveranceAllowanceItem != null && objSeveranceAllowanceItem.E_Value != null)
                            {
                                value = objSeveranceAllowanceItem.E_Value.DecryptValue();
                            }
                            item = new ElementFormula(itemFormula, value, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var itemFormula in ListFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                    }
                }

            }
            #endregion
            #region Nghia.Dang [23/01/2022] 138108: Phần tử lương động có tính thuế, động theo mã khoản thanh toán chi phí
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN127_CAT_PAYMENTAMOUNT_ISCHARGEPIT_BYCODE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN127_CAT_PAYMENTAMOUNT_ISCHARGEPIT_BYCODE_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();


                string code = string.Empty;

                foreach (var itemFormula in ListFormula)
                {
                    int? value = 0;
                    code = itemFormula.Replace(_startWith, "");
                    var objPaymentAmount = TotalDataAll.listPaymentAmountAll.Where(p => p.Code == code).FirstOrDefault();
                    if (objPaymentAmount != null && objPaymentAmount.IsChargePIT != null)
                    {
                        value = objPaymentAmount.IsChargePIT == true ? 1 : 0;
                    }
                    item = new ElementFormula(itemFormula, value, 0);
                    listElementFormula.Add(item);
                }

            }
            #endregion

            #region Tung.Tran [07/03/2022] 139751: Sum tiền phụ cấp động theo khoản thanh toán hiếu hỷ 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN128_UNUSUAL_BYFAMILYBUSINESSTYPE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN128_UNUSUAL_BYFAMILYBUSINESSTYPE_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + PayrollElement.DYN128_UNUSUAL_BYFAMILYBUSINESSTYPE_.ToString();
                    foreach (var itemFormula in ListFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    var listUnusualAllowanceProfileDic = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                    foreach (var itemFormula in ListFormula)
                    {
                        double amount = 0;
                        var familyBusinessType = itemFormula.Replace(_startWith, "");
                        var listAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(p => p.FamilyBusinessType == familyBusinessType).ToList();
                        if (listAllowanceCfg.HasValue())
                        {
                            var listAllowanceCfgID = listAllowanceCfg.Select(x => x.ID).ToList();

                            var listUnusualAllowance = listUnusualAllowanceProfileDic.Where(m => m.ProfileID == profileItem.ID
                               && listAllowanceCfgID.Contains(m.UnusualEDTypeID.Value)
                                                       && m.MonthStart != null
                               && m.MonthStart >= CutOffDuration.DateStart
                               && m.MonthStart <= CutOffDuration.DateEnd
                               ).ToList();
                            amount = listUnusualAllowance.Where(x => x.Amount != null).Sum(x => x.Amount.Value);

                        }
                        item = new ElementFormula(itemFormula, amount, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion
            #region Minh.NguyenVan [16/03/2022] 0140324: phần tử lương thời gian từ kết quả tính lương tính lại
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN130_SAL_REPAYROLLTABLEITEM_VALUE_BYCODE_.ToString(), string.Empty))
            {
                string status = string.Empty;
                var _startWith = PayrollElement.DYN130_SAL_REPAYROLLTABLEITEM_VALUE_BYCODE_.ToString();
                List<string> listFormula = formula.Where(m => m.StartsWith(_startWith)).Distinct().ToList();

                var listElementCode = listFormula.Select(x => x.Replace(PayrollElement.DYN130_SAL_REPAYROLLTABLEITEM_VALUE_BYCODE_.ToString(), "")).ToList();

                dataComputeSer.GetElementDYN130(TotalData600, CutOffDuration, listElementCode, null, ref status);

                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN130_SAL_REPAYROLLTABLEITEM_VALUE_BYCODE_.ToString() + ") ";
                    foreach (var itemFormula in listFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    var listRePayrollTableByProfile = TotalData600.dicRePayrollTableItemDYN130.GetValueOrNew(profileItem.ID);
                    foreach (var itemFormula in listFormula)
                    {
                        string value = string.Empty;
                        // Lấy mã phần tử cấu hình
                        var elementCode = itemFormula.Replace(PayrollElement.DYN130_SAL_REPAYROLLTABLEITEM_VALUE_BYCODE_.ToString(), "");
                        // Lấy số dòng cấu hình 

                        var objRePayrollByElementCode = listRePayrollTableByProfile.Where(x => x.Code == elementCode).FirstOrDefault();
                        if (objRePayrollByElementCode != null)
                        {
                            value = objRePayrollByElementCode.Value;
                        }
                        item = new ElementFormula(itemFormula, value, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region hai.nguyenngoc [16/03/2022] [0139953] [Phần tử Quốc tế thiếu nhi]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN131_SAL_HOLIDAYBONUS_CHILDRENSDAY_BYAGE_.ToString(), ""))
            {
                var strStartsWith = PayrollElement.DYN131_SAL_HOLIDAYBONUS_CHILDRENSDAY_BYAGE_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).ToList();
                var listElementCode = lstFormulaCheck.Select(x => x.Replace(strStartsWith, "")).ToList();
                string status = string.Empty;
                dataComputeSer.GetDicRelatives(TotalData600, CutOffDuration, ref status);
                //Khai báo ngày để tính tuổi theo công thức
                var dateCheck = new DateTime(DateTime.Now.Year, 05, 25);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN131_SAL_HOLIDAYBONUS_CHILDRENSDAY_BYAGE_.ToString() + ") ";
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        var countRelative = 0;
                        var strAge = itemFormula.Replace(strStartsWith, "");
                        int age = -1;
                        int.TryParse(strAge, out age);
                        var listRelatives = TotalData600.dicRelatives.GetValueOrNew(profileItem.ID).ToList();
                        if (age != -1)
                        {
                            //Kiểm tra người thân có ngày tháng năm sinh hay không => đếm số người thân có tuổi bằng tuổi được truyền vào 
                            countRelative = listRelatives.Where(x => x.RelativeYearOfBirth != null && x.RelativeMonthOfBirth != null && x.RelativeDayOfBirth != null
                            && (int)((dateCheck.Date - new DateTime(x.RelativeYearOfBirth.Value, x.RelativeMonthOfBirth.Value, x.RelativeDayOfBirth.Value).Date).TotalDays / 365) == age
                            ).ToList().Count();
                        }
                        item = new ElementFormula(itemFormula, countRelative, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region hai.nguyenngoc [05/04/2022] 0139594: phần tử lương lấy giá trị phần tử tính thưởng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN136_SAL_ELEMENTBONUS_BYCODE_.ToString(), ""))
            {
                var strStartsWith = PayrollElement.DYN136_SAL_ELEMENTBONUS_BYCODE_.ToString();
                List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).ToList();
                string status = string.Empty;
                dataComputeSer.GetDicSalReward(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN136_SAL_ELEMENTBONUS_BYCODE_.ToString() + ") ";
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        double value = 0;
                        double doubleTry = 0;
                        var codeElement = itemFormula.Replace(strStartsWith, "");
                        var objSalReward = TotalData600.dicSalReward.GetValueOrNew(profileItem.ID).Where(x => x.Status == EnumDropDown.SalRewardStatusOption.E_CONFIRMED.ToString() && x.ElementCode == codeElement).FirstOrDefault();
                        if (objSalReward != null && objSalReward.Value != null && (double.TryParse(objSalReward.Value, out doubleTry)) == true)
                        {
                            value = doubleTry;
                        }
                        item = new ElementFormula(itemFormula, value, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [17/03/2022][hai.nguyenngoc][0139653][New Func] Hệ số đánh giá K
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN132_EVA_PERFORMANCETYPE_BYCODE_.ToString(), ""))
            {
                var strStartsWith = PayrollElement.DYN132_EVA_PERFORMANCETYPE_BYCODE_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).ToList();
                var listElementCode = lstFormulaCheck.Select(x => x.Replace(strStartsWith, "")).ToList();
                string status = string.Empty;
                dataComputeSer.GetDicPerformance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN132_EVA_PERFORMANCETYPE_BYCODE_.ToString() + ") ";
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        var Code = itemFormula.Replace(strStartsWith, "");
                        double totalMark = 0;
                        var listEvaPer = TotalData600.dicPerformance.GetValueOrNew(profileItem.ID)
                            .Where(x => x.PerformanceTypeCode == Code && x.PeriodToDate >= CutOffDuration.DateStart && x.PeriodFromDate <= CutOffDuration.DateEnd && x.TotalMark != null).ToList();
                        if (listEvaPer != null)
                        {
                            totalMark = listEvaPer.Sum(x => x.TotalMark.Value);
                        }
                        item = new ElementFormula(itemFormula, totalMark, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Tuy.Vu [07/03/2022] [138789]: -	Thêm phần tử lương hỗ trợ đặt công thức tính lương và xuất báo cáo theo yêu cầu
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN133_SAL_UNUSUALALLOWANCE_ISCOUNTBYWORKDAY_.ToString(), ""))
            {
                var strStartsWith = PayrollElement.DYN133_SAL_UNUSUALALLOWANCE_ISCOUNTBYWORKDAY_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).ToList();

                string status = String.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                if (!String.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN133_SAL_UNUSUALALLOWANCE_ISCOUNTBYWORKDAY_.ToString() + ") ";
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        var code = itemFormula.Replace(strStartsWith, "");
                        var iValueForEnumWorkDay = 0;
                        var objUnusualAllowanceCFG = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == code).FirstOrDefault();
                        if (objUnusualAllowanceCFG != null && objUnusualAllowanceCFG.AllowanceType.Contains(EnumDropDown.UnusualAllowanceCfgType.E_COUNTBYWORKDAY.ToString()))
                        {
                            iValueForEnumWorkDay = 1;
                        }
                        item = new ElementFormula(itemFormula, iValueForEnumWorkDay, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN134_SAL_UNUSUALALLOWANCE_ISCOMPUTEPAYROLLCOMPANY_.ToString(), ""))
            {
                var strStartsWith = PayrollElement.DYN134_SAL_UNUSUALALLOWANCE_ISCOMPUTEPAYROLLCOMPANY_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).ToList();

                string status = String.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                if (!String.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN134_SAL_UNUSUALALLOWANCE_ISCOMPUTEPAYROLLCOMPANY_.ToString() + ") ";
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        var strCode = itemFormula.Replace(strStartsWith, "");
                        var iValueForEnumPayrollCompany = 0;
                        var objUnusualAllowanceCFG = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == strCode).FirstOrDefault();
                        if (objUnusualAllowanceCFG != null && objUnusualAllowanceCFG.AllowanceType.Contains(EnumDropDown.UnusualAllowanceCfgType.E_COMPUTEPAYROLLCOMPANY.ToString()))
                        {
                            iValueForEnumPayrollCompany = 1;
                        }
                        item = new ElementFormula(itemFormula, iValueForEnumPayrollCompany, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN135_SAL_UNUSUALALLOWANCE_ISPAYROLLINPERIOD_.ToString(), ""))
            {
                var strStartsWith = PayrollElement.DYN135_SAL_UNUSUALALLOWANCE_ISPAYROLLINPERIOD_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).ToList();

                string status = String.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                if (!String.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN135_SAL_UNUSUALALLOWANCE_ISPAYROLLINPERIOD_.ToString() + ") ";
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var itemFormula in lstFormulaCheck)
                    {
                        var code = itemFormula.Replace(strStartsWith, "");
                        var iValueForEnumPayrollInPeriod = 0;
                        var objUnusualAllowanceCFG = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == code).FirstOrDefault();
                        if (objUnusualAllowanceCFG != null && objUnusualAllowanceCFG.AllowanceType.Contains(EnumDropDown.UnusualAllowanceCfgType.E_PAYROLLINPERIOD.ToString()))
                        {
                            iValueForEnumPayrollInPeriod = 1;
                        }
                        item = new ElementFormula(itemFormula, iValueForEnumPayrollInPeriod, 0);
                        listElementFormula.Add(item); 
                    }
                }
            }
            #endregion

        }


        #endregion

        #region Tung.Tran Nhánh các enum Lương
        public void GetStaticValuesSalary(
           ComputePayrollDataModelKZAll TotalDataAll,
           ComputePayrollDataModelKZ TotalData600,
           List<ElementFormula> listElementFormula,
           Hre_ProfileEntity profileItem,
           Att_CutOffDurationEntity CutOffDuration,
           List<string> formula,
           Guid? GradePayrollID,
           Att_AttendanceTableEntity objAttendanceTableProCut,
           Dictionary<Guid, ValueCount> listTmpDeduction,
           Sal_GetDataComputePayrollKZServices dataComputeSer,
           Att_CutOffDurationEntity cutOffDurationPre,
           Att_RecalAttendanceTableEntity objRecalAttendanceTableProCut
           )
        {


            ElementFormula item = new ElementFormula();

            #region [23102015][bang.nguyen][modify][58842]
            //Thêm phần tử lương phụ cấp theo tháng của tháng N và tháng N-1
            // Lấy tổng tiền các dòng phụ cấp có tháng bắt đầu <= tháng tính lương và (tháng kết thúc null hoặc tháng kết thúc > tháng tính lương) => Mã phụ cấp_MONTH
            //Lấy tổng tiền các dòng phụ cấp có tháng bắt đầu <= tháng tính lương - 1 và (tháng kết thúc null hoặc tháng kết thúc > tháng tính lương - 1) => Mã phụ cấp_MONTH_N_1
            //[26/02/2016][Hien.Nguyen][63849]
            //Lay du lieu duyet
            if (CheckIsExistFormula(listElementFormula, ref formula, "SAL_SUM_ALLOWANCE_MONTH_N_1_", "_AMOUNT"))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (SAL_SUM_ALLOWANCE_MONTH_N_1_) ";

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula("SAL_SUM_ALLOWANCE_MONTH_N_1" + "_" + i.Code + "_" + "AMOUNT", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    var listUnusualAllowanceProfileDic = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);

                    DateTime dateInMonthN1 = CutOffDuration.DateEnd.AddMonths(-1);
                    int dayInMonthN1 = DateTime.DaysInMonth(dateInMonthN1.Year, dateInMonthN1.Month);
                    //ngay cuoi thang N - 1
                    //[21062016][bang.nguyen][64655]
                    //Lấy tổng tiền các dòng phụ cấp có ngày bắt đầu <= ngày cuối tháng tính lương - 1 và (ngày kết thúc null hoặc ngày kết thúc >= ngày bắt đầu tháng tính lương - 1) 
                    DateTime dateFirstMonhtN1 = new DateTime(dateInMonthN1.Year, dateInMonthN1.Month, 1);
                    DateTime dateLastMonthN1 = new DateTime(dateInMonthN1.Year, dateInMonthN1.Month, dayInMonthN1);

                    var listUnusualAllowanceProByMonth = listUnusualAllowanceProfileDic.Where(m => m.ProfileID == profileItem.ID
                                                                    && m.MonthStart != null
                                                                    && m.MonthStart <= dateLastMonthN1
                                                                    && m.Amount > 0
                                                                    && (m.MonthEnd == null || (m.MonthEnd != null && m.MonthEnd >= dateFirstMonhtN1))).ToList();

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        var listUnusualAllowanceProfileByMonth = listUnusualAllowanceProfileDic.Where(m => m.ProfileID == profileItem.ID
                            && m.UnusualEDTypeID == i.ID
                            && m.MonthStart != null
                            && m.MonthStart <= dateLastMonthN1
                            && m.Amount > 0
                            && (m.MonthEnd == null || (m.MonthEnd != null && m.MonthEnd > dateLastMonthN1))
                            ).ToList();

                        //[26/02/2016][Hien.Nguyen][63849]
                        if (i.Code == Common.ChildCare)
                        {
                            listUnusualAllowanceProfileByMonth = listUnusualAllowanceProfileByMonth.Where(m => m.Status == UnusualAllowanceStatus.E_APPROVED.ToString()).ToList();
                        }
                        var listUnusualAllowanceByCfg = listUnusualAllowanceProByMonth.Where(s => s.UnusualEDTypeID == i.ID).ToList();

                        if (listUnusualAllowanceByCfg.Count > 0)
                        {
                            double? sumAmount = listUnusualAllowanceByCfg.Sum(s => s.Amount);
                            item = new ElementFormula("SAL_SUM_ALLOWANCE_MONTH_N_1" + "_" + i.Code + "_" + "AMOUNT", sumAmount, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula("SAL_SUM_ALLOWANCE_MONTH_N_1" + "_" + i.Code + "_" + "AMOUNT", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            #endregion

            #region [26/02/2016][Hien.Nguyen][63849]
            //Lay du lieu duyet
            if (CheckIsExistFormula(listElementFormula, ref formula, "SAL_SUM_ALLOWANCE_MONTH_", new string[] { "AMOUNT" }))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (SAL_SUM_ALLOWANCE_MONTH_) ";

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula("SAL_SUM_ALLOWANCE_MONTH_" + "_" + i.Code + "_" + "AMOUNT", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    var listUnusualAllowanceProfileDic = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);

                    int dayInMonthN = DateTime.DaysInMonth(CutOffDuration.DateEnd.Year, CutOffDuration.DateEnd.Month);
                    //[21062016][bang.nguyen][64655]
                    //Lấy tổng tiền các dòng phụ cấp có ngày bắt đầu <= ngày cuối tháng tính lương và (ngày kết thúc null hoặc ngày kết thúc >= ngày bắt đầu tháng tính lương) 
                    //ngay cuoi thang N
                    DateTime dateLastMonthN = new DateTime(CutOffDuration.DateEnd.Year, CutOffDuration.DateEnd.Month, dayInMonthN);
                    DateTime dateFirstMonthN = new DateTime(CutOffDuration.DateEnd.Year, CutOffDuration.DateEnd.Month, 1);

                    //năm tính lương
                    var listUnusualAllowanceProByMonth = listUnusualAllowanceProfileDic.Where(m =>
                    m.MonthStart != null
                    && m.MonthStart <= dateLastMonthN
                    && m.Amount > 0
                    && (m.MonthEnd == null || (m.MonthEnd != null && m.MonthEnd >= dateFirstMonthN))).ToList();
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        var listUnusualAllowanceProfileByMonth = listUnusualAllowanceProfileDic.Where(m =>
                            m.UnusualEDTypeID == i.ID
                            && m.MonthStart != null
                            && m.MonthStart <= dateLastMonthN
                            && m.Amount > 0
                            && (m.MonthEnd == null || (m.MonthEnd != null && m.MonthEnd > dateLastMonthN))
                                ).ToList();

                        //[26/02/2016][Hien.Nguyen][63849]
                        if (i.Code == Common.ChildCare)
                        {
                            listUnusualAllowanceProfileByMonth = listUnusualAllowanceProfileByMonth.Where(m => m.Status == UnusualAllowanceStatus.E_APPROVED.ToString()).ToList();
                        }
                        var listUnusualAllowanceByCfg = listUnusualAllowanceProByMonth.Where(s => s.UnusualEDTypeID == i.ID).ToList();
                        if (listUnusualAllowanceByCfg.Count > 0)
                        {
                            double? sumAmount = listUnusualAllowanceByCfg.Sum(s => s.Amount);
                            item = new ElementFormula("SAL_SUM_ALLOWANCE_MONTH_" + i.Code + "_" + "AMOUNT", sumAmount, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula("SAL_SUM_ALLOWANCE_MONTH_" + i.Code + "_" + "AMOUNT", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            #endregion

            #region [14/03/2016][HienNguyen][64217]
            //Thêm mới phần tử lấy tổng số giờ làm việc, trước và sau thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_SHIFT", new string[] { "HOURS_BEFORE", "HOURS_AFTER" }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);

                //Có thay đổi lương
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                    SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                    //Dữ liệu công chi tiết
                    var _listAttendanceItemByProfile = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.WorkDate <= CutOffDuration.DateEnd && m.WorkDate >= CutOffDuration.DateStart).ToList();

                    foreach (var i in TotalDataAll.listCat_Shift)
                    {
                        //Trước khi thay đổi
                        item = new ElementFormula("ATT_SHIFT" + "_" + i.Code + "_" + "HOURS_BEFORE", _listAttendanceItemByProfile.Where(m => m.ShiftID == i.ID && m.WorkDate >= CutOffDuration.DateStart && m.WorkDate < dateStart2).Sum(m => m.AvailableHours), 0);
                        listElementFormula.Add(item);
                        //Sau khi thay đổi
                        item = new ElementFormula("ATT_SHIFT" + "_" + i.Code + "_" + "HOURS_AFTER", _listAttendanceItemByProfile.Where(m => m.ShiftID == i.ID && m.WorkDate >= dateStart2 && m.WorkDate <= CutOffDuration.DateEnd).Sum(m => m.AvailableHours), 0);
                        listElementFormula.Add(item);
                    }
                }
                else//không thay đổi lương
                {
                    //Dữ liệu công chi tiết
                    var _listAttendanceItemByProfile = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.WorkDate <= CutOffDuration.DateEnd && m.WorkDate >= CutOffDuration.DateStart).ToList();

                    //Không thay đổi thì phần tử trước =0
                    foreach (var i in TotalDataAll.listCat_Shift)
                    {
                        //Trước khi thay đổi
                        item = new ElementFormula("ATT_SHIFT" + "_" + i.Code + "_" + "HOURS_BEFORE", 0, 0);
                        listElementFormula.Add(item);
                        //Sau khi thay đổi
                        item = new ElementFormula("ATT_SHIFT" + "_" + i.Code + "_" + "HOURS_AFTER", _listAttendanceItemByProfile.Where(m => m.ShiftID == i.ID && m.WorkDate >= CutOffDuration.DateStart && m.WorkDate <= CutOffDuration.DateEnd).Sum(m => m.AvailableHours), 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region [09/11/2015][hien.nguyen][Modify][59690]
            if (CheckIsExistFormula(listElementFormula, ref formula, TotalDataAll.listUsualAllowance.Select(m => m.Code).ToArray()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (listUsualAllowance) ";
                    foreach (var i in TotalDataAll.listUsualAllowance)
                    {
                        item = new ElementFormula(i.Code, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    //Lấy hợp đồng By ProfileID
                    var ContractByProfile = TotalData600.dicContract.GetValueOrNew(profileItem.ID).OrderByDescending(m => m.DateStart).FirstOrDefault();
                    //Biến lưu Amount
                    double Amount = 0;
                    foreach (var i in TotalDataAll.listUsualAllowance)
                    {
                        Amount = 0;
                        if (ContractByProfile.HasValue())
                        {
                            if (ContractByProfile.AllowanceID1 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance1 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID2 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance2 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID3 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance3 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID4 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance4 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID5 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance5 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID6 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance6 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID7 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance7 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID8 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance8 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID9 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance9 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID10 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance10 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID11 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance11 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID12 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance12 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID13 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance13 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID14 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance14 ?? 0;
                            }
                            if (ContractByProfile.AllowanceID15 == i.ID)
                            {
                                Amount += ContractByProfile.Allowance15 ?? 0;
                            }
                        }

                        item = new ElementFormula(i.Code, Amount, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region CatElementType.AllowancesOut.ToString().ToUpper(), "_IS_CHANGE"
            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.AllowancesOut.ToString().ToUpper(), "_IS_CHANGE"))
            {

                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + CatElementType.AllowancesOut.ToString() + ") ";

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_" + i.Code + "_IS_CHANGE", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {

                    var listUnusualAllowanceProfileDic = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        var listUnusualAllowanceByProfile = listUnusualAllowanceProfileDic.Where(m => m.UnusualEDTypeID == i.ID && m.MonthStart <= CutOffDuration.DateEnd && (m.MonthEnd >= CutOffDuration.DateStart || m.MonthEnd == null)).ToList();
                        if (listUnusualAllowanceByProfile.Count >= 2)
                        {
                            if (listUnusualAllowanceByProfile.Any(m => m.MonthStart >= CutOffDuration.DateStart && m.MonthStart <= CutOffDuration.DateEnd) && listUnusualAllowanceByProfile.Any(m => m.MonthStart < CutOffDuration.DateStart))
                            {
                                item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_" + i.Code + "_IS_CHANGE", 1, 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_" + i.Code + "_IS_CHANGE", 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_" + i.Code + "_IS_CHANGE", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region Đếm số ngày từ đầu kỳ lương đến ngày bắt đầu hưởng phụ cấp
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_COUNT_DAY_STARTCUTOFFDURATION_TO_STARTALLOWANCE_", ""))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (ATT_COUNT_DAY_STARTCUTOFFDURATION_TO_STARTALLOWANCE_) ";
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula("ATT_COUNT_DAY_STARTCUTOFFDURATION_TO_STARTALLOWANCE_" + i.Code, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {


                    //lấy tất cả các loại phụ cấp của NV
                    var ListUnusualAllowances = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID).Where(m => m.MonthStart.HasValue && m.MonthStart.Value.Date >= CutOffDuration.DateStart.Date && m.MonthStart.Value.Date <= CutOffDuration.DateEnd.Date).OrderBy(m => m.MonthStart).ToList();

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        var ListUnusualAllowancesByCfg = ListUnusualAllowances.FirstOrDefault(m => m.UnusualEDTypeID == i.ID);
                        if (ListUnusualAllowancesByCfg != null && ListUnusualAllowancesByCfg.MonthStart != null)
                        {
                            double CountDay = ListUnusualAllowancesByCfg.MonthStart.Value.Date.Subtract(CutOffDuration.DateStart.Date).TotalDays;
                            item = new ElementFormula("ATT_COUNT_DAY_STARTCUTOFFDURATION_TO_STARTALLOWANCE_" + i.Code, CountDay, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula("ATT_COUNT_DAY_STARTCUTOFFDURATION_TO_STARTALLOWANCE_" + i.Code, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region Đếm số ngày DayOff từ đầu kỳ lương đến ngày bắt đầu hưởng phụ cấp 
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_COUNT_DAYOFF_STARTCUTOFFDURATION_TO_STARTALLOWANCE_", ""))
            {

                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (ATT_COUNT_DAYOFF_STARTCUTOFFDURATION_TO_STARTALLOWANCE_) ";
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula("ATT_COUNT_DAYOFF_STARTCUTOFFDURATION_TO_STARTALLOWANCE_" + i.Code, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {

                    //lấy tất cả các loại phụ cấp của NV
                    var ListUnusualAllowances = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID).Where(m => m.MonthStart.HasValue && m.MonthStart.Value.Date >= CutOffDuration.DateStart.Date && m.MonthStart.Value.Date <= CutOffDuration.DateEnd.Date).OrderBy(m => m.MonthStart).ToList();

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {

                        var ListUnusualAllowancesByCfg = ListUnusualAllowances.FirstOrDefault(m => m.UnusualEDTypeID == i.ID);
                        if (ListUnusualAllowancesByCfg != null && ListUnusualAllowancesByCfg.MonthStart != null)
                        {
                            DateTime Start = CutOffDuration.DateStart.Date;
                            DateTime End = ListUnusualAllowancesByCfg.MonthStart.Value.Date;

                            double CountDay = TotalDataAll.listDayOff.Where(m => m.DateOff < End && m.DateOff >= Start && m.Type == HolidayType.E_WEEKEND_HLD.ToString() && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID)).Count();
                            item = new ElementFormula("ATT_COUNT_DAYOFF_STARTCUTOFFDURATION_TO_STARTALLOWANCE_" + i.Code, CountDay, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula("ATT_COUNT_DAYOFF_STARTCUTOFFDURATION_TO_STARTALLOWANCE_" + i.Code, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region Đếm số ngày từ ngày kết thúc phụ cấp cho đến ngày cuối kỳ lương
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_COUNT_DAY_ENDALLOWANCE_TO_ENDCUTOFFDURATION_", ""))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (ATT_COUNT_DAY_ENDALLOWANCE_TO_ENDCUTOFFDURATION_) ";
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula("ATT_COUNT_DAY_ENDALLOWANCE_TO_ENDCUTOFFDURATION_" + i.Code, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                    //lấy tất cả các loại phụ cấp của NV
                    var ListUnusualAllowances = listUnusualAllowanceProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthStart.HasValue && m.MonthEnd.HasValue && m.MonthStart.Value.Date <= CutOffDuration.DateEnd.Date && m.MonthEnd.Value.Date <= CutOffDuration.DateEnd.Date && m.MonthEnd.Value.Date >= CutOffDuration.DateStart.Date).OrderBy(m => m.MonthStart).ToList();

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        var ListUnusualAllowancesByCfg = ListUnusualAllowances.FirstOrDefault(m => m.UnusualEDTypeID == i.ID);
                        if (ListUnusualAllowancesByCfg != null && ListUnusualAllowancesByCfg.MonthEnd != null)
                        {
                            double CountDay = CutOffDuration.DateEnd.Date.Subtract(ListUnusualAllowancesByCfg.MonthEnd.Value.Date).TotalDays;
                            item = new ElementFormula("ATT_COUNT_DAY_ENDALLOWANCE_TO_ENDCUTOFFDURATION_" + i.Code, CountDay, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula("ATT_COUNT_DAY_ENDALLOWANCE_TO_ENDCUTOFFDURATION_" + i.Code, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region Đếm số ngày DayOff từ ngày kết thúc phụ cấp cho đến ngày cuối kỳ lương 
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_COUNT_DAYOFF_ENDALLOWANCE_TO_ENDCUTOFFDURATION_", ""))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (ATT_COUNT_DAYOFF_ENDALLOWANCE_TO_ENDCUTOFFDURATION_) ";
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula("ATT_COUNT_DAYOFF_ENDALLOWANCE_TO_ENDCUTOFFDURATION_" + i.Code, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {

                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                    //lấy tất cả các loại phụ cấp của NV
                    var ListUnusualAllowances = listUnusualAllowanceProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthStart.HasValue && m.MonthEnd.HasValue && m.MonthStart.Value.Date <= CutOffDuration.DateEnd.Date && m.MonthEnd.Value.Date <= CutOffDuration.DateEnd.Date && m.MonthEnd.Value.Date >= CutOffDuration.DateStart.Date).OrderBy(m => m.MonthStart).ToList();

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {

                        var ListUnusualAllowancesByCfg = ListUnusualAllowances.FirstOrDefault(m => m.UnusualEDTypeID == i.ID);
                        if (ListUnusualAllowancesByCfg != null && ListUnusualAllowancesByCfg.MonthEnd != null)
                        {
                            DateTime End = CutOffDuration.DateEnd.Date;
                            DateTime Start = ListUnusualAllowancesByCfg.MonthEnd.Value.Date;

                            double CountDay = TotalDataAll.listDayOff.Where(m => m.DateOff <= End && m.DateOff > Start && m.Type == HolidayType.E_WEEKEND_HLD.ToString() && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID)).Count();
                            item = new ElementFormula("ATT_COUNT_DAYOFF_ENDALLOWANCE_TO_ENDCUTOFFDURATION_" + i.Code, CountDay, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula("ATT_COUNT_DAYOFF_ENDALLOWANCE_TO_ENDCUTOFFDURATION_" + i.Code, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region Số ngày nghỉ không trả phụ cấp 
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_TOTAL_PAID_LEAVEDAY_DAY_NOT_PAY_DETAIL_", ""))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (ATT_TOTAL_PAID_LEAVEDAY_DAY_NOT_PAY_DETAIL_) ";
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula("ATT_TOTAL_PAID_LEAVEDAY_DAY_NOT_PAY_DETAIL_" + i.Code, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {

                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                    List<Att_AttendanceTableItemEntity> listAttendanceTableItem = new List<Att_AttendanceTableItemEntity>();
                    double Total_LeaveDay_NotPay = 0;
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        Total_LeaveDay_NotPay = 0;
                        if (objAttendanceTableProCut != null)
                        {
                            listAttendanceTableItem = new List<Att_AttendanceTableItemEntity>();
                            var UnusualAllowanceByProfile = listUnusualAllowanceProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthStart.HasValue && m.MonthStart.Value.Date <= CutOffDuration.DateEnd.Date && (m.MonthEnd == null || m.MonthEnd.Value.Date >= CutOffDuration.DateStart.Date) && m.UnusualEDTypeID == i.ID).OrderBy(m => m.MonthStart).FirstOrDefault();


                            if (UnusualAllowanceByProfile != null && UnusualAllowanceByProfile.MonthStart != null)//nếu có phụ cấp trong tháng
                            {
                                listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.UnpaidLeaveHours != 0 && m.AvailableHours != 0 && m.WorkDate <= CutOffDuration.DateEnd && m.WorkDate >= UnusualAllowanceByProfile.MonthStart).ToList();
                            }
                            else//nếu không có phụ cấp trong tháng
                            {
                                listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.UnpaidLeaveHours != 0 && m.AvailableHours != 0).ToList();
                            }

                            for (int j = 0; j < listAttendanceTableItem.Count; j++)
                            {
                                Total_LeaveDay_NotPay += listAttendanceTableItem[j].UnpaidLeaveHours / listAttendanceTableItem[j].AvailableHours;
                            }
                        }

                        item = new ElementFormula("ATT_TOTAL_PAID_LEAVEDAY_DAY_NOT_PAY_DETAIL_" + i.Code, Total_LeaveDay_NotPay, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region DateStart của phụ cấp <= CutOffDuration.DateEnd && DateStart của phụ cấp >= CutOffDuration.DateStart
            if (CheckIsExistFormula(listElementFormula, ref formula, "SAL_IS_STARTALLOWANCE_IN_CUTOFFDURATION_", ""))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (SAL_IS_STARTALLOWANCE_IN_CUTOFFDURATION_) ";

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula("SAL_IS_STARTALLOWANCE_IN_CUTOFFDURATION_" + i.Code, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                    //lấy tất cả các loại phụ cấp của NV
                    var ListUnusualAllowances = listUnusualAllowanceProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthStart.HasValue && m.MonthStart.Value.Date <= CutOffDuration.DateEnd.Date && m.MonthStart.Value.Date >= CutOffDuration.DateStart.Date).OrderBy(m => m.MonthStart).ToList();

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {

                        var ListUnusualAllowancesByCfg = ListUnusualAllowances.FirstOrDefault(m => m.UnusualEDTypeID == i.ID);
                        if (ListUnusualAllowancesByCfg != null && ListUnusualAllowancesByCfg.MonthStart.HasValue && ListUnusualAllowancesByCfg.MonthStart.Value.Date >= CutOffDuration.DateStart.Date)
                        {
                            item = new ElementFormula("SAL_IS_STARTALLOWANCE_IN_CUTOFFDURATION_" + i.Code, 1, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula("SAL_IS_STARTALLOWANCE_IN_CUTOFFDURATION_" + i.Code, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region DateEnd của phụ cấp <= CutOffDuration.DateEnd && DateEnd của phụ cấp >= CutOffDuration.DateStart
            if (CheckIsExistFormula(listElementFormula, ref formula, "SAL_IS_ENDALLOWANCE_IN_CUTOFFDURATION_", ""))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (SAL_IS_ENDALLOWANCE_IN_CUTOFFDURATION_) ";

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula("SAL_IS_ENDALLOWANCE_IN_CUTOFFDURATION_" + i.Code, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                    //lấy tất cả các loại phụ cấp của NV
                    var ListUnusualAllowances = listUnusualAllowanceProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthStart.HasValue && m.MonthEnd.HasValue && m.MonthEnd.Value.Date <= CutOffDuration.DateEnd.Date && m.MonthEnd.Value.Date >= CutOffDuration.DateStart.Date).OrderBy(m => m.MonthStart).ToList();

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {

                        var ListUnusualAllowancesByCfg = ListUnusualAllowances.FirstOrDefault(m => m.UnusualEDTypeID == i.ID);
                        if (ListUnusualAllowancesByCfg != null && ListUnusualAllowancesByCfg.MonthEnd.HasValue && ListUnusualAllowancesByCfg.MonthEnd.Value.Date >= CutOffDuration.DateStart.Date)
                        {
                            item = new ElementFormula("SAL_IS_ENDALLOWANCE_IN_CUTOFFDURATION_" + i.Code, 1, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula("SAL_IS_ENDALLOWANCE_IN_CUTOFFDURATION_" + i.Code, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region [15/11/2016][HienNguyen][75598]
            if (CheckIsExistFormula(listElementFormula, ref formula, "UNUSUAL_ALLOWANCE_", "_NOTE"))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (UNUSUAL_ALLOWANCE_) ";
                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula("UNUSUAL_ALLOWANCE_" + i.Code + "_NOTE", string.Empty, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                    //[22/01/2018][bang.nguyen][92624][Modify Func]
                    var listAllowanceByProfile = listUnusualAllowanceProfile
                        .Where(m => m.ProfileID == profileItem.ID && m.MonthStart <= CutOffDuration.DateEnd && (m.MonthEnd == null || m.MonthEnd >= CutOffDuration.DateStart)).ToList();

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        string notes = string.Empty;
                        var objAllowanceByType = listAllowanceByProfile.Where(m => m.UnusualEDTypeID == i.ID && m.Notes != null).OrderByDescending(s => s.MonthStart).FirstOrDefault();
                        if (objAllowanceByType != null && !string.IsNullOrEmpty(objAllowanceByType.Notes))
                        {
                            notes = objAllowanceByType.Notes;
                        }

                        item = new ElementFormula("UNUSUAL_ALLOWANCE_" + i.Code + "_NOTE", notes, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Lấy phần tử tính lương ngày bắt đầu và kết thúc phụ cấp (theo loại phụ cấp)
            //[65316]
            //[23/06/2017][bang.nguyen][81470][bug]
            if (CheckIsExistFormula(listElementFormula, ref formula, "DYN_SAL_UNUSUALALLOWANCE_", new string[] { "_DATESTART_INCUTOFF", "_DATEEND_INCUTOFF" }))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (DYN_SAL_UNUSUALALLOWANCE_) ";

                    var lstUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                    if (lstUnusualAllowanceCfg.Count > 0)
                    {
                        //loc phu cap theo nhân viên
                        foreach (var objCfg in lstUnusualAllowanceCfg)
                        {
                            item = new ElementFormula("DYN_SAL_UNUSUALALLOWANCE_" + objCfg.Code + "_DATESTART_INCUTOFF", null, 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula("DYN_SAL_UNUSUALALLOWANCE_" + objCfg.Code + "_DATEEND_INCUTOFF", null, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    //loc ds loai phu cap
                    var lstUnusualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                    if (lstUnusualAllowanceCfg.Count > 0)
                    {

                        var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                        //loc phu cap theo nhân viên
                        var lstUnusualAllowanceByProFile = listUnusualAllowanceProfile.Where(s => s.ProfileID == profileItem.ID
                                                                                                        && s.MonthStart != null
                                                                                                        && s.MonthStart <= CutOffDuration.DateEnd
                                                                                                        && s.MonthEnd != null
                                                                                                        && s.MonthEnd >= CutOffDuration.DateStart
                                                                                                        && s.UnusualEDTypeID != null
                                                                                                        ).OrderByDescending(s => s.MonthStart).ToList();
                        if (lstUnusualAllowanceByProFile.Count > 0)
                        {
                            foreach (var objCfg in lstUnusualAllowanceCfg)
                            {
                                var objUnusualAllowance = lstUnusualAllowanceByProFile.Where(s => s.UnusualEDTypeID == objCfg.ID).FirstOrDefault();
                                if (objUnusualAllowance != null)
                                {
                                    item = new ElementFormula("DYN_SAL_UNUSUALALLOWANCE_" + objCfg.Code + "_DATESTART_INCUTOFF", objUnusualAllowance.MonthStart, 0);
                                    listElementFormula.Add(item);
                                    item = new ElementFormula("DYN_SAL_UNUSUALALLOWANCE_" + objCfg.Code + "_DATEEND_INCUTOFF", objUnusualAllowance.MonthEnd, 0);
                                    listElementFormula.Add(item);
                                }
                                else
                                {
                                    item = new ElementFormula("DYN_SAL_UNUSUALALLOWANCE_" + objCfg.Code + "_DATESTART_INCUTOFF", null, 0);
                                    listElementFormula.Add(item);
                                    item = new ElementFormula("DYN_SAL_UNUSUALALLOWANCE_" + objCfg.Code + "_DATEEND_INCUTOFF", null, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                        }
                        else
                        {
                            foreach (var objCfg in lstUnusualAllowanceCfg)
                            {
                                item = new ElementFormula("DYN_SAL_UNUSUALALLOWANCE_" + objCfg.Code + "_DATESTART_INCUTOFF", null, 0);
                                listElementFormula.Add(item);
                                item = new ElementFormula("DYN_SAL_UNUSUALALLOWANCE_" + objCfg.Code + "_DATEEND_INCUTOFF", null, 0);
                                listElementFormula.Add(item);
                            }
                        }
                    }
                }
            }
            #endregion

            #region [30/05/2016][HienNguyen][67695]
            if (CheckIsExistFormula(listElementFormula, ref formula, "DYN_ALLOWANCES_", new string[] { "_BASICSALARY_1", "_BASICSALARY_2", "_BASICSALARY_3", "_BASICSALARY_4", "_BASICSALARY_5", "_BASICSALARY_6", "_BASICSALARY_7", "_BASICSALARY_8", "_BASICSALARY_9" }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                for (int i = 1; i <= 9; i++)
                {
                    Sal_BasicSalaryEntity _basicSalary = GetBasicSalaryIsChange(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID, i);
                    if (_basicSalary != null)
                    {
                        double _value = 0;
                        foreach (var _unusualCfg in TotalDataAll.listUsualAllowance)
                        {
                            _value = 0;
                            if (_unusualCfg.ID == _basicSalary.AllowanceType1ID)
                            {
                                _value += _basicSalary.AllowanceAmount1 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceType2ID)
                            {
                                _value += _basicSalary.AllowanceAmount2 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceType3ID)
                            {
                                _value += _basicSalary.AllowanceAmount3 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceType4ID)
                            {
                                _value += _basicSalary.AllowanceAmount4 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceTypeID5)
                            {
                                _value += _basicSalary.AllowanceAmount5 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceTypeID6)
                            {
                                _value += _basicSalary.AllowanceAmount6 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceTypeID7)
                            {
                                _value += _basicSalary.AllowanceAmount7 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceTypeID8)
                            {
                                _value += _basicSalary.AllowanceAmount8 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceTypeID9)
                            {
                                _value += _basicSalary.AllowanceAmount9 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceTypeID10)
                            {
                                _value += _basicSalary.AllowanceAmount10 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceTypeID11)
                            {
                                _value += _basicSalary.AllowanceAmount11 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceTypeID12)
                            {
                                _value += _basicSalary.AllowanceAmount12 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceTypeID13)
                            {
                                _value += _basicSalary.AllowanceAmount13 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceTypeID14)
                            {
                                _value += _basicSalary.AllowanceAmount14 ?? 0;
                            }
                            if (_unusualCfg.ID == _basicSalary.AllowanceTypeID15)
                            {
                                _value += _basicSalary.AllowanceAmount15 ?? 0;
                            }
                            item = new ElementFormula("DYN_ALLOWANCES_" + _unusualCfg.Code + "_BASICSALARY_" + i.ToString(), _value, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var _unusualCfg in TotalDataAll.listUsualAllowance)
                        {
                            item = new ElementFormula("DYN_ALLOWANCES_" + _unusualCfg.Code + "_BASICSALARY_" + i.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region task 57401 lấy mức lương gần nhất, trước khi thay đổi lương và ko thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.Allowances.ToString().ToUpper(), "_BASICSALARY")
               || CheckIsExistFormula(listElementFormula, ref formula, CatElementType.Allowances.ToString().ToUpper(), "_BASICSALARY_N_1"))
            {
                var ListBasicSalaryByProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                var BasicSalaryByProfile_N_1 = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd.AddMonths(-1)).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();

                //[07/03/2016][Hien.Nguyen][64007]
                //Lọc ra lương cơ bản trước khi thay đổi lương hoặc ko thay đổi
                var BasicSalaryByProfile = ListBasicSalaryByProfile.FirstOrDefault();

                double _value = 0;
                foreach (var i in TotalDataAll.listUsualAllowance)
                {
                    _value = 0;
                    if (BasicSalaryByProfile != null)
                    {
                        if (i.ID == BasicSalaryByProfile.AllowanceType1ID)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount1 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceType2ID)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount2 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceType3ID)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount3 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceType4ID)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount4 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID5)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount5 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID6)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount6 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID7)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount7 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID8)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount8 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID9)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount9 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID10)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount10 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID11)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount11 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID12)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount12 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID13)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount13 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID14)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount14 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID15)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount15 ?? 0;
                        }
                    }
                    item = new ElementFormula(CatElementType.Allowances.ToString().ToUpper() + "_" + i.Code + "_BASICSALARY", _value, 0);
                    listElementFormula.Add(item);


                    _value = 0;
                    if (BasicSalaryByProfile_N_1 != null)
                    {
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceType1ID)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount1 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceType2ID)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount2 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceType3ID)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount3 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceType4ID)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount4 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceTypeID5)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount5 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceTypeID6)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount6 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceTypeID7)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount7 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceTypeID8)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount8 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceTypeID9)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount9 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceTypeID10)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount10 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceTypeID11)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount11 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceTypeID12)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount12 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceTypeID13)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount13 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceTypeID14)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount14 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile_N_1.AllowanceTypeID15)
                        {
                            _value += BasicSalaryByProfile_N_1.AllowanceAmount15 ?? 0;
                        }
                    }
                    item = new ElementFormula(CatElementType.Allowances.ToString().ToUpper() + "_" + i.Code + "_BASICSALARY_N_1", _value, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region [4/1/2017][HienNguyen][0077541] Phụ cấp lương cơ bản sau khi thay đổi (tính từ đầu tháng tới cuối tháng)
            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.Allowances.ToString().ToUpper(), "_BASICSALARY_IN_MONTHYEAR"))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                DateTime dateStart = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                DateTime dateEnd = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1).AddMonths(1).AddDays(-1);
                var ListBasicSalaryByProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID).OrderByDescending(m => m.DateOfEffect).ToList();

                //[07/03/2016][Hien.Nguyen][64007]
                //Lọc ra lương cơ bản trước khi thay đổi lương hoặc ko thay đổi
                var BasicSalaryByProfile = ListBasicSalaryByProfile.FirstOrDefault();

                double _value = 0;
                foreach (var i in TotalDataAll.listUsualAllowance)
                {
                    _value = 0;
                    if (BasicSalaryByProfile != null)
                    {
                        if (i.ID == BasicSalaryByProfile.AllowanceType1ID)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount1 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceType2ID)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount2 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceType3ID)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount3 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceType4ID)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount4 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID5)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount5 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID6)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount6 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID7)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount7 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID8)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount8 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID9)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount9 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID10)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount10 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID11)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount11 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID12)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount12 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID13)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount13 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID14)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount14 ?? 0;
                        }
                        if (i.ID == BasicSalaryByProfile.AllowanceTypeID15)
                        {
                            _value += BasicSalaryByProfile.AllowanceAmount15 ?? 0;
                        }
                    }
                    item = new ElementFormula(CatElementType.Allowances.ToString().ToUpper() + "_" + i.Code + "_BASICSALARY_IN_MONTHYEAR", _value, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region [07/03/2016][Hien.Nguyen][64007] Sau khi thay đổi
            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.Allowances.ToString().ToUpper(), "_BASICSALARY_BEFORER"))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);

                //Biến kiểm tra có thay đổi lương trong tháng hay ko
                bool IsChangeBasicSalary = CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID);

                //Có thay đổ lương
                if (IsChangeBasicSalary)
                {
                    //dòng đầu tiên theo kì lương trong lương cơ bản
                    Sal_BasicSalaryEntity BasicSalaryByProfile = null;

                    var ListBasicSalaryByProfile = listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).OrderBy(m => m.DateOfEffect).ToList();

                    if (ListBasicSalaryByProfile.Any(m => m.DateOfEffect <= CutOffDuration.DateEnd && m.DateOfEffect > CutOffDuration.DateStart) && ListBasicSalaryByProfile.Count > 1)
                    {
                        BasicSalaryByProfile = ListBasicSalaryByProfile[ListBasicSalaryByProfile.Count - 2];
                    }

                    if (BasicSalaryByProfile.HasValue())
                    {
                        double _value = 0;
                        foreach (var i in TotalDataAll.listUsualAllowance)
                        {
                            _value = 0;
                            if (BasicSalaryByProfile != null)
                            {
                                if (i.ID == BasicSalaryByProfile.AllowanceType1ID)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount1 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceType2ID)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount2 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceType3ID)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount3 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceType4ID)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount4 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID5)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount5 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID6)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount6 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID7)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount7 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID8)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount8 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID9)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount9 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID10)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount10 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID11)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount11 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID12)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount12 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID13)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount13 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID14)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount14 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID15)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount15 ?? 0;
                                }
                            }
                            item = new ElementFormula(CatElementType.Allowances.ToString().ToUpper() + "_" + i.Code + "_BASICSALARY_BEFORER", _value, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var i in TotalDataAll.listUsualAllowance)
                        {
                            item = new ElementFormula(CatElementType.Allowances.ToString().ToUpper() + "_" + i.Code + "_BASICSALARY_BEFORER", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var i in TotalDataAll.listUsualAllowance)
                    {
                        item = new ElementFormula(CatElementType.Allowances.ToString().ToUpper() + "_" + i.Code + "_BASICSALARY_BEFORER", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region [4/1/2017][HienNguyen][0077541] Phụ cấp theo lương cơ bản trước khi thay đổi lương (tính từ đầu tháng tới cuối tháng)
            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.Allowances.ToString().ToUpper(), "_BASICSALARY_BEFORER_IN_MONTHYEAR"))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                DateTime dateStart = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                DateTime dateEnd = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1).AddMonths(1).AddDays(-1);
                //Biến kiểm tra có thay đổi lương trong tháng hay ko
                bool IsChangeBasicSalary = CheckIsChangeBasicSalary(listBasicSalaryByProfileDic, dateStart, dateEnd, profileItem.ID);

                //Có thay đổ lương
                if (IsChangeBasicSalary)
                {
                    //dòng đầu tiên theo kì lương trong lương cơ bản
                    Sal_BasicSalaryEntity BasicSalaryByProfile = null;

                    var ListBasicSalaryByProfile = listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= dateEnd).OrderBy(m => m.DateOfEffect).ToList();

                    if (ListBasicSalaryByProfile.Any(m => m.DateOfEffect <= dateEnd && m.DateOfEffect > dateStart) && ListBasicSalaryByProfile.Count > 1)
                    {
                        BasicSalaryByProfile = ListBasicSalaryByProfile[ListBasicSalaryByProfile.Count - 2];
                    }

                    if (BasicSalaryByProfile.HasValue())
                    {
                        double _value = 0;
                        foreach (var i in TotalDataAll.listUsualAllowance)
                        {
                            _value = 0;
                            if (BasicSalaryByProfile != null)
                            {
                                if (i.ID == BasicSalaryByProfile.AllowanceType1ID)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount1 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceType2ID)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount2 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceType3ID)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount3 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceType4ID)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount4 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID5)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount5 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID6)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount6 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID7)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount7 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID8)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount8 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID9)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount9 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID10)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount10 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID11)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount11 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID12)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount12 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID13)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount13 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID14)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount14 ?? 0;
                                }
                                if (i.ID == BasicSalaryByProfile.AllowanceTypeID15)
                                {
                                    _value += BasicSalaryByProfile.AllowanceAmount15 ?? 0;
                                }
                            }
                            item = new ElementFormula(CatElementType.Allowances.ToString().ToUpper() + "_" + i.Code + "_BASICSALARY_BEFORER_IN_MONTHYEAR", _value, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var i in TotalDataAll.listUsualAllowance)
                        {
                            item = new ElementFormula(CatElementType.Allowances.ToString().ToUpper() + "_" + i.Code + "_BASICSALARY_BEFORER_IN_MONTHYEAR", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var i in TotalDataAll.listUsualAllowance)
                    {
                        item = new ElementFormula(CatElementType.Allowances.ToString().ToUpper() + "_" + i.Code + "_BASICSALARY_BEFORER_IN_MONTHYEAR", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [26/10/2015][hien.nguyen][New][58659]
            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.Insurance.ToString().ToUpper() + "_", "_DAY"))
            {
                List<string> ListInsuranceRecordType = Enum.GetNames(typeof(InsuranceRecordType)).ToList();

                string status = string.Empty;
                dataComputeSer.GetDicInsuranceRecord(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + CatElementType.Insurance.ToString() + ") ";

                    foreach (string i in ListInsuranceRecordType)
                    {
                        item = new ElementFormula(CatElementType.Insurance.ToString().ToUpper() + "_" + i + "_DAY", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    var listInsuranceRecordByProfileDic = TotalData600.dicInsuranceRecord.GetValueOrNew(profileItem.ID);
                    var listInsuranceRecordByProfile = listInsuranceRecordByProfileDic.OrderByDescending(m => m.RecordDate).ToList();
                    //Convert Enum to List String

                    foreach (string i in ListInsuranceRecordType)
                    {
                        Ins_InsuranceRecordEntity InsuranceRecordByItem = listInsuranceRecordByProfile.FirstOrDefault(m => m.InsuranceType == i);
                        if (InsuranceRecordByItem.HasValue())
                        {
                            item = new ElementFormula(CatElementType.Insurance.ToString().ToUpper() + "_" + i + "_DAY", InsuranceRecordByItem.DayCount, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region [15/06/2016][HienNguyen][68924][Modify] Edit lại logic phần tử Day_1 và Day_2
            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_", new string[] { "_AMOUNT_1", "_AMOUNT_2", "_DAY_1", "_DAY_2" }))
            {

                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + ") ";

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_DAY_1", 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_AMOUNT_1", 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_DAY_2", 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_AMOUNT_2", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {

                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);
                    var ListUnusualAllowances = listUnusualAllowanceProfile.Where(m => m.MonthStart <= CutOffDuration.DateEnd && (m.MonthEnd >= CutOffDuration.DateStart || m.MonthEnd == null) && m.IsFollowDay == true).ToList();

                    //[10/06/2016][HienNguyen][68738]
                    //Nếu ngày kết thúc null thì cập nhật ngày kết thúc = ngày cuối kỳ lương
                    foreach (var unusual in ListUnusualAllowances)
                    {
                        if (unusual.MonthEnd == null)
                        {
                            unusual.MonthEnd = CutOffDuration.DateEnd;
                        }
                    }

                    foreach (var i in TotalDataAll.listUnusualAllowanceCfg)
                    {
                        var ListUnusualAllowancesByCfg = ListUnusualAllowances.Where(m => m.UnusualEDTypeID == i.ID).ToList();
                        if (ListUnusualAllowancesByCfg.Count > 0)
                        {
                            //trường hợp hưởng phụ cấp lần đầu tiên
                            var UnusualAllowancesByCfgFirst = ListUnusualAllowancesByCfg.OrderBy(m => m.MonthEnd).FirstOrDefault(m => m.MonthEnd < CutOffDuration.DateEnd);
                            if (UnusualAllowancesByCfgFirst != null)
                            {
                                //update lại ngày bắt đầu nếu ngày bắt đầu nhỏ hơn ngày bắt đầu của kỳ lương
                                if (UnusualAllowancesByCfgFirst.MonthStart < CutOffDuration.DateStart)
                                {
                                    UnusualAllowancesByCfgFirst.MonthStart = CutOffDuration.DateStart;
                                }
                                if (UnusualAllowancesByCfgFirst.MonthEnd > CutOffDuration.DateEnd)
                                {
                                    UnusualAllowancesByCfgFirst.MonthEnd = CutOffDuration.DateEnd;
                                }

                                //[15/06/2016][HienNguyen][68924][Modify] Edit lại logic phần tử Day_1 và Day_2
                                double CountDay = 0;
                                //Chỉ lấy những dòng từ đầu kỳ tới ngày thay đổi phụ cấp
                                var listAttendancetableitemByProfile = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.WorkDate <= UnusualAllowancesByCfgFirst.MonthEnd).ToList();
                                foreach (var attendanceItem in listAttendancetableitemByProfile)
                                {
                                    if (attendanceItem.Shift2ID != null)
                                    {
                                        double _tmp = (attendanceItem.PaidLeaveHours + attendanceItem.WorkPaidHours) / ((attendanceItem.StdWorkHours ?? 0) + (attendanceItem.StdWorkHours2 ?? 0));
                                        if (double.IsNaN(_tmp))
                                        {
                                            _tmp = 0;
                                        }
                                        CountDay += (_tmp);
                                    }
                                    else
                                    {
                                        double _tmp = (attendanceItem.PaidLeaveHours + attendanceItem.WorkPaidHours) / ((attendanceItem.StdWorkHours ?? 0));
                                        if (double.IsNaN(_tmp))
                                        {
                                            _tmp = 0;
                                        }
                                        CountDay += (_tmp);
                                    }
                                }

                                item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_DAY_1", CountDay, 0);
                                listElementFormula.Add(item);
                                item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_AMOUNT_1", UnusualAllowancesByCfgFirst.Amount != null ? UnusualAllowancesByCfgFirst.Amount : 0, 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_DAY_1", 0, 0);
                                listElementFormula.Add(item);
                                item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_AMOUNT_1", 0, 0);
                                listElementFormula.Add(item);
                            }

                            //trường hợp hưởng phụ cấp lần 2
                            var UnusualAllowancesByCfgLast = ListUnusualAllowancesByCfg.OrderByDescending(m => m.MonthStart).FirstOrDefault(m => m.MonthStart <= CutOffDuration.DateEnd);
                            if (UnusualAllowancesByCfgLast != null)
                            {
                                //update lại ngày bắt đầu nếu ngày bắt đầu nhỏ hơn ngày bắt đầu của kỳ lương
                                if (UnusualAllowancesByCfgLast.MonthStart < CutOffDuration.DateStart)
                                { UnusualAllowancesByCfgLast.MonthStart = CutOffDuration.DateStart; }
                                if (UnusualAllowancesByCfgLast.MonthEnd > CutOffDuration.DateEnd)
                                { UnusualAllowancesByCfgLast.MonthEnd = CutOffDuration.DateEnd; }

                                //[15/06/2016][HienNguyen][68924][Modify] Edit lại logic phần tử Day_1 và Day_2
                                double CountDay = 0;
                                //Chỉ lấy những dòng từ đầu kỳ tới ngày thay đổi phụ cấp
                                var listAttendancetableitemByProfile = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.WorkDate >= UnusualAllowancesByCfgLast.MonthStart).ToList();
                                foreach (var attendanceItem in listAttendancetableitemByProfile)
                                {
                                    if (attendanceItem.Shift2ID != null)
                                    {
                                        double _tmp = (attendanceItem.PaidLeaveHours + attendanceItem.WorkPaidHours) / ((attendanceItem.StdWorkHours ?? 0) + (attendanceItem.StdWorkHours2 ?? 0));
                                        if (double.IsNaN(_tmp))
                                        {
                                            _tmp = 0;
                                        }
                                        CountDay += (_tmp);
                                    }
                                    else
                                    {
                                        double _tmp = (attendanceItem.PaidLeaveHours + attendanceItem.WorkPaidHours) / ((attendanceItem.StdWorkHours ?? 0));
                                        if (double.IsNaN(_tmp))
                                        {
                                            _tmp = 0;
                                        }
                                        CountDay += (_tmp);
                                    }
                                }

                                item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_DAY_2", CountDay, 0);
                                listElementFormula.Add(item);
                                item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_AMOUNT_2", UnusualAllowancesByCfgLast.Amount != null ? UnusualAllowancesByCfgLast.Amount : 0, 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_DAY_2", 0, 0);
                                listElementFormula.Add(item);
                                item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_AMOUNT_2", 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_DAY_1", 0, 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_AMOUNT_1", 0, 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_DAY_2", 0, 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula(CatElementType.AllowancesOut.ToString().ToUpper() + "_TIMELINE_" + i.Code + "_AMOUNT_2", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region phần tử tiền lương kinh doanh
            //[18/12/2017][bang.nguyen][91126][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_BUSINESS_TYPERATIO_BONUS_RATE.ToString(),
            PayrollElement.SAL_BUSINESS_TYPERATIO_BONUS_OVER.ToString(), PayrollElement.SAL_BUSINESS_TYPERATIO_BONUS_QUARTER.ToString(),
            PayrollElement.SAL_BUSINESS_TYPERATIO_PIT.ToString(),PayrollElement.SAL_BUSINESS_TYPERATIO_USUALALLOWANCE.ToString()}))
            {
                string status = string.Empty;
                dataComputeSer.GetDicSalaryBusiness(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_BUSINESS_TYPERATIO_BONUS_RATE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_BUSINESS_TYPERATIO_BONUS_RATE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BUSINESS_TYPERATIO_BONUS_OVER.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BUSINESS_TYPERATIO_BONUS_QUARTER.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BUSINESS_TYPERATIO_PIT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BUSINESS_TYPERATIO_USUALALLOWANCE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listSalaryBusinessByProfileDic = TotalData600.dicSalaryBusiness.GetValueOrNew(profileItem.ID);
                    var listSalaryBusiness = listSalaryBusinessByProfileDic
                    .Where(s => s.ProfileID == profileItem.ID && s.CutOffDurationID == CutOffDuration.ID && s.Type == Sal_ProductiveBusinessType.E_Month.ToString() && s.Amount != null).ToList();

                    double amountBONUS_RATE = 0;
                    double amountBONUS_OVER = 0;
                    double amountBONUS_QUARTER = 0;
                    double amountPIT = 0;
                    double amountUSUALALLOWANCE = 0;

                    if (listSalaryBusiness.Count > 0)
                    {
                        //Sal_RatioBusinessType
                        amountBONUS_RATE = listSalaryBusiness.Where(s => s.TypeRatio == Sal_RatioBusinessType.E_BonusRate.ToString()).Sum(s => s.Amount.Value);
                        amountBONUS_OVER = listSalaryBusiness.Where(s => s.TypeRatio == Sal_RatioBusinessType.E_BonusOver.ToString()).Sum(s => s.Amount.Value);
                        amountBONUS_QUARTER = listSalaryBusiness.Where(s => s.TypeRatio == Sal_RatioBusinessType.E_BonusQuarter.ToString()).Sum(s => s.Amount.Value);
                        amountPIT = listSalaryBusiness.Where(s => s.TypeRatio == Sal_RatioBusinessType.E_PIT.ToString()).Sum(s => s.Amount.Value);
                        amountUSUALALLOWANCE = listSalaryBusiness.Where(s => s.TypeRatio == Sal_RatioBusinessType.E_UsualAllowance.ToString()).Sum(s => s.Amount.Value);
                    }

                    item = new ElementFormula(PayrollElement.SAL_BUSINESS_TYPERATIO_BONUS_RATE.ToString(), amountBONUS_RATE, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BUSINESS_TYPERATIO_BONUS_OVER.ToString(), amountBONUS_OVER, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BUSINESS_TYPERATIO_BONUS_QUARTER.ToString(), amountBONUS_QUARTER, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BUSINESS_TYPERATIO_PIT.ToString(), amountPIT, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BUSINESS_TYPERATIO_USUALALLOWANCE.ToString(), amountUSUALALLOWANCE, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region phan tu theo danh muc bang luong lay theo lich su
            //[14/11/2017][bang.nguyen][89732][	Modify Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_PAYROLLCATEGORY_SERVICECOST.ToString(), PayrollElement.SAL_PAYROLLCATEGORY_SERVICECOSTUNIT.ToString(),
        PayrollElement.SAL_PAYROLLCATEGORY_TRANSFERCOST.ToString(),PayrollElement.SAL_PAYROLLCATEGORY_TRANSFERCOSTUNIT.ToString(),PayrollElement.SAL_PAYROLLCATEGORY_UNIONCOST.ToString(),
        PayrollElement.SAL_PAYROLLCATEGORY_UNIONCOSTUNIT.ToString(),PayrollElement.SAL_PAYROLLCATEGORY_ACCIDENTINSURANCECOST.ToString(),PayrollElement.SAL_PAYROLLCATEGORY_ACCIDENTINSURANCECOSTUNIT.ToString()}))
            {
                double serviceCost = 0;
                double transferCost = 0;
                double unionCost = 0;
                double accidentInsuranceCost = 0;

                string serviceCostUnitName = string.Empty;
                string transferCostUnitName = string.Empty;
                string unionCostUnitName = string.Empty;
                string accidentInsuranceCostUnitName = string.Empty;


                var objWorkHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                if (objWorkHistoryByProfile != null && objWorkHistoryByProfile.PayrollCategoryID != null)
                {
                    var objPayrollCategory = TotalDataAll.ListPayrollCategory.Where(s => s.ID == objWorkHistoryByProfile.PayrollCategoryID).FirstOrDefault();
                    if (objPayrollCategory != null)
                    {
                        if (objPayrollCategory.ServiceCost != null)
                        {
                            serviceCost = objPayrollCategory.ServiceCost.Value;
                        }
                        if (!string.IsNullOrEmpty(objPayrollCategory.ServiceCostUnitName))
                        {
                            serviceCostUnitName = objPayrollCategory.ServiceCostUnitName;
                        }
                        if (objPayrollCategory.TransferCost != null)
                        {
                            transferCost = objPayrollCategory.TransferCost.Value;
                        }
                        if (!string.IsNullOrEmpty(objPayrollCategory.TransferCostUnitName))
                        {
                            transferCostUnitName = objPayrollCategory.TransferCostUnitName;
                        }
                        if (objPayrollCategory.UnionCost != null)
                        {
                            unionCost = objPayrollCategory.UnionCost.Value;
                        }
                        if (!string.IsNullOrEmpty(objPayrollCategory.UnionCostUnitName))
                        {
                            unionCostUnitName = objPayrollCategory.UnionCostUnitName;
                        }
                        if (objPayrollCategory.AccidentInsuranceCost != null)
                        {
                            accidentInsuranceCost = objPayrollCategory.AccidentInsuranceCost.Value;
                        }
                        if (!string.IsNullOrEmpty(objPayrollCategory.AccidentInsuranceCostUnitName))
                        {
                            accidentInsuranceCostUnitName = objPayrollCategory.AccidentInsuranceCostUnitName;
                        }
                    }
                }

                item = new ElementFormula(PayrollElement.SAL_PAYROLLCATEGORY_SERVICECOST.ToString(), serviceCost, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_PAYROLLCATEGORY_SERVICECOSTUNIT.ToString(), serviceCostUnitName, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_PAYROLLCATEGORY_TRANSFERCOST.ToString(), transferCost, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_PAYROLLCATEGORY_TRANSFERCOSTUNIT.ToString(), transferCostUnitName, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_PAYROLLCATEGORY_UNIONCOST.ToString(), unionCost, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_PAYROLLCATEGORY_UNIONCOSTUNIT.ToString(), unionCostUnitName, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_PAYROLLCATEGORY_ACCIDENTINSURANCECOST.ToString(), accidentInsuranceCost, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_PAYROLLCATEGORY_ACCIDENTINSURANCECOSTUNIT.ToString(), accidentInsuranceCostUnitName, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region Cong chuan theo bảng lương
            //[29/09/2017][bang.nguyen][87981][New Func]
            //chi duoc cau hinh 3 enum [D][S][SAT]

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_PAYROLLCATEGORY_STDDAYFORMULA.ToString()))
            {
                double totalStdDay = 0;
                var objWorkHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                if (objWorkHistoryByProfile != null && !string.IsNullOrEmpty(objWorkHistoryByProfile.StdDayFormula))
                {
                    var stdDayFormula = objWorkHistoryByProfile.StdDayFormula;

                    DateTime dateFrom = CutOffDuration.DateStart.Date;
                    DateTime dateTo = CutOffDuration.DateEnd.Date.AddDays(1).AddSeconds(-1);

                    Formula tempFormula = new Formula(stdDayFormula);

                    if (stdDayFormula.Contains("[" + Formula.FormulaConstant.D.ToString() + "]"))
                    {
                        tempFormula.Parameters.Add(Formula.FormulaConstant.D.ToString(), dateTo.Subtract(dateFrom).Days + 1);
                    }

                    if (stdDayFormula.Contains("[" + Formula.FormulaConstant.S.ToString() + "]"))
                    {
                        int sundayCount = 0;

                        for (DateTime date = dateFrom; date <= dateTo; date = date.AddDays(1))
                        {
                            if (date.DayOfWeek == DayOfWeek.Sunday)
                            {
                                sundayCount++;
                            }
                        }
                        tempFormula.Parameters.Add(Formula.FormulaConstant.S.ToString(), sundayCount);
                    }

                    if (stdDayFormula.Contains("[" + Formula.FormulaConstant.SAT.ToString() + "]"))
                    {
                        int satdayCount = 0;

                        for (DateTime date = dateFrom; date <= dateTo; date = date.AddDays(1))
                        {
                            if (date.DayOfWeek == DayOfWeek.Saturday)
                            {
                                satdayCount++;
                            }
                        }
                        tempFormula.Parameters.Add(Formula.FormulaConstant.SAT.ToString(), satdayCount);
                    }

                    totalStdDay = Convert.ToDouble(tempFormula.Evaluate());
                }

                item = new ElementFormula(PayrollElement.SAL_PAYROLLCATEGORY_STDDAYFORMULA.ToString(), totalStdDay, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region Phương thức thanh toán
            //[15/08/2017][bang.nguyen][86811]
            //neu thanh toan tien mat thi co gia tri la 0, không phải thanh toán tiền mặt giá trị là 1
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
            PayrollElement.SAL_SALARYINFORMATION_ISCASH_BYUNUSUALPAY.ToString(),
            PayrollElement.SAL_SALARYINFORMATION_ISCASH.ToString(),
            PayrollElement.SAL_SALARYINFORMATION_BRANCHNAME1.ToString(),
            PayrollElement.SAL_SALARYINFORMATION_BRANCHNAME2.ToString(),
            PayrollElement.SAL_SALARYINFORMATION_BRANCHNAME3.ToString(),
            PayrollElement.SAL_SALARYINFORMATION_ADDRESS.ToString(),
            PayrollElement.SAL_SALARYINFORMATION_SWIFTCODE.ToString(),
            PayrollElement.SAL_SALARYINFORMATION_SORTCODE.ToString()
            }))
            {
                int IsCash = 0;
                string IsCashUsualpay = "HRM_DynLang_Salary_Cash"; //Tiền mặt (Tung.Tran 28/02/2022: 139290)
                string strsalaryInformationBranh1 = string.Empty;
                string strsalaryInformationBranh2 = string.Empty;
                string strsalaryInformationBranh3 = string.Empty;

                string strSalaryInformationAddress = string.Empty;
                string strSalaryInformationSwiftCode = string.Empty;
                string strSalaryInformationSortCode = string.Empty;
                //Lấy thông tin lương
                var SalaryInformationByProfile = TotalDataAll.dicSalaryInformation.GetValueOrNew(profileItem.ID).FirstOrDefault();
                //SalaryInformationByProfile.IsCash = true => thanh toan tien mat
                //neu khong phải là thanh toan tien mat
                if (SalaryInformationByProfile != null)
                {
                    if (SalaryInformationByProfile.IsCash != true)
                    {
                        IsCash = 1;
                        IsCashUsualpay = "HRM_DynLang_Salary_Transfer"; //Chuyển khoản (Tung.Tran 28/02/2022: 139290)
                    }
                    if (!string.IsNullOrEmpty(SalaryInformationByProfile.BankBrandName))
                    {
                        strsalaryInformationBranh1 = SalaryInformationByProfile.BankBrandName;
                    }
                    if (!string.IsNullOrEmpty(SalaryInformationByProfile.BankBrandName2))
                    {
                        strsalaryInformationBranh2 = SalaryInformationByProfile.BankBrandName2;
                    }
                    if (!string.IsNullOrEmpty(SalaryInformationByProfile.BankBrandName3))
                    {
                        strsalaryInformationBranh3 = SalaryInformationByProfile.BankBrandName3;
                    }
                    if (!string.IsNullOrEmpty(SalaryInformationByProfile.Address))
                    {
                        strSalaryInformationAddress = SalaryInformationByProfile.Address;
                    }
                    if (!string.IsNullOrEmpty(SalaryInformationByProfile.SwiftCode))
                    {
                        strSalaryInformationSwiftCode = SalaryInformationByProfile.SwiftCode;
                    }
                    if (!string.IsNullOrEmpty(SalaryInformationByProfile.SortCode))
                    {
                        strSalaryInformationSortCode = SalaryInformationByProfile.SortCode;
                    }

                }
                //IsCash = SalaryInformationByProfile != null ? SalaryInformationByProfile.IsCash : true,

                item = new ElementFormula(PayrollElement.SAL_SALARYINFORMATION_ISCASH.ToString(), IsCash, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_SALARYINFORMATION_BRANCHNAME1.ToString(), strsalaryInformationBranh1, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_SALARYINFORMATION_BRANCHNAME2.ToString(), strsalaryInformationBranh2, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_SALARYINFORMATION_BRANCHNAME3.ToString(), strsalaryInformationBranh3, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.SAL_SALARYINFORMATION_ADDRESS.ToString(), strSalaryInformationAddress, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_SALARYINFORMATION_SWIFTCODE.ToString(), strSalaryInformationSwiftCode, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_SALARYINFORMATION_SORTCODE.ToString(), strSalaryInformationSortCode, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_SALARYINFORMATION_ISCASH_BYUNUSUALPAY.ToString(), IsCashUsualpay, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Ghi chú giữ lương
            //[26/04/2017][bang.nguyen][81391]
            //ghi chu giu luong
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_HOLDSALARY_NOTES.ToString()))
            {


                var listHoldSalaryByProfile = TotalDataAll.dicHoldSalary.GetValueOrNew(profileItem.ID);
                var _monthYear = CutOffDuration.MonthYear;
                string _Notes = string.Empty;
                var objHoldSalary = listHoldSalaryByProfile.Where(s => s.ProfileID == profileItem.ID
                                                                            && s.MonthSalary <= _monthYear
                                                                            && (s.MonthEndSalary == null || s.MonthEndSalary.Value > _monthYear)).FirstOrDefault();
                if (objHoldSalary != null && objHoldSalary.Notes != null)
                {
                    _Notes = objHoldSalary.Notes;
                }
                item = new ElementFormula(PayrollElement.SAL_HOLDSALARY_NOTES.ToString(), _Notes, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [26/07/2016][HienNguyen][71174][New] Tổng lương Incentive của nhân viên trong tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE.ToString(),
                PayrollElement.SAL_PAYROLLINCENTIVE_EFFPB.ToString(),
            }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicPayrollIncentive(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    //[Nghia.Dang] [28/12/2020] 122232 : Modifi thêm phần tử tính lương gián tiếp
                    item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_EFFPB.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listPayrollIncentiveByProfileDic = TotalData600.dicPayrollIncentive.GetValueOrNew(profileItem.ID);
                    var listPayrollIncentiveByProfile = listPayrollIncentiveByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DaySalary <= CutOffDuration.DateEnd && m.DaySalary >= CutOffDuration.DateStart).ToList();
                    item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE.ToString(), listPayrollIncentiveByProfile.Sum(m => m.AmountIncentive ?? 0), 0);
                    listElementFormula.Add(item);
                    //[Nghia.Dang] [28/12/2020] 122232 : Modifi thêm phần tử tính lương gián tiếp
                    item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_EFFPB.ToString(), listPayrollIncentiveByProfile.Sum(m => m.EFFPb ?? 0), 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [05/09/2016][HienNguyen][72981] Tổng SL của chuyền trưởng
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND.ToString(),
                PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND_CLOSEPO.ToString(),
                PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND_N_1.ToString(),
                PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND_CLOSEPO_N_1.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetDicSalDeptDepend(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND_CLOSEPO.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND_CLOSEPO_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listSalDeptDependByProfileDic = TotalData600.dicSalDeptDepend.GetValueOrNew(profileItem.ID);
                    var deptDependByProfileID = listSalDeptDependByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.MonthEffect <= CutOffDuration.DateEnd).Select(m => m.OrgStructureID).ToList();
                    var deptDependByProfileID_Prev = listSalDeptDependByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.MonthEffect <= CutOffDuration.DateEnd.AddMonths(-1)).Select(m => m.OrgStructureID).ToList();

                    #region Tháng N
                    if (deptDependByProfileID.HasValue())
                    {
                        double? totalQuantity = TotalDataAll.ListProductive.Where(m => deptDependByProfileID.Contains(m.OrgStructureID) && m.EndDate <= CutOffDuration.DateEnd && m.EndDate >= CutOffDuration.DateStart).Sum(m => m.Quantity);
                        double? totalQuantityClosePO = TotalDataAll.ListProductive.Where(m => deptDependByProfileID.Contains(m.OrgStructureID) && m.EndDate <= CutOffDuration.DateEnd && m.EndDate >= CutOffDuration.DateStart && m.IsClose == true).Sum(m => m.Quantity);

                        item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND.ToString(), totalQuantity ?? 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND_CLOSEPO.ToString(), totalQuantityClosePO ?? 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND_CLOSEPO.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    #endregion

                    #region Tháng N-1
                    if (deptDependByProfileID_Prev.HasValue())
                    {
                        double? totalQuantity = TotalDataAll.ListProductive.Where(m => deptDependByProfileID_Prev.Contains(m.OrgStructureID) && m.EndDate <= CutOffDuration.DateEnd.AddMonths(-1) && m.EndDate >= CutOffDuration.DateStart.AddMonths(-1)).Sum(m => m.Quantity);
                        double? totalQuantityClosePO = TotalDataAll.ListProductive.Where(m => deptDependByProfileID_Prev.Contains(m.OrgStructureID) && m.EndDate <= CutOffDuration.DateEnd.AddMonths(-1) && m.EndDate >= CutOffDuration.DateStart.AddMonths(-1) && m.IsClose == true).Sum(m => m.Quantity);

                        item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND_N_1.ToString(), totalQuantity ?? 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND_CLOSEPO_N_1.ToString(), totalQuantityClosePO ?? 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND_N_1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_TOTAL_DEPTDEPEND_CLOSEPO_N_1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    #endregion
                }
            }
            #endregion

            #region [24/08/2016][HienNguyen][72412][New] Tổng lương Incentive của nhân viên trong tháng N-1
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE_N_1.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicPayrollIncentive(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE_N_1.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listPayrollIncentiveByProfileDic = TotalData600.dicPayrollIncentive.GetValueOrNew(profileItem.ID);

                    DateTime dateEndPrev = CutOffDuration.DateEnd.AddMonths(-1);
                    DateTime dateStartPrev = CutOffDuration.DateStart.AddMonths(-1);

                    var listPayrollIncentiveByProfile = listPayrollIncentiveByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DaySalary <= dateEndPrev && m.DaySalary >= dateStartPrev).ToList();

                    item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE_N_1.ToString(), listPayrollIncentiveByProfile.Sum(m => m.AmountIncentive ?? 0), 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [22/07/2016][bang.nguyen][70985][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_WORKRATE_WORKRATE.ToString(), PayrollElement.SAL_WORKRATE_WORKRATEPLUS.ToString(), PayrollElement.SAL_WORKRATE_WORKRATEMINUS.ToString(), PayrollElement.SAL_WORKRATE_WORKRATEEXCESSIVE.ToString(), PayrollElement.SAL_WORKRATE_DEPARTMENTRATE.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetDicWorkRate(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_WORKRATE_WORKRATE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_WORKRATE_WORKRATE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_WORKRATE_WORKRATEPLUS.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_WORKRATE_WORKRATEMINUS.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_WORKRATE_WORKRATEEXCESSIVE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_WORKRATE_DEPARTMENTRATE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listWorkRateByProfileDic = TotalData600.dicWorkRate.GetValueOrNew(profileItem.ID);
                    var objWorkRate = listWorkRateByProfileDic.Where(s => s.ProfileID == profileItem.ID && s.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();
                    double _WorkRate = 0;
                    double _WorkRatePlus = 0;
                    double _WorkRateMinus = 0;
                    double _WorkRateExcessive = 0;
                    double _DepartmentRate = 0;
                    if (objWorkRate != null)
                    {
                        if (objWorkRate.WorkRate != null)
                        {
                            _WorkRate = objWorkRate.WorkRate.Value;
                        }
                        if (objWorkRate.WorkRatePlus != null)
                        {
                            _WorkRatePlus = objWorkRate.WorkRatePlus.Value;
                        }
                        if (objWorkRate.WorkRateMinus != null)
                        {
                            _WorkRateMinus = objWorkRate.WorkRateMinus.Value;
                        }
                        if (objWorkRate.WorkRateExcessive != null)
                        {
                            _WorkRateExcessive = objWorkRate.WorkRateExcessive.Value;
                        }
                        if (objWorkRate.DepartmentRate != null)
                        {
                            _DepartmentRate = objWorkRate.DepartmentRate.Value;
                        }
                    }

                    item = new ElementFormula(PayrollElement.SAL_WORKRATE_WORKRATE.ToString(), _WorkRate, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_WORKRATE_WORKRATEPLUS.ToString(), _WorkRatePlus, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_WORKRATE_WORKRATEMINUS.ToString(), _WorkRateMinus, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_WORKRATE_WORKRATEEXCESSIVE.ToString(), _WorkRateExcessive, 0);
                    listElementFormula.Add(item);

                    //[01/09/2017][bang.nguyen][84150][new func]
                    //he so cong viec bo phan
                    item = new ElementFormula(PayrollElement.SAL_WORKRATE_DEPARTMENTRATE.ToString(), _DepartmentRate, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [18122015][bang.nguyen][new func][61717] Bổ sung enum "Số tiền lương sản phẩm" của 1 nhân viên ra cấu hình Lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_PRODUCTSALARY_AMOUNT.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicProductSalary(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_PRODUCTSALARY_AMOUNT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_PRODUCTSALARY_AMOUNT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listProductSalaryByProfileDic = TotalData600.dicProductSalary.GetValueOrNew(profileItem.ID);
                    double? tempAmount = 0;
                    var lstProductSalary = listProductSalaryByProfileDic.Where(s => s.Amount != null && s.MonthYear != null && s.MonthYear.Value.Month == CutOffDuration.MonthYear.Month && s.MonthYear.Value.Year == CutOffDuration.MonthYear.Year && s.ProfileID == profileItem.ID).ToList();
                    if (lstProductSalary.Count > 0)
                    {
                        tempAmount = lstProductSalary.Sum(s => s.Amount);
                    }
                    item = new ElementFormula(PayrollElement.SAL_PRODUCTSALARY_AMOUNT.ToString(), tempAmount, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Có tham gia công đoàn
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.IS_HRE_TRADEUNION.ToString()))
            {
                bool IsTradeunion = false;
                if (profileItem.TradeUnionistEnrolledDate != null && profileItem.TradeUnionistEnrolledDate <= CutOffDuration.DateEnd && profileItem.IsTradeUnionist != null && profileItem.IsTradeUnionist == true)
                {
                    IsTradeunion = true;
                }
                item = new ElementFormula(PayrollElement.IS_HRE_TRADEUNION.ToString(), IsTradeunion == true ? 1 : 0, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region SAL_TOTAL_SALARY_PRODUCT
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_TOTAL_SALARY_PRODUCT.ToString()))
            {
                var ListProductiveByProfile = TotalDataAll.dicProductive.GetValueOrNew(profileItem.ID)
                                                .Where(m => m.StartDate <= CutOffDuration.DateEnd && m.EndDate >= CutOffDuration.DateStart)
                                                .ToList();

                double TotalAmount = 0;
                foreach (var productive in ListProductiveByProfile)
                {
                    if (productive.ProductItemID != null)
                    {
                        var productitem = TotalDataAll.ListProductItem.FirstOrDefault(m => m.ID == productive.ProductItemID);
                        if (productitem != null)
                        {
                            TotalAmount += (productive.Quantity != null ? (double)productive.Quantity : 0) * (productitem.UnitPrice != null ? (double)productitem.UnitPrice : 0);
                        }
                    }
                    else if (productive.ProductID != null)
                    {
                        var product = TotalDataAll.ListProduct.Where(m => m.EffectiveDate != null && m.EffectiveDate <= CutOffDuration.DateEnd && m.ID == productive.ProductID).OrderByDescending(m => m.EffectiveDate).FirstOrDefault();
                        if (product != null)
                        {
                            TotalAmount += (productive.Quantity != null ? productive.Quantity.Value : 0) * product.BonusPerUnit;
                        }
                    }
                }

                item = new ElementFormula(PayrollElement.SAL_TOTAL_SALARY_PRODUCT.ToString(), TotalAmount, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [19/09/2018][bang.nguyen][98614][Modify Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_TOTAL_SALARY_PRODUCT_SEDO.ToString()))
            {
                using (var context = new VnrHrmDataContext())
                {
                    var unitOfWork = new UnitOfWork(context);

                    var ListProductiveByProfile = TotalDataAll.dicProductive.GetValueOrNew(profileItem.ID)
                        .Where(m =>
                                m.Quantity != null
                                && m.Quantity != 0
                                && m.StartDate <= CutOffDuration.DateEnd
                                && m.EndDate >= CutOffDuration.DateStart)
                        .ToList();

                    double TotalAmount = 0;
                    if (ListProductiveByProfile.Count > 0)
                    {
                        var listProductItemID = ListProductiveByProfile.Select(s => s.ProductItemID).Distinct();
                        DateTime maxDateEnd = ListProductiveByProfile.Max(s => s.EndDate.Value);
                        var listProductItemPrice = unitOfWork.CreateQueryable<Cat_ProductItemPrice>(Guid.Empty, s =>
                                listProductItemID.Contains(s.ProductItemID)
                                && s.DateEffect <= maxDateEnd)
                                .Select(s => new { s.ProductItemID, s.DateEffect, s.UnitPrice })
                                .ToList();
                        listProductItemPrice = listProductItemPrice.OrderByDescending(s => s.DateEffect).ToList();
                        foreach (var productive in ListProductiveByProfile)
                        {
                            double _PriceSubsidy = 0;
                            if (productive.PriceSubsidy != null)
                            {
                                _PriceSubsidy = productive.PriceSubsidy.Value;
                            }
                            if (productive.ProductItemID != null)
                            {
                                var objProductItemPrice = listProductItemPrice.Where(m => m.ProductItemID == productive.ProductItemID && m.DateEffect <= productive.EndDate).FirstOrDefault();
                                if (objProductItemPrice != null && objProductItemPrice.UnitPrice != null)
                                {
                                    var _UnitPrice = objProductItemPrice.UnitPrice.Value;
                                    TotalAmount += productive.Quantity.Value * (_UnitPrice + (_UnitPrice * _PriceSubsidy));
                                }
                            }
                            else if (productive.ProductID != null)
                            {
                                var product = TotalDataAll.ListProduct.Where(m => m.EffectiveDate != null && m.EffectiveDate <= CutOffDuration.DateEnd && m.ID == productive.ProductID).OrderByDescending(m => m.EffectiveDate).FirstOrDefault();
                                if (product != null)
                                {
                                    var _BonusPerUnit = product.BonusPerUnit;
                                    TotalAmount += productive.Quantity.Value * (_BonusPerUnit + (_BonusPerUnit * _PriceSubsidy));
                                }
                            }
                        }
                    }


                    item = new ElementFormula(PayrollElement.SAL_TOTAL_SALARY_PRODUCT_SEDO.ToString(), TotalAmount, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [19/10/2015][hien.nguyen][New Func][58513]: Số Tiền Tạm Ứng Theo Kỳ Lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_SALARY_UNUSAULPAY_AMOUNT.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicUnusualPay(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_SALARY_UNUSAULPAY_AMOUNT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_SALARY_UNUSAULPAY_AMOUNT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var lisUnusualPayByProfileDic = TotalData600.dicUnusualPay.GetValueOrNew(profileItem.ID);
                    //[24/05/2018][bang.nguyen][95323][bug]
                    var listUnusualPayByProfile = lisUnusualPayByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.MonthYear >= CutOffDuration.DateStart && m.MonthYear <= CutOffDuration.DateEnd).ToList();
                    if (listUnusualPayByProfile.Count > 0)
                    {
                        item = new ElementFormula(PayrollElement.SAL_SALARY_UNUSAULPAY_AMOUNT.ToString(), listUnusualPayByProfile.Sum(s => s.Amount), 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_SALARY_UNUSAULPAY_AMOUNT.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [09/11/2015][hien.nguyen][Modify][59777]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_PIT_AMOUNT_DEDUCTEDPIT_N_1.ToString()))
            {

                string status = string.Empty;
                dataComputeSer.GetDicPITAmount(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_PIT_AMOUNT_DEDUCTEDPIT_N_1.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_PIT_AMOUNT_DEDUCTEDPIT_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listPITAmountByProfileDic = TotalData600.dicPITAmount.GetValueOrNew(profileItem.ID);

                    var PITAmountByProfile = listPITAmountByProfileDic.FirstOrDefault(s => s.ProfileID == profileItem.ID && s.MonthYear >= CutOffDuration.DateStart && s.MonthYear <= CutOffDuration.DateEnd);
                    if (PITAmountByProfile.HasValue())
                    {
                        item = new ElementFormula(PayrollElement.SAL_PIT_AMOUNT_DEDUCTEDPIT_N_1.ToString(), PITAmountByProfile.DeductedPIT ?? 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_PIT_AMOUNT_DEDUCTEDPIT_N_1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [31122015][bang.nguyen][new func][62323]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.TOTAL_TAXABLE_INCOME.ToString(),
                PayrollElement.TOTAL_PIT_AMOUNT.ToString(),
                PayrollElement.TOTAL_MONTH_PITAMOUNT.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetDicPITAmount(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.TOTAL_TAXABLE_INCOME.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.TOTAL_TAXABLE_INCOME.ToString(), 0, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.TOTAL_PIT_AMOUNT.ToString(), 0, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.TOTAL_MONTH_PITAMOUNT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listPITAmountByProfileDic = TotalData600.dicPITAmount.GetValueOrNew(profileItem.ID);

                    DateTime dateStartYearByCutOff = new DateTime(CutOffDuration.MonthYear.Year, 1, 1);
                    DateTime dateEndByCutOff_N_1 = CutOffDuration.DateEnd.AddMonths(-1);

                    var lstPitAmountN_1 = listPITAmountByProfileDic.Where(s => s.ProfileID == profileItem.ID && s.MonthYear >= dateStartYearByCutOff && s.MonthYear <= dateEndByCutOff_N_1).ToList();

                    //Tổng thu nhập chịu thuế
                    double totalTaxableIncome = lstPitAmountN_1.Where(s => s.TaxableIncome != null && s.TaxableIncome > 0).Sum(s => s.TaxableIncome.Value);
                    item = new ElementFormula(PayrollElement.TOTAL_TAXABLE_INCOME.ToString(), totalTaxableIncome, 0);
                    listElementFormula.Add(item);

                    //Tổng thuế thu nhập cá nhân PIT
                    double totalDeductedPIT = lstPitAmountN_1.Where(s => s.DeductedPIT != null && s.DeductedPIT > 0).Sum(s => s.DeductedPIT.Value);
                    item = new ElementFormula(PayrollElement.TOTAL_PIT_AMOUNT.ToString(), totalDeductedPIT, 0);
                    listElementFormula.Add(item);

                    //Tổng số tháng tính PIT
                    int countRowPitAmount = listPITAmountByProfileDic.Where(s => s.ProfileID == profileItem.ID && s.Year == CutOffDuration.MonthYear.Year).Count();
                    item = new ElementFormula(PayrollElement.TOTAL_MONTH_PITAMOUNT.ToString(), countRowPitAmount, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [14/11/2015][hien.nguyen][Modify][60147]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_GRADEPAYROLL_CODE.ToString()))
            {
                //Lấy các phần tử tính lương nằm trong Grade của nhân viên
                Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd);
                if (Grade.HasValue())
                {
                    item = new ElementFormula(PayrollElement.SAL_GRADEPAYROLL_CODE.ToString(), Grade.GradePayrollCode, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_GRADEPAYROLL_CODE.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [09/11/2015][hien.nguyen][New Func][59696]: Tên công thức chế độ thuế
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_PIT_FORMULA_NAME.ToString()))
            {

                string status = string.Empty;
                dataComputeSer.GetDicSal_Tax(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_PIT_FORMULA_NAME.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_PIT_FORMULA_NAME.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);

                }
                else
                {
                    var listSal_TaxByProfileDic = TotalData600.dicSal_Tax.GetValueOrNew(profileItem.ID);

                    var Sal_TaxByProfile = listSal_TaxByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateEffective.HasValue && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();

                    if (Sal_TaxByProfile.HasValue())
                    {
                        item = new ElementFormula(PayrollElement.SAL_PIT_FORMULA_NAME.ToString(), Sal_TaxByProfile.PITFormulaName, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_PIT_FORMULA_NAME.ToString(), string.Empty, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [12/05/2016][bnag.nguyen][67457][bug]: Loại thuế nhân viên
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_TAX_PITCODE.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicSal_Tax(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_TAX_PITCODE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_TAX_PITCODE.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);

                }
                else
                {
                    var listSal_TaxByProfileDic = TotalData600.dicSal_Tax.GetValueOrNew(profileItem.ID);
                    var Sal_TaxByProfile = listSal_TaxByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateEffective.HasValue && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                    string _PITCode = string.Empty;
                    if (Sal_TaxByProfile != null)
                    {
                        _PITCode = Sal_TaxByProfile.PITCode;
                    }
                    item = new ElementFormula(PayrollElement.SAL_TAX_PITCODE.ToString(), _PITCode, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region SAL_SALARY_DEPARTMENT_AMOUNT
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.SAL_SALARY_DEPARTMENT_AMOUNT.ToString(),
                PayrollElement.SAL_SALARY_DEPARTMENT_QUANTITY_CALCULATE.ToString(),
                PayrollElement.SAL_SALARY_DEPARMENT_DEPTRATE.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalaryDepartmentItem(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_SALARY_DEPARTMENT_AMOUNT.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.SAL_SALARY_DEPARTMENT_AMOUNT.ToString(), 0, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.SAL_SALARY_DEPARTMENT_QUANTITY_CALCULATE.ToString(), 0, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.SAL_SALARY_DEPARMENT_DEPTRATE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    using (var context = new VnrHrmDataContext())
                    {
                        var unitOfWork = (IUnitOfWork)new UnitOfWork(context);
                        string nameTableGetData = "ListSal_SalaryDepartment";
                        if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                        {
                            if (TotalData600.listSal_SalaryDepartmentItem != null && TotalData600.listSal_SalaryDepartmentItem.Count > 0)
                            {
                                var listSalaryDepartmentIDs = TotalData600.listSal_SalaryDepartmentItem.Select(x => x.SalaryDepartmentID).ToArray();
                                TotalData600.ListSal_SalaryDepartment = unitOfWork.CreateQueryable<Sal_SalaryDepartment>(x => listSalaryDepartmentIDs.Contains(x.ID)).ToList();
                            }
                            TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                        }

                        var listSalaryDepartmentItemByProfile = TotalData600.dicSalaryDepartmentItem.GetValueOrNew(profileItem.ID);
                        var lstSalaryDepartmentItemByPro = listSalaryDepartmentItemByProfile.Where(s => s.ProfileID == profileItem.ID
                                                                                                       && s.DateFrom <= CutOffDuration.DateEnd
                                                                                                       && (s.DateTo == null || s.DateTo >= CutOffDuration.DateStart)).ToList();
                        //66062 
                        double _Amount = 0;
                        double _QuantityCalculate = 0;
                        double _DeptRate = 0;
                        if (lstSalaryDepartmentItemByPro.Count > 0)
                        {
                            var SalaryDeparmentID = lstSalaryDepartmentItemByPro.Select(s => s.SalaryDepartmentID).FirstOrDefault();
                            if (SalaryDeparmentID != null)
                            {
                                Sal_SalaryDepartment SalaryDepartment = TotalData600.ListSal_SalaryDepartment.FirstOrDefault(m => m.ID == SalaryDeparmentID);
                                if (SalaryDepartment != null)
                                {
                                    _Amount = SalaryDepartment.Amount;
                                    if (SalaryDepartment.QuantityCalculate != null)
                                    {
                                        _QuantityCalculate = SalaryDepartment.QuantityCalculate.Value;
                                    }
                                    _DeptRate = (SalaryDepartment.DeptRate ?? 0);
                                }
                            }
                        }
                        item = new ElementFormula(PayrollElement.SAL_SALARY_DEPARTMENT_AMOUNT.ToString(), _Amount, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_SALARY_DEPARTMENT_QUANTITY_CALCULATE.ToString(), _QuantityCalculate, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_SALARY_DEPARMENT_DEPTRATE.ToString(), _DeptRate, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Người phụ thuộc
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_DEPENDENT.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetListDependant(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_DEPENDENT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_DEPENDENT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listDependantByProfile = TotalData600.dicDependant.GetValueOrNew(profileItem.ID);
                    item = new ElementFormula(PayrollElement.SAL_DEPENDENT.ToString(), GetDependantNumber(listDependantByProfile, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd).Count, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Mức lương HDT
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.SAL_SALARY_HDT.ToString(),
                PayrollElement.SAL_SALARY_HDT_N_1.ToString(),
                PayrollElement.SAL_SALARY_HDT_N_2.ToString(),
                PayrollElement.SAL_SALARY_HDT_N_3.ToString(),
                PayrollElement.SAL_SALARY_HDT_N_4.ToString(),
                PayrollElement.SAL_SALARY_HDT_N_5.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetListnsurance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_SALARY_HDT.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.SAL_SALARY_HDT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_3.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_4.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_5.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listInsuranceByProfile = TotalData600.dicInsurance.GetValueOrNew(profileItem.ID);

                    //[03/02/2016][hien.nguyen][Modify][63280]
                    var Insurence = listInsuranceByProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthYear != null && m.MonthYear.Value.Year == CutOffDuration.MonthYear.Year && m.MonthYear.Value.Month == CutOffDuration.MonthYear.Month && (m.IsPayback == null || m.IsPayback == false)).FirstOrDefault();
                    item = new ElementFormula(PayrollElement.SAL_SALARY_HDT.ToString(), Insurence != null && Insurence.AmountHDTIns != null ? Insurence.AmountHDTIns : 0, 0);
                    listElementFormula.Add(item);

                    //tháng N-1
                    Att_CutOffDurationEntity CutoffDuration_N_1 = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutOffDuration.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                    if (CutoffDuration_N_1 != null)
                    {
                        DateTime MonthYearPrev = CutoffDuration_N_1.MonthYear;
                        Insurence = listInsuranceByProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthYear != null && m.MonthYear.Value.Year == MonthYearPrev.Year && m.MonthYear.Value.Month == MonthYearPrev.Month && (m.IsPayback == null || m.IsPayback == false)).FirstOrDefault();
                        item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_1.ToString(), Insurence != null && Insurence.AmountHDTIns != null ? Insurence.AmountHDTIns : 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }

                    //tháng N-2
                    Att_CutOffDurationEntity CutoffDuration_N_2 = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutoffDuration_N_1.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                    if (CutoffDuration_N_1 != null)
                    {
                        DateTime MonthYearPrev = CutoffDuration_N_2.MonthYear;
                        Insurence = listInsuranceByProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthYear != null && m.MonthYear.Value.Year == MonthYearPrev.Year && m.MonthYear.Value.Month == MonthYearPrev.Month && (m.IsPayback == null || m.IsPayback == false)).FirstOrDefault();
                        item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_2.ToString(), Insurence != null && Insurence.AmountHDTIns != null ? Insurence.AmountHDTIns : 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_2.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }

                    //tháng N-3
                    Att_CutOffDurationEntity CutoffDuration_N_3 = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutoffDuration_N_2.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                    if (CutoffDuration_N_1 != null)
                    {
                        DateTime MonthYearPrev = CutoffDuration_N_3.MonthYear;
                        Insurence = listInsuranceByProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthYear != null && m.MonthYear.Value.Year == MonthYearPrev.Year && m.MonthYear.Value.Month == MonthYearPrev.Month && (m.IsPayback == null || m.IsPayback == false)).FirstOrDefault();
                        item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_3.ToString(), Insurence != null && Insurence.AmountHDTIns != null ? Insurence.AmountHDTIns : 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_3.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }

                    //tháng N-4
                    Att_CutOffDurationEntity CutoffDuration_N_4 = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutoffDuration_N_3.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                    if (CutoffDuration_N_1 != null)
                    {
                        DateTime MonthYearPrev = CutoffDuration_N_4.MonthYear;
                        Insurence = listInsuranceByProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthYear != null && m.MonthYear.Value.Year == MonthYearPrev.Year && m.MonthYear.Value.Month == MonthYearPrev.Month && (m.IsPayback == null || m.IsPayback == false)).FirstOrDefault();
                        item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_4.ToString(), Insurence != null && Insurence.AmountHDTIns != null ? Insurence.AmountHDTIns : 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_4.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }

                    //tháng N-5
                    Att_CutOffDurationEntity CutoffDuration_N_5 = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutoffDuration_N_4.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                    if (CutoffDuration_N_1 != null)
                    {
                        DateTime MonthYearPrev = CutoffDuration_N_5.MonthYear;
                        Insurence = listInsuranceByProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthYear != null && m.MonthYear.Value.Year == MonthYearPrev.Year && m.MonthYear.Value.Month == MonthYearPrev.Month && (m.IsPayback == null || m.IsPayback == false)).FirstOrDefault();
                        item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_5.ToString(), Insurence != null && Insurence.AmountHDTIns != null ? Insurence.AmountHDTIns : 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_SALARY_HDT_N_5.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Luong co ban thang 3
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_BASIC_SALARY_T3.ToString()))
            {
                var BasicSalaryT3ByProfile = TotalDataAll.dicBasicSalaryT3.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_T3.ToString(), BasicSalaryT3ByProfile != null ? BasicSalaryT3ByProfile.GrossAmount.ToDouble() : 0, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Bậc lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_SALARY_RANK_NAME.ToString(), PayrollElement.SAL_SALARY_RANK_NAME_DATECLOSE.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                Sal_BasicSalaryEntity BasicSalarybyProfile = new Sal_BasicSalaryEntity();
                BasicSalarybyProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                item = new ElementFormula(PayrollElement.SAL_SALARY_RANK_NAME.ToString(), BasicSalarybyProfile != null ? BasicSalarybyProfile.SalaryRankName : "", 0);
                listElementFormula.Add(item);

                //[25112015][bang.nguyen][60779][new func]
                //Thêm phần tử bậc lương chi tiết theo ngày chốt
                List<Sal_BasicSalaryEntity> ListSalaryProfile = new List<Sal_BasicSalaryEntity>();
                ListSalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();
                if (ListSalaryProfile.Count > 0)
                {
                    //Lấy các phần tử tính lương nằm trong Grade của nhân viên
                    Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd);
                    //loại bỏ nhân viên có ngày vào làm sau ngày chốt lương
                    Cat_GradePayrollEntity CatGrade = Grade != null ? TotalDataAll.listCat_GradePayroll.Where(m => m.ID == Grade.GradePayrollID).FirstOrDefault() : null;

                    //neu co ngay chot thi lay theo ngay chot, neu khong có ngày chốt thì lấy theo ngày cuối kì lương
                    if (CatGrade != null && CatGrade.SalaryDayClose != null)
                    {
                        //ngày kết thúc chốt lương
                        DateTime DateEndClose = Common.GetDateCloseByMonthYear(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, CatGrade.SalaryDayClose.Value);
                        //lọc lại lương cơ bản theo kỳ chốt
                        ListSalaryProfile = ListSalaryProfile.Where(m => m.DateOfEffect <= DateEndClose).ToList();
                        //lương cơ bản gần nhất
                        Sal_BasicSalaryEntity SalaryProfile = ListSalaryProfile.FirstOrDefault();
                        item = new ElementFormula(PayrollElement.SAL_SALARY_RANK_NAME_DATECLOSE.ToString(), SalaryProfile != null ? SalaryProfile.SalaryRankName : "", 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_SALARY_RANK_NAME_DATECLOSE.ToString(), BasicSalarybyProfile != null ? BasicSalarybyProfile.SalaryRankName : "", 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Cấp bậc chức danh tháng N và tháng N-1
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_SALARY_JOB_LEVEL.ToString(), PayrollElement.SAL_SALARY_JOB_LEVEL_N_1.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                Sal_BasicSalaryEntity BasicSalarybyProfile = new Sal_BasicSalaryEntity();
                BasicSalarybyProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                item = new ElementFormula(PayrollElement.SAL_SALARY_JOB_LEVEL.ToString(), BasicSalarybyProfile != null && BasicSalarybyProfile.JobLevel != null ? BasicSalarybyProfile.JobLevel : 0, 0);
                listElementFormula.Add(item);

                //[05/11/2015][hien.nguyen][Modify][59538]
                DateTime DateEnd_N_1 = CutOffDuration.DateEnd.AddMonths(-1);
                BasicSalarybyProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID).Where(m => m.DateOfEffect <= DateEnd_N_1).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                item = new ElementFormula(PayrollElement.SAL_SALARY_JOB_LEVEL_N_1.ToString(), BasicSalarybyProfile != null && BasicSalarybyProfile.JobLevel != null ? BasicSalarybyProfile.JobLevel : 0, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region SAL_SALARY_RANK_RATE
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_SALARY_RANK_RATE.ToString(), PayrollElement.SAL_SALARY_RANK_RATE_N_1.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //tháng N
                Sal_BasicSalaryEntity BasicSalarybyProfile = new Sal_BasicSalaryEntity();
                BasicSalarybyProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                item = new ElementFormula(PayrollElement.SAL_SALARY_RANK_RATE.ToString(), BasicSalarybyProfile != null && BasicSalarybyProfile.Rate != null ? BasicSalarybyProfile.Rate : 0, 0);
                listElementFormula.Add(item);

                //tháng N-1
                Att_CutOffDurationEntity Cutoff_Prev = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear.Date < CutOffDuration.MonthYear.Date).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                if (Cutoff_Prev != null)
                {
                    BasicSalarybyProfile = new Sal_BasicSalaryEntity();
                    BasicSalarybyProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= Cutoff_Prev.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                    item = new ElementFormula(PayrollElement.SAL_SALARY_RANK_RATE_N_1.ToString(), BasicSalarybyProfile != null && BasicSalarybyProfile.Rate != null ? BasicSalarybyProfile.Rate : 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_SALARY_RANK_RATE_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion


            #region Bậc lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_SALARY_CLASS_NAME.ToString()))
            {
                Sal_BasicSalaryEntity BasicSalarybyProfile = new Sal_BasicSalaryEntity();
                BasicSalarybyProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                item = new ElementFormula(PayrollElement.SAL_SALARY_CLASS_NAME.ToString(), BasicSalarybyProfile != null ? BasicSalarybyProfile.SalaryClassName : "", 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Bậc lương (class)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_SALARY_CLASS_NAME_T3.ToString()))
            {
                Sal_BasicSalaryEntity BasicSalarybyProfile = new Sal_BasicSalaryEntity();
                BasicSalarybyProfile = TotalDataAll.dicBasicSalaryT3.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                item = new ElementFormula(PayrollElement.SAL_SALARY_CLASS_NAME_T3.ToString(), BasicSalarybyProfile != null ? BasicSalarybyProfile.SalaryClassName : "", 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Hệ số lương nhân viên tháng N và tháng N-1
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_BASIC_PERSONALRATE.ToString(), PayrollElement.SAL_BASIC_PERSONALRATE_N_1.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);

                //tháng N
                Sal_BasicSalaryEntity SalaryProfile = new Sal_BasicSalaryEntity();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (SalaryProfile != null)
                {
                    item = new ElementFormula(PayrollElement.SAL_BASIC_PERSONALRATE.ToString(), SalaryProfile.PersonalRate.Get_Double(), 0, "Null");
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_BASIC_PERSONALRATE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }

                //tháng N-1
                Att_CutOffDurationEntity Cutoff_Prev = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear.Date < CutOffDuration.MonthYear.Date).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                if (Cutoff_Prev != null)
                {
                    SalaryProfile = new Sal_BasicSalaryEntity();
                    SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= Cutoff_Prev.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                    if (SalaryProfile != null)
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_PERSONALRATE_N_1.ToString(), SalaryProfile.PersonalRate.Get_Double(), 0, "Null");
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_PERSONALRATE_N_1.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_BASIC_PERSONALRATE_N_1.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region SAL_BASIC_SALARY_DATECLOSE
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_BASIC_SALARY_DATECLOSE.ToString(), PayrollElement.SAL_BASIC_SALARY_DATECLOSE_N_1.ToString() }))
            {

                List<Sal_BasicSalaryEntity> ListSalaryProfile = new List<Sal_BasicSalaryEntity>();
                ListSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();
                if (ListSalaryProfile.Count > 0)
                {
                    //Lấy các phần tử tính lương nằm trong Grade của nhân viên
                    Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd);
                    //loại bỏ nhân viên có ngày vào làm sau ngày chốt lương
                    Cat_GradePayrollEntity CatGrade = Grade != null ? TotalDataAll.listCat_GradePayroll.Where(m => m.ID == Grade.GradePayrollID).FirstOrDefault() : null;

                    if (CatGrade != null)
                    {
                        //ngày bắt đầu chốt lương
                        DateTime DateClose = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                        //ngày kết thúc chốt lương
                        DateTime DateEndClose = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);

                        if (CatGrade.SalaryDayClose.HasValue)
                        {
                            DateClose = Common.GetDateCloseByMonthYear(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, CatGrade.SalaryDayClose.Value);
                            DateEndClose = Common.GetDateCloseByMonthYear(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, CatGrade.SalaryDayClose.Value);
                        }
                        DateClose = DateClose.AddDays(1).AddMonths(-1);

                        //lọc lại lương cơ bản theo kỳ chốt
                        ListSalaryProfile = ListSalaryProfile.Where(m => m.DateOfEffect <= DateEndClose).ToList();

                        //lương cơ bản gần nhất
                        Sal_BasicSalaryEntity SalaryProfile = ListSalaryProfile.FirstOrDefault();

                        //nếu ngày thay đổi lương nằm trong kỳ chốt lương thì lấy 2 mức
                        if (SalaryProfile.DateOfEffect >= DateClose && SalaryProfile.DateOfEffect <= DateEndClose)
                        {
                            item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_DATECLOSE.ToString(), SalaryProfile.GrossAmount.ToDouble(), 0);
                            listElementFormula.Add(item);

                            Sal_BasicSalaryEntity SalaryProfile_Prev = ListSalaryProfile.Where(m => m.DateOfEffect < DateClose).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                            item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_DATECLOSE_N_1.ToString(), SalaryProfile_Prev != null ? SalaryProfile_Prev.GrossAmount.ToDouble() : 0, 0);
                            listElementFormula.Add(item);
                        }
                        else//chỉ áp dụng 1 mức lương
                        {
                            item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_DATECLOSE.ToString(), SalaryProfile.GrossAmount.ToDouble(), 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_DATECLOSE_N_1.ToString(), SalaryProfile.GrossAmount.ToDouble(), 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_DATECLOSE.ToString(), 0, 0, "null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_DATECLOSE_N_1.ToString(), 0, 0, "null");
                        listElementFormula.Add(item);
                    }

                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_DATECLOSE.ToString(), 0, 0, "Không có lương cơ bản !");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_DATECLOSE_N_1.ToString(), 0, 0, "Không có thay đổi lương trong tháng !");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [23/12/2015][hien.nguyen][modify][62053]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_BASIC_SALARY_GROSSAMOUNT_PREV.ToString(), PayrollElement.SAL_BASIC_SALARY_DATEEFFECTIVE_PREV.ToString(), PayrollElement.SAL_BASIC_SALARY_DATEEFFECTIVE.ToString() }))
            {
                List<Sal_BasicSalaryEntity> ListSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();
                //[18/05/2016][hien.nguyen][modify][67495]

                if (ListSalaryProfile.Count >= 1)
                {
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_DATEEFFECTIVE.ToString(), ListSalaryProfile.FirstOrDefault().DateOfEffect, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_DATEEFFECTIVE.ToString(), string.Empty, 0, "Không có ngày hiệu lực lương bản");
                    listElementFormula.Add(item);
                }


                if (ListSalaryProfile.Count >= 2)
                {
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_GROSSAMOUNT_PREV.ToString(), ListSalaryProfile[1].E_GrossAmount.DecryptValue(), 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_DATEEFFECTIVE_PREV.ToString(), ListSalaryProfile[1].DateOfEffect, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_GROSSAMOUNT_PREV.ToString(), 0, 0, "Không có lương cơ bản tháng trước !");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_DATEEFFECTIVE_PREV.ToString(), string.Empty, 0, "Không có ngày hiệu lực lương cơ bản tháng trước !");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [13/01/2016][hien.nguyen][new func][63034]: Đơn Giá Cảng
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_PRICETYPE_AMOUNT.ToString(), PayrollElement.SAL_SALARYRANK_FINALRATE.ToString() }))
            {
                var SalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (SalaryProfile.HasValue())
                {
                    //Phần tử Aount trong PriceTypeDetail
                    if (SalaryProfile.PriceTypeID.HasValue)
                    {
                        var PriceTypeDetailByParent = TotalDataAll.listPriceTypeDetail.Where(m => m.PriceTypeID.HasValue && m.PriceTypeID == SalaryProfile.PriceTypeID && m.DateFrom <= CutOffDuration.DateEnd && (m.DateTo == null || m.DateTo >= CutOffDuration.DateStart)).OrderByDescending(m => m.DateFrom).FirstOrDefault();
                        if (PriceTypeDetailByParent.HasValue())
                        {
                            item = new ElementFormula(PayrollElement.SAL_PRICETYPE_AMOUNT.ToString(), PriceTypeDetailByParent.Amount ?? 0, 0, "Null");
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.SAL_PRICETYPE_AMOUNT.ToString(), 0, 0, "Null");
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_PRICETYPE_AMOUNT.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }


                    //Phần tử FinalRate
                    if (SalaryProfile.FinalRate.HasValue)
                    {
                        item = new ElementFormula(PayrollElement.SAL_SALARYRANK_FINALRATE.ToString(), SalaryProfile.FinalRate, 0, "Null");
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_SALARYRANK_FINALRATE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }

                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_PRICETYPE_AMOUNT.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARYRANK_FINALRATE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region hinh thuc ung luong
            //[02/10/2017][bang.nguyen][87987][Modify Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_BASIC_FORMCOMPSALARY.ToString()))
            {
                var _FormCompSalary = string.Empty;
                var objBasicSalary = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID
                && m.DateOfEffect <= CutOffDuration.DateEnd
                && m.Status == EnumDropDown.Sal_BasicSalaryStatus.E_APPROVED.ToString())
                .OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (objBasicSalary != null && !string.IsNullOrEmpty(objBasicSalary.FormCompSalary))
                {
                    _FormCompSalary = objBasicSalary.FormCompSalary;
                }
                item = new ElementFormula(PayrollElement.SAL_BASIC_FORMCOMPSALARY.ToString(), _FormCompSalary, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region lương cơ bản đầu tiên
            //[04/03/2019] [bang.nguyen] [103458] [modify]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_BASIC_SALARY_FIRST.ToString()))
            {
                double salaryFirst = 0;
                if (profileItem.DateHire != null)
                {
                    var objBasicSalary = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID)
                        .Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect >= profileItem.DateHire).OrderBy(m => m.DateOfEffect).FirstOrDefault();
                    if (objBasicSalary != null && !string.IsNullOrEmpty(objBasicSalary.GrossAmount))//có lương cơ bản
                    {
                        var grossAmount = objBasicSalary.GrossAmount.ToDouble();
                        if (grossAmount != null)
                        {
                            salaryFirst = grossAmount.Value;
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_FIRST.ToString(), salaryFirst, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Lương cơ bản
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.SAL_BASIC_SALARY.ToString(),
                PayrollElement.HR_SALARYCLASSNAME.ToString(),
                PayrollElement.SAL_BASIC_SALARY2.ToString(),
                PayrollElement.SAL_BASIC_SALARY1.ToString(),
                PayrollElement.SAL_BASIC_ADVANCESALARY.ToString(),
                PayrollElement.SAL_BASIC_SALARY_NOTE.ToString(),
                PayrollElement.SAL_BASIC_SALARY_NOTE1.ToString(),
                PayrollElement.SAL_BASIC_SALARY_NOTE2.ToString(),
                PayrollElement.SAL_BASIC_SALARY_N_1.ToString(),
                PayrollElement.SAL_BASIC_SALARY_N_2.ToString(),
                PayrollElement.SAL_BASIC_SALARY_N_3.ToString(),
                PayrollElement.SAL_BASIC_SALARY_N_4.ToString(),
                PayrollElement.SAL_BASIC_SALARY_N_5.ToString(),
                PayrollElement.SAL_BASIC_SALARY_N_6.ToString(),
                PayrollElement.SAL_INCENTIVE.ToString(),
                PayrollElement.SAL_IS_CHANGE_BASICSALARY.ToString(),
                PayrollElement.SAL_BASIC_SALARY_MONTH_N_1.ToString(),
                PayrollElement.SAL_DATE_CHANGE_BASICSALARY.ToString(),
                PayrollElement.SAL_BASICSALARY_PERSONALRATE.ToString(),
                PayrollElement.SAL_BS_PERSONALRATE_BEFORE.ToString(),
                PayrollElement.SAL_BS_PERSONALRATE_AFTER.ToString()
            }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                List<Sal_BasicSalaryEntity> listbasicSalaryProfile = new List<Sal_BasicSalaryEntity>();
                listbasicSalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();
                //Có lương cơ bản
                if (listbasicSalaryProfile != null && listbasicSalaryProfile.Count > 0)
                {
                    #region Enum Bậc lương - HR_SALARYCLASSNAME
                    item = new ElementFormula(PayrollElement.HR_SALARYCLASSNAME.ToString(), listbasicSalaryProfile.FirstOrDefault()?.SalaryClassCode ?? string.Empty, 0, "Null");
                    listElementFormula.Add(item);
                    #endregion
                    #region  Tung.Tran [17072018][96720]: Thêm phần tử hệ số cá nhân tính lương nhóm
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_PERSONALRATE.ToString(), listbasicSalaryProfile.FirstOrDefault()?.PersonalRate ?? 0, 0, "Null");
                    listElementFormula.Add(item);
                    #endregion

                    //lương cơ bản tháng hiện tại
                    if (!CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//chỉ có 1 mức lương trong tháng
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY.ToString(), listbasicSalaryProfile.OrderByDescending(m => m.DateOfEffect).FirstOrDefault()?.GrossAmount.ToDouble() ?? 0, 0);
                        listElementFormula.Add(item);

                        //Tung.Tran [31/07/2021][131176]: Mức lương tạm ứng trong lương cơ bản
                        item = new ElementFormula(PayrollElement.SAL_BASIC_ADVANCESALARY.ToString(), listbasicSalaryProfile.OrderByDescending(m => m.DateOfEffect).FirstOrDefault()?.AdvanceSalary ?? 0, 0);
                        listElementFormula.Add(item);
                        //[17062016][bang.nguyen][68823][modify]
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_NOTE.ToString(), listbasicSalaryProfile.OrderByDescending(m => m.DateOfEffect).FirstOrDefault()?.Note ?? string.Empty, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_INCENTIVE.ToString(), 0, 0);
                        listElementFormula.Add(item);

                        //cập nhật phần tử thay đổi lương = 0
                        item = new ElementFormula(PayrollElement.SAL_IS_CHANGE_BASICSALARY.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY2.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_NOTE1.ToString(), string.Empty, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_NOTE2.ToString(), string.Empty, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_DATE_CHANGE_BASICSALARY.ToString(), string.Empty, 0);
                        listElementFormula.Add(item);
                        //Hien.Le [04/01/2021] 0121848: Bổ sung phần tử lương: lấy dữ liệu hệ số lương trước và sau thay đổi lương
                        item = new ElementFormula(PayrollElement.SAL_BS_PERSONALRATE_BEFORE.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_BS_PERSONALRATE_AFTER.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    else//2 mức lương trong tháng
                    {
                        //Tung.Tran [06/08/2021][131388]: Mức lương tạm ứng sau thay đổi
                        item = new ElementFormula(PayrollElement.SAL_BASIC_ADVANCESALARY.ToString(), listbasicSalaryProfile
                            .OrderByDescending(m => m.DateOfEffect)
                            .FirstOrDefault()?.AdvanceSalary ?? 0, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.SAL_DATE_CHANGE_BASICSALARY.ToString(), listbasicSalaryProfile.FirstOrDefault().DateOfEffect, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.SAL_IS_CHANGE_BASICSALARY.ToString(), 1, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_NOTE.ToString(), string.Empty, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY2.ToString(), listbasicSalaryProfile.FirstOrDefault()?.GrossAmount.ToDouble() ?? 0, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_NOTE2.ToString(), listbasicSalaryProfile.FirstOrDefault()?.Note ?? string.Empty, 0);
                        listElementFormula.Add(item);

                        //Hien.Le [04/01/2021] 0121848: Bổ sung phần tử lương: lấy dữ liệu hệ số lương trước và sau thay đổi lương
                        item = new ElementFormula(PayrollElement.SAL_BS_PERSONALRATE_AFTER.ToString(), listbasicSalaryProfile.FirstOrDefault()?.PersonalRate ?? 0, 0);
                        listElementFormula.Add(item);

                        if (listbasicSalaryProfile.Count > 1)
                        {
                            //[20/12/2017][bang.nguyen][91102][Modify Func]
                            //lay dong luong co ban truoc thay doi
                            //dong thay doi moi nhat trong ky luong
                            var objBasicSalaryChangLastByCutOff = listbasicSalaryProfile.OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                            double? valueSalBasicSalary1 = 0;
                            string valueSalBasicNote1 = string.Empty;
                            double valueAdvanceSalary = 0;
                            double? personalRateBefore = 0;
                            if (objBasicSalaryChangLastByCutOff != null)
                            {
                                var basicSalary1 = listbasicSalaryProfile.Where(m => m.DateOfEffect < objBasicSalaryChangLastByCutOff.DateOfEffect).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                                if (basicSalary1 != null)
                                {
                                    if (!string.IsNullOrEmpty(basicSalary1.GrossAmount))
                                    {
                                        valueSalBasicSalary1 = basicSalary1.GrossAmount.ToDouble();
                                    }
                                    if (!string.IsNullOrEmpty(basicSalary1.Note))
                                    {
                                        valueSalBasicNote1 = basicSalary1.Note;
                                    }
                                    //Hien.Le [04/01/2021] 0121848: Bổ sung phần tử lương: lấy dữ liệu hệ số lương trước và sau thay đổi lương
                                    if (basicSalary1.PersonalRate != null)
                                    {
                                        personalRateBefore = basicSalary1.PersonalRate;
                                    }
                                    //Tung.Tran [06/08/2021][131388]: Mức lương tạm ứng trước thay đổi
                                    if (basicSalary1.AdvanceSalary != null)
                                    {
                                        valueAdvanceSalary = basicSalary1.AdvanceSalary.Value;
                                    }
                                }
                            }
                            item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY1.ToString(), valueSalBasicSalary1, 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_NOTE1.ToString(), valueSalBasicNote1, 0);
                            listElementFormula.Add(item);
                            //Hien.Le [04/01/2021] 0121848: Bổ sung phần tử lương: lấy dữ liệu hệ số lương trước và sau thay đổi lương
                            item = new ElementFormula(PayrollElement.SAL_BS_PERSONALRATE_BEFORE.ToString(), personalRateBefore, 0);
                            listElementFormula.Add(item);
                            //Tung.Tran [06/08/2021][131388]: Mức lương tạm ứng trước thay đổi
                            item = new ElementFormula(PayrollElement.SAL_BASIC_ADVANCESALARY_BEFORE.ToString(), valueAdvanceSalary, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY1.ToString(), 0, 0, "Null");
                            listElementFormula.Add(item);
                            item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_NOTE1.ToString(), string.Empty, 0);
                            listElementFormula.Add(item);
                            //Hien.Le [04/01/2021] 0121848: Bổ sung phần tử lương: lấy dữ liệu hệ số lương trước và sau thay đổi lương
                            item = new ElementFormula(PayrollElement.SAL_BS_PERSONALRATE_BEFORE.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                        #region Tính số ngày thay đổi lương
                        List<Att_RosterEntity> listRosterProfile = new List<Att_RosterEntity>();

                        var listRosterByProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);

                        //Lọc ra các roster thuộc nhân viên và nằm trong tháng tính lương
                        listRosterProfile = listRosterByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart).ToList();

                        int totalLeave = 0;
                        foreach (var j in listRosterProfile)
                        {
                            DateTime _tmp = j.DateStart;
                            while (true)
                            {
                                if (_tmp > CutOffDuration.DateEnd)
                                {
                                    break;
                                }
                                if (_tmp >= listbasicSalaryProfile.FirstOrDefault().DateOfEffect)
                                {
                                    int day = (int)_tmp.DayOfWeek;
                                    switch (day)
                                    {
                                        case 0://CN
                                            if (j.SunShiftID != null)
                                            {
                                                totalLeave++;
                                            }
                                            break;
                                        case 1://T2
                                            if (j.MonShiftID != null)
                                            {
                                                totalLeave++;
                                            }
                                            break;
                                        case 2:
                                            if (j.TueShiftID != null)
                                            {
                                                totalLeave++;
                                            }
                                            break;
                                        case 3:
                                            if (j.WedShiftID != null)
                                            {
                                                totalLeave++;
                                            }
                                            break;
                                        case 4:
                                            if (j.ThuShiftID != null)
                                            {
                                                totalLeave++;
                                            }
                                            break;
                                        case 5:
                                            if (j.FriShiftID != null)
                                            {
                                                totalLeave++;
                                            }
                                            break;
                                        case 6:
                                            if (j.SatShiftID != null)
                                            {
                                                totalLeave++;
                                            }
                                            break;
                                        default:

                                            break;
                                    }
                                }
                                _tmp = _tmp.AddDays(1);
                            }
                        }
                        //cập nhật lại giá trị cho enum số ngày thay đổi lương
                        int days = (CutOffDuration.DateEnd - listbasicSalaryProfile.FirstOrDefault().DateOfEffect).Days;
                        days = days - totalLeave;
                        item = new ElementFormula(PayrollElement.SAL_INCENTIVE.ToString(), days, 0);
                        listElementFormula.Add(item);
                        #endregion
                    }
                    #region lương cơ bản 6 tháng trước đó
                    //[23102015][bang.nguyen][modify][58811]
                    //thêm phần tử lương cơ bản tháng N-1 lấy ngày cuối tháng N-1 
                    DateTime monthFirst = CutOffDuration.DateEnd.AddMonths(-1);
                    int dayInMonthFirst = DateTime.DaysInMonth(monthFirst.Year, monthFirst.Month);
                    //[21012015][bang.nguyen][63274][bug]
                    //ngày cuối tháng N_1
                    DateTime dateLastMonthFirst = new DateTime(monthFirst.Year, monthFirst.Month, dayInMonthFirst);
                    //lương cơ bản gần nhất theo ngày cuối tháng trước
                    var objSalaryMonthFirst = listbasicSalaryProfile.Where(s => s.DateOfEffect <= dateLastMonthFirst).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                    if (objSalaryMonthFirst != null)
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_MONTH_N_1.ToString(), objSalaryMonthFirst?.GrossAmount.ToDouble() ?? 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_MONTH_N_1.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }

                    var _basicsalaryPrevCurrentMonth = listbasicSalaryProfile.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd.AddMonths(-1)).OrderByDescending(m => m.DateOfEffect).ToList();
                    if (_basicsalaryPrevCurrentMonth.Count > 0)
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_1.ToString(), _basicsalaryPrevCurrentMonth.FirstOrDefault()?.GrossAmount.ToDouble() ?? 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_1.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                    #region SAL_BASIC_SALARY_N_2
                    //[16122015][bang.nguyen][modify][60715]
                    //sửa phần tử lương cơ bản theo ngày chốt
                    Sal_GradeEntity GradeN_2 = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart.AddMonths(-2), CutOffDuration.DateEnd.AddMonths(-2));
                    DateTime dateCloseN_2 = InitDateForDayClose(CutOffDuration.DateStart.AddMonths(-2), CutOffDuration.DateEnd.AddMonths(-2), GradeN_2);
                    _basicsalaryPrevCurrentMonth = listbasicSalaryProfile.Where(m => m.DateOfEffect <= dateCloseN_2).OrderByDescending(m => m.DateOfEffect).ToList();
                    if (_basicsalaryPrevCurrentMonth.Count > 0)
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_2.ToString(), _basicsalaryPrevCurrentMonth.FirstOrDefault()?.GrossAmount.ToDouble() ?? 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_2.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                    #endregion
                    #region SAL_BASIC_SALARY_N_3
                    //[16122015][bang.nguyen][modify][60715]
                    //sửa phần tử lương cơ bản theo ngày chốt
                    Sal_GradeEntity GradeN_3 = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart.AddMonths(-3), CutOffDuration.DateEnd.AddMonths(-3));
                    DateTime dateCloseN_3 = InitDateForDayClose(CutOffDuration.DateStart.AddMonths(-3), CutOffDuration.DateEnd.AddMonths(-3), GradeN_3);
                    _basicsalaryPrevCurrentMonth = listbasicSalaryProfile.Where(m => m.DateOfEffect <= dateCloseN_3).OrderByDescending(m => m.DateOfEffect).ToList();
                    if (_basicsalaryPrevCurrentMonth.Count > 0)
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_3.ToString(), _basicsalaryPrevCurrentMonth.FirstOrDefault()?.GrossAmount.ToDouble() ?? 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_3.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                    #endregion
                    #region SAL_BASIC_SALARY_N_4
                    //[16122015][bang.nguyen][modify][60715]
                    //sửa phần tử lương cơ bản theo ngày chốt
                    Sal_GradeEntity GradeN_4 = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart.AddMonths(-4), CutOffDuration.DateEnd.AddMonths(-4));
                    DateTime dateCloseN_4 = InitDateForDayClose(CutOffDuration.DateStart.AddMonths(-4), CutOffDuration.DateEnd.AddMonths(-4), GradeN_4);
                    _basicsalaryPrevCurrentMonth = listbasicSalaryProfile.Where(m => m.DateOfEffect <= dateCloseN_4).OrderByDescending(m => m.DateOfEffect).ToList();
                    if (_basicsalaryPrevCurrentMonth.Count > 0)
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_4.ToString(), _basicsalaryPrevCurrentMonth.FirstOrDefault()?.GrossAmount.ToDouble() ?? 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_4.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                    #endregion
                    #region SAL_BASIC_SALARY_N_5
                    //[16122015][bang.nguyen][modify][60715]
                    //sửa phần tử lương cơ bản theo ngày chốt
                    Sal_GradeEntity GradeN_5 = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart.AddMonths(-5), CutOffDuration.DateEnd.AddMonths(-5));
                    DateTime dateCloseN_5 = InitDateForDayClose(CutOffDuration.DateStart.AddMonths(-5), CutOffDuration.DateEnd.AddMonths(-5), GradeN_5);
                    _basicsalaryPrevCurrentMonth = listbasicSalaryProfile.Where(m => m.DateOfEffect <= dateCloseN_5).OrderByDescending(m => m.DateOfEffect).ToList();
                    if (_basicsalaryPrevCurrentMonth.Count > 0)
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_5.ToString(), _basicsalaryPrevCurrentMonth.FirstOrDefault()?.GrossAmount.ToDouble() ?? 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_5.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                    #endregion
                    _basicsalaryPrevCurrentMonth = listbasicSalaryProfile.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd.AddMonths(-6)).OrderByDescending(m => m.DateOfEffect).ToList();
                    if (_basicsalaryPrevCurrentMonth.Count > 0)
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_6.ToString(), _basicsalaryPrevCurrentMonth.FirstOrDefault()?.GrossAmount.ToDouble() ?? 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_6.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                    #endregion
                }
                else//không có lương cơ bản
                {
                    item = new ElementFormula(PayrollElement.SAL_IS_CHANGE_BASICSALARY.ToString(), 0, 0, "Không có lương cơ bản tháng N");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY.ToString(), 0, 0, "Không có lương cơ bản tháng N");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_1.ToString(), 0, 0, "Không có lương cơ bản tháng N-1");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_2.ToString(), 0, 0, "Không có lương cơ bản tháng N-2");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_3.ToString(), 0, 0, "Không có lương cơ bản tháng N-3");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_4.ToString(), 0, 0, "Không có lương cơ bản tháng N-4");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_5.ToString(), 0, 0, "Không có lương cơ bản tháng N-5");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_N_6.ToString(), 0, 0, "Không có lương cơ bản tháng N-6");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY1.ToString(), 0, 0, "Không có lương cơ bản tháng N");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY2.ToString(), 0, 0, "Không có lương cơ bản tháng N");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_INCENTIVE.ToString(), 0, 0, "Không có thay đổi lương tháng N");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_SALARYCLASSNAME.ToString(), 0, 0, "Không có Bậc / Hệ số lương tháng N");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_NOTE.ToString(), 0, 0, "Không có lương cơ bản tháng N");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_NOTE1.ToString(), 0, 0, "Không có lương cơ bản tháng N");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_NOTE2.ToString(), 0, 0, "Không có lương cơ bản tháng N");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_PERSONALRATE.ToString(), 0, 0, "Không có hệ số lương tháng N");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_PERSONALRATE_BEFORE.ToString(), 0, 0, "Không có hệ số lương trước thay đổi tháng N");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_PERSONALRATE_AFTER.ToString(), 0, 0, "Không có hệ số lương sau thay đổi tháng N");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region SAL_UNUSUALALLOWANCE_MONTHSTART
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_UNUSUALALLOWANCE_MONTHSTART.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_MONTHEND.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_YEARSTART.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_YEAREND.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_NOCOMPENSATION.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " ( " + PayrollElement.SAL_UNUSUALALLOWANCE_MONTHSTART.ToString() + " ) ";

                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_MONTHSTART.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_MONTHEND.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_YEARSTART.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_YEAREND.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_NOCOMPENSATION.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listUnusualAllowanceProfile = TotalData600.dicSalUnusualAllowance.GetValueOrNew(profileItem.ID);


                    Sal_UnusualAllowanceEntity SalUnusualAllowanceProfile = listUnusualAllowanceProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthStart <= CutOffDuration.DateEnd && (m.MonthEnd == null || m.MonthEnd >= CutOffDuration.DateStart)).FirstOrDefault();

                    //Tháng bắt đầu hưởng PC
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_MONTHSTART.ToString(), SalUnusualAllowanceProfile != null ? SalUnusualAllowanceProfile.MonthStart != null ? SalUnusualAllowanceProfile.MonthStart : DateTime.MinValue : DateTime.MinValue, 0);
                    listElementFormula.Add(item);

                    //Tháng kết thúc hưởng PC
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_MONTHEND.ToString(), SalUnusualAllowanceProfile != null ? SalUnusualAllowanceProfile.MonthEnd != null ? SalUnusualAllowanceProfile.MonthEnd : DateTime.MinValue : DateTime.MinValue, 0);
                    listElementFormula.Add(item);

                    //Năm bắt đầu hưởng PC
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_YEARSTART.ToString(), SalUnusualAllowanceProfile != null ? SalUnusualAllowanceProfile.MonthStart != null ? SalUnusualAllowanceProfile.MonthStart.Value.Year : 0 : 0, 0);
                    listElementFormula.Add(item);

                    //Năm kết thúc hưởng PC
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_YEAREND.ToString(), SalUnusualAllowanceProfile != null ? SalUnusualAllowanceProfile.MonthEnd != null ? SalUnusualAllowanceProfile.MonthEnd.Value.Year : 0 : 0, 0);
                    listElementFormula.Add(item);

                    //Số tháng bù
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_NOCOMPENSATION.ToString(), SalUnusualAllowanceProfile != null ? SalUnusualAllowanceProfile.NoCompensation != null ? SalUnusualAllowanceProfile.NoCompensation : 0 : 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Tháng tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_CUTOFFDURATION_DATESTART.ToString(), PayrollElement.ATT_CUTOFFDURATION_MONTH.ToString(), PayrollElement.ATT_CUTOFFDURATION_DATEEND.ToString() }))
            {
                item = new ElementFormula(PayrollElement.ATT_CUTOFFDURATION_MONTH.ToString(), CutOffDuration.MonthYear, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.ATT_CUTOFFDURATION_DATEEND.ToString(), CutOffDuration.DateEnd, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.ATT_CUTOFFDURATION_DATESTART.ToString(), CutOffDuration.DateStart, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.ATT_CUTOFFDURATION_DATESTART_N_1.ToString(), CutOffDuration.DateStart.AddMonths(-1), 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [09/10/2018][bang.nguyen][99336][modify]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_CUTOFFDURATION_COMMISSIONFROM.ToString(), PayrollElement.ATT_CUTOFFDURATION_COMMISSIONTO.ToString() }))
            {
                item = new ElementFormula(PayrollElement.ATT_CUTOFFDURATION_COMMISSIONFROM.ToString(), CutOffDuration.CommissionFrom, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.ATT_CUTOFFDURATION_COMMISSIONTO.ToString(), CutOffDuration.CommissionTo, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [01122015][bang.nguyen][60648][new func]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_ATTENDANCETABLE_ADWORKDAYCOUNT.ToString(), PayrollElement.ATT_ATTENDANCETABLE_BACKWORKDAYCOUNT.ToString() }))
            {
                double _AdWorkDayCount = 0;
                double _BackWorkDayCount = 0;
                if (objAttendanceTableProCut != null)
                {
                    if (objAttendanceTableProCut.AdWorkDayCount != null)
                    {
                        _AdWorkDayCount = objAttendanceTableProCut.AdWorkDayCount.Value;
                    }
                    if (objAttendanceTableProCut.BackWorkDayCount != null)
                    {
                        _BackWorkDayCount = objAttendanceTableProCut.BackWorkDayCount.Value;
                    }
                }
                //Tổng ngày theo kỳ ứng công
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_ADWORKDAYCOUNT.ToString(), _AdWorkDayCount, 0);
                listElementFormula.Add(item);
                //Tổng ngày theo kỳ trừ công
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_BACKWORKDAYCOUNT.ToString(), _BackWorkDayCount, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [Tung.Tran][95765] : Thêm phần tử lương tháng n-1, Tổng số lần đi trễ về sớm tháng N - 1
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLE_LATEEARLYCOUNT_PREV.ToString()))
            {
                double dateLateEarlyCount = 0;
                //lay data nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listAttendanceTablePre";

                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.listAttendanceTablePre = dataComputeSer.GetAttendanceTableLastMonth(TotalData600, CutOffDuration, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông lưu store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_ATTENDANCETABLE_LATEEARLYCOUNT_PREV.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_LATEEARLYCOUNT_PREV.ToString(), dateLateEarlyCount, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var prevMonth = CutOffDuration.MonthYear.AddMonths(-1);
                    var attendanceTablePreProCut = TotalData600.listAttendanceTablePre.Where(m => m.ProfileID == profileItem.ID && m.MonthYear.Value.Month == prevMonth.Month && m.MonthYear.Value.Year == prevMonth.Year).FirstOrDefault();
                    if (attendanceTablePreProCut != null)
                    {
                        if (attendanceTablePreProCut.LateEarlyCount != null)
                        {
                            dateLateEarlyCount = attendanceTablePreProCut.LateEarlyCount.Value;
                        }
                    }
                    //Tổng ngày theo kỳ ứng công
                    item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_LATEEARLYCOUNT_PREV.ToString(), dateLateEarlyCount, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [Tung.Tran][94825] 10/05/2018 Tổng số lần đi trễ về sớm
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLE_LATEEARLYCOUNT.ToString()))
            {
                double dateLateEarlyCount = 0;
                if (objAttendanceTableProCut != null)
                {
                    if (objAttendanceTableProCut.LateEarlyCount != null)
                    {
                        dateLateEarlyCount = objAttendanceTableProCut.LateEarlyCount.Value;
                    }
                }
                //Tổng ngày theo kỳ ứng công
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_LATEEARLYCOUNT.ToString(), dateLateEarlyCount, 0);
                listElementFormula.Add(item);

            }
            #endregion

            #region [Tung.Tran][94825] 10/05/2018 Tổng số lần đi trễ 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLE_LATECOUNT.ToString()))
            {
                double dateLateCount = 0;
                if (objAttendanceTableProCut != null)
                {
                    if (objAttendanceTableProCut.LateCount != null)
                    {
                        dateLateCount = objAttendanceTableProCut.LateCount.Value;
                    }
                }
                //Tổng ngày theo kỳ ứng công
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_LATECOUNT.ToString(), dateLateCount, 0);
                listElementFormula.Add(item);

            }
            #endregion

            #region [Tung.Tran][94825] 10/05/2018 Tổng số lần đi trễ 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLE_EARLYCOUNT.ToString()))
            {
                double dateEarlyCount = 0;
                if (objAttendanceTableProCut != null)
                {
                    if (objAttendanceTableProCut.EarlyCount != null)
                    {
                        dateEarlyCount = objAttendanceTableProCut.EarlyCount.Value;
                    }
                }
                //Tổng ngày theo kỳ ứng công
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_EARLYCOUNT.ToString(), dateEarlyCount, 0);
                listElementFormula.Add(item);

            }
            #endregion

            #region [13/09/2016][bang.nguyen][73213][new func]: Phần tử ngày công tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLE_PAIDWORKDAYCOUNT.ToString()))
            {
                double _PaidWorkDayCount = 0;
                var objAttendanceTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();
                if (objAttendanceTable != null)
                {
                    _PaidWorkDayCount = objAttendanceTable.PaidWorkDayCount;
                }
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_PAIDWORKDAYCOUNT.ToString(), _PaidWorkDayCount, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [17/10/2017][bang.nguyen][88780][new func]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_ATTENDANCETABLE_ACTUALHOURSALLOWANCE.ToString(), PayrollElement.ATT_ATTENDANCETABLE_OTPREGNANCYHOURS.ToString() }))
            {
                double _ActualHoursAllowance = 0;
                double _OTPregnancyHours = 0;
                var objAttendanceTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();
                if (objAttendanceTable != null)
                {
                    if (objAttendanceTable.ActualHoursAllowance != null)
                    {
                        _ActualHoursAllowance = objAttendanceTable.ActualHoursAllowance.Value;
                    }
                    //[03/11/2017][bang.nguyen][89523][New Func]
                    //Số giờ tăng ca của chế độ con nhỏ 
                    if (objAttendanceTable.OTPregnancyHours != null)
                    {
                        _OTPregnancyHours = objAttendanceTable.OTPregnancyHours.Value;
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_ACTUALHOURSALLOWANCE.ToString(), _ActualHoursAllowance, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_OTPREGNANCYHOURS.ToString(), _OTPregnancyHours, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [5/11/2016][HienNguyen][75273] Thêm phần tử động tính tổng số giờ tính lương trong kỳ lương theo ca
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_SUM_SHIFT_PAIDHOURS_", string.Empty))
            {
                var listAttendanceTableItemByProfile = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.CutOffDurationID == CutOffDuration.ID).ToList();

                foreach (var i in TotalDataAll.listCat_Shift)
                {
                    item = new ElementFormula("ATT_SUM_SHIFT_PAIDHOURS_" + i.Code, listAttendanceTableItemByProfile.Where(m => m.ShiftID == i.ID).Sum(m => m.WorkPaidHours), 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [22022016][bang.nguyen][63768][modify]: đếm số ngày có đi làm
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLE_DAYWORKCOUNT.ToString()))
            {
                double _dayworkcount = 0;
                if (CutOffDuration != null && profileItem != null)
                {
                    var objAttendanceTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();
                    if (objAttendanceTable != null)
                    {
                        var lstOvertimeTypeCode = new List<string> { OverTimeType.E_WEEKEND.ToString(), OverTimeType.E_WEEKEND_NIGHTSHIFT.ToString(), OverTimeType.E_HOLIDAY.ToString(), OverTimeType.E_HOLIDAY_NIGHTSHIFT.ToString() };
                        var lstOvertimeTypeID = TotalDataAll.listOvertimeTypeAll.Where(s => s.Code != null && s.Code != string.Empty && lstOvertimeTypeCode.Contains(s.Code)).Select(s => s.ID).ToList();

                        //[10032016][bang.nguyen][64509][modify]
                        //Đếm cả ngày nghỉ công tác (nghỉ cả ngày đi công tác) gán mã = BL
                        Guid _LeaveDayID = Guid.Empty;
                        var objLeaveDay = TotalDataAll.listLeavedayType.Where(s => s.CodeStatistic == "BL").FirstOrDefault();
                        if (objLeaveDay != null)
                        {
                            _LeaveDayID = objLeaveDay.ID;
                        }
                        var lstAttTableItemHaveWork = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTable.ID)
                                                        .Where(s =>
                                                            (s.WorkPaidHours > 0
                                                                || (s.OvertimeHours > 0 && s.OvertimeTypeID != null && lstOvertimeTypeID.Contains(s.OvertimeTypeID.Value))
                                                                || (s.WorkPaidHours == 0 && s.LeaveTypeID != null && s.LeaveTypeID != Guid.Empty && s.LeaveTypeID == _LeaveDayID)
                                                            )
                                                        && s.ProfileID == profileItem.ID
                                                        ).ToList();
                        _dayworkcount = lstAttTableItemHaveWork.Count();
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_DAYWORKCOUNT.ToString(), _dayworkcount, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [23/12/2016][bang.nguyen][76953][Modify]: (Sum)Tổng ngày nghỉ Cty trả lương theo kỳ trừ công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_CUTOFFDURATION_BACKPAY_SUM_LEAVEDAY_PAIDRATE.ToString()))
            {
                double sumLeaveDays = 0;
                if (CutOffDuration.BackPayFrom.HasValue && CutOffDuration.BackPayTo.HasValue)
                {
                    using (var context = new VnrHrmDataContext())
                    {
                        var unitOfWork = (IUnitOfWork)new UnitOfWork(context);

                        string nameTableGetData = "listAtt_AttendanceTableItemByBackPay";
                        if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                        {

                            TotalData600.listAtt_AttendanceTableItemByBackPay = unitOfWork.CreateQueryable<Att_AttendanceTableItem>(m => m.IsDelete != true
                                                                                            && m.Att_AttendanceTable != null
                                                                                            && TotalData600.listProfileIds.Contains(m.Att_AttendanceTable.ProfileID)
                                                                                            && m.Att_AttendanceTable.IsDelete == null
                                                                                            && m.WorkDate <= CutOffDuration.BackPayTo
                                                                                            && m.WorkDate >= CutOffDuration.BackPayFrom
                                                                                            ).Select(x => new Att_AttendanceTableItemEntity
                                                                                            {
                                                                                                LeaveDays = x.LeaveDays,
                                                                                                LeaveTypeID = x.LeaveTypeID,
                                                                                                ProfileID = x.Att_AttendanceTable.ProfileID,
                                                                                                IsDelete = x.Att_AttendanceTable.IsDelete,
                                                                                                WorkDate = x.WorkDate,
                                                                                                ShiftID = x.ShiftID,
                                                                                                AttendanceTableID = x.AttendanceTableID
                                                                                            }).ToList();
                            TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                        }


                        var listLeaveDayTypeID = TotalDataAll.listLeavedayType.Where(s => s.PaidRate != 0).Select(s => s.ID).ToList();
                        if (listLeaveDayTypeID.Count > 0)
                        {
                            sumLeaveDays = TotalData600.listAtt_AttendanceTableItemByBackPay.Where(m => m.IsDelete != true
                                                                                            && m.LeaveTypeID != null
                                                                                            && m.LeaveDays != null
                                                                                            && listLeaveDayTypeID.Contains(m.LeaveTypeID.Value)
                                                                                            && m.ProfileID == profileItem.ID
                                                                                            && m.IsDelete == null
                                                                                            && m.WorkDate <= CutOffDuration.BackPayTo
                                                                                            && m.WorkDate >= CutOffDuration.BackPayFrom
                                                                                            ).Sum(s => s.LeaveDays.Value);
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_CUTOFFDURATION_BACKPAY_SUM_LEAVEDAY_PAIDRATE.ToString(), sumLeaveDays, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [07/12/2015][hien.nguyen][New][61395]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_CUTOFFDURATION_BACKPAY_LEAVEDAY_PAIDRATE.ToString()))
            {
                double result = 0;
                if (CutOffDuration.BackPayFrom.HasValue && CutOffDuration.BackPayTo.HasValue)
                {
                    using (var context = new VnrHrmDataContext())
                    {
                        var unitOfWork = (IUnitOfWork)new UnitOfWork(context);

                        string nameTableGetData = "listAtt_AttendanceTableItemByBackPay";
                        if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                        {
                            TotalData600.listAtt_AttendanceTableItemByBackPay = unitOfWork.CreateQueryable<Att_AttendanceTableItem>(m => m.IsDelete != true
                                                                                          && m.Att_AttendanceTable != null
                                                                                          && TotalData600.listProfileIds.Contains(m.Att_AttendanceTable.ProfileID)
                                                                                          && m.Att_AttendanceTable.IsDelete == null
                                                                                          && m.WorkDate <= CutOffDuration.BackPayTo
                                                                                          && m.WorkDate >= CutOffDuration.BackPayFrom
                                                                                          ).Select(x => new Att_AttendanceTableItemEntity
                                                                                          {
                                                                                              LeaveDays = x.LeaveDays,
                                                                                              LeaveTypeID = x.LeaveTypeID,
                                                                                              ProfileID = x.Att_AttendanceTable.ProfileID,
                                                                                              IsDelete = x.Att_AttendanceTable.IsDelete,
                                                                                              WorkDate = x.WorkDate,
                                                                                              ShiftID = x.ShiftID,
                                                                                              AttendanceTableID = x.AttendanceTableID
                                                                                          }).ToList();
                            TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                        }

                        var listAttendanceItem = TotalData600.listAtt_AttendanceTableItemByBackPay.Where(m =>
                                             m.IsDelete != true && m.AttendanceTableID == objAttendanceTableProCut.ID
                                             && m.WorkDate <= CutOffDuration.BackPayTo
                                             && m.WorkDate >= CutOffDuration.BackPayFrom)
                                             .Select(m => m.LeaveTypeID).Where(m => m != null).ToList();

                        foreach (var i in listAttendanceItem)
                        {
                            if (i.HasValue)
                            {
                                var leaveType = TotalDataAll.listLeavedayType.FirstOrDefault(m => m.ID == i);
                                if (leaveType.HasValue())
                                {
                                    if (leaveType.PaidRate != 0)
                                    {
                                        result++;
                                    }
                                }
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_CUTOFFDURATION_BACKPAY_LEAVEDAY_PAIDRATE.ToString(), result, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [14032016][bang.nguyen][64142][new func] Phần tử lương tính số ngày nghỉ theo từng loại ngày nghỉ của kỳ công trừ
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_LEAVE_BACKPAY_", "_LEAVEDAYS"))
            {
                var lstleaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                if (lstleaveDayType.Count > 0)
                {
                    double _sumLeaveDays = 0;
                    var lstleaveDay = new List<Att_LeaveDayEntity>();
                    var lstAttendanceTableItem = new List<Att_AttendanceTableItemEntity>();
                    if (CutOffDuration != null && CutOffDuration.BackPayFrom != null && CutOffDuration.BackPayTo != null)
                    {
                        DateTime _BackPayFrom = CutOffDuration.BackPayFrom.Value;
                        DateTime _BackPayTo = CutOffDuration.BackPayTo.Value;
                        //[14052016][bang.nguyen][67496][Bug]
                        //lay tu cong chi tiet
                        //[17/12/2018][bang.nguyen][102039][bug]
                        lstAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID)
                            .Where(s => s.LeaveTypeID != null && s.WorkDate >= _BackPayFrom && s.WorkDate <= _BackPayTo).ToList();
                    }
                    if (lstAttendanceTableItem.Count > 0)
                    {
                        foreach (var objleaveDayType in lstleaveDayType)
                        {
                            _sumLeaveDays = 0;
                            _sumLeaveDays = lstAttendanceTableItem.Where(s => s.LeaveTypeID == objleaveDayType.ID).Sum(s => s.LeaveDays.Value);
                            item = new ElementFormula("ATT_LEAVE_BACKPAY_" + objleaveDayType.Code + "_LEAVEDAYS", _sumLeaveDays, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var objleaveDayType in lstleaveDayType)
                        {
                            item = new ElementFormula("ATT_LEAVE_BACKPAY_" + objleaveDayType.Code + "_LEAVEDAYS", _sumLeaveDays, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region [14032016][bang.nguyen][64142][new func] phần tử lương tính số ngày đi làm của kỳ công trừ
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_CUTOFFDURATION_BACKPAY_WORKPAIDDAY.ToString()))
            {
                double _sumPaidHourDay = 0;
                if (CutOffDuration != null && CutOffDuration.BackPayFrom != null && CutOffDuration.BackPayTo != null)
                {
                    var objAttTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => ((s.CutOffDurationID != null && s.CutOffDurationID == CutOffDuration.ID) || (s.CutOffDurationID == null && s.MonthYear == CutOffDuration.MonthYear))).FirstOrDefault();
                    if (objAttTable != null && objAttTable.GradeAttendanceID != null)
                    {
                        var objGradeAttendance = TotalDataAll.ListCat_GradeAttendance.Where(s => s.ID == objAttTable.GradeAttendanceID).FirstOrDefault();
                        if (objGradeAttendance != null && objGradeAttendance.HourOnWorkDate != null && objGradeAttendance.HourOnWorkDate.Value != 0)
                        {
                            DateTime _BackPayFrom = CutOffDuration.BackPayFrom.Value;
                            DateTime _BackPayTo = CutOffDuration.BackPayTo.Value;
                            var lstAttTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttTable.ID).Where(s =>
                                                                                               s.WorkPaidHours > 0
                                                                                            && s.WorkDate >= _BackPayFrom
                                                                                            && s.WorkDate <= _BackPayTo).ToList();
                            double _sumWorkPaidHours = lstAttTableItem.Sum(s => s.WorkPaidHours);
                            if (_sumWorkPaidHours != 0)
                            {
                                _sumPaidHourDay = _sumWorkPaidHours / objGradeAttendance.HourOnWorkDate.Value;
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_CUTOFFDURATION_BACKPAY_WORKPAIDDAY.ToString(), _sumPaidHourDay, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [23/12/2016][bang.nguyen][76952][modify]: Tổng ngày nghỉ không lương theo kỳ trừ công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_CUTOFFDURATION_BACKPAY_SUM_LEAVEDAY_NOTSALARY.ToString()))
            {
                double _sumLeaveDays = 0;
                if (CutOffDuration.BackPayFrom.HasValue && CutOffDuration.BackPayTo.HasValue)
                {
                    using (var context = new VnrHrmDataContext())
                    {
                        var unitOfWork = (IUnitOfWork)new UnitOfWork(context);


                        string nameTableGetData = "listAtt_AttendanceTableItemByBackPay";
                        if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                        {
                            TotalData600.listAtt_AttendanceTableItemByBackPay = unitOfWork.CreateQueryable<Att_AttendanceTableItem>(m => m.IsDelete != true
                                                                                    && m.Att_AttendanceTable != null
                                                                                    && TotalData600.listProfileIds.Contains(m.Att_AttendanceTable.ProfileID)
                                                                                    && m.Att_AttendanceTable.IsDelete == null
                                                                                    && m.WorkDate <= CutOffDuration.BackPayTo
                                                                                    && m.WorkDate >= CutOffDuration.BackPayFrom)
                                                                                    .Select(x => new Att_AttendanceTableItemEntity
                                                                                    {
                                                                                        LeaveDays = x.LeaveDays,
                                                                                        LeaveTypeID = x.LeaveTypeID,
                                                                                        ProfileID = x.Att_AttendanceTable.ProfileID,
                                                                                        IsDelete = x.Att_AttendanceTable.IsDelete,
                                                                                        WorkDate = x.WorkDate,
                                                                                        ShiftID = x.ShiftID,
                                                                                        AttendanceTableID = x.AttendanceTableID
                                                                                    }).ToList();
                            TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                        }
                        var lstLeaveDayTypeID = TotalDataAll.listLeavedayType.Where(s => s.PaidRate == 0).Select(s => s.ID).ToList();
                        if (lstLeaveDayTypeID.Count > 0)
                        {
                            _sumLeaveDays = TotalData600.listAtt_AttendanceTableItemByBackPay.Where(s => s.ProfileID == profileItem.ID
                                                                                                      && s.WorkDate >= CutOffDuration.BackPayFrom.Value
                                                                                                      && s.WorkDate <= CutOffDuration.BackPayTo.Value
                                                                                                      && s.LeaveTypeID != null
                                                                                                      && lstLeaveDayTypeID.Contains(s.LeaveTypeID.Value)
                                                                                                      && s.LeaveDays != null).Sum(s => s.LeaveDays.Value);
                        }
                    }
                }
                //Tổng ngày nghỉ không lương theo kỳ trừ công
                item = new ElementFormula(PayrollElement.ATT_CUTOFFDURATION_BACKPAY_SUM_LEAVEDAY_NOTSALARY.ToString(), _sumLeaveDays, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [01122015][bang.nguyen][60648][new func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_CUTOFFDURATION_BACKPAY_LEAVEDAY_NOTSALARY.ToString()))
            {
                int _countDayNotSalary = 0;
                if (CutOffDuration.BackPayFrom.HasValue && CutOffDuration.BackPayTo.HasValue)
                {
                    string status = string.Empty;
                    string nameTableGetData = "listAtt_LeaveDayBackPay";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        Sal_GetDataComputePayrollKZServices getDataComputePayrollServices = new Sal_GetDataComputePayrollKZServices();
                        getDataComputePayrollServices.UserLogin = TotalDataAll.UserLogin;
                        TotalData600.listAtt_LeaveDayBackPay = getDataComputePayrollServices.GetLeaveDayByTimeLine(TotalData600.strOrderByProfile, CutOffDuration.BackPayFrom.Value, CutOffDuration.BackPayTo.Value, ref status);
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }
                    if (!string.IsNullOrEmpty(status))
                    {
                        TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_CUTOFFDURATION_BACKPAY_LEAVEDAY_NOTSALARY.ToString() + ") ";
                    }
                    else
                    {
                        DateTime _dateBackPayTo = CutOffDuration.BackPayTo.Value;
                        DateTime _dateBackPayFrom = CutOffDuration.BackPayFrom.Value;
                        // GET LeaveDayTypeID loại nghỉ không lương
                        List<Guid> lstLeaveDayTypeID = TotalDataAll.listLeavedayType.Where(s => s.PaidRate == 0).Select(s => s.ID).ToList();

                        if (lstLeaveDayTypeID.Count > 0)
                        {
                            // DS nghỉ theo timeline
                            var lstAtt_LeaveDay = new List<Att_LeaveDay>().Select(s => new Att_LeaveDayEntity
                            {
                                ID = s.ID,
                                DateStart = s.DateStart,
                                DateEnd = s.DateEnd
                            }).ToList();

                            lstAtt_LeaveDay = TotalData600.listAtt_LeaveDayBackPay.Where(s =>
                                                s.DateStart <= CutOffDuration.BackPayTo.Value
                                                && s.DateEnd >= CutOffDuration.BackPayFrom.Value
                                                && s.Status == AttendanceDataStatus.E_APPROVED.ToString()
                                                && lstLeaveDayTypeID.Contains(s.LeaveDayTypeID)
                                                && s.ProfileID == profileItem.ID
                                                ).ToList();

                            // Đếm ngày
                            if (lstAtt_LeaveDay.Count > 0)
                            {
                                for (DateTime dateStart = _dateBackPayFrom; dateStart <= _dateBackPayTo; dateStart = dateStart.AddDays(1))
                                {
                                    var lstAtt_LeaveDayByDate = lstAtt_LeaveDay.Where(s => s.DateStart <= dateStart && s.DateEnd >= dateStart).ToList();
                                    if (lstAtt_LeaveDayByDate.Count > 0)
                                    {
                                        _countDayNotSalary += 1;
                                    }
                                }
                            }
                        }
                    }
                }
                //Tổng ngày nghỉ không lương theo kỳ trừ công
                item = new ElementFormula(PayrollElement.ATT_CUTOFFDURATION_BACKPAY_LEAVEDAY_NOTSALARY.ToString(), _countDayNotSalary, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [19/10/2015][hien.nguyen][New][58520] Tổng các ngày công đi làm để tính tiền cơm: ngày công có ca làm việc, có đi làm và làm >= nữa công của ca làm việc thì được tính 1 công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_TOTAL_WORKDAY_IS_WORKING.ToString()))
            {
                //Biến lưu số ngày
                double CountDay = 0;
                if (objAttendanceTableProCut != null)
                {
                    //DS công chi tiết nhân viên
                    List<Att_AttendanceTableItemEntity> ListAttTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);

                    foreach (var i in ListAttTableItem)
                    {
                        if (i.ShiftID.HasValue)
                        {
                            var ShiftByID = TotalDataAll.listCat_Shift.FirstOrDefault(m => m.ID == i.ShiftID);
                            if (ShiftByID.HasValue() && i.AvailableHours >= (ShiftByID.WorkHours ?? 0 / 2))
                            {
                                CountDay++;
                            }
                        }
                    }
                }

                item = new ElementFormula(PayrollElement.ATT_TOTAL_WORKDAY_IS_WORKING.ToString(), CountDay, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region HienNguyen-17102015-58440 
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_WORKDAY_HDTJOB_4_IN_MONTH_MINUS_DAYOFF.ToString(),
                PayrollElement.ATT_WORKDAY_HDTJOB_5_IN_MONTH_MINUS_DAYOFF.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_END_DATE_HDTJOB_PREV.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDTJOB_4_IN_MONTH_MINUS_DAYOFF.ToString(), 0, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDTJOB_5_IN_MONTH_MINUS_DAYOFF.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);


                    //Ngày bắt đầu và ngày kết thúc của tháng
                    DateTime DateStart = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                    DateTime DateEnd = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1).AddMonths(1).AddDays(-1);

                    //Get List HDT By Profile And From To
                    var ListHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID.HasValue && m.ProfileID == profileItem.ID && m.DateFrom <= DateEnd && (m.DateTo == null || m.DateTo >= DateStart)).ToList();

                    #region tính số ngày làm HDT loại 4
                    List<Hre_HDTJobEntity> ListHDTByProfile_Type = ListHDTByProfile.Where(m => m.Type == EnumDropDown.HDTJobType.E_TYPE4.ToString()).ToList();
                    //Biến lưu số ngày làm HDT loại 4
                    double Day_Type = 0;
                    //Biến tạm lưu datetime
                    DateTime from = new DateTime();
                    DateTime to = new DateTime();
                    double DayOff = 0;
                    foreach (var i in ListHDTByProfile_Type)
                    {
                        //[22102015][bang.nguyen][Bug][58440]
                        //nếu không thỏa điều kiện thì lấy từ ngày là ngày 1 của tháng và đến ngày là ngày cuối của tháng chứ không phải của kì công (tuan.pham confirm)
                        //nếu DateFrom < ngày 1 của tháng thì đếm từ 1 -> DateTo
                        //nếu DateTo = null hoặc DateTo > ngày cuối cùng của tháng thì đếm từ DateFrom -> ngày cuối cùng của tháng
                        //_tmp = i.DateTo != null && i.DateTo <= CutOffDuration.DateEnd ? i.DateTo.Value : CutOffDuration.DateEnd;
                        to = i.DateTo != null && i.DateTo <= DateEnd ? i.DateTo.Value : DateEnd;
                        from = i.DateFrom != null && i.DateFrom >= DateStart ? i.DateFrom.Value : DateStart;

                        DayOff += TotalDataAll.listDayOff.Where(m => (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID) && m.DateOff <= to && m.DateOff >= from && m.Type == EnumDropDown.DayOffType.E_WEEKEND_HLD.ToString()).Count();

                        if (i.DateFrom != null)
                        {
                            //Day_Type += _tmp.Subtract(i.DateFrom != null && i.DateFrom >= CutOffDuration.DateStart ? i.DateFrom.Value : CutOffDuration.DateStart).TotalDays + 1;
                            Day_Type += to.Subtract(from).TotalDays + 1;
                        }
                    }
                    //neu khong co "Hre_HDTJob" thì để là 0 tuan.pham confirm
                    double tempValue = 0;
                    if (Day_Type > 0)
                    {
                        tempValue = Day_Type - DayOff;
                    }
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDTJOB_4_IN_MONTH_MINUS_DAYOFF.ToString(), tempValue, 0);
                    listElementFormula.Add(item);
                    #endregion

                    #region tính số ngày làm HDT loại 5
                    ListHDTByProfile_Type = ListHDTByProfile.Where(m => m.Type == EnumDropDown.HDTJobType.E_TYPE5.ToString()).ToList();
                    //Biến lưu số ngày làm HDT loại 5
                    Day_Type = 0;
                    //Biến tạm lưu datetime
                    from = new DateTime();
                    to = new DateTime();
                    DayOff = 0;
                    foreach (var i in ListHDTByProfile_Type)
                    {
                        //[22102015][bang.nguyen][58440]
                        //nếu không thỏa điều kiện thì lấy từ ngày là ngày 1 của tháng và đến ngày là ngày cuối của tháng chứ không phải của kì công (tuan.pham confirm)
                        //nếu DateFrom < ngày 1 của tháng thì đếm từ 1 -> DateTo
                        //nếu DateTo = null hoặc DateTo > ngày cuối cùng của tháng thì đếm từ DateFrom -> ngày cuối cùng của tháng
                        //_tmp = i.DateTo != null && i.DateTo <= CutOffDuration.DateEnd ? i.DateTo.Value : CutOffDuration.DateEnd;
                        to = i.DateTo != null && i.DateTo <= DateEnd ? i.DateTo.Value : DateEnd;
                        from = i.DateFrom != null && i.DateFrom >= DateStart ? i.DateFrom.Value : DateStart;

                        DayOff += TotalDataAll.listDayOff.Where(m => (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID) && m.DateOff <= to && m.DateOff >= from && m.Type == EnumDropDown.DayOffType.E_WEEKEND_HLD.ToString()).Count();

                        if (i.DateFrom != null)
                        {
                            //Day_Type += _tmp.Subtract(i.DateFrom != null && i.DateFrom >= CutOffDuration.DateStart ? i.DateFrom.Value : CutOffDuration.DateStart).TotalDays + 1;
                            Day_Type += to.Subtract(from).TotalDays + 1;
                        }
                    }
                    //neu khong co "Hre_HDTJob" thì để là 0 tuan.pham confirm
                    tempValue = 0;
                    if (Day_Type > 0)
                    {
                        tempValue = Day_Type - DayOff;
                    }
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDTJOB_5_IN_MONTH_MINUS_DAYOFF.ToString(), tempValue, 0);
                    listElementFormula.Add(item);
                    #endregion
                }
            }
            #endregion

            #region HienNguyen-13102015-58174
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_SENIORITY_BONUS.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);

                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_SENIORITY_BONUS.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.ATT_SENIORITY_BONUS.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);
                    var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);
                    //Lấy ngày vào làm hoặc ngày vào làm lại
                    DateTime DateHireOrComback = Hre_StopWorkingServices.GetDateHileOrDateComback(listStopWorkingByProfile, profileItem, CutOffDuration.DateEnd);
                    //Lấy hợp đồng gầ nhất
                    var ContractByProfile = listContractByProfileDic.Where(m => m.ProfileID != null && m.ProfileID == profileItem.ID && (m.Type == EnumDropDown.TypeContract.E_APPRENTICESHIP.ToString() || m.Type == EnumDropDown.TypeContract.E_PROBATION.ToString()) && m.DateStart <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateStart).FirstOrDefault();

                    double CountMonth = 0;
                    //Thời gian thử việc và học việc
                    double DateMinud = 0;
                    //1 người chỉ 1 hợp đồng, tuấn phạm đã confirm
                    if (ContractByProfile != null && ContractByProfile.DateExtend.HasValue)
                    {
                        DateMinud = ((ContractByProfile.DateExtend.Value.Year - ContractByProfile.DateStart.Year) * 12) + ContractByProfile.DateExtend.Value.Month - ContractByProfile.DateStart.Month;
                    }

                    //Trường hợp ko có ngày vào làm lại
                    if (profileItem.DateHire.HasValue && DateHireOrComback == profileItem.DateHire)
                    {
                        CountMonth = ((CutOffDuration.MonthYear.Year - profileItem.DateHire.Value.Year) * 12) + CutOffDuration.MonthYear.Month - profileItem.DateHire.Value.Month;
                        CountMonth -= DateMinud;
                    }
                    else//Trường hợp có ngày vào làm lại
                    {
                        if (ContractByProfile != null && ContractByProfile.DateExtend.HasValue && DateHireOrComback <= ContractByProfile.DateExtend.Value && DateHireOrComback >= ContractByProfile.DateStart)
                        {
                            CountMonth = ((CutOffDuration.MonthYear.Year - DateHireOrComback.Year) * 12) + CutOffDuration.MonthYear.Month - DateHireOrComback.Month;
                            DateMinud = ((ContractByProfile.DateExtend.Value.Year - DateHireOrComback.Year) * 12) + ContractByProfile.DateExtend.Value.Month - DateHireOrComback.Month;
                            CountMonth -= DateMinud;
                        }
                        else
                        {
                            CountMonth = ((CutOffDuration.MonthYear.Year - DateHireOrComback.Year) * 12) + CutOffDuration.MonthYear.Month - DateHireOrComback.Month;
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_SENIORITY_BONUS.ToString(), CountMonth, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region 57190
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES.ToString(), PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_AFTER.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lây bảng công chi tiết theo profile
                var ListAttTableItemByProfile = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                //có thay đổi lương
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                    SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                    if (SalaryProfile.Count > 0 && SalaryProfile.FirstOrDefault().DateOfEffect > CutOffDuration.DateStart)//có thay đổi lương trong tháng
                    {
                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                        DateTime dateStart1 = CutOffDuration.DateStart;
                        DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                        item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES.ToString(), ListAttTableItemByProfile.Where(m => m.WorkDate < dateStart2).Sum(m => m.LateEarlyMinutes), 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_AFTER.ToString(), ListAttTableItemByProfile.Where(m => m.WorkDate >= dateStart2).Sum(m => m.LateEarlyMinutes), 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES.ToString(), ListAttTableItemByProfile.Sum(m => m.LateEarlyMinutes), 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_AFTER.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES.ToString(), ListAttTableItemByProfile.Sum(m => m.LateEarlyMinutes), 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_AFTER.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Tung.Tran 0095765: Thêm phần tử lương tháng n-1
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_PREV.ToString(), PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_AFTER_PREV.ToString() }))
            {
                string status = string.Empty;
                if (cutOffDurationPre != null)
                {
                    string nameTableGetData = "listAttendanceTableItemPre_N_1";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        TotalData600.listAttendanceTableItemPre_N_1 = dataComputeSer.GetAttendanceTableItemLastMonth(TotalData600, cutOffDurationPre, ref status);
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }
                    //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông lưu store lỗi
                    if (!string.IsNullOrEmpty(status))
                    {
                        TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_PREV.ToString() + ") ";

                        item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_PREV.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_AFTER_PREV.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                        //Lấy bảng công chi tiết theo profile
                        var ListAttTableItemByProfile = TotalData600.listAttendanceTableItemPre_N_1.Where(m => m.ProfileID == profileItem.ID).ToList();

                        //có thay đổi lương
                        if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= cutOffDurationPre.DateEnd).ToList(), cutOffDurationPre.DateStart, cutOffDurationPre.DateEnd, profileItem.ID))
                        {
                            List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                            SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= cutOffDurationPre.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                            if (SalaryProfile.Count > 0 && SalaryProfile.FirstOrDefault().DateOfEffect > cutOffDurationPre.DateStart)//có thay đổi lương trong tháng
                            {
                                //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                                DateTime dateStart1 = cutOffDurationPre.DateStart;
                                DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                                item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_PREV.ToString(), ListAttTableItemByProfile.Where(m => m.WorkDate < dateStart2).Sum(m => m.LateEarlyMinutes), 0);
                                listElementFormula.Add(item);
                                item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_AFTER_PREV.ToString(), ListAttTableItemByProfile.Where(m => m.WorkDate >= dateStart2).Sum(m => m.LateEarlyMinutes), 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_PREV.ToString(), ListAttTableItemByProfile.Sum(m => m.LateEarlyMinutes), 0);
                                listElementFormula.Add(item);
                                item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_AFTER_PREV.ToString(), 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_PREV.ToString(), ListAttTableItemByProfile.Sum(m => m.LateEarlyMinutes), 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_AFTER_PREV.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_PREV.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_COUNT_LATE_EARLY_MINUTES_AFTER_PREV.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Các ngày dayoff 57149
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_E_HOLIDAY_HLD.ToString(), PayrollElement.ATT_E_HOLIDAY.ToString(), PayrollElement.ATT_E_WEEKEND_HLD.ToString(), PayrollElement.ATT_E_OTHER.ToString() }))
            {
                double ATT_E_HOLIDAY_HLD = 0;
                double ATT_E_HOLIDAY = 0;
                double ATT_E_WEEKEND_HLD = 0;
                double ATT_E_OTHER = 0;

                //biến xác định ngày bắt đầu tính ngày nghỉ
                DateTime Start = CutOffDuration.DateStart;

                if (profileItem.DateHire != null && profileItem.DateHire > CutOffDuration.DateStart)
                {
                    Start = profileItem.DateHire.Value;
                }

                var ListDayOff = TotalDataAll.listDayOff.Where(m => m.Type != null && m.DateOff <= CutOffDuration.DateEnd && m.DateOff >= Start).ToList();

                //phòng ban hiện tại
                Hre_WorkHistoryEntity WorkHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();

                if (WorkHistoryByProfile != null && WorkHistoryByProfile.OrganizationStructureID != null)
                {
                    //phòng ban của profile hiện tại
                    Guid OrgByProfile = (Guid)WorkHistoryByProfile.OrganizationStructureID;
                    Cat_OrgStructureEntity _tmp = TotalDataAll.listOrgStructure.FirstOrDefault(m => m.ID == OrgByProfile);
                    List<Guid> ListOrgParent = new List<Guid>();
                    ListOrgParent.Add(OrgByProfile);

                    while (true)
                    {
                        if (_tmp == null || _tmp.ParentID == null)
                        {
                            break;
                        }
                        else
                        {
                            ListOrgParent.Add((Guid)_tmp.ParentID);
                            _tmp = TotalDataAll.listOrgStructure.FirstOrDefault(m => m.ID == _tmp.ParentID);
                        }
                    }

                    //lọc lại dayoff
                    ListDayOff = ListDayOff.Where(m => m.OrgStructureID == null || ListOrgParent.Contains((Guid)m.OrgStructureID)).ToList();

                    foreach (var i in ListDayOff)
                    {
                        if (i.Type == EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString())
                        {
                            ATT_E_HOLIDAY_HLD++;
                        }
                        else if (i.Type == EnumDropDown.DayOffType.E_HOLIDAY.ToString())
                        {
                            ATT_E_HOLIDAY++;
                        }
                        else if (i.Type == EnumDropDown.DayOffType.E_WEEKEND_HLD.ToString())
                        {
                            ATT_E_WEEKEND_HLD++;
                        }
                        else
                        {
                            ATT_E_OTHER++;
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_E_HOLIDAY_HLD.ToString(), ATT_E_HOLIDAY_HLD, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_E_HOLIDAY.ToString(), ATT_E_HOLIDAY, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_E_WEEKEND_HLD.ToString(), ATT_E_WEEKEND_HLD, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_E_OTHER.ToString(), ATT_E_OTHER, 0, "Null");
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_E_HOLIDAY_HLD.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_E_HOLIDAY.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_E_WEEKEND_HLD.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_E_OTHER.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [19/03/2016][HienNguyen][64828] + [27/04/2016][HienNguyen][66950]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_E_HOLIDAY_EMP.ToString(), PayrollElement.ATT_E_HOLIDAY_HLD_EMP.ToString() }))
            {
                double ATT_E_HOLIDAY_EMP = 0;
                double ATT_E_HOLIDAY_HLD_EMP = 0;
                //phòng ban hiện tại
                Hre_WorkHistoryEntity WorkHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();

                List<Guid> ListOrgParent = new List<Guid>();
                if (WorkHistoryByProfile != null && WorkHistoryByProfile.OrganizationStructureID != null)
                {
                    //phòng ban của profile hiện tại
                    Guid OrgByProfile = (Guid)WorkHistoryByProfile.OrganizationStructureID;
                    Cat_OrgStructureEntity _tmp = TotalDataAll.listOrgStructure.FirstOrDefault(m => m.ID == OrgByProfile);
                    ListOrgParent.Add(OrgByProfile);

                    while (true)
                    {
                        if (_tmp == null || _tmp.ParentID == null)
                        {
                            break;
                        }
                        else
                        {
                            ListOrgParent.Add((Guid)_tmp.ParentID);
                            _tmp = TotalDataAll.listOrgStructure.FirstOrDefault(m => m.ID == _tmp.ParentID);
                        }
                    }
                }
                //Ngày bắt đầu vào làm và ngày nghỉ việc
                DateTime _start = CutOffDuration.DateStart;
                DateTime _end = CutOffDuration.DateEnd;

                //[27062016][bang.nguyen][69579][bug]
                var ListDayOff = TotalDataAll.listDayOff.Where(m => (m.Type == EnumDropDown.DayOffType.E_HOLIDAY.ToString() || m.Type == EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString())
                                                                        && m.DateOff >= CutOffDuration.DateStart
                                                                        && m.DateOff <= CutOffDuration.DateEnd).ToList();
                if (profileItem.DateHire != null)
                {
                    ListDayOff = ListDayOff.Where(s => s.DateOff >= profileItem.DateHire).ToList();
                }
                if (profileItem.DateQuit != null)
                {
                    ListDayOff = ListDayOff.Where(s => s.DateOff <= profileItem.DateQuit.Value.AddDays(-1)).ToList();
                }
                //loc lai listdayoff theo phong ban neu co phong ban
                if (ListOrgParent.Count > 0)
                {
                    //lọc lại dayoff
                    ListDayOff = ListDayOff.Where(m => m.OrgStructureID == null || ListOrgParent.Contains((Guid)m.OrgStructureID)).ToList();
                }
                if (ListDayOff.Count > 0)
                {
                    DateTime dateMaxDayOff = ListDayOff.Max(s => s.DateOff);
                    DateTime dateMinDayOff = ListDayOff.Min(s => s.DateOff);
                    var lstLeaveDayByProfile = new List<Att_LeaveDayEntity>();
                    //Lấy loại nghỉ thai sản
                    //[04/04/2016][HienNguyen][65813] Modify theo task
                    //var objleaveDayType_PRG = TotalDataAll.listLeavedayType.Where(m => m.Code == "PRG").FirstOrDefault();
                    //lấy ngày nghỉ loại thai sản của nhân viên thuoc dayoff

                    //[27/04/2016][HienNguyen][66950]
                    //Bỏ logic cũ, thay vào là lấy những ngày nghỉ đã được duyệt
                    lstLeaveDayByProfile = TotalDataAll.dicLeaveDay.GetValueOrNew(profileItem.ID).Where(s => s.ProfileID == profileItem.ID
                                                                                && s.DateStart <= dateMaxDayOff
                                                                                && s.DateEnd >= dateMinDayOff
                                                                                && s.Status == LeaveDayStatus.E_APPROVED.ToString()
                                                                                ).ToList();

                    //co nghi thai san trong ki luong
                    if (lstLeaveDayByProfile.Count > 0)
                    {
                        foreach (var i in ListDayOff)
                        {
                            //Kiểm tra loại bỏ các ngày nghỉ thai sản
                            //Hart Code chỉ tính loại nghỉ thai sản có mã là PRG
                            if (lstLeaveDayByProfile.Any(m => i.DateOff <= m.DateEnd && i.DateOff >= m.DateStart))
                            {
                                continue;
                            }
                            if (i.Type == EnumDropDown.DayOffType.E_HOLIDAY.ToString())
                            {
                                ATT_E_HOLIDAY_EMP++;
                            }
                            else if (i.Type == EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString())
                            {
                                ATT_E_HOLIDAY_HLD_EMP++;
                            }
                        }
                        item = new ElementFormula(PayrollElement.ATT_E_HOLIDAY_EMP.ToString(), ATT_E_HOLIDAY_EMP, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_E_HOLIDAY_HLD_EMP.ToString(), ATT_E_HOLIDAY_HLD_EMP, 0, "Null");
                        listElementFormula.Add(item);
                    }
                    else // khong nghi thai san trong ki luong
                    {
                        ATT_E_HOLIDAY_EMP = ListDayOff.Where(s => s.Type == EnumDropDown.DayOffType.E_HOLIDAY.ToString()).Count();
                        ATT_E_HOLIDAY_HLD_EMP = ListDayOff.Where(s => s.Type == EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString()).Count();
                        item = new ElementFormula(PayrollElement.ATT_E_HOLIDAY_EMP.ToString(), ATT_E_HOLIDAY_EMP, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_E_HOLIDAY_HLD_EMP.ToString(), ATT_E_HOLIDAY_HLD_EMP, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_E_HOLIDAY_EMP.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_E_HOLIDAY_HLD_EMP.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Tổng lương bộ phận của nhân viên 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_SALARY_DEPARTMENT.ToString()))
            {

                string status = string.Empty;
                dataComputeSer.GetListSalaryDepartmentItem(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_SALARY_DEPARTMENT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_SALARY_DEPARTMENT.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
                else
                {
                    var listSalaryDepartmentItemByProfile = TotalData600.dicSalaryDepartmentItem.GetValueOrNew(profileItem.ID);
                    if (listSalaryDepartmentItemByProfile.Count > 0)
                    {
                        var AmountSalary = listSalaryDepartmentItemByProfile.Where(m => m.ProfileID == profileItem.ID).Sum(m => m.AmoutSalary);
                        item = new ElementFormula(PayrollElement.SAL_SALARY_DEPARTMENT.ToString(), AmountSalary != null ? AmountSalary : 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_SALARY_DEPARTMENT.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region SAL_SALARY_DATE_CLOSE
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_SALARY_DATE_CLOSE.ToString()))
            {
                Cat_GradePayrollEntity CatGradePayrollItem = TotalDataAll.listCat_GradePayroll.Where(m => m.ID == FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd).ID).FirstOrDefault();
                if (CatGradePayrollItem != null && CatGradePayrollItem.SalaryDayClose != null)
                {
                    item = new ElementFormula(PayrollElement.SAL_SALARY_DATE_CLOSE.ToString(), CatGradePayrollItem.SalaryDayClose, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_SALARY_DATE_CLOSE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Giữ lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.SAL_HOLD_SALARY.ToString(),
                PayrollElement.SAL_HOLD_SALARY_AFTERTAX.ToString() }))
            {

                var listHoldSalaryByProfile = TotalDataAll.dicHoldSalary.GetValueOrNew(profileItem.ID);
                DateTime _tmpCutoffDuration = CutOffDuration.MonthYear.AddMonths(-1);
                Sal_HoldSalaryEntity holdSalaryItem = listHoldSalaryByProfile.Where(m => m.ProfileID == profileItem.ID
                    && m.MonthEndSalary != null
                    && m.Status == EnumDropDown.WorkdayStatus.E_APPROVED.ToString()
                    && m.MonthEndSalary.Value.Month == _tmpCutoffDuration.Month
                    && m.MonthEndSalary.Value.Year == _tmpCutoffDuration.Year).FirstOrDefault();

                if (holdSalaryItem != null)
                {
                    item = new ElementFormula(PayrollElement.SAL_HOLD_SALARY.ToString(), holdSalaryItem.AmountSalary, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_HOLD_SALARY_AFTERTAX.ToString(), holdSalaryItem.AmountSalaryAfterTax, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_HOLD_SALARY.ToString(), 0, 0, "null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_HOLD_SALARY_AFTERTAX.ToString(), 0, 0, "null");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region SAL_SALARY_ACCOUNT_NO
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_SALARY_ACCOUNT_NO.ToString(), PayrollElement.SAL_SALARY_BRANCH_PROVINCENAME.ToString(), PayrollElement.SAL_SALARY_ACCOUNT_NAME.ToString(), PayrollElement.SAL_SALARY_GROUP_BANK.ToString(), PayrollElement.SAL_SALARY_BANK_NAME.ToString(), PayrollElement.SAL_SALARY_BANK_CODE.ToString() }))
            {
                Sal_SalaryInformationEntity SalaryInfomationByProfile = TotalDataAll.dicSalaryInformation.GetValueOrNew(profileItem.ID).FirstOrDefault(m => m.ProfileID == profileItem.ID);
                if (SalaryInfomationByProfile != null)
                {
                    item = new ElementFormula(PayrollElement.SAL_SALARY_ACCOUNT_NO.ToString(), SalaryInfomationByProfile.AccountNo, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_ACCOUNT_NAME.ToString(), SalaryInfomationByProfile.AccountName, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_BRANCH_PROVINCENAME.ToString(), SalaryInfomationByProfile.ProvinceName, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_GROUP_BANK.ToString(), SalaryInfomationByProfile.GroupBank, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_BANK_NAME.ToString(), SalaryInfomationByProfile.BankName, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_BANK_CODE.ToString(), SalaryInfomationByProfile.BankCode, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_SALARY_ACCOUNT_NO.ToString(), "", 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_BRANCH_PROVINCENAME.ToString(), "", 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_ACCOUNT_NAME.ToString(), "", 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_GROUP_BANK.ToString(), "", 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_BANK_NAME.ToString(), "", 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_SALARY_BANK_CODE.ToString(), "", 0, "Null");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Các loại phụ cấp đi theo lương cơ bản
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_1.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_2.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_3.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_4.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_5.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_6.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_7.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_8.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_9.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_10.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_11.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_12.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_13.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_14.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_15.ToString() }))
            {
                Sal_BasicSalaryEntity BasciSalaryByProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (BasciSalaryByProfile != null)
                {
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_1.ToString(), BasciSalaryByProfile.AllowanceAmount1 != null ? BasciSalaryByProfile.AllowanceAmount1.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_2.ToString(), BasciSalaryByProfile.AllowanceAmount2 != null ? BasciSalaryByProfile.AllowanceAmount2.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_3.ToString(), BasciSalaryByProfile.AllowanceAmount3 != null ? BasciSalaryByProfile.AllowanceAmount3.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_4.ToString(), BasciSalaryByProfile.AllowanceAmount4 != null ? BasciSalaryByProfile.AllowanceAmount4.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_5.ToString(), BasciSalaryByProfile.AllowanceAmount5 != null ? BasciSalaryByProfile.AllowanceAmount5.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_6.ToString(), BasciSalaryByProfile.AllowanceAmount6 != null ? BasciSalaryByProfile.AllowanceAmount6.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_7.ToString(), BasciSalaryByProfile.AllowanceAmount7 != null ? BasciSalaryByProfile.AllowanceAmount7.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_8.ToString(), BasciSalaryByProfile.AllowanceAmount8 != null ? BasciSalaryByProfile.AllowanceAmount8.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_9.ToString(), BasciSalaryByProfile.AllowanceAmount9 != null ? BasciSalaryByProfile.AllowanceAmount9.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_10.ToString(), BasciSalaryByProfile.AllowanceAmount10 != null ? BasciSalaryByProfile.AllowanceAmount10.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_11.ToString(), BasciSalaryByProfile.AllowanceAmount11 != null ? BasciSalaryByProfile.AllowanceAmount11.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_12.ToString(), BasciSalaryByProfile.AllowanceAmount12 != null ? BasciSalaryByProfile.AllowanceAmount12.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_13.ToString(), BasciSalaryByProfile.AllowanceAmount13 != null ? BasciSalaryByProfile.AllowanceAmount13.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_14.ToString(), BasciSalaryByProfile.AllowanceAmount14 != null ? BasciSalaryByProfile.AllowanceAmount14.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_15.ToString(), BasciSalaryByProfile.AllowanceAmount15 != null ? BasciSalaryByProfile.AllowanceAmount15.GetDouble() : 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_3.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_4.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_5.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_6.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_7.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_8.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_9.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_10.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_11.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_12.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_13.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_14.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_15.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Các loại tiền tệ đi theo lương cơ bản
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_1.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_2.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_3.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_4.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_5.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_6.ToString(), PayrollElement.SAL_BASICSALARY_CURRENCY.ToString()
        , PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_7.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_8.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_9.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_10.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_11.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_12.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_13.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_14.ToString(), PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_15.ToString()}))
            {
                Sal_BasicSalaryEntity BasciSalaryByProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (BasciSalaryByProfile != null)
                {
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_CURRENCY.ToString(), BasciSalaryByProfile.CurrencyName, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_1.ToString(), BasciSalaryByProfile.CurrencyName1, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_2.ToString(), BasciSalaryByProfile.CurrencyName2, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_3.ToString(), BasciSalaryByProfile.CurrencyName3, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_4.ToString(), BasciSalaryByProfile.CurrencyName4, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_5.ToString(), BasciSalaryByProfile.CurrencyName5, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_6.ToString(), BasciSalaryByProfile.CurrencyName6, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_7.ToString(), BasciSalaryByProfile.CurrencyName7, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_8.ToString(), BasciSalaryByProfile.CurrencyName8, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_9.ToString(), BasciSalaryByProfile.CurrencyName9, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_10.ToString(), BasciSalaryByProfile.CurrencyName10, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_11.ToString(), BasciSalaryByProfile.CurrencyName11, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_12.ToString(), BasciSalaryByProfile.CurrencyName12, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_13.ToString(), BasciSalaryByProfile.CurrencyName13, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_14.ToString(), BasciSalaryByProfile.CurrencyName14, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_15.ToString(), BasciSalaryByProfile.CurrencyName15, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_1.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_2.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_3.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_4.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_5.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_6.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_7.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_8.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_9.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_10.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_11.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_12.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_13.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_14.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_BASICSALARY_CURRENCY_15.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Cac phần tử lấy kết quả của phần tử lương nhóm
            //Cho phép phần tử lương gọi phần tử lương nhóm
            //[17/01/2018][bang.nguyen][92410][Modify Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, "GROUP_DYN_SUM_", "_BYCODEELEMENTGROUP"))
            {
                var strStartsWith = "GROUP_DYN_SUM_";
                var strEndWith = "_BYCODEELEMENTGROUP";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();
                if (TotalData600.ListSal_PayrollGroupTable != null && TotalData600.ListSal_PayrollGroupTable.Count > 0)
                {
                    var listPayrollGroupTableID = TotalData600.ListSal_PayrollGroupTable.Where(s => s.ProfileID == profileItem.ID && s.CutOffDurationID == CutOffDuration.ID).Select(s => s.ID).ToList();

                    if (listPayrollGroupTableID.Count > 0)
                    {
                        var listPayrollGroupTableItem = TotalData600.ListSal_PayrollGroupTableItem.Where(s => listPayrollGroupTableID.Contains(s.PayrollGroupTableID)).ToList();
                        if (listPayrollGroupTableItem.Count > 0)
                        {
                            double doubleTry = 0;
                            foreach (var formulaitem in ListFormula)
                            {
                                var _formula = formulaitem;
                                double sumValue = 0;
                                var codeElementGroup = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                                try
                                {
                                    sumValue = listPayrollGroupTableItem.Where(s => s.ValueType == EnumDropDown.ElementDataType.Double.ToString()
                                            && s.Code == codeElementGroup
                                            && !string.IsNullOrEmpty(s.Value)
                                            && double.TryParse(s.E_Value.Decrypt(), out doubleTry))
                                            .Sum(s => double.Parse(s.E_Value.Decrypt()));
                                }
                                catch (Exception)
                                {
                                    sumValue = 0;
                                }
                                item = new ElementFormula(_formula, sumValue, 0);
                                listElementFormula.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                        else
                        {
                            foreach (var formulaitem in ListFormula)
                            {
                                item = new ElementFormula(formulaitem, 0, 0);
                                listElementFormula.Add(item);
                                //xoa cac enum da xu ly trong list enum tong
                                formula.Remove(formulaitem);
                            }
                        }
                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
            }
            #endregion

            #region Phần tử Hold Lương

            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.HoldSalaryItem.ToString().ToUpper() + "_", TotalDataAll.listElement_All.Select(m => m.ElementCode).ToArray()))
            {
                Sys_AttOvertimePermitConfigServices Sys_Services = new Sys_AttOvertimePermitConfigServices();
                string ElementConfig = Sys_Services.GetConfigValue<string>(AppConfig.HRM_SAL_HOLDSALARY_ELEMENT);
                List<string> listElementByConfig = ElementConfig != string.Empty ? ElementConfig.Split(',').ToList() : new List<string>();
                List<Cat_ElementEntity> listElement = TotalDataAll.listElement_All.Where(m => listElementByConfig.Contains(m.ElementCode)).ToList();

                string status = string.Empty;
                dataComputeSer.GetDicHoldSalaryItem(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + CatElementType.HoldSalaryItem.ToString() + ") ";

                    foreach (var i in listElement)
                    {

                        item = new ElementFormula(CatElementType.HoldSalaryItem.ToString().ToUpper() + "_" + i.ElementCode, 0, 0);
                        listElementFormula.Add(item);
                    }

                }
                else
                {
                    var listHoldSalaryItemByProfileDic = TotalData600.dicHoldSalaryItem.GetValueOrNew(profileItem.ID);
                    List<Sal_HoldSalaryItemEntity> listHoldSalaryByProfile = listHoldSalaryItemByProfileDic.Where(m => m.ProfileID != null && m.ProfileID == profileItem.ID && m.MonthEndSalary != null && m.MonthEndSalary.Value.Year == CutOffDuration.MonthYear.Year && m.MonthEndSalary.Value.Month == CutOffDuration.MonthYear.Month).ToList();

                    foreach (var i in listElement)
                    {
                        List<Sal_HoldSalaryItemEntity> listHoldSalaryByProfileAndElement = listHoldSalaryByProfile.Where(m => m.ElementID != null && m.ElementID == i.ID).ToList();

                        item = new ElementFormula(CatElementType.HoldSalaryItem.ToString().ToUpper() + "_" + i.ElementCode, listHoldSalaryByProfileAndElement.Sum(m => m.Value != null ? m.Value : 0), 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region Lấy giá trị cho các loại phần tử là Hoa Hồng

            #region Phần tử lương hoa hồng đã tính được, trong bảng Sal_PaycCommission
            if (CheckIsExistFormula(listElementFormula, ref formula, "ELEMENT" + CatElementType.Comission.ToString().ToUpper() + "_", ""))
            {
                List<Cat_ElementEntity> listElementByCommission = TotalDataAll.listElement_All.Where(m => m.MethodPayroll == MethodPayroll.E_COMMISSION_PAYMENT.ToString()).ToList();
                if (TotalDataAll.listPayCommissionItem != null)
                {
                    //duyệt wa tất cả các phần tử
                    foreach (var element in listElementByCommission)
                    {
                        string elementCode = element.ElementCode.Replace("ELEMENT" + CatElementType.Comission.ToString().ToUpper() + "_", "");
                        var PayCommissionItem = TotalDataAll.listPayCommissionItem.Where(m => m.ProfileID == profileItem.ID && m.Code.ReplaceSpace() == elementCode.ReplaceSpace()).ToList();
                        if (PayCommissionItem != null)
                        {
                            item = new ElementFormula("ELEMENT" + CatElementType.Comission.ToString().ToUpper() + "_" + element.ElementCode, PayCommissionItem.Sum(m => (m.Value.ToDouble() ?? 0)), 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula("ELEMENT" + CatElementType.Comission.ToString().ToUpper() + "_" + element.ElementCode, 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var element in listElementByCommission)
                    {
                        item = new ElementFormula("ELEMENT" + CatElementType.Comission.ToString().ToUpper() + "_" + element.ElementCode, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Lấy dữ liệu các phần tử là tổng số lượng chức vụ (Position) trong shop
            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.Comission.ToString().ToUpper() + "_COUNTPOSITION_", ""))
            {
                using (var context = new VnrHrmDataContext())
                {
                    var unitOfWork = (IUnitOfWork)(new UnitOfWork(context));
                    var repoProfile = new CustomBaseRepository<Hre_Profile>(unitOfWork);
                    var repoWorkHistory = new CustomBaseRepository<Hre_WorkHistory>(unitOfWork);
                    if (TotalDataAll.listPosition != null && TotalDataAll.listPosition.Count > 0)
                    {
                        ///[11/-6/2016][HienNguyen][68796]
                        var historyProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).OrderByDescending(m => m.DateEffective).FirstOrDefault(m => m.ProfileID == profileItem.ID);
                        //[24/10/2015][hien.nguyen][Modify][58909]
                        Guid? ShopID = historyProfile != null ? historyProfile.ShopID : null;

                        //Lấy số lượng chức danh theo WorkHistory
                        var listWorkHistory = repoWorkHistory.FindBy(m => m.IsDelete != true && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).Select(m => new { m.ProfileID, m.DateEffective, m.PositionID, m.ShopID }).OrderByDescending(m => m.DateEffective).ToList();
                        listWorkHistory = listWorkHistory.GroupBy(customer => customer.ProfileID).Select(group => group.First()).ToList();
                        //Sau khi lọc ra những dòng có ngày hiệu lực gần nhất, sau đó mới lọc tiếp những dòng có shopid tương ứng
                        listWorkHistory = listWorkHistory.Where(m => m.ShopID == ShopID).ToList();
                        var ListProfileIDs = listWorkHistory.Select(m => m.ProfileID).ToList();

                        List<Guid> ListProfile = repoProfile.FindBy(m => m.IsDelete != true && ListProfileIDs.Contains(m.ID) && (m.DateQuit == null || m.DateQuit > CutOffDuration.DateEnd)).Select(m => m.ID).ToList();
                        listWorkHistory = listWorkHistory.Where(m => m.ProfileID.HasValue() && ListProfile.Contains((Guid)m.ProfileID)).ToList();

                        List<Guid> ListWorkHistoryByProfileIDs = listWorkHistory.Select(m => m.ProfileID).ToList();

                        //[28/10/2015][hien.nguyen][Modify][59064]
                        //Lọc đặt thù khi tính lương hoa hồng cá nhân
                        //Có Công Thực Tế = 0 (Nghỉ Thai Sản từ 26/06-25/07)
                        var LitsAttendanceTableByProfile = unitOfWork.CreateQueryable<Att_AttendanceTable>(m => m.IsDelete != true && ListWorkHistoryByProfileIDs.Contains(m.ProfileID) && m.CutOffDurationID == CutOffDuration.ID && m.RealWorkDayCount == 0).Select(m => m.ProfileID).ToList();

                        //Có Ngày Nghỉ Việc <=  Ngày Bắt Đầu Của Tháng Tính Lương
                        DateTime DateStart = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                        var ListProfileIDByWorkHistory = unitOfWork.CreateQueryable<Hre_Profile>(m => m.IsDelete != true && ListWorkHistoryByProfileIDs.Contains(m.ID)).Select(m => new { m.ID, m.CodeAttendance, m.DateQuit, m.DateEndProbation }).ToList();

                        //Có Hre_Profile.DateEndProbation > DateEnd của Cat_OffDuration
                        var ListContractByProfileID = ListProfileIDByWorkHistory.Where(m => m.DateEndProbation.HasValue && m.DateEndProbation > CutOffDuration.DateEnd).Select(m => m.ID).ToList();

                        //Loại bỏ các nhân viên rơi vào 3 trường hợp trên
                        var ListProfileIDByWorkHistoryFilter = ListProfileIDByWorkHistory.Where(m => (m.DateQuit.HasValue && m.DateQuit <= DateStart)).Select(m => m.ID).ToList();
                        listWorkHistory = listWorkHistory.Where(m => !ListContractByProfileID.Contains(m.ProfileID) && !LitsAttendanceTableByProfile.Contains(m.ProfileID) && !ListProfileIDByWorkHistoryFilter.Contains(m.ProfileID)).ToList();

                        //Có cùng mã chấm công
                        var ListProfileIDByGroupCodeAttendance = ListProfileIDByWorkHistory.GroupBy(m => m.CodeAttendance).Select(m => m.First()).Select(m => m.ID).ToList();
                        listWorkHistory = listWorkHistory.Where(m => ListProfileIDByGroupCodeAttendance.Contains(m.ProfileID)).ToList();

                        foreach (var j in TotalDataAll.listPosition)
                        {
                            listElementFormula.Add(new ElementFormula(CatElementType.Comission.ToString().ToUpper() + "_COUNTPOSITION_" + j.Code, listWorkHistory.Where(m => m.PositionID == j.ID).Count(), 0));
                        }
                    }
                }
            }
            #endregion

            #region Lấy giá trị cho 2 enum là dòng sản phẩm và sản phẩm
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_COM_PERCENT_SHOP_LINEITEM.ToString(), PayrollElement.SAL_COM_PERCENT_SHOP_ITEM.ToString() }))
            {
                ///[11/-6/2016][HienNguyen][68796]
                var historyProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).OrderByDescending(m => m.DateEffective).FirstOrDefault(m => m.ProfileID == profileItem.ID);

                Guid? ShopID = historyProfile != null && historyProfile.ShopID != null ? historyProfile.ShopID : null;

                //HienNguyen- không lấy theo quá trình công tác nữa để tính trường hợp 1 nv làm 2 shop trong tháng
                ////Get WorkHistory By Profile
                //var WorkHistoryByProfile = TotalData600.listWorkHistory.Where(m => m.ProfileID == profileItem.ID).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                //if (WorkHistoryByProfile.HasValue())
                //{
                //    ShopID = WorkHistoryByProfile.ShopID ?? Guid.Empty;
                //}

                //lấy doanh thu của shop trong tháng
                List<Sal_RevenueRecordEntity> revenueShopInMonth = new List<Sal_RevenueRecordEntity>();
                if (ShopID != null)
                {
                    revenueShopInMonth = TotalDataAll.listRevenueRecord.Where(m => m.ShopID == ShopID).ToList();
                }

                //SAL_COM_PERCENT_SHOP_5
                if (revenueShopInMonth.Any(m => m.Type == EnumDropDown.SalesType.E_LINEITEM_MAJOR.ToString()))
                {
                    listElementFormula.Add(new ElementFormula(PayrollElement.SAL_COM_PERCENT_SHOP_LINEITEM.ToString(), revenueShopInMonth.Where(m => m.Type == EnumDropDown.SalesType.E_LINEITEM_MAJOR.ToString()).FirstOrDefault().Amount, 0));
                }
                else
                {
                    listElementFormula.Add(new ElementFormula(PayrollElement.SAL_COM_PERCENT_SHOP_LINEITEM.ToString(), 0, 0));
                }

                //SAL_COM_PERCENT_SHOP_6
                if (revenueShopInMonth.Any(m => m.Type == EnumDropDown.SalesType.E_ITEM_MAJOR.ToString()))
                {
                    listElementFormula.Add(new ElementFormula(PayrollElement.SAL_COM_PERCENT_SHOP_ITEM.ToString(), revenueShopInMonth.Where(m => m.Type == EnumDropDown.SalesType.E_ITEM_MAJOR.ToString()).FirstOrDefault().Amount, 0));
                }
                else
                {
                    listElementFormula.Add(new ElementFormula(PayrollElement.SAL_COM_PERCENT_SHOP_ITEM.ToString(), 0, 0));
                }
            }


            #endregion

            #region Tính giá trị cho phần tử khấu trừ khi có nhân viên ko đủ thâm niên trong shop
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_COM_BONUS_SCV.ToString()))
            {
                using (var context = new VnrHrmDataContext())
                {
                    var unitOfWork = (IUnitOfWork)(new UnitOfWork(context));
                    if (profileItem.ShopID != null)
                    {
                        //tính tiền khấu trừ khi khong đủ thâm niên
                        double Money_Deduction = 0;

                        //Hiện tại đang lấy trong webconfig, sau này sẻ lấy trong bảng setting
                        Money_Deduction = (double)GetObjectValue(TotalDataAll.listElement_All, listElementFormula, TotalDataAll.listElement_All.Where(m => m.ElementCode == ConstantPathWeb.Hrm_Sal_ElementName_Comission).FirstOrDefault().Formula);

                        if (Money_Deduction != 0)//nhân viên này không đủ thâm niên
                        {
                            if (listTmpDeduction.Any(m => m.Key == profileItem.ShopID))//đã có nhân viên ko đủ thâm niên trong shop trước đó
                            {
                                double _tmp = listTmpDeduction.Single(m => m.Key == profileItem.ShopID).Value.Value;
                                int countValue = listTmpDeduction.Single(m => m.Key == profileItem.ShopID).Value.Count;
                                listTmpDeduction.Remove((Guid)profileItem.ShopID);//xóa phần tử trước đó
                                listTmpDeduction.Add((Guid)profileItem.ShopID, new ValueCount(Money_Deduction + _tmp, countValue++));//thêm lại phần tử đó và cập nhật lại value
                            }
                            else//là nhân viên ko đủ thâm niên đầu tiên trong shop
                            {
                                listTmpDeduction.Add((Guid)profileItem.ShopID, new ValueCount(Money_Deduction, 1));//thêm lại phần tử đó và cập nhật lại value
                            }
                            item = new ElementFormula(PayrollElement.SAL_COM_BONUS_SCV.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                        else//nhân viên này đủ thâm niên, kiểm tra xem shop của nhân viên này có nhân viên nào ko đủ thâm niên hay không
                        {
                            if (listTmpDeduction.Any(m => m.Key == profileItem.ShopID))//đã có nhân viên ko đủ thâm niên trong shop trước đó
                            {
                                // Tung.Tran [20/05/2019][0105678]: Kaizen xử lý
                                string nameTableGetData = "listProfileByShop";
                                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                                {
                                    if (TotalData600.listProfileSplit != null)
                                    {
                                        var shopIDs = TotalData600.listProfileSplit.Where(x => x.ShopID != null).Select(x => x.ShopID).ToArray();
                                        TotalData600.listProfileByShop = unitOfWork.CreateQueryable<Hre_Profile>(x => shopIDs.Contains(x.ShopID)).ToList();
                                    }
                                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                                }

                                var countProfileByShop = 0;
                                if (TotalData600.listProfileByShop != null)
                                {
                                    countProfileByShop = TotalData600.listProfileByShop.Where(m => m.ShopID == profileItem.ShopID).Count();
                                }

                                int CountProfile = countProfileByShop - listTmpDeduction.Single(m => m.Key == profileItem.ShopID).Value.Count;
                                item = new ElementFormula(PayrollElement.SAL_COM_BONUS_SCV.ToString(), listTmpDeduction.Single(m => m.Key == profileItem.ShopID).Value.Value / CountProfile, 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.SAL_COM_BONUS_SCV.ToString(), 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_COM_BONUS_SCV.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region Là Đảng viên
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_ISCOMMUNISTPARTYMEMBER_CHECK.ToString().ToUpper(), ""))
            {
                bool? isCommunnuis = false;
                string status = string.Empty;
                dataComputeSer.GetListProfileMoreInfo(TotalData600, ref status);
                if (!string.IsNullOrEmpty(status))
                {

                    TotalData600.statusBugStore += status + " (SAL_ISCOMMUNISTPARTYMEMBER_CHECK) ";
                }

                else
                {
                    if (profileItem.ProfileMoreInfoID != null)
                    {
                        var objProfileMoreInfo = TotalData600.dicHreProfileMoreInfo.GetValueOrNew(profileItem.ProfileMoreInfoID.Value).FirstOrDefault();
                        if (objProfileMoreInfo != null && objProfileMoreInfo.IsCommunistPartyMember != null)
                        {
                            isCommunnuis = objProfileMoreInfo.IsCommunistPartyMember.Value;
                        }
                    }
                    item = new ElementFormula(PayrollElement.SAL_ISCOMMUNISTPARTYMEMBER_CHECK.ToString(), isCommunnuis, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Là Đoàn viên
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_ISYOUTHUNIONIST_CHECK.ToString().ToUpper(), ""))
            {
                bool? isYouthUnionist = false;
                string status = string.Empty;
                dataComputeSer.GetListProfileMoreInfo(TotalData600, ref status);
                if (!string.IsNullOrEmpty(status))
                {

                    TotalData600.statusBugStore += status + " (SAL_ISYOUTHUNIONIST_CHECK) ";
                }

                else
                {
                    if (profileItem.ProfileMoreInfoID != null)
                    {
                        var objProfileMoreInfo = TotalData600.dicHreProfileMoreInfo.GetValueOrNew(profileItem.ProfileMoreInfoID.Value).FirstOrDefault();
                        if (objProfileMoreInfo != null && objProfileMoreInfo.IsYouthUnionist != null)
                        {
                            isYouthUnionist = objProfileMoreInfo.IsYouthUnionist.Value;
                        }
                    }
                }

                item = new ElementFormula(PayrollElement.SAL_ISYOUTHUNIONIST_CHECK.ToString(), isYouthUnionist, 0);
                listElementFormula.Add(item);

            }
            #endregion

            #region Tổng sản lượng thực tế theo kỳ lương Quality
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_PRODUCTIVE_SUMPRODUCTIVE_QUANTITY.ToString().ToUpper(), ""))
            {

                var sumQuantity = TotalDataAll.ListProductive.Where(s => s.ProfileID == profileItem.ProfileID && s.StartDate != null && s.EndDate != null && s.StartDate <= CutOffDuration.DateEnd && s.EndDate >= CutOffDuration.DateStart).ToList().Sum(s => s.Quantity);

                item = new ElementFormula(PayrollElement.SAL_PRODUCTIVE_SUMPRODUCTIVE_QUANTITY.ToString(), sumQuantity, 0);
                listElementFormula.Add(item);

            }
            #endregion


            #region Tổng sản lượng thực tế theo kỳ lương NormsQty
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_PRODUCTIVE_SUMPRODUCTIVE_NORMSQTY.ToString().ToUpper(), ""))
            {
                var sumNormsQty = TotalDataAll.ListProductive.Where(s => s.ProfileID == profileItem.ProfileID && s.StartDate != null && s.EndDate != null && s.StartDate <= CutOffDuration.DateEnd && s.EndDate >= CutOffDuration.DateStart).ToList().Sum(s => s.NormsQty);
                item = new ElementFormula(PayrollElement.SAL_PRODUCTIVE_SUMPRODUCTIVE_NORMSQTY.ToString(), sumNormsQty, 0);
                listElementFormula.Add(item);

            }
            #endregion
            #region Số ngày báo trước nghỉ việc của Loại HĐ khi NLĐ nghỉ việc 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_COUNTDAYLEAVE.ToString().ToUpper(), ""))
            {
                int? day = 0;
                var listStopWorkingByProfile = TotalDataAll.listHre_StopWorking.Where(s => s.ProfileID == profileItem.ID).ToList();
                var objStopWorkingByProfile = listStopWorkingByProfile.Where(
                                      p => p.DateStop != null
                                      && p.StopWorkType == EnumDropDown.StopWorkType.E_STOP.ToString()
                                      && p.DateStop <= CutOffDuration.DateEnd
                                      && p.DateStop >= CutOffDuration.DateStart
                                      && p.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString()
                                      ).OrderByDescending(m => m.DateStop).FirstOrDefault();


                if (objStopWorkingByProfile != null && objStopWorkingByProfile.ContractTypeID != null)
                {
                    var objContractType = TotalDataAll.lstContractType.Where(s => s.ID == objStopWorkingByProfile.ContractTypeID).FirstOrDefault();
                    if (objContractType != null && objContractType.NumberDayQuitJob != null)
                    {
                        day = objContractType.NumberDayQuitJob;
                    }
                }

                item = new ElementFormula(PayrollElement.SAL_COUNTDAYLEAVE.ToString(), day, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Tiền lương BHXH trên HĐ hoặc PLHĐ mới nhất trong kỳ lương 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_INSURANCEAMOUNTCONTRACT.ToString().ToUpper(), ""))
            {
                double? Value = 0;
                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                dataComputeSer.GetListContactExtend(TotalData600, new Hre_ContractExtendEntity(), ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_INSURANCEAMOUNTCONTRACT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_INSURANCEAMOUNTCONTRACT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var lstContractbyProfile = TotalData600.dicContract.GetValueOrNew(profileItem.ID).OrderByDescending(m => m.DateStart);
                    var lstContractExtendbyProfile = TotalData600.dicHreContractExtend.GetValueOrNew(profileItem.ID).OrderByDescending(m => m.DateStart);
                    var objContractCODuration = lstContractbyProfile.Where(s => s.DateStart <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateStart).FirstOrDefault();
                    var objContractExtendCODuration = lstContractExtendbyProfile.Where(s => s.DateStart != null && s.DateStart.Value <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateStart).FirstOrDefault();
                    if (objContractCODuration != null && objContractExtendCODuration != null
                                                        && objContractExtendCODuration.DateStart != null
                                                        && objContractCODuration.E_InsuranceAmount != null
                                                        && objContractExtendCODuration.E_InsuranceAmount != null)
                    {
                        if (objContractCODuration.DateStart > objContractExtendCODuration.DateStart)
                        {
                            Value = objContractCODuration.E_InsuranceAmount.DecryptValue();
                        }
                        else
                        {
                            Value = objContractExtendCODuration.E_InsuranceAmount.DecryptValue();
                        }

                    }

                    else if (objContractCODuration == null && objContractExtendCODuration != null && objContractExtendCODuration.E_InsuranceAmount != null)
                    {
                        Value = objContractExtendCODuration.E_InsuranceAmount.DecryptValue();

                    }
                    else if (objContractExtendCODuration == null && objContractCODuration != null && objContractCODuration.E_InsuranceAmount != null)
                    {
                        Value = objContractCODuration.E_InsuranceAmount.DecryptValue();

                    }
                    else
                    {
                        Value = 0;
                    }
                }
                item = new ElementFormula(PayrollElement.SAL_INSURANCEAMOUNTCONTRACT.ToString(), Value, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Tổng số nhân viên khai báo Thuế trong đơn vị kinh doanh
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_SHOP_COUNTTAXPROFILE.ToString().ToUpper(), ""))
            {
                //var objProfile = TotalDataAll.dicMo.GetValueOrNew(profileItem.ID).OrderByDescending(m => m.DateEffective).FirstOrDefault(m => m.ProfileID == profileItem.ID);
                var CountID = TotalDataAll.listShop.Where(s => s.TaxReturnEmployeeID == profileItem.ID).Select(x => x.ID).Count();

                ElementFormula _tmpitem = new ElementFormula();
                _tmpitem = new ElementFormula();
                _tmpitem.VariableName = "Tổng số nhân viên khai báo Thuế trong đơn vị kinh doanh";
                if (CountID != 0)
                {
                    item = new ElementFormula(PayrollElement.SAL_SHOP_COUNTTAXPROFILE.ToString(), CountID != null ? CountID : 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_SHOP_COUNTTAXPROFILE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }
            #endregion


            #region Lương chuyền trưởng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE.ToString()))
            {

                string status = string.Empty;
                dataComputeSer.GetDicPayrollIncentive(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
                else
                {
                    var listPayrollIncentiveByProfileDic = TotalData600.dicPayrollIncentive.GetValueOrNew(profileItem.ID);
                    if (listPayrollIncentiveByProfileDic.Count > 0)
                    {
                        var AmountSalary = listPayrollIncentiveByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.MonthEffect == CutOffDuration.MonthYear).Sum(m => m.AmountIncentive);
                        item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE.ToString(), AmountSalary != null ? AmountSalary : 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_PAYROLLINCENTIVE_AMOUNTINCENTIVE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion


            #region Lương sản phẩm

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_PRODUCTSALARY_SUMAMOUT.ToString()))
            {

                string status = string.Empty;
                dataComputeSer.GetDicProductSalary(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_PRODUCTSALARY_SUMAMOUT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_PRODUCTSALARY_SUMAMOUT.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
                else
                {
                    var listProductSalaryByProfileDic = TotalData600.dicProductSalary.GetValueOrNew(profileItem.ID);
                    if (listProductSalaryByProfileDic.Count > 0)
                    {
                        var AmountSalary = listProductSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.MonthYear == CutOffDuration.MonthYear).Sum(m => m.Amount);
                        item = new ElementFormula(PayrollElement.SAL_PRODUCTSALARY_SUMAMOUT.ToString(), AmountSalary != null ? AmountSalary : 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_PRODUCTSALARY_SUMAMOUT.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion



            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.Comission.ToString().ToUpper(), ""))
            {
                //lấy doanh thu của shop trong tháng
                List<Sal_RevenueRecordEntity> revenueShopInMonth = new List<Sal_RevenueRecordEntity>();

                var historyProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).OrderByDescending(m => m.DateEffective).FirstOrDefault(m => m.ProfileID == profileItem.ID);
                if (historyProfile != null)
                {
                    if (historyProfile.ShopID != null)
                    {
                        revenueShopInMonth = TotalDataAll.listRevenueRecord.Where(m => m.ShopID == historyProfile.ShopID).ToList();
                    }

                    if (TotalDataAll.listKPIBonus != null && TotalDataAll.listKPIBonus.Count > 0)
                    {
                        foreach (var j in TotalDataAll.listKPIBonus)
                        {
                            if (revenueShopInMonth.Any(m => m.KPIBonusID == j.ID))
                            {
                                listElementFormula.Add(new ElementFormula(CatElementType.Comission.ToString().ToUpper() + "_" + j.Code, revenueShopInMonth.Where(m => m.KPIBonusID == j.ID).FirstOrDefault().Amount, 0));
                            }
                            else
                            {
                                listElementFormula.Add(new ElementFormula(CatElementType.Comission.ToString().ToUpper() + "_" + j.Code, 0, 0));
                            }
                        }
                    }
                }
                else
                {
                    foreach (var j in TotalDataAll.listKPIBonus)
                    {
                        listElementFormula.Add(new ElementFormula(CatElementType.Comission.ToString().ToUpper() + "_" + j.Code, 0, 0));
                    }
                }
            }

            #endregion

            #region  Tung.Tran [26/09/2018] [0099000]:Thêm phần tử lương ngày tính thâm niên 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_PROFILE_DATESENIOR.ToString(), ""))
            {
                item = new ElementFormula(PayrollElement.HR_PROFILE_DATESENIOR.ToString(), profileItem.DateSenior, 0, string.Empty);
                listElementFormula.Add(item);

            }
            #endregion

            #region Tung.Tran [17072018][96720]: Thêm phần tử hệ số cá nhân tính lương nhóm	 (Sal_BasicSalary.PersonalRate)
            //Move code về xử lý chung nguồn dữ liệu Sal_BasicSalary
            //if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_BASICSALARY_PERSONALRATE.ToString(), }))
            //{
            //    double? personalRate = 0;
            //    var basicSalarybyProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
            //    if (basicSalarybyProfile != null)
            //    {
            //        personalRate = basicSalarybyProfile.PersonalRate;
            //    }
            //    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_PERSONALRATE.ToString(), personalRate, 0, string.Empty);
            //    listElementFormula.Add(item);
            //}
            #endregion

            #region Tung.Tran [06112018][100710]: Enum tổng giờ công lớn nhất trong nhóm
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_ATTENDANCETABLE_SUMWORKPAIDHOURSMAX_ELEMENT_GROUP.ToString(), PayrollElement.ATT_ATTENDANCETABLE_COUNTWORKPAIDHOURSMAX_ELEMENT_GROUP.ToString() }))
            {
                var listProfileTimeSheet = new List<Att_ProfileTimeSheetEntity>();
                var listGroupValueForPayrollGroupTable = new List<GroupValueForPayrollGroupTable>();
                var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                if (listAttendanceTableItem.Count > 0)
                {
                    DateTime maxWorkDate = listAttendanceTableItem.Max(s => s.WorkDate);
                    DateTime minWorkDate = listAttendanceTableItem.Min(s => s.WorkDate);
                    listProfileTimeSheet = TotalDataAll.ListAtt_ProfileTimeSheet.Where(s => s.ProfileID == profileItem.ID && s.WorkDate >= minWorkDate && s.WorkDate <= maxWorkDate).ToList();
                }

                foreach (var objAttendanceTableItem in listAttendanceTableItem)
                {
                    if (objAttendanceTableItem.IsMultiple == true)
                    {
                        var listProfileTimeSheetByWorkDate = listProfileTimeSheet.Where(s => s.WorkDate == objAttendanceTableItem.WorkDate).ToList();
                        foreach (var objProfileTimeSheetByWorkDate in listProfileTimeSheetByWorkDate)
                        {
                            if (objProfileTimeSheetByWorkDate.OrgStructureTransID != null || objProfileTimeSheetByWorkDate.PositionTransID != null || objProfileTimeSheetByWorkDate.ShopTransID != null)
                            {
                                GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable = new GroupValueForPayrollGroupTable();
                                objGroupValueForPayrollGroupTable.OrgstructureID = objProfileTimeSheetByWorkDate.OrgStructureTransID;
                                objGroupValueForPayrollGroupTable.PositionID = objProfileTimeSheetByWorkDate.PositionTransID;
                                objGroupValueForPayrollGroupTable.ShopID = objProfileTimeSheetByWorkDate.ShopTransID;
                                listGroupValueForPayrollGroupTable.Add(objGroupValueForPayrollGroupTable);
                            }
                        }
                    }
                    else
                    {
                        if (objAttendanceTableItem.OrgStructureID != null || objAttendanceTableItem.PositionID != null || objAttendanceTableItem.ShopID != null)
                        {
                            GroupValueForPayrollGroupTable objGroupValueForPayrollGroupTable = new GroupValueForPayrollGroupTable();
                            objGroupValueForPayrollGroupTable.OrgstructureID = objAttendanceTableItem.OrgStructureID;
                            objGroupValueForPayrollGroupTable.PositionID = objAttendanceTableItem.PositionID;
                            objGroupValueForPayrollGroupTable.ShopID = objAttendanceTableItem.ShopID;
                            listGroupValueForPayrollGroupTable.Add(objGroupValueForPayrollGroupTable);
                        }
                    }
                }


                //loại bỏ các nhóm trùng
                listGroupValueForPayrollGroupTable = listGroupValueForPayrollGroupTable.GroupBy(s => new { s.OrgstructureID, s.PositionID, s.ShopID }).Select(s => s.First()).ToList();

                double maxSum = 0; // Giờ công cao nhất
                int maxCount = 0; // Count số dòng nhóm giờ công cao nhất

                foreach (var objGroupValueForPayrollGroupTable in listGroupValueForPayrollGroupTable)
                {
                    double sumWorkingHour = 0;
                    int countWorkingHour = 0;

                    var listProfileTimeSheetByPro = TotalDataAll.ListAtt_ProfileTimeSheet.Where(
                        s => s.ProfileID == profileItem.ID && s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd
                        && s.OrgStructureTransID == objGroupValueForPayrollGroupTable.OrgstructureID
                        && s.PositionTransID == objGroupValueForPayrollGroupTable.PositionID
                        && s.ShopTransID == objGroupValueForPayrollGroupTable.ShopID
                        ).ToList();

                    foreach (var objAttendanceTableItemByPro in listAttendanceTableItem)
                    {
                        if (objAttendanceTableItemByPro.IsMultiple == true)
                        {
                            var listProfileTimeSheetByWorkDate = listProfileTimeSheetByPro.Where(
                                s => s.WorkDate >= objAttendanceTableItemByPro.WorkDate && s.WorkDate <= objAttendanceTableItemByPro.WorkDate).ToList();
                            if (listProfileTimeSheetByWorkDate.Count > 0)
                            {
                                countWorkingHour += listProfileTimeSheetByWorkDate.Count;
                                sumWorkingHour += listProfileTimeSheetByWorkDate.Where(s => s.ActualHours != null).Sum(s => s.ActualHours.Value);
                            }
                        }
                        else
                        {
                            if (objAttendanceTableItemByPro.OrgStructureID == objGroupValueForPayrollGroupTable.OrgstructureID && objAttendanceTableItemByPro.PositionID == objGroupValueForPayrollGroupTable.PositionID && objAttendanceTableItemByPro.ShopID == objGroupValueForPayrollGroupTable.ShopID)
                            {
                                countWorkingHour++;
                                sumWorkingHour += objAttendanceTableItemByPro.WorkPaidHours;
                            }
                        }
                    }
                    // Nếu nhóm có số giờ công lớn hơn và đếm số dòng lớn hơn => Xét lại max , count
                    if (sumWorkingHour == maxSum && countWorkingHour > maxCount)
                    {
                        maxCount = countWorkingHour;
                    }
                    if (sumWorkingHour > maxSum)
                    {
                        maxSum = sumWorkingHour;
                        maxCount = countWorkingHour;
                    }
                }

                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_SUMWORKPAIDHOURSMAX_ELEMENT_GROUP.ToString(), maxSum, 0, string.Empty);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_COUNTWORKPAIDHOURSMAX_ELEMENT_GROUP.ToString(), maxCount, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region [20/03/2019][tung.tran][103644]
            if (CheckIsExistFormula(listElementFormula, ref formula,
                new string[] {
                    PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEDAYS_BYBACKPAY.ToString(),
                    PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAID_BYBACKPAY.ToString(),
                    PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_LATEEARLYMINUTES_BYBACKPAY.ToString(),
                    //[Hien.Le][01/04/2019][0104157][Modify] Thêm phần tử lương số giờ ca đêm kỳ trừ
                    PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_NIGHTSHIFTHOURS_BYBACKPAY.ToString(),
                }))
            {

                double sumUnpaidLeaveDays = 0;
                double sumWorkPaid = 0;
                double sumLateEarlyMinutes = 0;
                //[Hien.Le][01/04/2019][0104157][Modify] Thêm phần tử lương số giờ ca đêm kỳ trừ
                double sumNightShiftHours = 0;


                if (CutOffDuration.BackPayFrom != null && CutOffDuration.BackPayTo != null)
                {

                    // Lấy ngày công theo timeline của kỳ công trừ
                    var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(s =>
                              s.WorkDate >= CutOffDuration.BackPayFrom
                              && s.WorkDate <= CutOffDuration.BackPayTo).ToList();

                    if (listAttendanceTableItem != null && listAttendanceTableItem.Count > 0)
                    {
                        // Số ngày nghỉ không lương kỳ công trừ: Sum UnpaidLeaveDays
                        sumUnpaidLeaveDays = listAttendanceTableItem.Where(x => x.UnpaidLeaveDays != null).Sum(x => x.UnpaidLeaveDays.Value);


                        sumWorkPaid = listAttendanceTableItem.Where(x => x.AvailableHours != 0)
                                                  .Sum(x => ((x.WorkPaidHours / x.AvailableHours) + (x.PaidLeaveHours / x.AvailableHours)));

                        sumLateEarlyMinutes = listAttendanceTableItem.Sum(x => x.LateEarlyMinutes);

                        //[Hien.Le][01/04/2019][0104157][Modify] Thêm phần tử lương số giờ ca đêm kỳ trừ
                        sumNightShiftHours = listAttendanceTableItem.Sum(x => x.NightShiftHours);
                    }
                }

                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEDAYS_BYBACKPAY.ToString(), sumUnpaidLeaveDays, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAID_BYBACKPAY.ToString(), sumWorkPaid, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_LATEEARLYMINUTES_BYBACKPAY.ToString(), sumLateEarlyMinutes, 0);
                listElementFormula.Add(item);

                //[Hien.Le][01/04/2019][0104157][Modify] Thêm phần tử lương số giờ ca đêm kỳ trừ
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_NIGHTSHIFTHOURS_BYBACKPAY.ToString(), sumNightShiftHours, 0);
                listElementFormula.Add(item);

            }
            #endregion

            #region [02/04/2019] [Hien.Le] [104044] Thêm phần tử lương trước và sau thay đổi lương của kỳ trừ công và kỳ ứng công
            if (CheckIsExistFormula(listElementFormula, ref formula,
               new string[] {
                    PayrollElement.SAL_ISCHANGE_BASICSALARY_ADPAYDURATION.ToString(),
                    PayrollElement.SAL_ISCHANGE_BASICSALARY_BACKPAYDURATION.ToString(),
                    PayrollElement.SAL_ISSTATUS_STOP_ADPAYDURATION.ToString(),
                    PayrollElement.SAL_ISSTATUS_STOP_BACKPAYDURATION.ToString(),
               }))
            {
                var IsChangeSalaryAdPay = 0;
                var IsChangeSalaryBackPay = 0;
                var IsStatusStopAdPay = 0;
                var IsStatusStopBackPay = 0;

                //Kiểm tra ngày bắt đầu kỳ ứng và ngày kết thúc kỳ ứng
                if (CutOffDuration != null && CutOffDuration.AdPayFrom != null && CutOffDuration.AdPayTo != null)
                {
                    if (CheckIsChangeBasicSalary(TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(x => x.Status == StatusApprovedGradeBasicSalary.E_APPROVED.ToString() && x.DateOfEffect <= CutOffDuration.AdPayTo).ToList(), CutOffDuration.AdPayFrom.Value, CutOffDuration.AdPayTo.Value, profileItem.ID))
                    {
                        //True
                        IsChangeSalaryAdPay = 1;
                    }
                    //Có nghỉ việc trong kỳ công ứng: 
                    if (profileItem.DateQuit >= CutOffDuration.AdPayFrom && profileItem.DateQuit <= CutOffDuration.AdPayTo)
                    {
                        IsStatusStopAdPay = 1;
                    }
                }

                //Kiểm tra ngày bắt đầu kỳ trừ và ngày kết thúc kỳ trừ
                if (CutOffDuration != null && CutOffDuration.BackPayFrom != null && CutOffDuration.BackPayTo != null)
                {
                    if (CheckIsChangeBasicSalary(TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(x => x.Status == StatusApprovedGradeBasicSalary.E_APPROVED.ToString() && x.DateOfEffect <= CutOffDuration.BackPayTo).ToList(), CutOffDuration.BackPayFrom.Value, CutOffDuration.BackPayTo.Value, profileItem.ID))
                    {
                        //True
                        IsChangeSalaryBackPay = 1;
                    }
                    //Có nghỉ việc trong kỳ công trừ
                    if (profileItem.DateQuit >= CutOffDuration.BackPayFrom && profileItem.DateQuit <= CutOffDuration.BackPayTo)
                    {
                        IsStatusStopBackPay = 1;
                    }
                }

                item = new ElementFormula(PayrollElement.SAL_ISCHANGE_BASICSALARY_ADPAYDURATION.ToString(), IsChangeSalaryAdPay, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.SAL_ISCHANGE_BASICSALARY_BACKPAYDURATION.ToString(), IsChangeSalaryBackPay, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.SAL_ISSTATUS_STOP_ADPAYDURATION.ToString(), IsStatusStopAdPay, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.SAL_ISSTATUS_STOP_BACKPAYDURATION.ToString(), IsStatusStopBackPay, 0);
                listElementFormula.Add(item);

            }
            #endregion

            #region Khoa.nguyen [26/09/2019] 0108813: [HRM8.VinaSoy] Thêm phần tử lương: Phần tử lấy bậc KPI, phần tử lấy lương KPI, phần tử tiền tệ	
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                        PayrollElement.SAL_BASIC_SALARY_KPIRANK.ToString(),
                        PayrollElement.SAL_BASIC_SALARY_KPIAMOUNT.ToString(),
                        PayrollElement.SAL_BASIC_SALARY_CURRENCYKPI.ToString()
              }))
            {
                var objSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd && m.Status == EnumDropDown.Sal_BasicSalaryStatus.E_APPROVED.ToString()).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (objSalaryProfile != null)
                {
                    var objKPIRankName = TotalDataAll.listKPIRank.FirstOrDefault(x => x.ID == objSalaryProfile.KPIRankID);
                    var objKPICurrency = TotalDataAll.listCurrency.FirstOrDefault(m => m.ID == objSalaryProfile.CurrencyKPIID);

                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_KPIRANK.ToString(), objKPIRankName?.KPIRankName ?? "", 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_KPIAMOUNT.ToString(), objSalaryProfile?.KPIAmount ?? 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_CURRENCYKPI.ToString(), objKPICurrency?.CurrencyName ?? "", 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_KPIRANK.ToString(), "", 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_KPIAMOUNT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_CURRENCYKPI.ToString(), "", 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Hien.Le [15/04/2020] [114400] Tổng giá trị của hệ số lương theo từng nhóm lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_BASICSALARY_TOTAL_PERSONALRATE.ToString() }))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                dataComputeSer.GetListWorkHistoryFullProfile(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_BASICSALARY_TOTAL_PERSONALRATE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_TOTAL_PERSONALRATE.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    //B1: Lấy các dòng nhân viên của Hre_WorkHistory thỏa
                    var listWorkHistoryByProfileAll = TotalData600.listWorkHistoryFullProfile.Where(
                                                                        m => m.PayrollGroupID == profileItem.PayrollGroupID
                                                                        && m.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                                                        && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).ToList();

                    //B2: Ứng với các nhân viên lấy được ở B1, lấy các dòng Sal_BasicSalary thỏa
                    var listProfileIDWorkHistory = listWorkHistoryByProfileAll.Select(p => p.ProfileID).ToList();

                    var totalPersonalRate = 0.0;
                    dataComputeSer.GetDicBasicSalaryAllProfile(TotalData600, CutOffDuration, profileItem.PayrollGroupID, listProfileIDWorkHistory, ref status2);
                    if (!string.IsNullOrEmpty(status2))
                    {
                        TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_BASICSALARY_TOTAL_PERSONALRATE.ToString() + ") ";
                        item = new ElementFormula(PayrollElement.SAL_BASICSALARY_TOTAL_PERSONALRATE.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        if (!Common.IsNullOrGuidEmpty(profileItem.PayrollGroupID))
                        {
                            var listBasicSalaryEntityAllProfile = TotalData600.dicSalBasicSalaryByPayrollGroup.GetValueOrNew(profileItem.PayrollGroupID.Value);
                            totalPersonalRate = listBasicSalaryEntityAllProfile.Where(p => p.PersonalRate != null).Sum(p => p.PersonalRate.Value);
                        }
                    }
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_TOTAL_PERSONALRATE.ToString(), totalPersonalRate, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Khoa.nguyen [20/11/2020] 121417:Đặt tên thêm enum xuất mã bậc lương, bậc lương và mã ngạch lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                        PayrollElement.SAL_BASICSALARY_SALARYRANK_CODE.ToString(),
                        PayrollElement.SAL_BASICSALARY_SALARYCLASS_CODE.ToString()
              }))
            {
                var objSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd && m.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (objSalaryProfile != null)
                {

                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_SALARYRANK_CODE.ToString(), objSalaryProfile?.SalaryRankCode ?? "", 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_SALARYCLASS_CODE.ToString(), objSalaryProfile?.SalaryClassCode ?? "", 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_SALARYRANK_CODE.ToString(), "", 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_SALARYCLASS_CODE.ToString(), "", 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Nghia.Dang [21/12/2020] 122102 : Modify lấy thêm phần tử lương số lần thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                        PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE1.ToString(),
                        PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE2.ToString(),
                        PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE3.ToString(),
                        PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE4.ToString(),
                        PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE5.ToString(),
                        PayrollElement.SAL_BASICSALARY_COUNT_CHANGEPAYROLL.ToString()
              }))
            {
                var lstSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd && m.DateOfEffect >= CutOffDuration.DateStart && m.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderBy(m => m.DateOfEffect).ToList();
                if (lstSalaryProfile != null)
                {

                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_COUNT_CHANGEPAYROLL.ToString(), lstSalaryProfile?.Count().ToString() ?? "", 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE1.ToString(), lstSalaryProfile.Count() >= 1 ? lstSalaryProfile[0].DateOfEffect.ToString() ?? null : null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE2.ToString(), lstSalaryProfile.Count() >= 2 ? lstSalaryProfile[1].DateOfEffect.ToString() ?? null : null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE3.ToString(), lstSalaryProfile.Count() >= 3 ? lstSalaryProfile[2].DateOfEffect.ToString() ?? null : null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE4.ToString(), lstSalaryProfile.Count() >= 4 ? lstSalaryProfile[3].DateOfEffect.ToString() ?? null : null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE5.ToString(), lstSalaryProfile.Count() >= 5 ? lstSalaryProfile[4].DateOfEffect.ToString() ?? null : null, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_COUNT_CHANGEPAYROLL.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE1.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE2.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE3.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE4.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_DATEOFEFFECT_CHANGE5.ToString(), null, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion
            #region Nghia.Dang [22/05/2021] [125749] Phần tử lương: Bổ sung phần tử lương tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_COUNT_BENENEFIT_ATT_OT.ToString() }))
            {
                string statusOT = string.Empty;
                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString()).FirstOrDefault();
                if (objAllSetting != null)
                {
                    statusOT = objAllSetting.Value1;
                }
                List<Att_OvertimeEntity> ListOrvertimeByProfile = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID)
                    .Where(m => m.Status == statusOT && m.WorkDateRoot <= CutOffDuration.DateEnd && m.WorkDateRoot >= CutOffDuration.DateStart && m.IsRequestForBenefit == true).ToList();
                double totalOvertime = 0;
                if (ListOrvertimeByProfile != null)
                {
                    totalOvertime = ListOrvertimeByProfile.Count();
                }
                item = new ElementFormula(PayrollElement.SAL_COUNT_BENENEFIT_ATT_OT.ToString(), totalOvertime, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Nghia.Dang [22/05/2021] [125749] Phần tử lương: Bổ sung phần tử lương tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_RANKDETAIL_PAYRAISEPERCENT.ToString(), PayrollElement.SAL_RANKDETAIL_ADVANCESALARY.ToString() }))
            {
                string statusOT = string.Empty;
                double totalRaisePercent = 0;
                double totalAdvanceSalary = 0;
                var lstSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd && m.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (lstSalaryProfile != null)
                {
                    var objSalaryRankDetail = TotalDataAll.listSalaryRankDetailAll.Where(x => x.DateOfEffect <= CutOffDuration.DateEnd && x.SalaryRankID == lstSalaryProfile.RankRateID).OrderByDescending(x => x.DateOfEffect).FirstOrDefault();
                    totalRaisePercent = (objSalaryRankDetail != null && objSalaryRankDetail.PayRaisePercent != null) ? objSalaryRankDetail.PayRaisePercent.Value : 0;
                    totalAdvanceSalary = (objSalaryRankDetail != null && objSalaryRankDetail.AdvanceSalary != null) ? objSalaryRankDetail.AdvanceSalary.Value : 0;
                }
                item = new ElementFormula(PayrollElement.SAL_RANKDETAIL_PAYRAISEPERCENT.ToString(), totalRaisePercent, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_RANKDETAIL_ADVANCESALARY.ToString(), totalAdvanceSalary, 0);
                listElementFormula.Add(item);
            }
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_RANKSALARY_INSURANCERATE.ToString()))
            {
                string statusOT = string.Empty;
                double insuranceRate = 0;
                var objSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect <= CutOffDuration.DateEnd && m.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (objSalaryProfile != null)
                {
                    var objSalaryRankDetail = TotalDataAll.listSalaryRankAll.Where(x => x.ID == objSalaryProfile.RankRateID && x.InsuranceRate != null).FirstOrDefault();
                    if (objSalaryRankDetail != null && objSalaryRankDetail.InsuranceRate != null)
                    {
                        insuranceRate = objSalaryRankDetail.InsuranceRate.Value;
                    }
                }
                item = new ElementFormula(PayrollElement.SAL_RANKSALARY_INSURANCERATE.ToString(), insuranceRate, 0);
                listElementFormula.Add(item);

            }
            #endregion
            #region Nghia.Dang [22/05/2021] [125749] Phần tử lương: Bổ sung phần tử lương tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_SUM_HOURSTOTAL_TRAVELTRANSFER.ToString() }))
            {
                string statusOT = string.Empty;
                string status = string.Empty;
                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_CONFIG_TRAVELTIMEREQUESTHASSTATUS.ToString()).FirstOrDefault();
                if (objAllSetting != null)
                {
                    statusOT = objAllSetting.Value1;
                }
                double total = 0;
                dataComputeSer.GetDicBusinessTravelTransfer(TotalData600, CutOffDuration, ref status);
                var lstBusinessTravelTransfer = TotalData600.dicBusinessTravelTransfer.GetValueOrNew(profileItem.ID).Where(m => m.HourTotal != null && m.TransferDate.Value >= CutOffDuration.DateStart && m.TransferDate.Value <= CutOffDuration.DateEnd && m.Status == objAllSetting.Value1).ToList();
                if (lstBusinessTravelTransfer != null)
                {
                    total = lstBusinessTravelTransfer.Sum(x => x.HourTotal.Value);
                }
                item = new ElementFormula(PayrollElement.SAL_SUM_HOURSTOTAL_TRAVELTRANSFER.ToString(), total, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Khoa.nguyen [22/05/2021] Thêm phần tử lương AdjusteRate từ màn hình Cat_SalaryRank
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                        PayrollElement.SAL_BASICSALARY_SALARYRANK_ADJUSTERATE.ToString()
              }))
            {
                var objSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd && m.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (objSalaryProfile != null)
                {
                    double? AdjusteRate = 0;
                    var objSalaryRank = TotalDataAll.listSalaryRank.FirstOrDefault(x => x.ID == objSalaryProfile.RankRateID);
                    if (objSalaryRank != null)
                    {
                        AdjusteRate = objSalaryRank.AdjusteRate;
                    }

                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_SALARYRANK_ADJUSTERATE.ToString(), AdjusteRate, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_BASICSALARY_SALARYRANK_ADJUSTERATE.ToString(), "", 0);
                    listElementFormula.Add(item);

                }
            }
            #endregion

            #region minhnguyenvan [20/08/2021] Thêm phần tử lương Taget &  Actual từ màn hình Sal_RevenueForShop
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                        PayrollElement.SAL_REVENUEFORSHOP_TARGET.ToString(),PayrollElement.SAL_REVENUEFORSHOP_ACTUALLY_ACHIEVED.ToString()
              }))
            {
                var objOrgStructure = TotalDataAll.listOrgStructure.FirstOrDefault(x => x.ID == profileItem.OrgStructureID);
                var objRevenueForShop = TotalDataAll.listRevenueForShop.Where(x => x.OrgStructureID == profileItem.OrgStructureID).ToList();
                if (objRevenueForShop != null && objOrgStructure != null)
                {
                    double? Taget = 0;
                    double? ActuallyAchieved = 0;
                    foreach (var revenueForShop in objRevenueForShop)
                    {
                        var objOrgUnitForShop = TotalDataAll.ListOrgUnit.FirstOrDefault(x => x.OrgstructureID == revenueForShop.OrgStructureID);
                        var objOrgUnit = TotalDataAll.ListOrgUnit.FirstOrDefault(x => x.OrgstructureID == objOrgStructure.ID);


                        if (objOrgUnit.E_TEAM != null && objOrgUnitForShop.E_TEAM != null
                                                && objOrgUnit.E_TEAM == objOrgUnitForShop.E_TEAM
                                                && revenueForShop.DateFrom != null && revenueForShop.DateFrom.Value <= CutOffDuration.DateEnd
                                                && revenueForShop.DateTo != null && revenueForShop.DateTo.Value >= CutOffDuration.DateStart)
                        {
                            Taget += revenueForShop.Target;
                            ActuallyAchieved += revenueForShop.Actual;

                        }

                    }
                    item = new ElementFormula(PayrollElement.SAL_REVENUEFORSHOP_TARGET.ToString(), Taget, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_REVENUEFORSHOP_ACTUALLY_ACHIEVED.ToString(), ActuallyAchieved, 0);
                    listElementFormula.Add(item);
                }

                else
                {
                    item = new ElementFormula(PayrollElement.SAL_REVENUEFORSHOP_TARGET.ToString(), "", 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_REVENUEFORSHOP_ACTUALLY_ACHIEVED.ToString(), "", 0);
                    listElementFormula.Add(item);

                }

            }
            #endregion

            #region Nghia.Dang [18/06/2021] [127949] [Modify] Phần tử tên loại cửa hàng - Lấy từ bảng lương nhóm(hỗ trợ tối đa 10 nhóm)
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME1.ToString(),
                PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME2.ToString(),
                PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME3.ToString(),
                PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME4.ToString(),
                PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME5.ToString(),
                PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME6.ToString(),
                PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME7.ToString(),
                PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME8.ToString(),
                PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME9.ToString(),
                PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME10.ToString() }))
            {
                var ListFormula = new List<string>(){
                    PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME1.ToString(),
                    PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME2.ToString(),
                    PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME3.ToString(),
                    PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME4.ToString(),
                    PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME5.ToString(),
                    PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME6.ToString(),
                    PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME7.ToString(),
                    PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME8.ToString(),
                    PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME9.ToString(),
                    PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME10.ToString() };
                var listPayrollGroupTableID = TotalData600.ListSal_PayrollGroupTable.Where(s => s.ProfileID == profileItem.ID && s.CutOffDurationID == CutOffDuration.ID).Select(x => x.ShopID).Take(10).ToList();
                var listShop = TotalDataAll.listShop.Where(x => listPayrollGroupTableID.Contains(x.ID)).ToList();
                var listShopID = listShop.Select(x => x.ShopGroupID).ToList();
                var listShopGroup = TotalDataAll.listShopGroup.Where(x => listShopID.Contains(x.ID)).ToList();
                if (listPayrollGroupTableID.Count > 0)
                {
                    foreach (var itemEnd in ListFormula)
                    {
                        var end = itemEnd.Replace(PayrollElement.SAL_PAYROLLGROUPTABLE_SHOPGROUPNAME.ToString(), "");
                        int number = 0;
                        var groupname = "";
                        if (int.TryParse(end, out number) && number <= listPayrollGroupTableID.Count)
                        {
                            var objShop = listShop.Where(s => s.ID == listPayrollGroupTableID[number - 1].Value).Select(x => x.ShopGroupID).FirstOrDefault();
                            if (objShop != null)
                            {
                                var objCatshopName = listShopGroup.Where(x => x.ID == objShop.Value).FirstOrDefault();
                                if (objCatshopName != null)
                                {
                                    groupname = objCatshopName.ShopGroupName;
                                }
                            }
                        }
                        item = new ElementFormula(itemEnd, groupname, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var itemEnd in ListFormula)
                    {
                        item = new ElementFormula(itemEnd, string.Empty, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Nghia.Dang [5/8/2021] [131355] Phần tử lương lấy Lương BHXH từ DS Lương cơ bản
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_BASICSALARY_INSURANCEAMOUNT_BEFORE.ToString(), PayrollElement.SAL_BASICSALARY_INSURANCEAMOUNT_AFTER.ToString() }))
            {
                var listbasicSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();
                double InsAmountBef = 0;
                double InsAmountAft = 0;
                if (listbasicSalaryProfile != null && listbasicSalaryProfile.Count > 0)
                {
                    var objBasicAfter = listbasicSalaryProfile.FirstOrDefault();
                    if (objBasicAfter != null)
                    {
                        InsAmountAft = objBasicAfter.InsuranceAmount != null ? objBasicAfter.InsuranceAmount.Value : 0;
                        if (objBasicAfter.DateOfEffect >= CutOffDuration.DateStart)
                        {
                            var objBasicBefore = listbasicSalaryProfile.Where(x => x.DateOfEffect < objBasicAfter.DateOfEffect).OrderByDescending(x => x.DateOfEffect).FirstOrDefault();
                            InsAmountBef = (objBasicBefore != null && objBasicBefore.InsuranceAmount != null) ? objBasicBefore.InsuranceAmount.Value : 0;
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.SAL_BASICSALARY_INSURANCEAMOUNT_AFTER.ToString(), InsAmountAft, 0, string.Empty);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.SAL_BASICSALARY_INSURANCEAMOUNT_BEFORE.ToString(), InsAmountBef, 0, string.Empty);
                listElementFormula.Add(item);

            }
            #endregion

            #region Nghia.Dang [28/8/2021] [132083] Lấy phần tử lương nhiều lần tạm hoãn vào làm lại
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.HRE_STOPWORKING_SUSPENSE_DATESTOP1.ToString(), PayrollElement.HRE_STOPWORKING_SUSPENSE_DATECOMBACK1.ToString(),
                PayrollElement.HRE_STOPWORKING_SUSPENSE_DATESTOP2.ToString(), PayrollElement.HRE_STOPWORKING_SUSPENSE_DATECOMBACK2.ToString(),
                PayrollElement.HRE_STOPWORKING_SUSPENSE_DATESTOP3.ToString(), PayrollElement.HRE_STOPWORKING_SUSPENSE_DATECOMBACK3.ToString(),
            }))
            {
                var listStopWorkingProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID).Where(m => m.DateStop <= CutOffDuration.DateEnd
                && m.StopWorkType == "E_SUSPENSE"
                && m.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString()).OrderByDescending(m => m.DateStop).ToList();

                if (listStopWorkingProfile != null && listStopWorkingProfile.Count > 0)
                {
                    for (var num = 1; num < 4; num++)
                    {
                        if (listStopWorkingProfile.Count >= num)
                        {
                            item = new ElementFormula(PayrollElement.HRE_STOPWORKING_SUSPENSE_DATESTOP.ToString() + num.ToString(), listStopWorkingProfile[num - 1].DateStop, 0, string.Empty);
                            listElementFormula.Add(item);
                            item = new ElementFormula(PayrollElement.HRE_STOPWORKING_SUSPENSE_DATECOMBACK.ToString() + num.ToString(), listStopWorkingProfile[num - 1].DateComeBack, 0, string.Empty);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.HRE_STOPWORKING_SUSPENSE_DATESTOP.ToString() + num.ToString(), null, 0, string.Empty);
                            listElementFormula.Add(item);
                            item = new ElementFormula(PayrollElement.HRE_STOPWORKING_SUSPENSE_DATECOMBACK.ToString() + num.ToString(), null, 0, string.Empty);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    for (var num = 1; num < 4; num++)
                    {
                        item = new ElementFormula(PayrollElement.HRE_STOPWORKING_SUSPENSE_DATESTOP.ToString() + num.ToString(), null, 0, string.Empty);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_STOPWORKING_SUSPENSE_DATECOMBACK.ToString() + num.ToString(), null, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Tuy.Vu [11/04/2022] [140791] thêm phần tử lương ngày trả lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HRE_PROFILE_DATEOFBIRTH.ToString() }))
            {
                item = new ElementFormula(PayrollElement.HRE_PROFILE_DATEOFBIRTH.ToString(), profileItem?.DateOfBirth ?? null, 0, string.Empty);
                listElementFormula.Add(item);
            }
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_CUTOFF_DATESALPAYMENT.ToString() }))
            {
                item = new ElementFormula(PayrollElement.ATT_CUTOFF_DATESALPAYMENT.ToString(), CutOffDuration?.DateSalPayment ?? null, 0, string.Empty);
                listElementFormula.Add(item);
            }
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_CUTOFF_DATESALPAYMENTONEMONTHBEFORE.ToString() }))
            {
                var obj1MonthBeforeSalPayment = TotalDataAll.listCutOffDuration.Where(x => x.MonthYear.Month == CutOffDuration.MonthYear.AddMonths(-1).Month && x.MonthYear.Year == CutOffDuration.MonthYear.AddMonths(-1).Year).FirstOrDefault();
                item = new ElementFormula(PayrollElement.ATT_CUTOFF_DATESALPAYMENTONEMONTHBEFORE.ToString(), obj1MonthBeforeSalPayment?.DateSalPayment ?? null, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region  Tung.Tran [07/03/2022] [139744]: Tổng số tiền tất cả các khoản thanh toán đã duyệt theo Kỳ lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_PAYMENTCOSTREGISTER_SUM_AMOUNT.ToString(), ""))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                double amount = 0;
                dataComputeSer.GetDicPaymentCostRegister(TotalData600, CutOffDuration, ref status);
                dataComputeSer.GetDicSalPaymentCost(TotalData600, CutOffDuration, ref status2);
                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status2))
                {
                    TotalData600.statusBugStore += status + PayrollElement.SAL_PAYMENTCOSTREGISTER_SUM_AMOUNT.ToString();
                    item = new ElementFormula(PayrollElement.SAL_PAYMENTCOSTREGISTER_SUM_AMOUNT.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listPaymentCost = TotalData600.dicSalPaymentCost.GetValueOrNew(profileItem.ID);
                    var listPaymentCostRegisterID = TotalData600.dicPaymentCostRegister.GetValueOrNew(profileItem.ID)
                    .Where(x =>
                        x.PaymentPeriod == CutOffDuration.ID
                        && x.Status == PaymenCostRegisterStatus.E_APPROVED.ToString())
                    .Select(x => x.ID)
                    .ToList();


                    var listPaymentCostByRegister = listPaymentCost
                        .Where(x => x.PaymentCostRegisterID != null && listPaymentCostRegisterID.Contains(x.PaymentCostRegisterID.Value))
                        .ToList();
                    amount = listPaymentCostByRegister.Where(x => x.TotalAmount != null).Sum(x => x.TotalAmount.Value);
                }

                item = new ElementFormula(PayrollElement.SAL_PAYMENTCOSTREGISTER_SUM_AMOUNT.ToString(), amount, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region hai.nguyenngoc [11/03/2022] [0139953] Phần tử lương tính thưởng nghỉ lễ
            #region [Phần tử lì xì theo phòng ban]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_HOLIDAYBONUS_LUCKYMONEY_ORG.ToString() }))
            {
                var objOrgUnit = TotalDataAll.ListOrgUnit.Where(x => x.OrgstructureID == profileItem.OrgStructureID).FirstOrDefault();
                var objOrgUnitCode = string.Empty;
                if (objOrgUnit != null)
                {
                    objOrgUnitCode = objOrgUnit.E_BRANCH_CODE;
                }
                item = new ElementFormula(PayrollElement.SAL_HOLIDAYBONUS_LUCKYMONEY_ORG.ToString(), objOrgUnitCode, 0, string.Empty);
                listElementFormula.Add(item);

            }
            #endregion
            #region [Phần tử lì xì theo hợp đồng]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_HOLIDAYBONUS_LUCKYMONEY_CONTRACT.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_HOLIDAYBONUS_LUCKYMONEY_CONTRACT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_HOLIDAYBONUS_LUCKYMONEY_CONTRACT.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var objContractTypeCode = string.Empty;
                    var objHr_Contract = TotalData600.dicContract.GetValueOrNew(profileItem.ID).Where(x => x.Status == "E_APPROVED" && x.DateStart <= CutOffDuration.DateEnd).OrderByDescending(x => x.DateStart).FirstOrDefault();
                    if (objHr_Contract != null)
                    {
                        var objContractTypeID = objHr_Contract.ContractTypeID;
                        var objContractType = TotalDataAll.lstContractType.Where(x => x.ID == objContractTypeID).FirstOrDefault();
                        if (objContractType != null)
                            objContractTypeCode = objContractType.Code;
                    }
                    item = new ElementFormula(PayrollElement.SAL_HOLIDAYBONUS_LUCKYMONEY_CONTRACT.ToString(), objContractTypeCode, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }
            #endregion
            #region [Phần tử Quốc tế phụ nữ 8/3]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_HOLIDAYBONUS_WOMANDAY.ToString() }))
            {
                var objGender = profileItem.Gender;
                item = new ElementFormula(PayrollElement.SAL_HOLIDAYBONUS_WOMANDAY.ToString(), objGender, 0, string.Empty);
                listElementFormula.Add(item);

            }
            #endregion
            #region [Phần tử Lễ chiến thắng - Quốc tế lao động và Lễ Quốc khánh]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_HOLIDAYBONUS_HOLIDAYBONUS.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_HOLIDAYBONUS_HOLIDAYBONUS.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_HOLIDAYBONUS_HOLIDAYBONUS.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var objHr_Contract = TotalData600.dicContract.GetValueOrNew(profileItem.ID).Where(x => x.Status == "E_APPROVED" && x.DateStart <= CutOffDuration.DateEnd &&
                        (x.Type == EnumDropDown.TypeContract.E_OFFICIAL.ToString() ||
                        x.Type == EnumDropDown.TypeContract.E_DURATION.ToString() ||
                        x.Type == EnumDropDown.TypeContract.E_NODURATION.ToString()))
                        .OrderBy(x => x.DateStart).FirstOrDefault();
                    DateTime objDate = new DateTime();
                    if (objHr_Contract != null)
                    {
                        objDate = objHr_Contract.DateStart;
                    }
                    item = new ElementFormula(PayrollElement.SAL_HOLIDAYBONUS_HOLIDAYBONUS.ToString(), objDate, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }
            //lấy năm của ngày đang tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_HOLIDAYBONUS_COMPUTEYEAR.ToString() }))
            {
                item = new ElementFormula(PayrollElement.SAL_HOLIDAYBONUS_COMPUTEYEAR.ToString(), DateTime.Now.Year, 0, string.Empty);
                listElementFormula.Add(item);
            }
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_HOLIDAYBONUS_CUTOFFDURATIONEND.ToString() }))
            {
                item = new ElementFormula(PayrollElement.SAL_HOLIDAYBONUS_CUTOFFDURATIONEND.ToString(), CutOffDuration.DateEnd, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #endregion

            #region [hai.nguyenngoc][17/03/2022][0139653][New Func]
            #region [Phần tử tên bậc lương trước thay đổi, sau thay đổi]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_SALARYRANK_SALARYRANKNAME_BEFORE.ToString(), PayrollElement.SAL_SALARYRANK_SALARYRANKNAME_AFTER.ToString() }))
            {
                string sal_RankNameBefore = string.Empty;
                string sal_RankNameAfter = string.Empty;
                var lstSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m =>  m.DateOfEffect > CutOffDuration.DateStart
                && m.DateOfEffect <= CutOffDuration.DateEnd && m.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(m => m.DateOfEffect).ToList();
                if (lstSalaryProfile.Count >= 2)
                {
                    var objSalBefore = lstSalaryProfile.Skip(1).FirstOrDefault();
                    if (objSalBefore != null)
                    {
                        sal_RankNameBefore = objSalBefore.SalaryRankName;
                    }
                }
                item = new ElementFormula(PayrollElement.SAL_SALARYRANK_SALARYRANKNAME_BEFORE.ToString(), sal_RankNameBefore, 0, string.Empty);
                listElementFormula.Add(item);
                var objSalAfter = lstSalaryProfile.FirstOrDefault();
                if (objSalAfter != null)
                {
                    sal_RankNameAfter = objSalAfter.SalaryRankName;
                }
                item = new ElementFormula(PayrollElement.SAL_SALARYRANK_SALARYRANKNAME_AFTER.ToString(), sal_RankNameAfter, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion
            #region [Phần tử thu nhập tăng thêm trước thay đổi, sau thay đổi]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_SALARYBASIC_EXTRAINCOME_BEFORE.ToString(), PayrollElement.SAL_SALARYBASIC_EXTRAINCOME_AFTER.ToString() }))
            {
                double? ExtraBefore = 0;
                double? ExtraAfter = 0;
                var lstSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(m => m.DateOfEffect > CutOffDuration.DateStart
                && m.DateOfEffect <= CutOffDuration.DateEnd && m.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(m => m.DateOfEffect).ToList();
                if (lstSalaryProfile.Count >= 2)
                {
                    var objSalBefore = lstSalaryProfile.Skip(1).FirstOrDefault();
                    if (objSalBefore != null)
                    {
                        ExtraBefore = objSalBefore.E_ExtraIncome.DecryptValue();
                    }
                }
                item = new ElementFormula(PayrollElement.SAL_SALARYBASIC_EXTRAINCOME_BEFORE.ToString(), ExtraBefore, 0, string.Empty);
                listElementFormula.Add(item);
                var objSalAfter = lstSalaryProfile.FirstOrDefault();
                if (objSalAfter != null)
                {
                    ExtraAfter = objSalAfter.E_ExtraIncome.DecryptValue();
                }
                item = new ElementFormula(PayrollElement.SAL_SALARYBASIC_EXTRAINCOME_AFTER.ToString(), ExtraAfter, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion
            #region [Phần tử trừ tiền vi phạm]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_HREVIOLATION_MONEYEMPLOYEE.ToString(), PayrollElement.SAL_HREVIOLATION_MONEYSUPERVISOR.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicViolation(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_HREVIOLATION_MONEYEMPLOYEE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_HREVIOLATION_MONEYEMPLOYEE.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_HREVIOLATION_MONEYSUPERVISOR.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_HREVIOLATION_MONEYSUPERVISOR.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var lstHreViolation = TotalData600.dicViolation.GetValueOrNew(profileItem.ID).Where(m => m.MonthOfEffect > CutOffDuration.DateStart && m.MonthOfEffect <= CutOffDuration.DateEnd).ToList();
                    if (lstHreViolation != null)
                    {
                        var objDeductPayrollEmployee = lstHreViolation.Where(x => x.DeductPayrollEmployee != null).Sum(x => x.DeductPayrollEmployee);
                        item = new ElementFormula(PayrollElement.SAL_HREVIOLATION_MONEYEMPLOYEE.ToString(), objDeductPayrollEmployee, 0, string.Empty);
                        listElementFormula.Add(item);
                        var objDeductPayrollSupervisor = lstHreViolation.Where(x => x.DeductPayrollSupervisor != null).Sum(x => x.DeductPayrollSupervisor);
                        item = new ElementFormula(PayrollElement.SAL_HREVIOLATION_MONEYSUPERVISOR.ToString(), objDeductPayrollSupervisor, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                }

            }
            #endregion
            #endregion

            #region [hai.nguyenngoc][07/04/2022][0140159][Phần tử Số giờ nghỉ bù hết hạn trong tháng tính lương]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_ATTO_REMAINCOMPLEAVEHOURS.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicOverTimeByCutOffOverTime2MonthAgo(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_ATTO_REMAINCOMPLEAVEHOURS.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_ATTO_REMAINCOMPLEAVEHOURS.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var dateStart = CutOffDuration.DateStart.AddMonths(-2);
                    var dateEnd = CutOffDuration.DateEnd.AddMonths(-2);
                    var listOverTime = TotalData600.dicOverTime2MonthsAgo.GetValueOrNew(profileItem.ID)
                        .Where(x => x.Status == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString() && x.WorkDateRoot >= dateStart && x.WorkDateRoot <= dateEnd).ToList();
                    double? sumValue = listOverTime.Where(x => x.RemainCompLeaveHours != null).Sum(x => x.RemainCompLeaveHours);
                    item = new ElementFormula(PayrollElement.SAL_ATTO_REMAINCOMPLEAVEHOURS.ToString(), sumValue, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [hai.nguyenngoc][0140963][phần tử lương trả về tổng số tiền thu hồi thực tế của thiết bị]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_HRE_FACITITYEVICTION_ACTUALAMOUNT.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicFacilityEviction(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_HRE_FACITITYEVICTION_ACTUALAMOUNT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_HRE_FACITITYEVICTION_ACTUALAMOUNT.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var lstFacilityEviction = TotalData600.dicFacilityEviction.GetValueOrNew(profileItem.ID).Where(m => m.EvictionDate >= CutOffDuration.DateStart && m.EvictionDate <= CutOffDuration.DateEnd && m.ActualAmount != null).ToList();
                    var ActualAmount = lstFacilityEviction.Sum(x => x.ActualAmount);
                    item = new ElementFormula(PayrollElement.SAL_HRE_FACITITYEVICTION_ACTUALAMOUNT.ToString(), ActualAmount, 0, string.Empty);
                    listElementFormula.Add(item); 
                }

            }
            #endregion

            #region Tuy.Vu [17/03/2023] 139954: Thêm phần tử lương thai sản (Số tháng nghỉ việc sinh con)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.INS_INSURANCERECORD_GIVEBIRTHDATEOFF.ToString()))
            {
                string status = String.Empty;
                dataComputeSer.GetDicInsuranceRecord(TotalData600, CutOffDuration, ref status);
                if (!String.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore = status + "";
                    item = new ElementFormula(PayrollElement.INS_INSURANCERECORD_GIVEBIRTHDATEOFF.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var dicInsuranceRecord = TotalData600.dicInsuranceRecord.GetValueOrNew(profileItem.ID);
                    var objInsuranceRecord = dicInsuranceRecord.Where(x => x.DateStart != null && x.DateStart.Value.Date <= CutOffDuration.DateEnd.Date &&
                                                                           x.DateEnd != null && x.DateEnd.Value.Date >= CutOffDuration.DateStart.Date &&
                                                                           x.InsuranceType == "E_PREGNANCY_SUCKLE").OrderByDescending(o => o.DateStart).FirstOrDefault();
                    if (objInsuranceRecord == null)
                    {
                        item = new ElementFormula(PayrollElement.INS_INSURANCERECORD_GIVEBIRTHDATEOFF.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        int MonthCount = objInsuranceRecord.DateEnd.Value.Month - objInsuranceRecord.DateStart.Value.Month;
                        item = new ElementFormula(PayrollElement.INS_INSURANCERECORD_GIVEBIRTHDATEOFF.ToString(), MonthCount, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion
            #region Tuy.Vu [18/03/2022] 139954 Thêm phần tử lương lương cơ bản 6 tháng liền kề trước khi sinh
            if (CheckIsExistFormula(listElementFormula, ref formula, 
                new string[] { 
                    PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH1.ToString(),
                    PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH2.ToString(),
                    PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH3.ToString(),
                    PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH4.ToString(),
                    PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH5.ToString(),
                    PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH6.ToString(),
            }))
            {
                string status = String.Empty;
                dataComputeSer.GetDicInsuranceRecord(TotalData600, CutOffDuration, ref status);
                if (!String.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore = status + "";
                    item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var lstInsuranceRecord = TotalData600.dicInsuranceRecord.GetValueOrNew(profileItem.ID);
                    var objInsuranceRecord = lstInsuranceRecord.Where(x => x.DateStart != null && x.DateStart.Value.Date <= CutOffDuration.DateEnd.Date &&
                                                                           x.DateEnd != null && x.DateEnd.Value.Date >= CutOffDuration.DateStart.Date &&
                                                                           x.InsuranceType == "E_PREGNANCY_SUCKLE").OrderByDescending(o => o.DateStart).FirstOrDefault();
                    if (objInsuranceRecord == null)
                    {
                        item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH2.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH3.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH4.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH5.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH6.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        DateTime DistanceDate1 = objInsuranceRecord.DateStart.Value.AddMonths(-1),
                         DistanceDate2 = objInsuranceRecord.DateStart.Value.AddMonths(-2),
                         DistanceDate3 = objInsuranceRecord.DateStart.Value.AddMonths(-3),
                         DistanceDate4 = objInsuranceRecord.DateStart.Value.AddMonths(-4),
                         DistanceDate5 = objInsuranceRecord.DateStart.Value.AddMonths(-5),
                         DistanceDate6 = objInsuranceRecord.DateStart.Value.AddMonths(-6);
                        var lstBasicSalary = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                        var lstBasicSalaryWithCondition = lstBasicSalary.Where(x => x.Status == EnumDropDown.Sal_BasicSalaryStatus.E_APPROVED.ToString() &&
                                                                     x.DateOfEffect.Date >= DistanceDate6.Date &&
                                                                     x.DateOfEffect.Date <= objInsuranceRecord.DateStart.Value.Date).ToList();

                        string objGrossAmount1 = "0",
                         objGrossAmount2 = "0",
                         objGrossAmount3 = "0",
                         objGrossAmount4 = "0",
                         objGrossAmount5 = "0",
                         objGrossAmount6 = "0";

                        var objBasicSalaryWithCondition1 = lstBasicSalaryWithCondition.FirstOrDefault(x => x.DateOfEffect.Date >= DistanceDate1.Date &&
                                                                                                           x.DateOfEffect.Date <= objInsuranceRecord.DateStart.Value.Date);
                        if (objBasicSalaryWithCondition1 != null && !String.IsNullOrEmpty(objBasicSalaryWithCondition1.GrossAmount))
                            objGrossAmount1 = objBasicSalaryWithCondition1.GrossAmount;


                        var objBasicSalaryWithCondition2 = lstBasicSalaryWithCondition.FirstOrDefault(x => x.DateOfEffect.Date >= DistanceDate2.Date &&
                                                                                                           x.DateOfEffect.Date < DistanceDate1.Date);
                        if (objBasicSalaryWithCondition2 != null && !String.IsNullOrEmpty(objBasicSalaryWithCondition2.GrossAmount))
                            objGrossAmount2 = objBasicSalaryWithCondition2.GrossAmount;


                        var objBasicSalaryWithCondition3 = lstBasicSalaryWithCondition.FirstOrDefault(x => x.DateOfEffect.Date >= DistanceDate3.Date &&
                                                                                                           x.DateOfEffect.Date < DistanceDate2.Date);
                        if (objBasicSalaryWithCondition3 != null && !String.IsNullOrEmpty(objBasicSalaryWithCondition3.GrossAmount))
                            objGrossAmount3 = objBasicSalaryWithCondition3.GrossAmount;


                        var objBasicSalaryWithCondition4 = lstBasicSalaryWithCondition.FirstOrDefault(x => x.DateOfEffect.Date >= DistanceDate4.Date &&
                                                                                                           x.DateOfEffect.Date < DistanceDate3.Date);
                        if (objBasicSalaryWithCondition4 != null && !String.IsNullOrEmpty(objBasicSalaryWithCondition4.GrossAmount))
                            objGrossAmount4 = objBasicSalaryWithCondition4.GrossAmount;


                        var objBasicSalaryWithCondition5 = lstBasicSalaryWithCondition.FirstOrDefault(x => x.DateOfEffect.Date >= DistanceDate5.Date &&
                                                                                                           x.DateOfEffect.Date < DistanceDate4.Date);
                        if (objBasicSalaryWithCondition5 != null && !String.IsNullOrEmpty(objBasicSalaryWithCondition5.GrossAmount))
                            objGrossAmount5 = objBasicSalaryWithCondition5.GrossAmount;


                        var objBasicSalaryWithCondition6 = lstBasicSalaryWithCondition.FirstOrDefault(x => x.DateOfEffect.Date >= DistanceDate6.Date &&
                                                                                                           x.DateOfEffect.Date < DistanceDate5.Date);
                        if (objBasicSalaryWithCondition6 != null && !String.IsNullOrEmpty(objBasicSalaryWithCondition6.GrossAmount))
                            objGrossAmount6 = objBasicSalaryWithCondition6.GrossAmount;


                        item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH1.ToString(), objGrossAmount1, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH2.ToString(), objGrossAmount2, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH3.ToString(), objGrossAmount3, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH4.ToString(), objGrossAmount4, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH5.ToString(), objGrossAmount5, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_INSURANCESALARY_INSURANCEAMOUNT_SIXMONTHBEFOREGIVEBIRTH6.ToString(), objGrossAmount6, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [Tuy.Vu][141386][Phần tử lương trả về số ngày cư trú ở màn hình ds hộ chiếu]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HRE_PASSPORT_NOOFDAYOFRESIDENCE.ToString() }))
            {
                string status = String.Empty;
                dataComputeSer.GetHrePassport(TotalData600, ref status);
                int noOfDayOfResidence = 0;
                if (status != String.Empty)
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_PASSPORT_NOOFDAYOFRESIDENCE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_PASSPORT_NOOFDAYOFRESIDENCE.ToString(), noOfDayOfResidence, 0);
                    listElementFormula.Add(item);
                }
                else
                {

                    var objHrePassport = TotalData600.lstHrePassport.Where(x => x.ProfileID == profileItem.ID && x.PassportDateOfIssue != null && x.PassportDateOfIssue.Value.Date <= CutOffDuration.DateEnd).OrderByDescending(o => o.PassportDateOfIssue).FirstOrDefault();
                    if (objHrePassport != null && objHrePassport.NoOfDaysOfResidence != null)
                    {
                        noOfDayOfResidence = objHrePassport.NoOfDaysOfResidence.Value;
                    }

                    item = new ElementFormula(PayrollElement.HRE_PASSPORT_NOOFDAYOFRESIDENCE.ToString(), noOfDayOfResidence, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [Tuy.Vu][24/01/2022][142001]: Phần tử lương lấy giá trị phần tử phụ cấp có check "Tính BHXH" 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN137_CAT_UNUSUALALLOWANCE_ISCOMPUTEINS_.ToString(), string.Empty))
            {
                var strStartsWith = PayrollElement.DYN137_CAT_UNUSUALALLOWANCE_ISCOMPUTEINS_.ToString();
                //lấy các phần tử cần lấy dữ liệu
                List<string> lstFormulaCheck = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                var listElementCode = lstFormulaCheck.Select(x => x.Replace(strStartsWith, "")).ToList();
                foreach (var itemFormula in lstFormulaCheck)
                {
                    int isComputeIns = 0;
                    var elementCode = itemFormula.Replace(strStartsWith, "");
                    var objUsualAllowanceCfg = TotalDataAll.listUnusualAllowanceCfg.Where(x => x.Code == elementCode && x.IsComputedIns == true).FirstOrDefault();
                    if (objUsualAllowanceCfg != null)
                        isComputeIns = 1;
                    item = new ElementFormula(itemFormula, isComputeIns, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion
            #region [Tuy.Vu][142001]: [Phần tử lương tính tổng giá trị của các phụ cấp có tính BHXH]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_UNUSUALALLOWANCE_SUMAMOUNT.ToString() }))
            {
                string status = String.Empty;
                dataComputeSer.GetListSalUnusualAllowance(TotalData600, CutOffDuration, ref status);
                double sumUnusualAmount = 0;
                if (status != String.Empty)
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_UNUSUALALLOWANCE_SUMAMOUNT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_SUMAMOUNT.ToString(), sumUnusualAmount, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var lstUnusualAllowanceComputeIns = TotalData600.listSalUnusualAllowance.Where(x => x.Amount != null &&
                                                                                                        x.ProfileID == profileItem.ID &&
                                                                                                       (x.MonthStart == null || x.MonthStart != null && x.MonthStart.Value.Date <= CutOffDuration.DateEnd.Date) &&
                                                                                                       (x.MonthEnd == null || x.MonthEnd != null && x.MonthEnd.Value.Date >= CutOffDuration.DateStart.Date ) &&
                                                                                                        x.Status == "E_APPROVED" &&
                                                                                                        x.IsComputedIns == true).ToList();
                    if (lstUnusualAllowanceComputeIns != null && lstUnusualAllowanceComputeIns.Count() > 0)
                    {
                        sumUnusualAmount = lstUnusualAllowanceComputeIns.Sum(s => s.Amount.Value);
                    }

                    item = new ElementFormula(PayrollElement.SAL_UNUSUALALLOWANCE_SUMAMOUNT.ToString(), sumUnusualAmount, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }
            #endregion
        }
        #endregion

        #region Nhánh các enum công
        public void GetStaticValuesAttendance(
           ComputePayrollDataModelKZAll TotalDataAll,
           ComputePayrollDataModelKZ TotalData600,
           List<ElementFormula> listElementFormula,
           Hre_ProfileEntity profileItem,
           Att_CutOffDurationEntity CutOffDuration,
           List<string> formula,
           Guid? GradePayrollID,
           Att_AttendanceTableEntity objAttendanceTableProCut,
           Dictionary<Guid, ValueCount> listTmpDeduction,
           Sal_GetDataComputePayrollKZServices dataComputeSer,
           Att_CutOffDurationEntity cutOffDurationPre,
           Att_RecalAttendanceTableEntity objRecalAttendanceTableProCut
           )
        {

            ElementFormula item = new ElementFormula();


            #region Tổng dòng công trong tháng có in out, tinh luong cty
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_ATTENDANCETABLEITEM_COUNT_HAVE_IN_OUT.ToString() }))
            {
                int countInOut = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == objAttendanceTableProCut.CutOffDurationID
                                && s.FirstInTime != null
                                && s.LastOutTime != null).Count();
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_COUNT_HAVE_IN_OUT.ToString(), countInOut, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region [17/10/2018][bang.nguyen][99520][new]: Tổng giờ nghỉ giải lao
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_SHIFTITEM_SUM_SHIFTBREAK_HOUR.ToString() }))
            {
                //lay data nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listCat_ShiftItem";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    Sal_GetDataComputePayrollKZServices getDataComputePayrollServices = new Sal_GetDataComputePayrollKZServices();
                    getDataComputePayrollServices.UserLogin = TotalDataAll.UserLogin;
                    TotalData600.listCat_ShiftItem = getDataComputePayrollServices.GetShiftItem(ShiftItemType.E_SHIFTBREAK.ToString(), ref status);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }

                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_SHIFTITEM_SUM_SHIFTBREAK_HOUR.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_SHIFTITEM_SUM_SHIFTBREAK_HOUR.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    double _SHIFTBREAK_HOUR = 0;
                    if (TotalData600.listCat_ShiftItem.Count > 0)
                    {
                        var listShiftID = TotalData600.listCat_ShiftItem.Select(s => s.ShiftID).Distinct().ToList();
                        var listAttendancetableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID)
                            .Where(s => s.CutOffDurationID == objAttendanceTableProCut.CutOffDurationID
                                && s.ShiftID != null
                                && listShiftID.Contains(s.ShiftID.Value)
                                && s.FirstInTime != null
                                && s.LastOutTime != null)
                            .ToList();
                        if (listAttendancetableItem.Count > 0)
                        {
                            listShiftID = listAttendancetableItem.Select(s => s.ShiftID.Value).Distinct().ToList();
                            var listShiftItem = TotalData600.listCat_ShiftItem.Where(s => listShiftID.Contains(s.ShiftID)).ToList();

                            var listLeaveDayInDate = TotalDataAll.dicLeaveDayNotStatus.GetValueOrNew(profileItem.ID)
                                .Where(s => s.DateStart <= CutOffDuration.DateEnd
                                    && s.DateEnd >= CutOffDuration.DateStart)
                                .ToList();

                            var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_ANNUALDETAIL_LEAVEDAYSTATUS.ToString()).FirstOrDefault();
                            string statusLeaveday = string.Empty;
                            if (objAllSetting != null && !string.IsNullOrEmpty(objAllSetting.Value1))
                            {
                                statusLeaveday = objAllSetting.Value1;
                                listLeaveDayInDate = listLeaveDayInDate.Where(s => s.Status == statusLeaveday).ToList();
                            }
                            //lay ds ngày nghỉ sau khi tách ra từng ngày
                            Att_LeavedayServices leavedayServices = new Att_LeavedayServices();
                            var listLeaveDayForDate = new List<Att_LeaveDayEntity>();
                            if (listLeaveDayInDate.Count > 0)
                            {
                                var listRosterByPro = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);
                                listLeaveDayForDate = leavedayServices.SplitLeaveByDayNotGetData(listLeaveDayInDate, ModifyType.E_EDIT.ToString(), listRosterByPro, TotalDataAll.ListRosterGroup.ToList(), TotalDataAll.listCat_Shift.ToList(), new List<Att_RosterGroupByOrganizationEntity>(), new List<Cat_RosterGroupTypeEntity>(), new List<Cat_OrgStructureEntity>(), new Dictionary<Guid, List<Hre_WorkHistoryEntity>>());
                            }
                            listAttendancetableItem = listAttendancetableItem.OrderBy(s => s.WorkDate).ToList();
                            foreach (var objAttendancetableItem in listAttendancetableItem)
                            {
                                //neu có đăng ký nghỉ full ca => không tính giờ nghỉ ngày này
                                var countFULLSHIFT = listLeaveDayForDate
                                    .Where(s => s.DateStart.Date == objAttendancetableItem.WorkDate.Date && s.DurationType == LeaveDayType.E_FULLSHIFT.ToString()).Count();
                                if (countFULLSHIFT == 0)
                                {
                                    DateTime firstInTime = objAttendancetableItem.FirstInTime.Value;
                                    DateTime lastOutTime = objAttendancetableItem.LastOutTime.Value;

                                    var objShift = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendancetableItem.ShiftID).FirstOrDefault();
                                    if (objShift != null)
                                    {
                                        DateTime inTimeByShift = new DateTime(
                                                    objAttendancetableItem.WorkDate.Year,
                                                    objAttendancetableItem.WorkDate.Month,
                                                    objAttendancetableItem.WorkDate.Day,
                                                    objShift.InTime.Hour,
                                                    objShift.InTime.Minute,
                                                    objShift.InTime.Second
                                                );

                                        DateTime outTimeByShift = inTimeByShift.AddHours(objShift.CoOut);

                                        var listShiftItemByWorkDate = listShiftItem.Where(s => s.ShiftID == objAttendancetableItem.ShiftID).ToList();
                                        //có loại nghỉ trong ngày thi trừ giờ nghỉ nếu trùng
                                        if (listShiftItemByWorkDate.Count > 0)
                                        {
                                            //khong tru gio nghi giai lao khi nghi ngoai ca
                                            var listLeaveDayByWorkDate = listLeaveDayForDate
                                                .Where(s => s.DateStart.Date == objAttendancetableItem.WorkDate
                                                    && s.DurationType != LeaveDayDurationType.E_FULLSHIFT.ToString()
                                                    && s.DurationType != LeaveDayDurationType.E_OUT_OF_SHIFT.ToString())
                                                .OrderBy(s => s.DateStart)
                                                .ToList();
                                            foreach (var objShiftItemByWorkDate in listShiftItemByWorkDate)
                                            {
                                                bool isCheck = true;
                                                DateTime dateFromShiftBreak = inTimeByShift.AddHours(objShiftItemByWorkDate.CoFrom);
                                                DateTime dateToShiftBreak = inTimeByShift.AddHours(objShiftItemByWorkDate.CoTo);

                                                //[19/12/2018][bang.nguyen][102046][bug]
                                                //logic ban dau tin.nguyen dua xu lý thiếu trường hợp ca đêm
                                                // đối với ca đêm xác định giờ nghỉ giữa ca => cộng thêm 1 ngày
                                                if (objShift.IsNightShift)
                                                {
                                                    if (objShiftItemByWorkDate.CoFrom < 0)
                                                    {
                                                        dateFromShiftBreak = dateFromShiftBreak.AddDays(1);
                                                    }
                                                    if (objShiftItemByWorkDate.CoTo < 0)
                                                    {
                                                        dateToShiftBreak = dateToShiftBreak.AddDays(1);
                                                    }
                                                }

                                                //không tính giờ nghỉ giải lao: neu giờ bắt đầu nghỉ <= giờ bắt đầu giữa ca và giờ kết thúc nghỉ >= giờ kết thúc giữa ca
                                                foreach (var objLeaveDayByWorkDate in listLeaveDayByWorkDate)
                                                {
                                                    DateTime dateStartLeave = objLeaveDayByWorkDate.DateStart;
                                                    DateTime dateEndLeave = objLeaveDayByWorkDate.DateEnd;
                                                    //neu datastart  ngay nghi nam ngoai in out của ca => + thêm 1 ngày 
                                                    if (objShift.IsNightShift)
                                                    {
                                                        if (dateStartLeave < inTimeByShift || dateStartLeave > outTimeByShift)
                                                        {
                                                            dateStartLeave = dateStartLeave.AddDays(1);
                                                        }
                                                        //neu dateend  ngay nghi nam ngoai in out của ca => + thêm 1 ngày 
                                                        if (dateEndLeave < inTimeByShift || dateEndLeave > outTimeByShift)
                                                        {
                                                            dateEndLeave = dateEndLeave.AddDays(1);
                                                        }
                                                    }

                                                    // neu giờ bắt đầu nghỉ <= giờ bắt đầu giữa ca và giờ kết thúc nghỉ >= giờ kết thúc giữa ca
                                                    //=> không được tính giờ nghỉ giải lao
                                                    if (dateStartLeave <= dateFromShiftBreak && dateEndLeave >= dateToShiftBreak)
                                                    {
                                                        isCheck = false;
                                                        break;
                                                    }
                                                }
                                                if (isCheck)
                                                {
                                                    //giờ quẹt thẻ vao ra có giao giờ giải lao => mới được tính giờ nghỉ giải lao ngày đó
                                                    if (firstInTime <= dateToShiftBreak && lastOutTime >= dateFromShiftBreak)
                                                    {
                                                        DateTime tempDateFrom = dateFromShiftBreak;
                                                        DateTime tempDateTo = dateToShiftBreak;
                                                        //giờ quẹt thẻ vao > giờ bắt đầu nghỉ giải lao
                                                        if (firstInTime > tempDateFrom)
                                                        {
                                                            tempDateFrom = firstInTime;
                                                        }
                                                        //giờ quẹt thẻ ra < giờ kết thúc nghỉ giải lao
                                                        if (lastOutTime < tempDateTo)
                                                        {
                                                            tempDateTo = lastOutTime;
                                                        }
                                                        _SHIFTBREAK_HOUR += (tempDateTo - tempDateFrom).TotalHours;
                                                        //nếu có giao => loại trừ khoảng giờ nghỉ có giao
                                                        double totalHourLeaveDay = 0;
                                                        foreach (var objLeaveDayByWorkDate in listLeaveDayByWorkDate)
                                                        {
                                                            DateTime dateStartLeave = objLeaveDayByWorkDate.DateStart;
                                                            DateTime dateEndLeave = objLeaveDayByWorkDate.DateEnd;
                                                            //neu datastart  ngay nghi nam ngoai in out của ca => + thêm 1 ngày 
                                                            if (objShift.IsNightShift)
                                                            {
                                                                if (dateStartLeave < inTimeByShift || dateStartLeave > outTimeByShift)
                                                                {
                                                                    dateStartLeave = dateStartLeave.AddDays(1);
                                                                }
                                                                //neu dateend  ngay nghi nam ngoai in out của ca => + thêm 1 ngày 
                                                                if (dateEndLeave < inTimeByShift || dateEndLeave > outTimeByShift)
                                                                {
                                                                    dateEndLeave = dateEndLeave.AddDays(1);
                                                                }
                                                            }
                                                            // có giao giữa giờ nghỉ giải lao và giờ nghỉ thì mới trừ
                                                            if (tempDateFrom <= dateEndLeave && tempDateTo >= dateStartLeave)
                                                            {
                                                                if (dateStartLeave < tempDateFrom)
                                                                {
                                                                    dateStartLeave = tempDateFrom;
                                                                }
                                                                if (dateEndLeave > tempDateTo)
                                                                {
                                                                    dateEndLeave = tempDateTo;
                                                                }
                                                                totalHourLeaveDay += (dateEndLeave - dateStartLeave).TotalHours;
                                                            }
                                                        }
                                                        if (totalHourLeaveDay >= 0)
                                                        {
                                                            _SHIFTBREAK_HOUR -= totalHourLeaveDay;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_SHIFTITEM_SUM_SHIFTBREAK_HOUR.ToString(), _SHIFTBREAK_HOUR, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [16/04/2018][bang.nguyen][94187][Modify Func]
            //[Description("Số giờ làm việc theo quy định tháng trước")]
            //ATT_ATTENDANCETABLEITEM_SUM_AVAILABLEHOURS_PREV,
            //[Description("Số giờ nghỉ trả lương trước khi thay đổi lương tháng trước")]
            //ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_FIRSTCHANGESALARY_PREV,
            //[Description("Số giờ nghỉ trả lương sau khi thay đổi lương tháng trươc")]
            //ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_LASTCHANGESALARY_PREV,
            //[Description("Số giờ nghỉ không trả lương tháng trước")]
            //ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_PREV,
            //[Description("Số giờ nghỉ không trả lương trước khi thay đổi lương tháng trước")]
            //ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_FIRSTCHANGESALARY_PREV,
            //[Description("Số giờ nghỉ không trả lương sau khi thay đổi lương tháng trươc")]
            //ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_LASTCHANGESALARY_PREV,
            //[Description("Số giờ đi làm trả lương")]
            //ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS,
            //[Description("Số giờ đi làm trả lương tháng trước")]
            //ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_PREV,
            //[Description("Số giờ đi làm trả lương trước khi thay đổi lương")]
            //ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_FIRSTCHANGESALARY,
            //[Description("Số giờ đi làm trả lương trước khi thay đổi lương tháng trước")]
            //ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_FIRSTCHANGESALARY_PREV,
            //[Description("Số giờ đi làm trả lương sau khi thay đổi lương")]
            //ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_LASTCHANGESALARY,
            //[Description("Số giờ đi làm trả lương sau khi thay đổi lương tháng trước")]
            //ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_LASTCHANGESALARY_PREV,
            //[Description("Số giờ nghỉ trả lương tháng trước")]
            //ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_PREV,
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_AVAILABLEHOURS_PREV.ToString(),
            PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_PREV.ToString(),PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_FIRSTCHANGESALARY_PREV.ToString()
            ,PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_LASTCHANGESALARY_PREV.ToString(),PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_FIRSTCHANGESALARY_PREV.ToString()
            ,PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_LASTCHANGESALARY_PREV.ToString(),PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_PREV.ToString()
            ,PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_FIRSTCHANGESALARY_PREV.ToString(),PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_LASTCHANGESALARY_PREV.ToString()
            ,PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_PREV.ToString()}))
            {
                double sumAVAILABLEHOURS_PREV = 0;
                double sumUNPAIDLEAVEHOURS_PREV = 0;
                double sumUNPAIDLEAVEHOURS_FIRSTCHANGESALARY_PREV = 0;
                double sumUNPAIDLEAVEHOURS_LASTCHANGESALARY_PREV = 0;
                double sumPAIDLEAVEHOURS_FIRSTCHANGESALARY_PREV = 0;
                double sumPAIDLEAVEHOURS_LASTCHANGESALARY_PREV = 0;
                double sumWORKPAIDHOURS_PREV = 0;
                double sumWORKPAIDHOURS_FIRSTCHANGESALARY_PREV = 0;
                double sumWORKPAIDHOURS_LASTCHANGESALARY_PREV = 0;
                double sumPAIDLEAVEHOURS_PREV = 0;

                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);

                var objCutOffDuration_Prev = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutOffDuration.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();

                var objAttendanceTable_Prev = TotalDataAll.Att_AttendanceTable_Prev.Where(s => s.ProfileID == profileItem.ID && s.CutOffDurationID == objCutOffDuration_Prev.ID).FirstOrDefault();
                if (objAttendanceTable_Prev != null && objCutOffDuration_Prev != null)
                {
                    var listAttTableItemByProAndCutOff = TotalDataAll.listAttendanceTableItem_N_1.Where(m => m.AttendanceTableID == objAttendanceTable_Prev.ID).ToList();
                    if (listAttTableItemByProAndCutOff.Count > 0)
                    {
                        sumAVAILABLEHOURS_PREV = listAttTableItemByProAndCutOff.Where(s => s.WorkDate >= objCutOffDuration_Prev.DateStart && s.WorkDate <= objCutOffDuration_Prev.DateEnd).Sum(s => s.AvailableHours);
                        sumUNPAIDLEAVEHOURS_PREV = listAttTableItemByProAndCutOff.Where(s => s.WorkDate >= objCutOffDuration_Prev.DateStart && s.WorkDate <= objCutOffDuration_Prev.DateEnd).Sum(s => s.UnpaidLeaveHours);
                        sumWORKPAIDHOURS_PREV = listAttTableItemByProAndCutOff.Where(s => s.WorkDate >= objCutOffDuration_Prev.DateStart && s.WorkDate <= objCutOffDuration_Prev.DateEnd).Sum(s => s.WorkPaidHours);
                        sumPAIDLEAVEHOURS_PREV = listAttTableItemByProAndCutOff.Where(s => s.WorkDate >= objCutOffDuration_Prev.DateStart && s.WorkDate <= objCutOffDuration_Prev.DateEnd).Sum(s => s.PaidLeaveHours);

                        if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic, objCutOffDuration_Prev.DateStart, objCutOffDuration_Prev.DateEnd, profileItem.ID))
                        {
                            var objBasicSalaryChange = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= objCutOffDuration_Prev.DateEnd && m.DateOfEffect >= objCutOffDuration_Prev.DateStart).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                            if (objBasicSalaryChange != null)
                            {
                                var listAttendanceTableItemFirst = listAttTableItemByProAndCutOff.Where(m => m.WorkDate >= objCutOffDuration_Prev.DateStart && m.WorkDate < objBasicSalaryChange.DateOfEffect).ToList();
                                var listAttendanceTableItemLast = listAttTableItemByProAndCutOff.Where(m => m.WorkDate >= objBasicSalaryChange.DateOfEffect && m.WorkDate <= objCutOffDuration_Prev.DateEnd).ToList();

                                sumUNPAIDLEAVEHOURS_FIRSTCHANGESALARY_PREV = listAttendanceTableItemFirst.Sum(s => s.UnpaidLeaveHours);
                                sumUNPAIDLEAVEHOURS_LASTCHANGESALARY_PREV = listAttendanceTableItemLast.Sum(s => s.UnpaidLeaveHours);
                                sumPAIDLEAVEHOURS_FIRSTCHANGESALARY_PREV = listAttendanceTableItemFirst.Sum(s => s.PaidLeaveHours);
                                sumPAIDLEAVEHOURS_LASTCHANGESALARY_PREV = listAttendanceTableItemLast.Sum(s => s.PaidLeaveHours);
                                sumWORKPAIDHOURS_FIRSTCHANGESALARY_PREV = listAttendanceTableItemFirst.Sum(s => s.WorkPaidHours);
                                sumWORKPAIDHOURS_LASTCHANGESALARY_PREV = listAttendanceTableItemLast.Sum(s => s.WorkPaidHours);
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_AVAILABLEHOURS_PREV.ToString(), sumAVAILABLEHOURS_PREV, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_PREV.ToString(), sumUNPAIDLEAVEHOURS_PREV, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_FIRSTCHANGESALARY_PREV.ToString(), sumUNPAIDLEAVEHOURS_FIRSTCHANGESALARY_PREV, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_LASTCHANGESALARY_PREV.ToString(), sumUNPAIDLEAVEHOURS_LASTCHANGESALARY_PREV, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_FIRSTCHANGESALARY_PREV.ToString(), sumPAIDLEAVEHOURS_FIRSTCHANGESALARY_PREV, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_LASTCHANGESALARY_PREV.ToString(), sumPAIDLEAVEHOURS_LASTCHANGESALARY_PREV, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_PREV.ToString(), sumWORKPAIDHOURS_PREV, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_FIRSTCHANGESALARY_PREV.ToString(), sumWORKPAIDHOURS_FIRSTCHANGESALARY_PREV, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_LASTCHANGESALARY_PREV.ToString(), sumWORKPAIDHOURS_LASTCHANGESALARY_PREV, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_PREV.ToString(), sumPAIDLEAVEHOURS_PREV, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [16/04/2018][bang.nguyen][94187][Modify Func]
            // Số giờ làm việc theo quy định
            //ATT_ATTENDANCETABLEITEM_SUM_AVAILABLEHOURS,
            //Số giờ nghỉ không trả lương"
            //ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS,
            //Số giờ nghỉ không trả lương trước khi thay đổi lương
            //ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_FIRSTCHANGESALARY,
            //Số giờ nghỉ không trả lương sau khi thay đổi lương
            //ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_LASTCHANGESALARY,
            //Số giờ nghỉ trả lương trước khi thay đổi lương
            //ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_FIRSTCHANGESALARY,
            //Số giờ nghỉ trả lương sau khi thay đổi lương
            //ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_LASTCHANGESALARY,
            //[Description("Số giờ nghỉ trả lương")]
            //ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS,
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_AVAILABLEHOURS.ToString(),
            PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS.ToString(),PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_FIRSTCHANGESALARY.ToString()
            ,PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_LASTCHANGESALARY.ToString(),PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_FIRSTCHANGESALARY.ToString()
            ,PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_LASTCHANGESALARY.ToString(),PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS.ToString()
            ,PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_FIRSTCHANGESALARY.ToString(),PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_LASTCHANGESALARY.ToString()
            ,PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS.ToString()}))
            {
                double sumAVAILABLEHOURS = 0;
                double sumAVAILABLEHOURS_FIRSTCHANGESALARY = 0;
                double sumAVAILABLEHOURS_LASTCHANGESALARY = 0;
                double sumUNPAIDLEAVEHOURS = 0;
                double sumPAIDLEAVEHOURS = 0;
                double sumWORKPAIDHOURS = 0;

                double sumUNPAIDLEAVEHOURS_FIRSTCHANGESALARY = 0;
                double sumUNPAIDLEAVEHOURS_LASTCHANGESALARY = 0;
                double sumPAIDLEAVEHOURS_FIRSTCHANGESALARY = 0;
                double sumPAIDLEAVEHOURS_LASTCHANGESALARY = 0;

                double sumWORKPAIDHOURS_FIRSTCHANGESALARY = 0;
                double sumWORKPAIDHOURS_LASTCHANGESALARY = 0;
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);

                if (objAttendanceTableProCut != null)
                {
                    var listAttTableItemByProAndCutOff = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                    if (listAttTableItemByProAndCutOff.Count > 0)
                    {
                        sumAVAILABLEHOURS = listAttTableItemByProAndCutOff.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).Sum(s => s.AvailableHours);
                        sumUNPAIDLEAVEHOURS = listAttTableItemByProAndCutOff.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).Sum(s => s.UnpaidLeaveHours);
                        sumWORKPAIDHOURS = listAttTableItemByProAndCutOff.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).Sum(s => s.WorkPaidHours);
                        sumPAIDLEAVEHOURS = listAttTableItemByProAndCutOff.Where(s => s.WorkDate >= CutOffDuration.DateStart && s.WorkDate <= CutOffDuration.DateEnd).Sum(s => s.PaidLeaveHours);

                        if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic, CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                        {
                            var objBasicSalaryChange = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd && m.DateOfEffect >= CutOffDuration.DateStart).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                            if (objBasicSalaryChange != null)
                            {
                                var listAttendanceTableItemFirst = listAttTableItemByProAndCutOff.Where(m => m.WorkDate >= CutOffDuration.DateStart && m.WorkDate < objBasicSalaryChange.DateOfEffect).ToList();
                                var listAttendanceTableItemLast = listAttTableItemByProAndCutOff.Where(m => m.WorkDate >= objBasicSalaryChange.DateOfEffect && m.WorkDate <= CutOffDuration.DateEnd).ToList();

                                sumUNPAIDLEAVEHOURS_FIRSTCHANGESALARY = listAttendanceTableItemFirst.Sum(s => s.UnpaidLeaveHours);
                                sumUNPAIDLEAVEHOURS_LASTCHANGESALARY = listAttendanceTableItemLast.Sum(s => s.UnpaidLeaveHours);
                                sumPAIDLEAVEHOURS_FIRSTCHANGESALARY = listAttendanceTableItemFirst.Sum(s => s.PaidLeaveHours);
                                sumPAIDLEAVEHOURS_LASTCHANGESALARY = listAttendanceTableItemLast.Sum(s => s.PaidLeaveHours);
                                sumWORKPAIDHOURS_FIRSTCHANGESALARY = listAttendanceTableItemFirst.Sum(s => s.WorkPaidHours);
                                sumWORKPAIDHOURS_LASTCHANGESALARY = listAttendanceTableItemLast.Sum(s => s.WorkPaidHours);

                                sumAVAILABLEHOURS_FIRSTCHANGESALARY = listAttendanceTableItemFirst.Sum(s => s.AvailableHours);
                                sumAVAILABLEHOURS_LASTCHANGESALARY = listAttendanceTableItemLast.Sum(s => s.AvailableHours);
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_AVAILABLEHOURS.ToString(), sumAVAILABLEHOURS, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_AVAILABLEHOURS_FIRSTCHANGESALARY.ToString(), sumAVAILABLEHOURS_FIRSTCHANGESALARY, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_AVAILABLEHOURS_LASTCHANGESALARY.ToString(), sumAVAILABLEHOURS_LASTCHANGESALARY, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS.ToString(), sumUNPAIDLEAVEHOURS, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_FIRSTCHANGESALARY.ToString(), sumUNPAIDLEAVEHOURS_FIRSTCHANGESALARY, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_UNPAIDLEAVEHOURS_LASTCHANGESALARY.ToString(), sumUNPAIDLEAVEHOURS_LASTCHANGESALARY, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_FIRSTCHANGESALARY.ToString(), sumPAIDLEAVEHOURS_FIRSTCHANGESALARY, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS_LASTCHANGESALARY.ToString(), sumPAIDLEAVEHOURS_LASTCHANGESALARY, 0);
                listElementFormula.Add(item);

                //[24/01/2018][bang.nguyen][92577][Modify Func]
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS.ToString(), sumWORKPAIDHOURS, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_FIRSTCHANGESALARY.ToString(), sumWORKPAIDHOURS_FIRSTCHANGESALARY, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_LASTCHANGESALARY.ToString(), sumWORKPAIDHOURS_LASTCHANGESALARY, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_PAIDLEAVEHOURS.ToString(), sumPAIDLEAVEHOURS, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [16/01/2018][bang.nguyen][92094][New Func] giờ công thực tế, trên lệch, dương, âm
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_ATTENDANCETABLE_TOTALACTUALWORKHOUR.ToString()
        ,PayrollElement.ATT_ATTENDANCETABLE_TOTALDIFFERENCEHOUR.ToString(),PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_DIFFERENCEHOUR_PLUS.ToString()
        ,PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_DIFFERENCEHOUR_MINUS.ToString()}))
            {
                double totalActualWorkHour = 0;
                double totalDifferenceHour = 0;
                double sumDifferenceHour_Plus = 0;
                double sumDifferenceHour_Minus = 0;

                if (objAttendanceTableProCut != null)
                {
                    if (objAttendanceTableProCut.TotalActualWorkHour != null)
                    {
                        totalActualWorkHour = objAttendanceTableProCut.TotalActualWorkHour.Value;
                    }
                    if (objAttendanceTableProCut.TotalDifferenceHour != null)
                    {
                        totalDifferenceHour = objAttendanceTableProCut.TotalDifferenceHour.Value;
                    }

                    var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                    if (listAttendanceTableItem.Count > 0)
                    {
                        sumDifferenceHour_Plus = listAttendanceTableItem.Where(s => s.DifferenceHour != null && s.DifferenceHour > 0).Sum(s => s.DifferenceHour.Value);
                        sumDifferenceHour_Minus = listAttendanceTableItem.Where(s => s.DifferenceHour != null && s.DifferenceHour < 0).Sum(s => s.DifferenceHour.Value);
                    }
                }

                //tổng số giờ công thực tế
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_TOTALACTUALWORKHOUR.ToString(), totalActualWorkHour, 0);
                listElementFormula.Add(item);
                //tổng số giờ công chênh lệch
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_TOTALDIFFERENCEHOUR.ToString(), totalDifferenceHour, 0);
                listElementFormula.Add(item);
                //lương tổng số giờ công chênh lệch dương
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_DIFFERENCEHOUR_PLUS.ToString(), sumDifferenceHour_Plus, 0);
                listElementFormula.Add(item);
                //tổng số giờ công chênh lệch âm
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_DIFFERENCEHOUR_MINUS.ToString(), sumDifferenceHour_Minus, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Đếm số ca làm việc của nhân viên thử việc trong kỳ tính lương
            //[05/12/2017][bang.nguyen][90648][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_COUNT_ROSTER_PROBATION.ToString()))
            {
                var listRosterProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);
                var commonServices = new Att_CommonServices();
                var listStatus = commonServices.GetConfigStatusRosterCompute();
                int countRosterProbation = 0;

                var dateHire = profileItem.DatehireNew != null ? profileItem.DatehireNew : profileItem.DateHire;
                DateTime dateFrom = (dateHire != null && dateHire > CutOffDuration.DateStart) ? dateHire.Value : CutOffDuration.DateStart;
                DateTime dateTo = (profileItem.DateEndProbation != null && profileItem.DateEndProbation.Value < CutOffDuration.DateEnd) ? profileItem.DateEndProbation.Value : CutOffDuration.DateEnd;
                if (dateFrom != null && dateTo != null)
                {
                    var listRosterByProfile = listRosterProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart && listStatus.Contains(m.Status)).ToList();
                    //rostergroup thang N
                    var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.DateEnd && s.DateEnd >= CutOffDuration.DateStart).ToList();
                    //lich lam viec thang N
                    var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                        dateFrom,
                        dateTo,
                        profileItem.ID,
                        listRosterByProfile,
                        listRosterGroup,
                        TotalDataAll.listRosterGroupByOrganization,
                        TotalDataAll.listRosterGroupType,
                        TotalDataAll.listOrgStructure,
                        TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                .Where(s => s.ProfileID == profileItem.ID
                                && s.DateEffective <= dateTo
                                && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                .FirstOrDefault());

                    if (lstDailyShift.Count > 0)
                    {
                        for (DateTime date = dateFrom; date <= dateTo; date = date.AddDays(1))
                        {
                            if (lstDailyShift.ContainsKey(date) && lstDailyShift[date] != null)
                            {
                                var listRoterByDate = lstDailyShift[date];
                                countRosterProbation += listRoterByDate.Where(s => s != null && s != Guid.Empty).Count();
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_COUNT_ROSTER_PROBATION.ToString(), countRosterProbation, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region Đếm số ca làm việc trước khi vào làm,Đếm số ca làm việc trước ngày nghỉ theo đơn
            //[05/12/2017][bang.nguyen][90648][New Func]
            //[20/05/2021][tung.tran][127045]: Thêm 2 enum sum số ngày
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_COUNT_ROSTER_BEFORE_JOIN.ToString(),
                PayrollElement.ATT_SUMDAY_ROSTER_BEFORE_JOIN.ToString(),
                PayrollElement.ATT_COUNT_ROSTER_AFTER_QUITREQUEST.ToString(),
                PayrollElement.ATT_SUMDAY_ROSTER_AFTER_QUITREQUEST.ToString()
            }))
            {
                var listRosterProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);
                var commonServices = new Att_CommonServices();
                var listStatus = commonServices.GetConfigStatusRosterCompute();
                int countRosterBeforeJoin = 0;
                double sumHoursRosterBeforeJoin = 0;
                int countRosterAfterQuitRequest = 0;
                double sumHoursRosterAfterQuit = 0;
                DateTime? joinDate = null;
                if (profileItem.DatehireNew != null)
                {
                    if (profileItem.DatehireNew >= CutOffDuration.DateStart && profileItem.DatehireNew <= CutOffDuration.DateEnd)
                    {
                        joinDate = profileItem.DatehireNew;
                    }
                    else
                    {
                        if (profileItem.DateHire != null && profileItem.DateHire >= CutOffDuration.DateStart && profileItem.DateHire <= CutOffDuration.DateEnd)
                        {
                            joinDate = profileItem.DateHire;
                        }
                    }
                }
                else
                {
                    if (profileItem.DateHire != null && profileItem.DateHire >= CutOffDuration.DateStart && profileItem.DateHire <= CutOffDuration.DateEnd)
                    {
                        joinDate = profileItem.DateHire;
                    }
                }
                if (joinDate != null)
                {
                    DateTime dateFrom = CutOffDuration.DateStart;
                    DateTime dateTo = joinDate.Value.AddDays(-1);

                    var listRosterByProfile = listRosterProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart && listStatus.Contains(m.Status)).ToList();

                    //rostergroup thang N
                    var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.DateEnd && s.DateEnd >= CutOffDuration.DateStart).ToList();

                    //lich lam viec thang N
                    var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                        dateFrom,
                        dateTo,
                        profileItem.ID,
                        listRosterByProfile,
                        listRosterGroup,
                        TotalDataAll.listRosterGroupByOrganization,
                        TotalDataAll.listRosterGroupType,
                        TotalDataAll.listOrgStructure,
                        TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                .Where(s => s.ProfileID == profileItem.ID
                                && s.DateEffective <= dateTo
                                && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                .FirstOrDefault());

                    if (lstDailyShift.Count > 0)
                    {
                        for (DateTime date = dateFrom; date <= dateTo; date = date.AddDays(1))
                        {
                            if (lstDailyShift.ContainsKey(date) && lstDailyShift[date] != null)
                            {
                                var listRoterByDate = lstDailyShift[date];
                                countRosterBeforeJoin += listRoterByDate.Where(s => s != null && s != Guid.Empty).Count();

                                var shiftID = listRoterByDate.Where(s => s != null && s != Guid.Empty).FirstOrDefault();
                                if (shiftID != null)
                                {
                                    var objShift = TotalDataAll.listCat_Shift.FirstOrDefault(x => x.ID == shiftID);
                                    if (objShift != null && objShift.WorkHours != null && (objShift.StdWorkHours != null && objShift.StdWorkHours != 0))
                                    {
                                        sumHoursRosterBeforeJoin += (objShift.WorkHours.Value / objShift.StdWorkHours.Value);
                                    }
                                }
                            }
                        }
                    }
                }

                if (profileItem.DateQuitRequest != null && profileItem.DateQuitRequest >= CutOffDuration.DateStart && profileItem.DateQuitRequest <= CutOffDuration.DateEnd)
                {
                    DateTime dateFrom = profileItem.DateQuitRequest.Value.AddDays(1);
                    DateTime dateTo = CutOffDuration.DateEnd;
                    var listRosterByProfile = listRosterProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart && listStatus.Contains(m.Status)).ToList();

                    //rostergroup thang N
                    var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.DateEnd && s.DateEnd >= CutOffDuration.DateStart).ToList();

                    //lich lam viec thang N
                    var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                        dateFrom,
                        dateTo,
                        profileItem.ID,
                        listRosterByProfile,
                        listRosterGroup,
                        TotalDataAll.listRosterGroupByOrganization,
                        TotalDataAll.listRosterGroupType,
                        TotalDataAll.listOrgStructure,
                        TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                .Where(s => s.ProfileID == profileItem.ID
                                && s.DateEffective <= dateTo
                                && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                .FirstOrDefault());

                    if (lstDailyShift.Count > 0)
                    {
                        for (DateTime date = dateFrom; date <= dateTo; date = date.AddDays(1))
                        {
                            if (lstDailyShift.ContainsKey(date) && lstDailyShift[date] != null)
                            {
                                var listRoterByDate = lstDailyShift[date];
                                countRosterAfterQuitRequest += listRoterByDate.Where(s => s != null && s != Guid.Empty).Count();
                            }
                        }
                    }
                }

                if (profileItem.DateQuit != null)
                {
                    DateTime dateFrom = profileItem.DateQuit.Value.Date;
                    DateTime dateTo = CutOffDuration.DateEnd;
                    var listRosterByProfile = listRosterProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart && listStatus.Contains(m.Status)).ToList();

                    //rostergroup thang N
                    var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.DateEnd && s.DateEnd >= CutOffDuration.DateStart).ToList();

                    //lich lam viec thang N
                    var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                        dateFrom,
                        dateTo,
                        profileItem.ID,
                        listRosterByProfile,
                        listRosterGroup,
                        TotalDataAll.listRosterGroupByOrganization,
                        TotalDataAll.listRosterGroupType,
                        TotalDataAll.listOrgStructure,
                        TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                .Where(s => s.ProfileID == profileItem.ID
                                && s.DateEffective <= dateTo
                                && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                .FirstOrDefault());

                    if (lstDailyShift.Count > 0)
                    {
                        for (DateTime date = dateFrom; date <= dateTo; date = date.AddDays(1))
                        {
                            if (lstDailyShift.ContainsKey(date) && lstDailyShift[date] != null)
                            {
                                var listRoterByDate = lstDailyShift[date];
                                var shiftID = listRoterByDate.Where(s => s != null && s != Guid.Empty).FirstOrDefault();
                                if (shiftID != null)
                                {
                                    var objShift = TotalDataAll.listCat_Shift.FirstOrDefault(x => x.ID == shiftID);
                                    if (objShift != null && objShift.WorkHours != null && (objShift.StdWorkHours != null && objShift.StdWorkHours != 0))
                                    {
                                        sumHoursRosterAfterQuit += (objShift.WorkHours.Value / objShift.StdWorkHours.Value);
                                    }
                                }
                            }
                        }
                    }
                }

                item = new ElementFormula(PayrollElement.ATT_COUNT_ROSTER_BEFORE_JOIN.ToString(), countRosterBeforeJoin, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_COUNT_ROSTER_AFTER_QUITREQUEST.ToString(), countRosterAfterQuitRequest, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_SUMDAY_ROSTER_BEFORE_JOIN.ToString(), sumHoursRosterBeforeJoin, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_SUMDAY_ROSTER_AFTER_QUITREQUEST.ToString(), sumHoursRosterAfterQuit, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region đếm số ngày thứ 7 trong trước và sau thay đổi lương trong kỳ
            //[10/04/2018][bang.nguyen][94120][New Func] -- ky cong
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_SAT_DAY_BEFOR.ToString(), PayrollElement.ATT_COUNT_SAT_DAY_AFTER.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                int countSatDayBefor = 0;
                int countSatDayAfter = 0;
                //Kiểm tra có thay đổi lương trong tháng 
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic, CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    //Ngày thay đổi lương trong tháng
                    DateTime dateChangeBasicSalary = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                    var dateHireCompute = profileItem.DateHire.Value;
                    if (profileItem.DatehireNew != null)
                    {
                        dateHireCompute = profileItem.DatehireNew.Value;
                    }
                    DateTime dateQuit = DateTime.MaxValue;
                    if (profileItem.DateQuit != null)
                    {
                        dateQuit = profileItem.DateQuit.Value.AddDays(-1);
                    }

                    //[05/06/2018][bang.nguyen][95741][Modify Func]
                    //Không tính thời gian thứ 7 trong giai đoạn nghỉ thai sản (loại ngày nghỉ: PRG, trạng thái: duyệt)
                    var listLeaveDayPRG = new List<Att_LeaveDayEntity>();
                    var objLeaveDayTypePRG = TotalDataAll.listLeavedayType.Where(s => s.Code == LeavedayTypeCode.PRG.ToString()).FirstOrDefault();
                    if (objLeaveDayTypePRG != null)
                    {
                        listLeaveDayPRG = TotalDataAll.dicLeaveDayNotStatus.GetValueOrNew(profileItem.ID)
                            .Where(s => s.DateStart <= CutOffDuration.DateEnd
                                && s.DateEnd >= CutOffDuration.DateStart
                                && s.LeaveDayTypeID == objLeaveDayTypePRG.ID)
                            .ToList();
                        var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_ANNUALDETAIL_LEAVEDAYSTATUS.ToString()).FirstOrDefault();
                        if (listLeaveDayPRG.Count > 0 && objAllSetting != null && !string.IsNullOrEmpty(objAllSetting.Value1))
                        {
                            string statusLeaveday = string.Empty;
                            statusLeaveday = objAllSetting.Value1;
                            listLeaveDayPRG = listLeaveDayPRG.Where(s => s.Status == statusLeaveday).ToList();
                        }
                    }
                    int countLeaveDayPRG = listLeaveDayPRG.Count;

                    #region Từ đầu kỳ đến trước ngày thay đổi lương
                    DateTime dateStartBefor = CutOffDuration.DateStart;
                    DateTime dateEndBefor = dateChangeBasicSalary.AddDays(-1);


                    var _dictionnaryByCountSatDayBefor = Common.GetStartEndTimeLine(dateStartBefor, dateEndBefor, dateHireCompute, dateQuit);

                    if (_dictionnaryByCountSatDayBefor.ContainsKey(true))
                    {
                        var lstDateTime = _dictionnaryByCountSatDayBefor[true];

                        var dateStartTimeLine = lstDateTime.FirstOrDefault();
                        var dateEndTimeLine = lstDateTime.LastOrDefault();

                        for (DateTime date = dateStartTimeLine; date <= dateEndTimeLine; date = date.AddDays(1))
                        {
                            if (date.DayOfWeek == DayOfWeek.Saturday)
                            {
                                //[05/06/2018][bang.nguyen][95741][Modify Func]
                                //Không tính thời gian thứ 7 trong giai đoạn nghỉ thai sản
                                if (countLeaveDayPRG == 0 || listLeaveDayPRG.Where(s => s.DateStart <= date && s.DateEnd >= date).Count() == 0)
                                {
                                    countSatDayBefor += 1;
                                }
                            }
                        }
                    }

                    #endregion

                    #region Từ ngày thay đổi lương đến cuối kỳ lương

                    DateTime dateStartAfter = dateChangeBasicSalary;
                    DateTime dateEndAfter = CutOffDuration.DateEnd;


                    var _dictionnaryByCountSatDayAfter = Common.GetStartEndTimeLine(dateStartAfter, dateEndAfter, dateHireCompute, dateQuit);

                    if (_dictionnaryByCountSatDayAfter.ContainsKey(true))
                    {
                        var lstDateTime = _dictionnaryByCountSatDayAfter[true];

                        var dateStartTimeLine = lstDateTime.FirstOrDefault();
                        var dateEndTimeLine = lstDateTime.LastOrDefault();

                        for (DateTime date = dateStartTimeLine; date <= dateEndTimeLine; date = date.AddDays(1))
                        {
                            if (date.DayOfWeek == DayOfWeek.Saturday)
                            {
                                //[05/06/2018][bang.nguyen][95741][Modify Func]
                                //Không tính thời gian thứ 7 trong giai đoạn nghỉ thai sản
                                if (countLeaveDayPRG == 0 || listLeaveDayPRG.Where(s => s.DateStart <= date && s.DateEnd >= date).Count() == 0)
                                {
                                    countSatDayAfter += 1;
                                }
                            }
                        }
                    }

                    #endregion
                }

                item = new ElementFormula(PayrollElement.ATT_COUNT_SAT_DAY_BEFOR.ToString(), countSatDayBefor, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_COUNT_SAT_DAY_AFTER.ToString(), countSatDayAfter, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region đếm số ngày thứ 7 trong kì công, và kì công trừ
            //[13/10/2017][bang.nguyen][88479][New Func] -- ky cong
            //[13/10/2017][bang.nguyen][88499][New Func] -- ky tru cong
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_SAT_DAY.ToString(), PayrollElement.ATT_COUNT_SAT_DAY_BACKPAY.ToString() }))
            {

                var dateHireCompute = profileItem.DateHire.Value;
                if (profileItem.DatehireNew != null)
                {
                    dateHireCompute = profileItem.DatehireNew.Value;
                }

                DateTime dateQuit = DateTime.MaxValue;
                if (profileItem.DateQuit != null)
                {
                    dateQuit = profileItem.DateQuit.Value.AddDays(-1);
                }
                DateTime dateStart = CutOffDuration.DateStart;
                DateTime dateEnd = CutOffDuration.DateEnd;

                #region Theo kỳ công
                //[05/06/2018][bang.nguyen][95741][Modify Func]
                //Không tính thời gian thứ 7 trong giai đoạn nghỉ thai sản (loại ngày nghỉ: PRG, trạng thái: duyệt)
                var listLeaveDayPRG = new List<Att_LeaveDayEntity>();
                var objLeaveDayTypePRG = TotalDataAll.listLeavedayType.Where(s => s.Code == LeavedayTypeCode.PRG.ToString()).FirstOrDefault();
                if (objLeaveDayTypePRG != null)
                {
                    listLeaveDayPRG = TotalDataAll.dicLeaveDayNotStatus.GetValueOrNew(profileItem.ID)
                        .Where(s => s.DateStart <= CutOffDuration.DateEnd
                            && s.DateEnd >= CutOffDuration.DateStart
                            && s.LeaveDayTypeID == objLeaveDayTypePRG.ID)
                        .ToList();
                    var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_ANNUALDETAIL_LEAVEDAYSTATUS.ToString()).FirstOrDefault();
                    if (listLeaveDayPRG.Count > 0 && objAllSetting != null && !string.IsNullOrEmpty(objAllSetting.Value1))
                    {
                        string statusLeaveday = string.Empty;
                        statusLeaveday = objAllSetting.Value1;
                        listLeaveDayPRG = listLeaveDayPRG.Where(s => s.Status == statusLeaveday).ToList();
                    }
                }
                int countLeaveDayPRG = listLeaveDayPRG.Count;

                int countSatDay = 0;

                var _dictionnaryByCountSatDay = Common.GetStartEndTimeLine(dateStart, dateEnd, dateHireCompute, dateQuit);

                if (_dictionnaryByCountSatDay.ContainsKey(true))
                {
                    var lstDateTime = _dictionnaryByCountSatDay[true];

                    var dateStartTimeLine = lstDateTime.FirstOrDefault();
                    var dateEndTimeLine = lstDateTime.LastOrDefault();

                    for (DateTime date = dateStartTimeLine; date <= dateEndTimeLine; date = date.AddDays(1))
                    {
                        if (date.DayOfWeek == DayOfWeek.Saturday)
                        {
                            //[05/06/2018][bang.nguyen][95741][Modify Func]
                            //Không tính thời gian thứ 7 trong giai đoạn nghỉ thai sản
                            if (countLeaveDayPRG == 0 || listLeaveDayPRG.Where(s => s.DateStart <= date && s.DateEnd >= date).Count() == 0)
                            {
                                countSatDay += 1;
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_COUNT_SAT_DAY.ToString(), countSatDay, 0);
                listElementFormula.Add(item);
                #endregion


                #region Theo kỳ trừ công
                int countSatDayBackPay = 0;

                if (CutOffDuration.BackPayFrom != null && CutOffDuration.BackPayTo != null)
                {
                    dateStart = CutOffDuration.BackPayFrom.Value;
                    dateEnd = CutOffDuration.BackPayTo.Value;

                    var _dictionnaryByCountSatDayBackPay = Common.GetStartEndTimeLine(dateStart, dateEnd, dateHireCompute, dateQuit);

                    if (_dictionnaryByCountSatDayBackPay.ContainsKey(true))
                    {
                        var lstDateTime = _dictionnaryByCountSatDayBackPay[true];

                        var dateStartTimeLine = lstDateTime.FirstOrDefault();
                        var dateEndTimeLine = lstDateTime.LastOrDefault();

                        for (DateTime date = dateStartTimeLine; date <= dateEndTimeLine; date = date.AddDays(1))
                        {
                            if (date.DayOfWeek == DayOfWeek.Saturday)
                            {
                                countSatDayBackPay += 1;
                            }
                        }
                    }
                }
                #endregion
                item = new ElementFormula(PayrollElement.ATT_COUNT_SAT_DAY_BACKPAY.ToString(), countSatDayBackPay, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [22/08/2017][bang.nguyen][87106][New Func]: Lấy thêm phần tử lương số ngày hưởng chế độ thai sản chưa nộp đơn
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_COUNT_ATTENDANCETABLEITEM_PREGNANCYISNOTSUBMITDOC.ToString()))
            {
                int countPregnancyIsNotSubmitDoc = 0;
                if (objAttendanceTableProCut != null)
                {
                    countPregnancyIsNotSubmitDoc = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(s => s.PregnancyIsNotSubmitDoc == true).Count();
                }
                item = new ElementFormula(PayrollElement.ATT_COUNT_ATTENDANCETABLEITEM_PREGNANCYISNOTSUBMITDOC.ToString(), countPregnancyIsNotSubmitDoc, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [24/07/2017][bang.nguyen][85593][New Func]: So ngay di cong tac khong an trua
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_COUNT_LEAVEDAYS_NOTMEAL.ToString()))
            {
                int _CountLeavedaysNotMeal = 0;
                //[29/12/2018][bang.nguyen]
                //ban đầu hiểu là chỉ có 1 loại IsMeal = 1
                //=> hiện có thể có nhiều loại IsMeal = 1
                var listLeaveDayTypeIDIsMeal = TotalDataAll.listLeavedayType.Where(s => s.IsMeal == true).Select(s => s.ID).ToList();
                if (listLeaveDayTypeIDIsMeal.Count > 0)
                {
                    var listLeaveDay = TotalDataAll.dicLeaveDay.GetValueOrNew(profileItem.ID).Where(s => s.ProfileID == profileItem.ID
                    && s.DateStart.Date <= CutOffDuration.DateEnd
                    && s.DateEnd.Date >= CutOffDuration.DateStart
                    && s.HaveMeal == null
                    && listLeaveDayTypeIDIsMeal.Contains(s.LeaveDayTypeID)).ToList();
                    var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_ANNUALDETAIL_LEAVEDAYSTATUS.ToString()).FirstOrDefault();
                    string statusLeaveday = string.Empty;
                    if (objAllSetting != null && !string.IsNullOrEmpty(objAllSetting.Value1))
                    {
                        statusLeaveday = objAllSetting.Value1;
                        listLeaveDay = listLeaveDay.Where(s => s.Status == statusLeaveday).ToList();
                    }
                    if (listLeaveDay.Count > 0)
                    {
                        var minDateStart = listLeaveDay.Min(s => s.DateStart.Date);
                        var maxDateEnd = listLeaveDay.Max(s => s.DateEnd.Date);

                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                            s.WorkDate >= CutOffDuration.DateStart
                        && s.WorkDate <= CutOffDuration.DateEnd
                        && s.WorkDate >= minDateStart
                        && s.WorkDate <= maxDateEnd
                        && (s.ShiftID != null || s.Shift2ID != null)
                        && (s.LeaveTypeID != null || s.ExtraLeaveTypeID != null || s.ExtraLeaveType3ID != null || s.ExtraLeaveType4ID != null
                            || s.ExtraLeaveType5ID != null || s.ExtraLeaveType6ID != null)
                        ).ToList();
                        foreach (var objAttendanceTableItem in listAttendanceTableItem)
                        {
                            if (listLeaveDay.Where(s => s.DateStart.Date <= objAttendanceTableItem.WorkDate && objAttendanceTableItem.WorkDate <= s.DateEnd.Date).Count() > 0)
                            {
                                _CountLeavedaysNotMeal += 1;
                            }
                        }
                    }
                }
                //So ngay di cong tac khong an trua
                item = new ElementFormula(PayrollElement.ATT_COUNT_LEAVEDAYS_NOTMEAL.ToString(), _CountLeavedaysNotMeal, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [15/04/2017][bang.nguyen][81193][New Func]
            //lấy lên ngày nghỉ đầu tiên và cuối cùng thuộc kỳ lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_ATTENDANCETABLEITEM_LEAVETYPE_MIN_WORKDATE.ToString(), PayrollElement.ATT_ATTENDANCETABLEITEM_LEAVETYPE_MAX_WORKDATE.ToString() }))
            {
                var objAttendanceTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();
                if (objAttendanceTable != null)
                {
                    var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTable.ID).Where(s => s.LeaveTypeID != null).ToList();

                    if (listAttendanceTableItem.Count > 0)
                    {
                        var minWorkDate = DateTime.MinValue;
                        var maxWorkDate = DateTime.MinValue;
                        minWorkDate = listAttendanceTableItem.Min(s => s.WorkDate);
                        maxWorkDate = listAttendanceTableItem.Max(s => s.WorkDate);
                        item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_LEAVETYPE_MIN_WORKDATE.ToString(), minWorkDate, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_LEAVETYPE_MAX_WORKDATE.ToString(), maxWorkDate, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_LEAVETYPE_MIN_WORKDATE.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_LEAVETYPE_MAX_WORKDATE.ToString(), null, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region [29/12/2016][HienNguyen][0077300]: xác định nhân viên có được hưởng chế độ phụ nữ
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLE_IS_WOMAN_POLICY.ToString()))
            {
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_IS_WOMAN_POLICY.ToString(), objAttendanceTableProCut.IsWomanPolicy ?? false, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [20/12/2016][bang.nguyen][76954][modify]: Số phút muộn sớm kỳ trừ công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLEITEM_BACKSHIFTCOUNT.ToString()))
            {
                double result = 0;
                if (CutOffDuration.BackPayFrom.HasValue && CutOffDuration.BackPayTo.HasValue)
                {
                    using (var context = new VnrHrmDataContext())
                    {
                        var unitOfWork = (IUnitOfWork)new UnitOfWork(context);

                        string nameTableGetData = "listAtt_AttendanceTableItemByBackPay";
                        if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                        {
                            TotalData600.listAtt_AttendanceTableItemByBackPay = unitOfWork.CreateQueryable<Att_AttendanceTableItem>(m => m.IsDelete != true
                                                                                          && m.Att_AttendanceTable != null
                                                                                          && TotalData600.listProfileIds.Contains(m.Att_AttendanceTable.ProfileID)
                                                                                          && m.Att_AttendanceTable.IsDelete == null
                                                                                          && m.WorkDate <= CutOffDuration.BackPayTo
                                                                                          && m.WorkDate >= CutOffDuration.BackPayFrom
                                                                                          ).Select(x => new Att_AttendanceTableItemEntity
                                                                                          {
                                                                                              LeaveDays = x.LeaveDays,
                                                                                              LeaveTypeID = x.LeaveTypeID,
                                                                                              ProfileID = x.Att_AttendanceTable.ProfileID,
                                                                                              IsDelete = x.Att_AttendanceTable.IsDelete,
                                                                                              WorkDate = x.WorkDate,
                                                                                              ShiftID = x.ShiftID,
                                                                                              AttendanceTableID = x.AttendanceTableID
                                                                                          }).ToList();
                            TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                        }

                        result = TotalData600.listAtt_AttendanceTableItemByBackPay.Where(
                                                                        m => m.WorkDate <= CutOffDuration.BackPayTo
                                                                        && m.WorkDate >= CutOffDuration.BackPayFrom
                                                                        && m.ShiftID != null
                                                                        && m.IsDelete == null
                                                                        && m.ProfileID == profileItem.ID).Count();
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_BACKSHIFTCOUNT.ToString(), result, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [20/12/2016][HienNguyen][77078]: Số phút muộn sớm kỳ trừ công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLE_BACKPAYLATEEARLYMINUTES.ToString()))
            {
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_BACKPAYLATEEARLYMINUTES.ToString(), objAttendanceTableProCut.BackPayLateEarlyMinutes ?? 0, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [13/12/2016][bang.nguyen][76702]: Đếm giờ hưởng chể độ thai sản trong tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLEITEM_COUNT_PREG_HOURS.ToString()))
            {
                var ListAttendancetableitem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.IsHavingPregTreatment == true).ToList();
                int _COUNT_PREG_HOURS = 0;
                _COUNT_PREG_HOURS = ListAttendancetableitem.Count();
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_COUNT_PREG_HOURS.ToString(), _COUNT_PREG_HOURS, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [18/11/2016][bang.nguyen][75778][modify]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_ANNUALDETAIL_INITAVAILABLE.ToString(), PayrollElement.ATT_ANNUALDETAIL_LEAVEINMONTH.ToString(), PayrollElement.ATT_ANNUALDETAIL_AVAILABLE.ToString(), PayrollElement.ATT_ANNUALDETAIL_REMAIN.ToString(), PayrollElement.ATT_ANNUALDETAIL_TOTALLEAVEBEF.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetDicAnnualDetail(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_ANNUALDETAIL_INITAVAILABLE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_ANNUALDETAIL_INITAVAILABLE.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_ANNUALDETAIL_LEAVEINMONTH.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_ANNUALDETAIL_AVAILABLE.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_ANNUALDETAIL_REMAIN.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_ANNUALDETAIL_TOTALLEAVEBEF.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listAnnualDetailByProfile = TotalData600.dicAnnualDetail.GetValueOrNew(profileItem.ID);
                    //[09/02/2018][bang.nguyen][93205][Modify Func]
                    var objAnnualdetailByProfile = listAnnualDetailByProfile.Where(s => s.ProfileID == profileItem.ID
                                                                                    && s.Type == AnnualLeaveDetailType.E_ANNUAL_LEAVE.ToString()
                                                                                    && s.MonthYear != null
                                                                                    && s.MonthYear.Value.Year == CutOffDuration.MonthYear.Year
                                                                                    && s.MonthYear.Value.Month == CutOffDuration.MonthYear.Month).FirstOrDefault();
                    double? _InitAvailable = 0;
                    double? _LeaveInMonth = 0;
                    double? _Available = 0;
                    double? _Remain = 0;
                    double? _TotalLeaveBef = 0;
                    if (objAnnualdetailByProfile != null)
                    {
                        _InitAvailable = objAnnualdetailByProfile.InitAvailable;
                        _LeaveInMonth = objAnnualdetailByProfile.LeaveInMonth;
                        _Available = objAnnualdetailByProfile.Available;
                        _Remain = objAnnualdetailByProfile.Remain;
                        _TotalLeaveBef = objAnnualdetailByProfile.TotalLeaveBef;

                    }
                    item = new ElementFormula(PayrollElement.ATT_ANNUALDETAIL_INITAVAILABLE.ToString(), _InitAvailable, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_ANNUALDETAIL_LEAVEINMONTH.ToString(), _LeaveInMonth, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_ANNUALDETAIL_AVAILABLE.ToString(), _Available, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_ANNUALDETAIL_REMAIN.ToString(), _Remain, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_ANNUALDETAIL_TOTALLEAVEBEF.ToString(), _TotalLeaveBef, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Khoa.nguyen[7/11/2019] 0110117: [Hotfixbuild pass tuần 19] [FGL] Bổ sung enum phần tử lương " số phép năm còn lại"
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_ANNUALDETAIL_REMAIN_YEAR.ToString() }))
            {

                var listAnnualdetailMonthYear = TotalDataAll.lstAnnualDetail;
                var objAnnualdetailMonthYear = listAnnualdetailMonthYear.Where(s => s.ProfileID == profileItem.ID
                                                                                && s.Year != null
                                                                                && s.Year == CutOffDuration.MonthYear.Year
                                                                                && s.Type == AnnualLeaveDetailType.E_ANNUAL_LEAVE.ToString()
                                                                                ).OrderByDescending(s => s.MonthYear).FirstOrDefault();
                double? _Remain = 0;
                if (objAnnualdetailMonthYear != null)
                {
                    _Remain = objAnnualdetailMonthYear.Remain;

                }
                item = new ElementFormula(PayrollElement.ATT_ANNUALDETAIL_REMAIN_YEAR.ToString(), _Remain, 0, string.Empty);
                listElementFormula.Add(item);
            }

            #endregion

            #region [21072016][bang.nguyen][69104][Modify Func]: ngày bắt đầu nhỏ nhất và ngày kết thúc lớn nhất nghỉ thai sản trong kì lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_LEAVEDAY_PRG_DATESTART.ToString(), PayrollElement.ATT_LEAVEDAY_PRG_DATEEND.ToString() }))
            {
                var objLeaveDayTypePRG = TotalDataAll.listLeavedayType.Where(s => s.Code == "PRG").FirstOrDefault();
                if (objLeaveDayTypePRG != null)
                {
                    var lstLeaveDayPRGByProfile = TotalDataAll.dicLeaveDay.GetValueOrNew(profileItem.ID).Where(s => s.ProfileID == profileItem.ID
                                                                            && s.Status == AttendanceDataStatus.E_APPROVED.ToString()
                                                                            && s.LeaveDayTypeID == objLeaveDayTypePRG.ID
                                                                            ).ToList();
                    //ngày bắt đầu nghỉ thai sản nhỏ nhất trong kì lương
                    var lstLeaveDayPRGForDateStart = lstLeaveDayPRGByProfile.Where(s => s.DateStart >= CutOffDuration.DateStart
                                                                                && s.DateStart <= CutOffDuration.DateEnd).ToList();
                    if (lstLeaveDayPRGForDateStart.Count > 0)
                    {
                        var _dateStart = lstLeaveDayPRGForDateStart.OrderBy(s => s.DateStart).FirstOrDefault().DateStart;
                        item = new ElementFormula(PayrollElement.ATT_LEAVEDAY_PRG_DATESTART.ToString(), _dateStart, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_LEAVEDAY_PRG_DATESTART.ToString(), DateTime.MinValue, 0, "Null");
                        listElementFormula.Add(item);
                    }

                    //ngày kết thúc nghỉ thai sản lớn nhất trong kì lương
                    var lstLeaveDayPRGForDateEnd = lstLeaveDayPRGByProfile.Where(s => s.DateEnd >= CutOffDuration.DateStart
                                                                                && s.DateEnd <= CutOffDuration.DateEnd).ToList();
                    if (lstLeaveDayPRGForDateEnd.Count > 0)
                    {
                        var _dateEnd = lstLeaveDayPRGForDateEnd.OrderByDescending(s => s.DateEnd).FirstOrDefault().DateEnd;
                        item = new ElementFormula(PayrollElement.ATT_LEAVEDAY_PRG_DATEEND.ToString(), _dateEnd, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_LEAVEDAY_PRG_DATEEND.ToString(), DateTime.MinValue, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_LEAVEDAY_PRG_DATESTART.ToString(), DateTime.MinValue, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_LEAVEDAY_PRG_DATEEND.ToString(), DateTime.MinValue, 0, "Null");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [27052016][bang.nguyen][67978][Modify] Phần tử Dịch Chuyển Công
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_MOVEWORKDAY_BALANCING_BYCUTOFF.ToString(),
                PayrollElement.ATT_MOVEWORKDAY_REMAIN_BYCUTOFF.ToString(),
                PayrollElement.ATT_MOVEWORKDAY_USING_BYCUTOFF.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicAtt_MoveWorkday(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_MOVEWORKDAY_BALANCING_BYCUTOFF.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_MOVEWORKDAY_BALANCING_BYCUTOFF.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_MOVEWORKDAY_REMAIN_BYCUTOFF.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_MOVEWORKDAY_USING_BYCUTOFF.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    double _Balancing = 0;
                    double _Using = 0;
                    double _Remain = 0;

                    var listMoveWorkdayByProfileDic = TotalData600.dicAtt_MoveWorkday.GetValueOrNew(profileItem.ID);
                    var objMoveWorkday = listMoveWorkdayByProfileDic.Where(s => s.ProfileID == profileItem.ID && s.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();
                    if (objMoveWorkday != null)
                    {
                        if (objMoveWorkday.Balancing != null)
                        {
                            _Balancing = objMoveWorkday.Balancing.Value;
                        }
                        if (objMoveWorkday.Using != null)
                        {
                            _Using = objMoveWorkday.Using.Value;
                        }
                        if (objMoveWorkday.Remain != null)
                        {
                            _Remain = objMoveWorkday.Remain.Value;
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_MOVEWORKDAY_BALANCING_BYCUTOFF.ToString(), _Balancing, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_MOVEWORKDAY_REMAIN_BYCUTOFF.ToString(), _Remain, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_MOVEWORKDAY_USING_BYCUTOFF.ToString(), _Using, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Phần tử công tháng trước (N-1)
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_WORKING_DAY_PREV.ToString(), PayrollElement.ATT_STD_DAY_PREV.ToString() }))
            {
                if (TotalDataAll.Att_AttendanceTable_Prev != null)
                {
                    Att_AttendanceTableEntity _tmp = TotalDataAll.Att_AttendanceTable_Prev.Where(m => m.ProfileID == profileItem.ID).FirstOrDefault();
                    if (_tmp != null)
                    {
                        item = new ElementFormula(PayrollElement.ATT_WORKING_DAY_PREV.ToString(), _tmp.RealWorkDayCount, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_STD_DAY_PREV.ToString(), _tmp.StdWorkDayCount, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_WORKING_DAY_PREV.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_STD_DAY_PREV.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_WORKING_DAY_PREV.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_STD_DAY_PREV.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Ngày công đi làm thực tế
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_WORKING_DAY.ToString(), PayrollElement.ATT_WORKING_DAY_AFTER.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);

                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                    //lấy dữ liệu công theo cutoff
                    List<Att_AttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                    //[26/06/2017][bang.nguyen][84441][bug]
                    item = new ElementFormula(PayrollElement.ATT_WORKING_DAY.ToString(), listAttTableItem.Where(m => m.WorkDate >= CutOffDuration.DateStart && m.WorkDate < dateStart2).Count(), 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_DAY_AFTER.ToString(), listAttTableItem.Where(m => m.WorkDate >= dateStart2 && m.WorkDate <= CutOffDuration.DateEnd).Count(), 0);
                    listElementFormula.Add(item);
                }
                else if (SalaryProfile.Count > 0)
                {
                    if (objAttendanceTableProCut != null)
                    {
                        item = new ElementFormula(PayrollElement.ATT_WORKING_DAY.ToString(), objAttendanceTableProCut.RealWorkDayCount, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_WORKING_DAY.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }

                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_WORKING_DAY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_DAY_AFTER.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Ngày công đi làm tính lương

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_WORKING_PAIDLEAVE_DAY.ToString(), PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_AFTER.ToString() }))
            {

                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                    //lấy dữ liệu công theo cutoff
                    List<Att_AttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY.ToString(), listAttTableItem.Where(m => m.WorkDate < dateStart2).Count(), 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_AFTER.ToString(), listAttTableItem.Where(m => m.WorkDate >= dateStart2).Count(), 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY.ToString(), objAttendanceTableProCut != null ? objAttendanceTableProCut.TotalPaidWorkDayCount ?? 0 : 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_AFTER.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }

            }

            //[17/05/2016][HienNguyen][67437]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_BASIC_SALARY_PREV_1.ToString(), PayrollElement.SAL_BASIC_SALARY_PREV_2.ToString(), PayrollElement.SAL_IS_CHANGE_BASICSALARY_N_1.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd.AddMonths(-1)).OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart.AddMonths(-1), CutOffDuration.DateEnd.AddMonths(-1), profileItem.ID))//có thay đổi lương trong tháng
                {
                    //Nếu có thay đổi lương thì phần tử ChangeBasicSalary = 1
                    item = new ElementFormula(PayrollElement.SAL_IS_CHANGE_BASICSALARY_N_1.ToString(), 1, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_PREV_1.ToString(), SalaryProfile[1].GrossAmount, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_PREV_2.ToString(), SalaryProfile.FirstOrDefault().GrossAmount, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    //Nếu không thay đổi lương thì phần tử ChangeBasicSalary = 0
                    item = new ElementFormula(PayrollElement.SAL_IS_CHANGE_BASICSALARY_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_PREV_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_PREV_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            //[4/1/2017][HienNguyen][0077541]
            //Thay đổi lương trong tháng tính từ đầu tháng tới cuối tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_IS_CHANGE_BASICSALARY_IN_MONTHYEAR.ToString(), PayrollElement.SAL_BASIC_SALARY1_IN_MONTHYEAR.ToString(), PayrollElement.SAL_BASIC_SALARY2_IN_MONTHYEAR.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);

                DateTime dateStart = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                DateTime dateEnd = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1).AddMonths(1).AddDays(-1);

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic, dateStart, dateEnd, profileItem.ID))
                {
                    item = new ElementFormula(PayrollElement.SAL_IS_CHANGE_BASICSALARY_IN_MONTHYEAR.ToString(), 1, 0);
                    listElementFormula.Add(item);

                    var basicsalaryChangeAfter = GetBasicSalaryIsChange(listBasicSalaryByProfileDic, dateStart, dateEnd, profileItem.ID, 1);
                    var basicsalaryChangeBefore = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect < basicsalaryChangeAfter.DateOfEffect).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();

                    if (basicsalaryChangeAfter.HasValue())
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY2_IN_MONTHYEAR.ToString(), basicsalaryChangeAfter.GrossAmount, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY2_IN_MONTHYEAR.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }

                    if (basicsalaryChangeBefore.HasValue())
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY1_IN_MONTHYEAR.ToString(), basicsalaryChangeBefore.GrossAmount, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY1_IN_MONTHYEAR.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_IS_CHANGE_BASICSALARY_IN_MONTHYEAR.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY1_IN_MONTHYEAR.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY2_IN_MONTHYEAR.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            //[17/05/2016][HienNguyen][67437]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_PREV_1.ToString(), PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_PREV_2.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd.AddMonths(-1)).OrderByDescending(m => m.DateOfEffect).ToList();

                //lấy dữ liệu công theo cutoff
                List<Att_AttendanceTableItemEntity> listAttTableItem = TotalDataAll.listAttendanceTableItem_N_1.Where(m => m.ProfileID == profileItem.ID && m.PaidLeaveHours != 0 && m.AvailableHours != 0).ToList();

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart.AddMonths(-1), CutOffDuration.DateEnd.AddMonths(-1), profileItem.ID))//có thay đổi lương trong tháng
                {


                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart2 = SalaryProfile.OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                    //lưu số ngày nghỉ trước và sau khi thay đổi lương
                    double workpaid = 0;
                    double workpaid_after = 0;

                    //duyệt wa tất cả các dòng
                    foreach (var tableItem in listAttTableItem)
                    {
                        if (tableItem.PaidLeaveHours != 0 && tableItem.AvailableHours != 0)
                        {
                            if (tableItem.WorkDate < dateStart2)//trước khi điều chỉnh
                            {
                                workpaid += tableItem.PaidLeaveHours / tableItem.AvailableHours;
                            }
                            if (tableItem.WorkDate >= dateStart2)//sau khi điều chỉnh
                            {
                                workpaid_after += tableItem.PaidLeaveHours / tableItem.AvailableHours;
                            }
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_PREV_1.ToString(), workpaid, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_PREV_2.ToString(), workpaid_after, 0);
                    listElementFormula.Add(item);
                }
                else
                {

                    item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_PREV_1.ToString(), listAttTableItem.Sum(m => m.PaidLeaveHours / m.AvailableHours), 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_PREV_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            //[17/05/2016][HienNguyen][67437]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_PREV_1.ToString(), PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_PREV_2.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);

                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd.AddMonths(-1)).OrderByDescending(m => m.DateOfEffect).ToList();

                //lấy dữ liệu công theo cutoff
                List<Att_AttendanceTableItemEntity> listAttTableItem = TotalDataAll.listAttendanceTableItem_N_1.Where(m => m.ProfileID == profileItem.ID && m.WorkPaidHours != 0 && m.AvailableHours != 0).ToList();

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart.AddMonths(-1), CutOffDuration.DateEnd.AddMonths(-1), profileItem.ID))//có thay đổi lương trong tháng
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart2 = SalaryProfile.OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                    //lưu số ngày công tính lương trước và sau khi thay đổi lương
                    double workpaid = 0;
                    double workpaid_after = 0;

                    //duyệt wa tất cả các dòng
                    foreach (var tableItem in listAttTableItem)
                    {
                        if (tableItem.WorkPaidHours != 0 && tableItem.AvailableHours != 0)
                        {
                            if (tableItem.WorkDate < dateStart2)//trước khi điều chỉnh
                            {
                                workpaid += tableItem.WorkPaidHours / tableItem.AvailableHours;
                            }
                            if (tableItem.WorkDate >= dateStart2)//sau khi điều chỉnh
                            {
                                workpaid_after += tableItem.WorkPaidHours / tableItem.AvailableHours;
                            }
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_PREV_1.ToString(), workpaid, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_PREV_2.ToString(), workpaid_after, 0);
                    listElementFormula.Add(item);

                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_PREV_1.ToString(), listAttTableItem.Sum(m => m.WorkPaidHours / m.AvailableHours), 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_PREV_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_1.ToString(), PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_2.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    //lấy dòng hiệu lực mới nhất trong tháng (trường hợp thay đổi nhiều lần trong tháng cũng vậy)
                    var objChangeSalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID
                    && m.DateOfEffect > CutOffDuration.DateStart
                    && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                    DateTime dateStart2 = DateTime.Now;
                    if (objChangeSalaryProfile != null)
                    {
                        dateStart2 = objChangeSalaryProfile.DateOfEffect;
                    }

                    //lưu số ngày công tính lương trước và sau khi thay đổi lương
                    double workpaid = 0;
                    double workpaid_after = 0;

                    //lấy dữ liệu công theo cutoff
                    //[11032016][bang.nguyen][64554][mofify]
                    List<Att_AttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.WorkPaidHours != 0).ToList();
                    var objAttGradeByProfile = TotalDataAll.dicAttGrade.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.MonthStart <= CutOffDuration.DateEnd && m.MonthEnd >= CutOffDuration.DateStart).FirstOrDefault();
                    //sau khi điều chỉnh
                    ////duyệt wa tất cả các dòng
                    foreach (var tableItem in listAttTableItem)
                    {
                        //[11032016][bang.nguyen][64191][mofify]
                        if (tableItem.WorkPaidHours != 0)
                        {
                            var objshift = TotalDataAll.listCat_Shift.Where(s => s.ID == tableItem.ShiftID).FirstOrDefault();
                            double _shiftStdWorkHours = 0;
                            if (objshift != null && objshift.StdWorkHours != null && objshift.StdWorkHours != 0)
                            {
                                _shiftStdWorkHours = objshift.StdWorkHours.Value;
                            }
                            if (tableItem.Shift2ID != null)
                            {
                                double _shift2WorkPaidHours = 0;
                                var objshitf2 = TotalDataAll.listCat_Shift.Where(s => s.ID == tableItem.Shift2ID).FirstOrDefault();
                                if (objshitf2 != null && objshitf2.StdWorkHours != null && objshitf2.StdWorkHours != 0)
                                {
                                    _shift2WorkPaidHours = objshitf2.StdWorkHours.Value;
                                }
                                double sumshiftStdWorkHours = _shiftStdWorkHours + _shift2WorkPaidHours;
                                if (sumshiftStdWorkHours != 0)
                                {
                                    //truoc thay doi luong
                                    if (tableItem.WorkDate < dateStart2)
                                    {
                                        workpaid += tableItem.WorkPaidHours / (sumshiftStdWorkHours / 2);
                                    }
                                    //sau thay doi luong
                                    if (tableItem.WorkDate >= dateStart2)
                                    {
                                        workpaid_after += tableItem.WorkPaidHours / (sumshiftStdWorkHours / 2);
                                    }
                                }
                            }
                            else if (tableItem.Shift2ID == null && tableItem.ShiftID == null)
                            {
                                //[02/11/2016][bang.nguyen][75113][modify]
                                if (objAttGradeByProfile != null && objAttGradeByProfile.HourOnWorkDate != null && objAttGradeByProfile.HourOnWorkDate != 0)
                                {
                                    //truoc thay doi luong
                                    if (tableItem.WorkDate < dateStart2)
                                    {
                                        workpaid += tableItem.WorkPaidHours / objAttGradeByProfile.HourOnWorkDate.Value;
                                    }
                                    //sau thay doi luong
                                    if (tableItem.WorkDate >= dateStart2)
                                    {
                                        workpaid_after += tableItem.WorkPaidHours / objAttGradeByProfile.HourOnWorkDate.Value;
                                    }
                                }
                            }
                            else
                            {
                                if (_shiftStdWorkHours != 0)
                                {
                                    //truoc thay doi luong
                                    if (tableItem.WorkDate < dateStart2)
                                    {
                                        workpaid += tableItem.WorkPaidHours / _shiftStdWorkHours;
                                    }
                                    //sau thay doi luong
                                    if (tableItem.WorkDate >= dateStart2)
                                    {
                                        workpaid_after += tableItem.WorkPaidHours / _shiftStdWorkHours;
                                    }
                                }
                            }
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_1.ToString(), workpaid, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_2.ToString(), workpaid_after, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            //[16/12/2015][hien.nguyen][New][61893]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_PAIDLEAVEDAYS_BEFORE.ToString(), PayrollElement.ATT_COUNT_PAIDLEAVEDAYS_AFTER.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                    //lưu số ngày công tính lương trước và sau khi thay đổi lương
                    double workpaid = 0;
                    double workpaid_after = 0;

                    //lấy dữ liệu công theo cutoff
                    List<Att_AttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                    //duyệt wa tất cả các dòng
                    foreach (var tableItem in listAttTableItem)
                    {
                        if (tableItem.PaidLeaveDays != null)
                        {
                            if (tableItem.WorkDate < dateStart2)//trước khi điều chỉnh
                            {
                                workpaid += (double)tableItem.PaidLeaveDays;
                            }
                            if (tableItem.WorkDate >= dateStart2)//sau khi điều chỉnh
                            {
                                workpaid_after += (double)tableItem.PaidLeaveDays;
                            }
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_COUNT_PAIDLEAVEDAYS_BEFORE.ToString(), workpaid, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_COUNT_PAIDLEAVEDAYS_AFTER.ToString(), workpaid_after, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_PAIDLEAVEDAYS_BEFORE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_COUNT_PAIDLEAVEDAYS_AFTER.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_WORKING_WORKPAIDHOURS_STDWORKHOURS_DAY_1.ToString(), PayrollElement.ATT_WORKING_WORKPAIDHOURS_STDWORKHOURS_DAY_2.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                    //lưu số ngày công tính lương trước và sau khi thay đổi lương
                    double workpaid = 0;
                    double workpaid_after = 0;

                    //lấy dữ liệu công theo cutoff
                    List<Att_AttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.WorkPaidHours != 0 && m.StdWorkHours != 0 && m.StdWorkHours != null).ToList();

                    //duyệt wa tất cả các dòng
                    foreach (var tableItem in listAttTableItem)
                    {
                        if (tableItem.WorkPaidHours != 0 && tableItem.StdWorkHours != 0)
                        {
                            if (tableItem.WorkDate < dateStart2)//trước khi điều chỉnh
                            {
                                workpaid += tableItem.WorkPaidHours / (double)tableItem.StdWorkHours;
                            }
                            if (tableItem.WorkDate >= dateStart2)//sau khi điều chỉnh
                            {
                                workpaid_after += tableItem.WorkPaidHours / (double)tableItem.StdWorkHours;
                            }
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_WORKING_WORKPAIDHOURS_STDWORKHOURS_DAY_1.ToString(), workpaid, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_WORKPAIDHOURS_STDWORKHOURS_DAY_2.ToString(), workpaid_after, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_WORKING_WORKPAIDHOURS_STDWORKHOURS_DAY_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_WORKPAIDHOURS_STDWORKHOURS_DAY_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Số ngày phép năm cộng dồn - Số ngày phép ốm cộng dồn
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_ANNUAL_INCREMENTAL.ToString(), PayrollElement.ATT_SICK_INCREMENTAL.ToString(), PayrollElement.ATT_ANNUAL_REMAIN.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetDicAnnualDetail(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_ANNUAL_INCREMENTAL.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_ANNUAL_INCREMENTAL.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_ANNUAL_REMAIN.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_SICK_INCREMENTAL.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
                else
                {
                    var listAnnualDetailByProfile = TotalData600.dicAnnualDetail.GetValueOrNew(profileItem.ID);
                    List<Att_AnnualDetailEntity> AnnualDetailByProfile = listAnnualDetailByProfile.Where(m => m.ProfileID == profileItem.ID
                                                                                                        && m.MonthYear >= CutOffDuration.DateStart
                                                                                                        && m.MonthYear <= CutOffDuration.DateEnd).ToList();

                    if (AnnualDetailByProfile != null && AnnualDetailByProfile.Count > 0)
                    {
                        var ANNUAL = AnnualDetailByProfile.FirstOrDefault(m => m.Type == AnnualLeaveDetailType.E_ANNUAL_LEAVE.ToString());
                        var SICK = AnnualDetailByProfile.FirstOrDefault(m => m.Type == AnnualLeaveDetailType.E_SICK_LEAVE.ToString());
                        item = new ElementFormula(PayrollElement.ATT_ANNUAL_INCREMENTAL.ToString(), ANNUAL != null ? ANNUAL.InitAvailable != null ? ANNUAL.InitAvailable : 0 : 0, 0);
                        listElementFormula.Add(item);
                        //[2912015][bang.nguyen][new func]
                        //Phép năm còn dư
                        item = new ElementFormula(PayrollElement.ATT_ANNUAL_REMAIN.ToString(), ANNUAL != null ? ANNUAL.Remain != null ? ANNUAL.Remain : 0 : 0, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.ATT_SICK_INCREMENTAL.ToString(), SICK != null ? SICK.InitAvailable != null ? SICK.InitAvailable : 0 : 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_ANNUAL_INCREMENTAL.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_ANNUAL_REMAIN.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_SICK_INCREMENTAL.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region [Khoa.nguyen][0111716 ]Lấy số phép năm còn đến cuối năm 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ANNUAL_SENIORBONUS.ToString()))
            {

                string status = string.Empty;
                dataComputeSer.GetDicAnnualDetailAll(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_ANNUAL_SENIORBONUS.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_ANNUAL_SENIORBONUS.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
                else
                {
                    var listAnnualDetailByProfile = TotalData600.dicAnnualDetail.GetValueOrNew(profileItem.ID);
                    List<Att_AnnualDetailEntity> AnnualDetailByProfile = listAnnualDetailByProfile.Where(m => m.ProfileID == profileItem.ID
                                                                                                        && m.MonthYear != null
                                                                                                        && m.MonthYear == CutOffDuration.MonthYear
                                                                                                       ).ToList();

                    if (AnnualDetailByProfile != null && AnnualDetailByProfile.Count > 0)
                    {
                        var AnnualSeniorBonus = AnnualDetailByProfile.FirstOrDefault(m => m.Type == AnnualLeaveDetailType.E_ANNUAL_LEAVE.ToString());
                        item = new ElementFormula(PayrollElement.ATT_ANNUAL_SENIORBONUS.ToString(), AnnualSeniorBonus != null ? AnnualSeniorBonus.SeniorBonus != null ? AnnualSeniorBonus.SeniorBonus : 0 : 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_ANNUAL_SENIORBONUS.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Giới Tính
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_IS_FEMALE.ToString()))
            {
                if (profileItem.Gender == EnumDropDown.Sexual.E_FEMALE.ToString())
                {
                    item = new ElementFormula(PayrollElement.HR_IS_FEMALE.ToString(), 1, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_IS_FEMALE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Lương Sản Phẩm
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_TOTAL_DAY_IN_WEEK.ToString()))
            {
                int Count = 0;
                var ListAttendanceTableItemByProfile = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                DateTime Start = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                DateTime End = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 7);
                var ListAttendanceTableItemByProfileAndDate = ListAttendanceTableItemByProfile.Where(m => m.WorkDate <= End && m.WorkDate >= Start).ToList();
                if (!ListAttendanceTableItemByProfileAndDate.Any(m => m.DutyCode != DutyCode.E_ON.ToString()))
                {
                    Count++;
                }

                Start = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 8);
                End = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 14);
                ListAttendanceTableItemByProfileAndDate = ListAttendanceTableItemByProfile.Where(m => m.WorkDate <= End && m.WorkDate >= Start).ToList();
                if (!ListAttendanceTableItemByProfileAndDate.Any(m => m.DutyCode != DutyCode.E_ON.ToString()))
                {
                    Count++;
                }

                Start = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 15);
                End = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 21);
                ListAttendanceTableItemByProfileAndDate = ListAttendanceTableItemByProfile.Where(m => m.WorkDate <= End && m.WorkDate >= Start).ToList();
                if (!ListAttendanceTableItemByProfileAndDate.Any(m => m.DutyCode != DutyCode.E_ON.ToString()))
                {
                    Count++;
                }

                Start = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 22);
                End = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 28);
                ListAttendanceTableItemByProfileAndDate = ListAttendanceTableItemByProfile.Where(m => m.WorkDate <= End && m.WorkDate >= Start).ToList();
                if (!ListAttendanceTableItemByProfileAndDate.Any(m => m.DutyCode != DutyCode.E_ON.ToString()))
                {
                    Count++;
                }
                item = new ElementFormula(PayrollElement.ATT_TOTAL_DAY_IN_WEEK.ToString(), Count, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Số ngày có ca làm việc nhưng ko đi làm
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_COUNT_DAY_NOT_WORKING.ToString()))
            {
                double CountDay = 0;
                var listAttendanceItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);
                foreach (var i in listAttendanceItem)
                {
                    if (i.ShiftID != null && i.AvailableHours == 0)
                    {
                        CountDay++;
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_COUNT_DAY_NOT_WORKING.ToString(), CountDay, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [17/11/2016][HienNguyen][75714]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_START_MONTH_CUTOFFDURATION.ToString(), PayrollElement.ATT_END_MONTH_CUTOFFDURATION.ToString() }))
            {
                DateTime startDate = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                DateTime endDate = startDate.AddMonths(1).AddMilliseconds(-1);
                item = new ElementFormula(PayrollElement.ATT_START_MONTH_CUTOFFDURATION.ToString(), startDate, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_END_MONTH_CUTOFFDURATION.ToString(), endDate, 0);
                listElementFormula.Add(item);
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_SHIFT_IN_MONTHYEAR_BEFORE.ToString(), PayrollElement.ATT_COUNT_SHIFT_IN_MONTHYEAR_AFTER.ToString(), PayrollElement.SAL_DATE_CHANGE_BASICSALARY_INMONTH.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                DateTime startDate = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                DateTime endDate = startDate.AddMonths(1).AddMilliseconds(-1);

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic, startDate, endDate, profileItem.ID))
                {
                    Sal_BasicSalaryEntity basicSalaryChange = listBasicSalaryByProfileDic.OrderByDescending(m => m.DateOfEffect).FirstOrDefault(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= endDate && m.DateOfEffect >= startDate);
                    if (basicSalaryChange.HasValue())
                    {
                        var listAttendancetableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                        item = new ElementFormula(PayrollElement.ATT_COUNT_SHIFT_IN_MONTHYEAR_BEFORE.ToString(), listAttendancetableItem.Count(m => m.ShiftID != null && m.WorkDate < basicSalaryChange.DateOfEffect), 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_COUNT_SHIFT_IN_MONTHYEAR_AFTER.ToString(), listAttendancetableItem.Count(m => m.ShiftID != null && m.WorkDate >= basicSalaryChange.DateOfEffect), 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_DATE_CHANGE_BASICSALARY_INMONTH.ToString(), basicSalaryChange.DateOfEffect, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_COUNT_SHIFT_IN_MONTHYEAR_BEFORE.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_COUNT_SHIFT_IN_MONTHYEAR_AFTER.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_DATE_CHANGE_BASICSALARY_INMONTH.ToString(), string.Empty, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_SHIFT_IN_MONTHYEAR_BEFORE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_COUNT_SHIFT_IN_MONTHYEAR_AFTER.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_DATE_CHANGE_BASICSALARY_INMONTH.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Tổng hệ số những ngày có công sản xuất việc [04/07/2016][HienNguyen][68821]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_PROFILE_TIMESHEET_NOT_JOBDAY.ToString()))
            {
                var listTimeSheetByJobTypeNull = TotalDataAll.ListAtt_ProfileTimeSheet.Where(m => m.JobTypeID == null && m.WorkDate >= CutOffDuration.DateStart && m.WorkDate <= CutOffDuration.DateEnd).ToList();
                var listDayOff = TotalDataAll.listDayOff.Where(m => m.DateOff >= CutOffDuration.DateStart && m.DateOff <= CutOffDuration.DateEnd && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID)).ToList();
                var listAttendancetableitemByProfile = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                double value = 0;
                foreach (var timeSheet in listTimeSheetByJobTypeNull)
                {
                    double valueTimeSheet = 0;
                    //Ngày công trùng với ngày lễ, ngày nghỉ lễ và không phải ca đêm 
                    if (listDayOff.Any(m => m.DateOff == timeSheet.WorkDate && (m.Type == EnumDropDown.DayOffType.E_HOLIDAY.ToString() || m.Type == EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString()))
                        && listAttendancetableitemByProfile.Any(m => m.WorkDate == timeSheet.WorkDate && m.IsNightShift != true))
                    {
                        valueTimeSheet += 2;
                    }

                    //	Ngày công trùng với ngày lễ, ngày nghỉ lễ và là ca đêm 
                    if (listDayOff.Any(m => m.DateOff == timeSheet.WorkDate && (m.Type == EnumDropDown.DayOffType.E_HOLIDAY.ToString() || m.Type == EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString()))
                        && listAttendancetableitemByProfile.Any(m => m.WorkDate == timeSheet.WorkDate && m.IsNightShift == true))
                    {
                        valueTimeSheet += 3;
                    }

                    if (timeSheet.ActualHours < 1)
                    {
                        valueTimeSheet = 0;
                    }
                    else if (timeSheet.ActualHours >= 1 && timeSheet.ActualHours <= 6)
                    {
                        valueTimeSheet = (valueTimeSheet * 0.5);
                    }
                    value += valueTimeSheet;
                }
                item = new ElementFormula(PayrollElement.ATT_PROFILE_TIMESHEET_NOT_JOBDAY.ToString(), value, 0);
                listElementFormula.Add(item);
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_PROFILE_TIMESHEET_", "_NOT_NORMAL_DAY"))
            {
                var listAttendancetableitemByProfile = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);
                var listDayOff = TotalDataAll.listDayOff.Where(m => m.DateOff >= CutOffDuration.DateStart && m.DateOff <= CutOffDuration.DateEnd && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID)).ToList();

                foreach (var jobType in TotalDataAll.listCat_JobType)
                {
                    double value = 0;

                    var listTimeSheetByJobType = TotalDataAll.ListAtt_ProfileTimeSheet.Where(m => m.JobTypeID == jobType.ID && m.WorkDate >= CutOffDuration.DateStart && m.WorkDate <= CutOffDuration.DateEnd).ToList();

                    foreach (var timeSheet in listTimeSheetByJobType)
                    {
                        double valueTimeSheet = 0;
                        //	Ngày công trùng với ngày cuối tuần và không phải ca đêm 
                        if (listDayOff.Any(m => m.DateOff == timeSheet.WorkDate && m.Type == EnumDropDown.DayOffType.E_WEEKEND_HLD.ToString())
                            && listAttendancetableitemByProfile.Any(m => m.WorkDate == timeSheet.WorkDate && m.IsNightShift != true))
                        {
                            valueTimeSheet++;
                        }

                        //	Ngày công trùng với ngày lễ, ngày nghỉ lễ và không phải ca đêm
                        if (listDayOff.Any(m => m.DateOff == timeSheet.WorkDate && (m.Type == EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString() || m.Type == EnumDropDown.DayOffType.E_HOLIDAY.ToString()))
                            && listAttendancetableitemByProfile.Any(m => m.WorkDate == timeSheet.WorkDate && m.IsNightShift != true))
                        {
                            valueTimeSheet += 2;
                        }

                        //	Ngày công bình thường (không trùng ngày nào trong cat_dayoff) và là ca đêm 
                        if (!listDayOff.Any(m => m.DateOff == timeSheet.WorkDate)
                            && listAttendancetableitemByProfile.Any(m => m.WorkDate == timeSheet.WorkDate && m.IsNightShift == true))
                        {
                            valueTimeSheet += 0.5;
                        }

                        //	Ngày công trùng với ngày cuối tuần và là ca đêm 
                        if (listDayOff.Any(m => m.DateOff == timeSheet.WorkDate && m.Type == EnumDropDown.DayOffType.E_WEEKEND_HLD.ToString())
                                && listAttendancetableitemByProfile.Any(m => m.WorkDate == timeSheet.WorkDate && m.IsNightShift == true))
                        {
                            valueTimeSheet += 1;
                        }

                        //	Ngày công trùng với ngày lễ, ngày nghỉ lễ và là ca đêm
                        if (listDayOff.Any(m => m.DateOff == timeSheet.WorkDate && (m.Type == EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString() || m.Type == EnumDropDown.DayOffType.E_HOLIDAY.ToString()))
                            && listAttendancetableitemByProfile.Any(m => m.WorkDate == timeSheet.WorkDate && m.IsNightShift == true))
                        {
                            valueTimeSheet += 3;
                        }

                        if (timeSheet.ActualHours < 1)
                        {
                            valueTimeSheet = 0;
                        }
                        else if (timeSheet.ActualHours >= 1 && timeSheet.ActualHours <= 6)
                        {
                            valueTimeSheet = (valueTimeSheet * 0.5);
                        }
                        //Sum lại giá trị
                        value += valueTimeSheet;
                    }
                    item = new ElementFormula("ATT_PROFILE_TIMESHEET_" + jobType.Code + "_NOT_NORMAL_DAY", value, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Số ngày chủ nhật tháng N và tháng N-1 [27/10/2015][hien.nguyen][New][58829]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_SUNDAY_IN_CUTOFF.ToString(), PayrollElement.ATT_COUNT_SUNDAY_IN_CUTOFF_N_1.ToString() }))
            {
                item = new ElementFormula(PayrollElement.ATT_COUNT_SUNDAY_IN_CUTOFF.ToString(), Common.GetDayOfWeekInDate(CutOffDuration.DateStart, CutOffDuration.DateEnd, DayOfWeek.Sunday), 0);
                listElementFormula.Add(item);

                var CutOffDuration_N_1 = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear.Date < CutOffDuration.MonthYear.Date).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                if (CutOffDuration_N_1.HasValue())
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_SUNDAY_IN_CUTOFF_N_1.ToString(), Common.GetDayOfWeekInDate(CutOffDuration_N_1.DateStart, CutOffDuration_N_1.DateEnd, DayOfWeek.Sunday), 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_SUNDAY_IN_CUTOFF_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }

            }
            #endregion

            #region Số ngày chủ nhật từ đầu tháng tới ngày vào làm [06/09/2015][hien.nguyen][New][72977]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_SUNDAY_IN_DATESTART_DATEHIRE.ToString(), PayrollElement.ATT_COUNT_SUNDAY_IN_DATESTART_DATEHIRE_N_1.ToString() }))
            {
                #region Tháng N
                if (profileItem.DateHire > CutOffDuration.DateStart && profileItem.DateHire <= CutOffDuration.DateEnd)
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_SUNDAY_IN_DATESTART_DATEHIRE.ToString(), Common.GetDayOfWeekInDate(CutOffDuration.DateStart, profileItem.DateHire ?? CutOffDuration.DateStart, DayOfWeek.Sunday), 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_SUNDAY_IN_DATESTART_DATEHIRE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                #endregion

                #region Tháng N-1
                if (profileItem.DateHire > CutOffDuration.DateStart.AddMonths(-1) && profileItem.DateHire <= CutOffDuration.DateEnd.AddMonths(-1))
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_SUNDAY_IN_DATESTART_DATEHIRE_N_1.ToString(), Common.GetDayOfWeekInDate(CutOffDuration.DateStart.AddMonths(-1), profileItem.DateHire ?? CutOffDuration.DateStart.AddMonths(-1), DayOfWeek.Sunday), 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_SUNDAY_IN_DATESTART_DATEHIRE_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                #endregion


            }
            #endregion

            #region Tổng giờ công thực tế của NV trong tháng [06/09/2015][hien.nguyen][New][72977]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_SUM_WORKHOURS_IN_MONTH.ToString(),
                PayrollElement.ATT_SUM_WORKHOURS_IN_MONTH_N_1.ToString() }))
            {
                #region ATT_SUM_WORKHOURS_IN_MONTH
                var listAttendanceItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Sum(m => m.WorkHours);
                item = new ElementFormula(PayrollElement.ATT_SUM_WORKHOURS_IN_MONTH.ToString(), listAttendanceItem, 0);
                listElementFormula.Add(item);
                #endregion

                #region ATT_SUM_WORKHOURS_IN_MONTH_N_1
                double sumWorkHoursPre = 0;
                DateTime monthYear = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1).AddMonths(-1);

                var attendancetableByProfile = TotalDataAll.Att_AttendanceTable_Prev.FirstOrDefault(m => m.IsDelete != true
                                               && m.ProfileID == profileItem.ID
                                               && m.MonthYear == monthYear);

                if (attendancetableByProfile != null)
                {
                    var listAttendanceTableItem_N_1 = TotalDataAll.listAttendanceTableItem_N_1.Where(m => m.AttendanceTableID == attendancetableByProfile.ID).ToList();
                    sumWorkHoursPre = listAttendanceTableItem_N_1.Sum(m => m.WorkHours);
                }
                item = new ElementFormula(PayrollElement.ATT_SUM_WORKHOURS_IN_MONTH_N_1.ToString(), sumWorkHoursPre, 0);
                listElementFormula.Add(item);
                #endregion
            }
            #endregion

            #region Số ngày chủ nhật từ ngày nghỉ việc tới cuối kỳ công [06/09/2015][hien.nguyen][New][72977]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_SUNDAY_IN_DATEQUIT_DATEEND.ToString(), PayrollElement.ATT_COUNT_SUNDAY_IN_DATEQUIT_DATEEND_N_1.ToString() }))
            {
                #region Tháng N
                if (profileItem.DateQuit < CutOffDuration.DateEnd && profileItem.DateQuit >= CutOffDuration.DateStart)
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_SUNDAY_IN_DATEQUIT_DATEEND.ToString(), Common.GetDayOfWeekInDate(profileItem.DateQuit ?? CutOffDuration.DateEnd, CutOffDuration.DateEnd, DayOfWeek.Sunday), 0);
                    listElementFormula.Add(item);
                }
                item = new ElementFormula(PayrollElement.ATT_COUNT_SUNDAY_IN_DATEQUIT_DATEEND.ToString(), 0, 0);
                listElementFormula.Add(item);

                #endregion

                #region Tháng N-1
                if (profileItem.DateQuit < CutOffDuration.DateEnd.AddMonths(-1) && profileItem.DateQuit >= CutOffDuration.DateStart.AddMonths(-1))
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_SUNDAY_IN_DATEQUIT_DATEEND_N_1.ToString(), Common.GetDayOfWeekInDate(profileItem.DateQuit ?? CutOffDuration.DateEnd.AddMonths(-1), CutOffDuration.DateEnd.AddMonths(-1), DayOfWeek.Sunday), 0);
                    listElementFormula.Add(item);
                }
                item = new ElementFormula(PayrollElement.ATT_COUNT_SUNDAY_IN_DATEQUIT_DATEEND_N_1.ToString(), 0, 0);
                listElementFormula.Add(item);

                #endregion
            }
            #endregion

            #region [31/10/2015][hien.nguyen][New][59287]: Trong tháng tính lương: 10/2015 (từ 01 --- đến 31) --> Có 31 ngày
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_DAY_IN_MONTH_CUTOFFDURATION.ToString(), PayrollElement.ATT_COUNT_DAY_IN_MONTH_CUTOFFDURATION_N_1.ToString() }))
            {
                DateTime Start = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                DateTime End = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1).AddMonths(1).AddDays(-1);
                var CountDay = End.Subtract(Start).TotalDays + 1;

                item = new ElementFormula(PayrollElement.ATT_COUNT_DAY_IN_MONTH_CUTOFFDURATION.ToString(), CountDay, 0);
                listElementFormula.Add(item);

                DateTime Start_N_1 = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1).AddMonths(-1);
                DateTime End_N_1 = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1).AddDays(-1);
                var CountDay_n_1 = End_N_1.Subtract(Start_N_1).TotalDays + 1;

                item = new ElementFormula(PayrollElement.ATT_COUNT_DAY_IN_MONTH_CUTOFFDURATION_N_1.ToString(), CountDay_n_1, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [18/11/2015][hien.nguyen][New][60409]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_UNPAIDLEAVEDAYS.ToString(), PayrollElement.ATT_COUNT_PAIDLEAVEDAYS.ToString(), PayrollElement.ATT_COUNT_ATTENDANCETABLEITEM_COUNTMISSINOUT.ToString(), PayrollElement.ATT_COUNT_ATTENDANCETABLEITEM_LATEEARLYMINUTE.ToString() }))
            {
                var ListAttendancetableitem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);

                item = new ElementFormula(PayrollElement.ATT_COUNT_UNPAIDLEAVEDAYS.ToString(), ListAttendancetableitem.Sum(m => m.UnpaidLeaveDays ?? 0), 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_COUNT_PAIDLEAVEDAYS.ToString(), ListAttendancetableitem.Sum(m => m.PaidLeaveDays ?? 0), 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_COUNT_ATTENDANCETABLEITEM_COUNTMISSINOUT.ToString(), ListAttendancetableitem.Sum(m => m.CountMissinout ?? 0), 0);
                listElementFormula.Add(item);

                //[26/11/2015][hien.nguyen][New][60797]
                item = new ElementFormula(PayrollElement.ATT_COUNT_ATTENDANCETABLEITEM_LATEEARLYMINUTE.ToString(), ListAttendancetableitem.Count(m => m.LateEarlyMinutes > 0), 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region ATT_COUNT_DAYOFF_FROM_DATEQUIT_TO_CUTOFF
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_COUNT_DAYOFF_FROM_DATEQUIT_TO_CUTOFF.ToString()))
            {
                if (profileItem.DateQuit != null)
                {
                    double CountDay = TotalDataAll.listDayOff.Where(m => (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID) && m.DateOff.Date >= profileItem.DateQuit.Value.Date && m.DateOff.Date <= CutOffDuration.DateEnd.Date).Count();
                    item = new ElementFormula(PayrollElement.ATT_COUNT_DAYOFF_FROM_DATEQUIT_TO_CUTOFF.ToString(), CountDay, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_DAYOFF_FROM_DATEQUIT_TO_CUTOFF.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region ATT_COUNT_DAY_FROM_DATEQUIT_TO_CUTOFF
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_DAY_FROM_DATEQUIT_TO_CUTOFF.ToString(), PayrollElement.ATT_COUNT_DAY_FROM_DATEQUIT_TO_CUTOFF_N_1.ToString() }))
            {
                #region Tháng N
                if (profileItem.DateQuit != null)
                {
                    //double CountDay = profileItem.DateQuit.Value.Date.Subtract(CutOffDuration.DateEnd.Date).TotalDays;
                    double CountDay = CutOffDuration.DateEnd.Date.Subtract(profileItem.DateQuit.Value.Date).TotalDays;
                    CountDay = CountDay > 0 ? CountDay + 1 : 0;
                    item = new ElementFormula(PayrollElement.ATT_COUNT_DAY_FROM_DATEQUIT_TO_CUTOFF.ToString(), CountDay, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_DAY_FROM_DATEQUIT_TO_CUTOFF.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                #endregion

                #region Tháng N-1
                if (profileItem.DateQuit != null)
                {
                    //double CountDay = profileItem.DateQuit.Value.Date.Subtract(CutOffDuration.DateEnd.Date).TotalDays;
                    double CountDay = CutOffDuration.DateEnd.AddMonths(-1).Date.Subtract(profileItem.DateQuit.Value.Date).TotalDays;
                    CountDay = CountDay > 0 ? CountDay + 1 : 0;
                    item = new ElementFormula(PayrollElement.ATT_COUNT_DAY_FROM_DATEQUIT_TO_CUTOFF_N_1.ToString(), CountDay, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_DAY_FROM_DATEQUIT_TO_CUTOFF_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                #endregion
            }
            #endregion

            #region ATT_ROSTER_GROUP_NAME
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ROSTER_GROUP_NAME.ToString()))
            {
                var listRosterByProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);

                var RosterByProfile = listRosterByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart && m.Type == RosterType.E_ROSTERGROUP.ToString() && m.Status == RosterStatus.E_APPROVED.ToString()).OrderByDescending(m => m.DateEnd).FirstOrDefault();
                if (RosterByProfile != null && RosterByProfile.RosterGroupName != null)
                {
                    item = new ElementFormula(PayrollElement.ATT_ROSTER_GROUP_NAME.ToString(), RosterByProfile.RosterGroupName, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_ROSTER_GROUP_NAME.ToString(), string.Empty, 0, "Null");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [11/12/2015][hien.nguyen][Modify][60896]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.HR_COUNT_ROSTER_IN_CUTOFF.ToString(),
                PayrollElement.HR_COUNT_ROSTER_IN_CUTOFF_N_1.ToString(),
                PayrollElement.HR_COUNT_ROSTER_TO_DATEEND_CUTOFF.ToString(),
                PayrollElement.HR_COUNT_ROSTER_TO_DATEEND_CUTOFF_N_1.ToString() }))
            {
                var listRosterProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);


                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                var listRosterByProfile = listRosterProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();
                var listRosterByProfile_N_1 = listRosterProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd.AddMonths(-1) && m.DateEnd >= CutOffDuration.DateStart.AddMonths(-1) && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                //[23122015][bang.nguyen][62075][bug]
                //Phần tử đếm theo ca trả về sai

                //rostergroup thang N
                var listRosterGroupN = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.DateEnd && s.DateEnd >= CutOffDuration.DateStart).ToList();

                //rostergroup thang N_1
                var listRosterGroupN_1 = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.DateEnd.AddMonths(-1) && s.DateEnd >= CutOffDuration.DateStart.AddMonths(-1)).ToList();

                double RosterDay = 0;
                foreach (var roster in listRosterByProfile)
                {
                    RosterDay += roster.DateEnd.Value.Date.Subtract(roster.DateStart.Date).TotalDays + 1;
                }

                //lich lam viec thang N
                var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                    CutOffDuration.DateStart,
                    CutOffDuration.DateEnd,
                    profileItem.ID,
                    listRosterByProfile,
                    listRosterGroupN,
                    TotalDataAll.listRosterGroupByOrganization,
                    TotalDataAll.listRosterGroupType,
                    TotalDataAll.listOrgStructure,
                    TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                            .Where(s => s.ProfileID == profileItem.ID
                            && s.DateEffective <= CutOffDuration.DateEnd
                            && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                            .FirstOrDefault());

                //lich lam viec thang N_1
                var lstDailyShiftN_1 = Att_AttendanceLib.GetDailyShifts(
                    CutOffDuration.DateStart.AddMonths(-1),
                    CutOffDuration.DateEnd.AddMonths(-1),
                    profileItem.ID,
                    listRosterByProfile_N_1,
                    listRosterGroupN_1,
                    TotalDataAll.listRosterGroupByOrganization,
                    TotalDataAll.listRosterGroupType,
                    TotalDataAll.listOrgStructure,
                    TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                            .Where(s => s.ProfileID == profileItem.ID
                                && s.DateEffective <= CutOffDuration.DateEnd.AddMonths(-1)
                                && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                            .FirstOrDefault());

                RosterDay = lstDailyShift.Count;

                //Số ca làm việc trong kỳ lương
                item = new ElementFormula(PayrollElement.HR_COUNT_ROSTER_IN_CUTOFF.ToString(), RosterDay, 0, "Null");
                listElementFormula.Add(item);

                RosterDay = 0;
                RosterDay = lstDailyShiftN_1.Count;

                //Số ca làm việc trong kỳ lương tháng N-1
                item = new ElementFormula(PayrollElement.HR_COUNT_ROSTER_IN_CUTOFF_N_1.ToString(), RosterDay, 0, "Null");
                listElementFormula.Add(item);

                //Ngày vào làm lại
                DateTime DateHire = Hre_StopWorkingServices.GetDateHileOrDateComback(listStopWorkingByProfile, profileItem, CutOffDuration.DateEnd);
                double HR_COUNT_ROSTER_TO_DATEEND_CUTOFF = 0;
                //ngay vao lam lai nho hon ngay bat dau ki luong
                if (DateHire.Date < CutOffDuration.DateStart.Date)
                {
                    RosterDay = 0;
                    RosterDay = lstDailyShift.Count;
                    HR_COUNT_ROSTER_TO_DATEEND_CUTOFF = RosterDay;
                }
                else if (DateHire.Date > CutOffDuration.DateEnd.Date)// ngayf vao lam lai lon hon ngay cuoi ki luong
                {
                    HR_COUNT_ROSTER_TO_DATEEND_CUTOFF = 0;
                }
                else // ngay vao lam lai trong ky luong
                {
                    //roster theo ngay vao lam
                    listRosterByProfile = listRosterProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= DateHire && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();
                    //rostergroup theo ngay vao lam
                    listRosterGroupN = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.DateEnd && s.DateEnd >= DateHire).ToList();
                    lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                        CutOffDuration.DateStart,
                        CutOffDuration.DateEnd,
                        profileItem.ID,
                        listRosterByProfile,
                        listRosterGroupN,
                        TotalDataAll.listRosterGroupByOrganization,
                        TotalDataAll.listRosterGroupType,
                        TotalDataAll.listOrgStructure,
                        TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                .Where(s => s.ProfileID == profileItem.ID
                                && s.DateEffective <= CutOffDuration.DateEnd
                                && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                .FirstOrDefault());

                    RosterDay = 0;
                    RosterDay = lstDailyShift.Count;

                    HR_COUNT_ROSTER_TO_DATEEND_CUTOFF = RosterDay;
                }
                // Số ca làm việc từ ngày vào đến cuối kỳ lương
                item = new ElementFormula(PayrollElement.HR_COUNT_ROSTER_TO_DATEEND_CUTOFF.ToString(), HR_COUNT_ROSTER_TO_DATEEND_CUTOFF, 0, "Null");
                listElementFormula.Add(item);


                //Ngày vào làm lại thang N_1
                DateHire = Hre_StopWorkingServices.GetDateHileOrDateComback(listStopWorkingByProfile, profileItem, CutOffDuration.DateEnd.AddMonths(-1));
                double HR_COUNT_ROSTER_TO_DATEEND_CUTOFF_N_1 = 0;
                if (DateHire.Date < CutOffDuration.DateStart.AddMonths(-1).Date)
                {
                    RosterDay = 0;
                    RosterDay = lstDailyShiftN_1.Count;
                    HR_COUNT_ROSTER_TO_DATEEND_CUTOFF_N_1 = RosterDay;
                }
                else if (DateHire.Date > CutOffDuration.DateEnd.AddMonths(-1).Date)
                {
                    HR_COUNT_ROSTER_TO_DATEEND_CUTOFF_N_1 = 0;
                }
                else
                {
                    listRosterByProfile_N_1 = listRosterProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd.AddMonths(-1) && m.DateEnd >= DateHire && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                    listRosterGroupN_1 = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.DateEnd.AddMonths(-1) && s.DateEnd >= DateHire).ToList();

                    lstDailyShiftN_1 = Att_AttendanceLib.GetDailyShifts(
                        CutOffDuration.DateStart.AddMonths(-1),
                        CutOffDuration.DateEnd.AddMonths(-1),
                        profileItem.ID,
                        listRosterByProfile_N_1,
                        listRosterGroupN_1,
                        TotalDataAll.listRosterGroupByOrganization,
                        TotalDataAll.listRosterGroupType,
                        TotalDataAll.listOrgStructure,
                        TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                .Where(s => s.ProfileID == profileItem.ID
                                && s.DateEffective <= CutOffDuration.DateEnd.AddMonths(-1)
                                && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                .FirstOrDefault());
                    RosterDay = 0;
                    RosterDay = lstDailyShiftN_1.Count;

                    HR_COUNT_ROSTER_TO_DATEEND_CUTOFF = RosterDay;
                }
                // Số ca làm việc từ ngày vào đến cuối kỳ lương
                item = new ElementFormula(PayrollElement.HR_COUNT_ROSTER_TO_DATEEND_CUTOFF_N_1.ToString(), HR_COUNT_ROSTER_TO_DATEEND_CUTOFF_N_1, 0, "Null");
                listElementFormula.Add(item);


            }
            #endregion

            #region [11/12/2015][hien.nguyen][Modify][60896] + [02/02/2016][hien.nguyen][Modify][63272]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_ROSTER_HDTJOB_4_IN_CUTOFF.ToString(),
                PayrollElement.ATT_ROSTER_HDTJOB_4_IN_CUTOFF_N_1.ToString(),
                PayrollElement.ATT_ROSTER_HDTJOB_5_IN_CUTOFF.ToString(),
                PayrollElement.ATT_ROSTER_HDTJOB_5_IN_CUTOFF_N_1.ToString() }))
            {
                var listRosterProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);

                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_ROSTER_HDTJOB_4_IN_CUTOFF.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.ATT_ROSTER_HDTJOB_4_IN_CUTOFF.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_ROSTER_HDTJOB_4_IN_CUTOFF_N_1.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_ROSTER_HDTJOB_5_IN_CUTOFF.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_ROSTER_HDTJOB_5_IN_CUTOFF_N_1.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
                else
                {
                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);

                    DateTime _dayClose = CutOffDuration.DateEnd;
                    DateTime _dayClose_N_1 = CutOffDuration.DateEnd.AddMonths(-1);

                    Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd);
                    if (Grade.SalaryDayClose.HasValue)
                    {
                        try
                        {
                            _dayClose = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, (int)Grade.SalaryDayClose);
                        }
                        catch
                        {
                            _dayClose = CutOffDuration.DateEnd;
                        }
                    }

                    Sal_GradeEntity Grade_N_1 = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart.AddMonths(-1), CutOffDuration.DateEnd.AddMonths(-1));
                    if (Grade_N_1.SalaryDayClose.HasValue)
                    {
                        try
                        {
                            _dayClose_N_1 = new DateTime(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, (int)Grade_N_1.SalaryDayClose);
                        }
                        catch
                        {
                            _dayClose_N_1 = CutOffDuration.DateEnd.AddMonths(-1);
                        }
                    }

                    var _listHDTByDayClose = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateFrom <= _dayClose).ToList();


                    //Update lại dateTo nếu ngày ra HDT chưa đc duyệt
                    foreach (var objHDTByDayClose in _listHDTByDayClose)
                    {
                        if (objHDTByDayClose.StatusOut != HDTJobStatus.E_APPROVE.ToString())
                        {
                            objHDTByDayClose.DateTo = CutOffDuration.DateEnd;
                        }
                    }


                    //Lấy các ngày dayoff của NV
                    var _listDayOffByProfile = TotalDataAll.listDayOff.Where(m => (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID) && m.Type == EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString()).Select(m => m.DateOff).ToList();

                    #region Loại 4 Tháng N
                    //Lấy số ngày làm HDT loại 4
                    var listHDTJob4ByProfile = _listHDTByDayClose.Where(m => m.ProfileID != null && (Guid)m.ProfileID == profileItem.ID && m.DateFrom <= CutOffDuration.DateEnd && (m.DateTo >= CutOffDuration.DateStart || m.DateTo == null) && m.Type == EnumDropDown.HDTJobType.E_TYPE4.ToString() && m.Status == HDTJobStatus.E_APPROVE.ToString()).ToList();

                    //Các ca làm việc được duyệt trong tháng
                    var listRosterByProfile = listRosterProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                    //[23/04/2018][bang.nguyen][94441][Modify Func]
                    //kiểm tra ngày đó có ca làm việc thì đếm
                    var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.DateEnd && s.DateEnd >= CutOffDuration.DateStart).ToList();
                    var lstDailyShift = Att_AttendanceLib.GetDailyShifts(
                        CutOffDuration.DateStart,
                        CutOffDuration.DateEnd,
                        profileItem.ID,
                        listRosterByProfile,
                        listRosterGroup,
                        TotalDataAll.listRosterGroupByOrganization,
                        TotalDataAll.listRosterGroupType,
                        TotalDataAll.listOrgStructure,
                        TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                .Where(s => s.ProfileID == profileItem.ID
                                && s.DateEffective <= CutOffDuration.DateEnd
                                && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                .FirstOrDefault());

                    double ATT_ROSTER_HDTJOB_4_IN_CUTOFF = 0;
                    foreach (var hdt in listHDTJob4ByProfile)
                    {
                        DateTime DateStart = hdt.DateFrom <= CutOffDuration.DateStart ? CutOffDuration.DateStart : hdt.DateFrom.Value;
                        DateTime DateEnd = hdt.DateTo == null || hdt.DateTo > CutOffDuration.DateEnd ? CutOffDuration.DateEnd : hdt.DateTo.Value;
                        //[26/02/2016][bang.nguyen][64089][bug]
                        //Phần tử đếm số ngày HDT sai
                        var lstDayOffTimeline = _listDayOffByProfile.Where(s => s >= DateStart && s <= DateEnd).ToList();
                        while (DateStart <= DateEnd)
                        {
                            if (lstDailyShift.ContainsKey(DateStart) && lstDailyShift[DateStart] != null && listRosterByProfile.Any(m => m.DateStart <= DateStart && m.DateEnd >= DateStart) || lstDayOffTimeline.Contains(DateStart))
                            {
                                ATT_ROSTER_HDTJOB_4_IN_CUTOFF++;
                            }

                            DateStart = DateStart.AddDays(1);
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_ROSTER_HDTJOB_4_IN_CUTOFF.ToString(), ATT_ROSTER_HDTJOB_4_IN_CUTOFF, 0, "Null");
                    listElementFormula.Add(item);
                    #endregion


                    #region Loại 5 Tháng N
                    //Lấy số ngày làm HDT loại 4
                    listHDTJob4ByProfile = _listHDTByDayClose.Where(m => m.ProfileID != null && (Guid)m.ProfileID == profileItem.ID && m.DateFrom <= CutOffDuration.DateEnd && (m.DateTo >= CutOffDuration.DateStart || m.DateTo == null) && m.Type == EnumDropDown.HDTJobType.E_TYPE5.ToString() && m.Status == HDTJobStatus.E_APPROVE.ToString()).ToList();

                    //Các ca làm việc được duyệt trong tháng
                    listRosterByProfile = listRosterProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                    double ATT_ROSTER_HDTJOB_5_IN_CUTOFF = 0;
                    foreach (var hdt in listHDTJob4ByProfile)
                    {
                        //DateTime DateStart = hdt.DateFrom ?? DateTime.MaxValue;
                        DateTime DateStart = hdt.DateFrom <= CutOffDuration.DateStart ? CutOffDuration.DateStart : hdt.DateFrom.Value;
                        DateTime DateEnd = hdt.DateTo == null || hdt.DateTo > CutOffDuration.DateEnd ? CutOffDuration.DateEnd : hdt.DateTo.Value;
                        var lstDayOffTimeline = _listDayOffByProfile.Where(s => s >= DateStart && s <= DateEnd).ToList();
                        while (DateStart <= DateEnd)
                        {
                            if (lstDailyShift.ContainsKey(DateStart) && lstDailyShift[DateStart] != null && listRosterByProfile.Any(m => m.DateStart <= DateStart && m.DateEnd >= DateStart) || lstDayOffTimeline.Contains(DateStart))
                            {
                                ATT_ROSTER_HDTJOB_5_IN_CUTOFF++;
                            }

                            DateStart = DateStart.AddDays(1);
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_ROSTER_HDTJOB_5_IN_CUTOFF.ToString(), ATT_ROSTER_HDTJOB_5_IN_CUTOFF, 0, "Null");
                    listElementFormula.Add(item);
                    #endregion


                    var _listHDTByDayClose_N_1 = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateFrom <= _dayClose_N_1).ToList();
                    foreach (var objHDTByDayClose_N_1 in _listHDTByDayClose_N_1)
                    {
                        if (objHDTByDayClose_N_1.StatusOut != HDTJobStatus.E_APPROVE.ToString())
                        {
                            objHDTByDayClose_N_1.DateTo = CutOffDuration.DateEnd.AddMonths(-1);
                        }
                    }
                    #region Loại 4 Tháng N-1
                    //Lấy số ngày làm HDT loại 4
                    listHDTJob4ByProfile = _listHDTByDayClose_N_1.Where(m => m.ProfileID != null && (Guid)m.ProfileID == profileItem.ID && m.DateFrom <= CutOffDuration.DateEnd.AddMonths(-1) && (m.DateTo >= CutOffDuration.DateStart.AddMonths(-1) || m.DateTo == null) && m.Type == EnumDropDown.HDTJobType.E_TYPE4.ToString() && m.Status == HDTJobStatus.E_APPROVE.ToString()).ToList();

                    //Các ca làm việc được duyệt trong tháng
                    listRosterByProfile = listRosterProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd.AddMonths(-1) && m.DateEnd >= CutOffDuration.DateStart.AddMonths(-1) && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                    //[23/04/2018][bang.nguyen][94441][Modify Func]
                    //kiểm tra ngày đó có ca làm việc thì đếm
                    var listRosterGroupN_1 = TotalDataAll.ListRosterGroup.Where(s => s.Status == RosterStatus.E_APPROVED.ToString() && s.DateStart <= CutOffDuration.DateEnd.AddMonths(-1) && s.DateEnd >= CutOffDuration.DateStart.AddMonths(-1)).ToList();
                    var lstDailyShiftN_1 = Att_AttendanceLib.GetDailyShifts(
                        CutOffDuration.DateStart.AddMonths(-1),
                        CutOffDuration.DateEnd.AddMonths(-1),
                        profileItem.ID,
                        listRosterByProfile,
                        listRosterGroupN_1,
                        TotalDataAll.listRosterGroupByOrganization,
                        TotalDataAll.listRosterGroupType,
                        TotalDataAll.listOrgStructure,
                        TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                .Where(s => s.ProfileID == profileItem.ID
                                && s.DateEffective <= CutOffDuration.DateEnd.AddMonths(-1)
                                && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                .FirstOrDefault());


                    Double ATT_ROSTER_HDTJOB_4_IN_CUTOFF_N_1 = 0;
                    foreach (var hdt in listHDTJob4ByProfile)
                    {
                        //DateTime DateStart = hdt.DateFrom ?? DateTime.MaxValue;
                        DateTime DateStart = hdt.DateFrom <= CutOffDuration.DateStart.AddMonths(-1) ? CutOffDuration.DateStart.AddMonths(-1) : hdt.DateFrom.Value;
                        DateTime DateEnd = hdt.DateTo == null || hdt.DateTo > CutOffDuration.DateEnd.AddMonths(-1) ? CutOffDuration.DateEnd.AddMonths(-1) : hdt.DateTo.Value;
                        var lstDayOffTimeline = _listDayOffByProfile.Where(s => s >= DateStart && s <= DateEnd).ToList();
                        while (DateStart <= DateEnd)
                        {
                            if (lstDailyShiftN_1.ContainsKey(DateStart) && lstDailyShiftN_1[DateStart] != null && listRosterByProfile.Any(m => m.DateStart <= DateStart && m.DateEnd >= DateStart) || lstDayOffTimeline.Contains(DateStart))
                            {
                                ATT_ROSTER_HDTJOB_4_IN_CUTOFF_N_1++;
                            }

                            DateStart = DateStart.AddDays(1);
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_ROSTER_HDTJOB_4_IN_CUTOFF_N_1.ToString(), ATT_ROSTER_HDTJOB_4_IN_CUTOFF_N_1, 0, "Null");
                    listElementFormula.Add(item);
                    #endregion

                    #region Loại 5 Tháng N-1
                    //Lấy số ngày làm HDT loại 4
                    listHDTJob4ByProfile = _listHDTByDayClose_N_1.Where(m => m.ProfileID != null && (Guid)m.ProfileID == profileItem.ID && m.DateFrom <= CutOffDuration.DateEnd.AddMonths(-1) && (m.DateTo >= CutOffDuration.DateStart.AddMonths(-1) || m.DateTo == null) && m.Type == EnumDropDown.HDTJobType.E_TYPE5.ToString() && m.Status == HDTJobStatus.E_APPROVE.ToString()).ToList();

                    //Các ca làm việc được duyệt trong tháng
                    listRosterByProfile = listRosterProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStart <= CutOffDuration.DateEnd.AddMonths(-1) && m.DateEnd >= CutOffDuration.DateStart.AddMonths(-1) && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                    Double ATT_ROSTER_HDTJOB_5_IN_CUTOFF_N_1 = 0;
                    foreach (var hdt in listHDTJob4ByProfile)
                    {
                        //DateTime DateStart = hdt.DateFrom ?? DateTime.MaxValue;
                        DateTime DateStart = hdt.DateFrom <= CutOffDuration.DateStart.AddMonths(-1) ? CutOffDuration.DateStart.AddMonths(-1) : hdt.DateFrom.Value;
                        DateTime DateEnd = hdt.DateTo == null || hdt.DateTo > CutOffDuration.DateEnd.AddMonths(-1) ? CutOffDuration.DateEnd.AddMonths(-1) : hdt.DateTo.Value;
                        var lstDayOffTimeline = _listDayOffByProfile.Where(s => s >= DateStart && s <= DateEnd).ToList();
                        while (DateStart <= DateEnd)
                        {
                            if (lstDailyShiftN_1.ContainsKey(DateStart) && lstDailyShiftN_1[DateStart] != null && listRosterByProfile.Any(m => m.DateStart <= DateStart && m.DateEnd >= DateStart) || lstDayOffTimeline.Contains(DateStart))
                            {
                                ATT_ROSTER_HDTJOB_5_IN_CUTOFF_N_1++;
                            }

                            DateStart = DateStart.AddDays(1);
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_ROSTER_HDTJOB_5_IN_CUTOFF_N_1.ToString(), ATT_ROSTER_HDTJOB_5_IN_CUTOFF_N_1, 0, "Null");
                    listElementFormula.Add(item);
                    #endregion
                }
            }
            #endregion

            #region ATT_GRADE_NAME
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_GRADE_NAME.ToString(), PayrollElement.ATT_GRADE_CODE.ToString() }))
            {
                var _GradeAttendanceCode = string.Empty;
                var AttGradeByProfile = TotalDataAll.dicAttGrade.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.MonthStart <= CutOffDuration.DateEnd && (m.MonthEnd >= CutOffDuration.DateStart || m.MonthEnd == null)).OrderByDescending(m => m.MonthStart).FirstOrDefault();
                if (AttGradeByProfile != null)
                {
                    item = new ElementFormula(PayrollElement.ATT_GRADE_NAME.ToString(), AttGradeByProfile.GradeAttendanceName, 0);
                    listElementFormula.Add(item);

                    if (!string.IsNullOrEmpty(AttGradeByProfile.GradeAttendanceCode))
                    {
                        _GradeAttendanceCode = AttGradeByProfile.GradeAttendanceCode;
                    }
                }
                else
                {

                    item = new ElementFormula(PayrollElement.ATT_GRADE_NAME.ToString(), string.Empty, 0, "null");
                    listElementFormula.Add(item);
                }
                //[16/05/2018][bang.nguyen][94771][Modify Func]
                item = new ElementFormula(PayrollElement.ATT_GRADE_CODE.ToString(), _GradeAttendanceCode, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region ATT_LATE_EARLY_DEDUCTION_HOURS
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_LATE_EARLY_DEDUCTION_HOURS.ToString()))
            {
                item = new ElementFormula(PayrollElement.ATT_LATE_EARLY_DEDUCTION_HOURS.ToString(), objAttendanceTableProCut != null ? objAttendanceTableProCut.LateEarlyDeductionHours : 0, 0, "null");
                listElementFormula.Add(item);
            }
            #endregion

            #region ATT_COUNT_MONTH_WORKING_OFFICIAL
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_COUNT_MONTH_WORKING_OFFICIAL.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_COUNT_MONTH_WORKING_OFFICIAL.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_COUNT_MONTH_WORKING_OFFICIAL.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);
                    var ListContractByProfile = listContractByProfileDic.Where(m => m.ProfileID != null && m.ProfileID == profileItem.ID && (m.Type != EnumDropDown.TypeContract.E_APPRENTICESHIP.ToString() || m.Type != EnumDropDown.TypeContract.E_PROBATION.ToString()) && m.DateStart <= CutOffDuration.DateEnd).ToList();

                    double TotalMonth = 0;
                    foreach (var i in ListContractByProfile)
                    {
                        if (i.Type == EnumDropDown.TypeContract.E_NODURATION.ToString())
                        {
                            TotalMonth += CutOffDuration.DateEnd.Subtract(i.DateStart).TotalDays;
                        }
                        else if (i.DateEnd != null)
                        {
                            if (i.DateEnd > CutOffDuration.DateEnd)
                            {
                                TotalMonth += CutOffDuration.DateEnd.Subtract(i.DateStart).TotalDays;
                            }
                            else
                            {
                                TotalMonth += i.DateEnd.Value.Subtract(i.DateStart).TotalDays;
                            }
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_COUNT_MONTH_WORKING_OFFICIAL.ToString(), TotalMonth, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region ATT_WORKING_NIGHTSHIFT_1
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_WORKING_NIGHTSHIFT_1.ToString(), PayrollElement.ATT_WORKING_NIGHTSHIFT_2.ToString(), PayrollElement.ATT_WORKING_NIGHTSHIFT_DAY_1.ToString(), PayrollElement.ATT_WORKING_NIGHTSHIFT_DAY_2.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                var listAttendanceTableItemByProfileDic = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    var BasicSalaryIsChange = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd && m.DateOfEffect >= CutOffDuration.DateStart).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                    var AttendanceItemByProfile1 = listAttendanceTableItemByProfileDic.Where(m => m.WorkDate < BasicSalaryIsChange.DateOfEffect).ToList();
                    var AttendanceItemByProfile2 = listAttendanceTableItemByProfileDic.Where(m => m.WorkDate >= BasicSalaryIsChange.DateOfEffect).ToList();

                    double CountHours = 0;
                    double CountDay = 0;
                    foreach (var i in AttendanceItemByProfile1)
                    {
                        CountHours += i.NightShiftHours;
                        if (i.NightShiftHours > 0)
                        {
                            CountDay++;
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_WORKING_NIGHTSHIFT_1.ToString(), CountHours, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_NIGHTSHIFT_DAY_1.ToString(), CountDay, 0);
                    listElementFormula.Add(item);

                    CountHours = 0;
                    CountDay = 0;
                    foreach (var i in AttendanceItemByProfile2)
                    {
                        CountHours += i.NightShiftHours;
                        if (i.NightShiftHours > 0)
                        {
                            CountDay++;
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_WORKING_NIGHTSHIFT_2.ToString(), CountHours, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_NIGHTSHIFT_DAY_2.ToString(), CountDay, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    //[01/12/2015][hien.nguyen][Modify][61052]
                    var AttendanceItemByProfile1 = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_NIGHTSHIFT_DAY_1.ToString(), AttendanceItemByProfile1.Count(m => m.NightShiftHours > 0), 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_NIGHTSHIFT_DAY_2.ToString(), 0, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_WORKING_NIGHTSHIFT_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKING_NIGHTSHIFT_2.ToString(), 0, 0);
                    listElementFormula.Add(item);

                }
            }
            #endregion

            #region [26/04/2016][hien.nguyen][New][0065292]:  Số ngày làm việc trước khi thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_PAIDWORKDAY_BEFORE_CHANGE_BASICSALARY.ToString()))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //Cờ để check xem thay đổi trong time nào
                bool _flag = false;
                //TH 1: Thay đổi lương trong tháng tính lươngs
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    var _listBasicSalary = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                    DateTime dateEnd = _listBasicSalary.FirstOrDefault().DateOfEffect;

                    var _listAttendanceItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.WorkDate >= dateStart && m.WorkDate < dateEnd).ToList();

                    double _value = 0;
                    foreach (var i in _listAttendanceItem)
                    {
                        if (i.WorkPaidHours != 0 && i.AvailableHours != 0)
                        {
                            _value += (i.WorkPaidHours / i.AvailableHours);
                        }
                        if (i.PaidLeaveHours != 0 && i.AvailableHours != 0)
                        {
                            _value += (i.PaidLeaveHours / i.AvailableHours);
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_PAIDWORKDAY_BEFORE_CHANGE_BASICSALARY.ToString(), _value, 0);
                    listElementFormula.Add(item);
                    //Update lại cờ
                    _flag = true;
                }

                //Nếu chưa rơi vào TH1 thì kiểm tra có rơi vài TH 2 ko
                if (!_flag && CutOffDuration.AdPayTo != null)
                {
                    using (var context = new VnrHrmDataContext())
                    {
                        var unitOfWork = (IUnitOfWork)new UnitOfWork(context);
                        var _listBasicSalaryByProfile = unitOfWork.CreateQueryable<Sal_BasicSalary>(m =>
                                                        m.DateOfEffect <= CutOffDuration.AdPayTo
                                                        && m.ProfileID == profileItem.ID)
                                                        .Select(m => new { m.ID, m.DateOfEffect, m.ProfileID }).ToList();

                        //TH 2: Lương thay đổi trong khoảng từ ngày kết thúc kỳ công đến ngày kết thúc của kì ứng công
                        if (CheckIsChangeBasicSalary(_listBasicSalaryByProfile.Translate<Sal_BasicSalaryEntity>(), CutOffDuration.DateEnd, CutOffDuration.AdPayTo ?? CutOffDuration.DateStart, profileItem.ID))
                        {
                            //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                            DateTime dateStart = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                            DateTime dateEnd = CutOffDuration.DateEnd;

                            var _listAttendanceItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.WorkDate >= dateStart && m.WorkDate < dateEnd).ToList();

                            //Cách tính ngày công (số ngày làm việc + số ngày nghỉ có trả lương)
                            double _workPay = 0;
                            foreach (var i in _listAttendanceItem)
                            {
                                if (i.WorkPaidHours != 0 && i.AvailableHours != 0)
                                {
                                    _workPay += (i.WorkPaidHours / i.AvailableHours);
                                }
                                if (i.PaidLeaveHours != 0 && i.AvailableHours != 0)
                                {
                                    _workPay += (i.PaidLeaveHours / i.AvailableHours);
                                }
                            }

                            //Số ngày làm việc trong kỳ ứng công
                            double _workPayInAdPayTo = 0;
                            if (CutOffDuration.AdPayFrom != null)
                            {
                                DateTime _dateEffective = _listBasicSalaryByProfile.FirstOrDefault().DateOfEffect;
                                var _listRosterByProfile = unitOfWork.CreateQueryable<Att_Roster>(m => m.ProfileID == profileItem.ID && m.DateStart < _dateEffective && m.DateEnd >= CutOffDuration.AdPayFrom && m.Status == RosterStatus.E_APPROVED.ToString()).Select(m => new { m.DateStart, m.DateEnd }).ToList();

                                foreach (var i in _listRosterByProfile)
                                {
                                    if (i.DateEnd != null)
                                    {
                                        _workPayInAdPayTo += (i.DateEnd.Value.Subtract(i.DateStart).TotalDays + 1);
                                    }
                                }
                            }

                            item = new ElementFormula(PayrollElement.ATT_PAIDWORKDAY_BEFORE_CHANGE_BASICSALARY.ToString(), _workPay + _workPayInAdPayTo, 0);
                            listElementFormula.Add(item);
                            //Update lại cờ
                            _flag = true;
                        }
                    }
                }

                if (!_flag)
                {
                    item = new ElementFormula(PayrollElement.ATT_PAIDWORKDAY_BEFORE_CHANGE_BASICSALARY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [26/04/2016][hien.nguyen][New][0065292]: Số ngày làm việc sau khi thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_PAIDWORKDAY_AFTER_CHANGE_BASICSALARY.ToString()))
            {
                using (var context = new VnrHrmDataContext())
                {
                    var unitOfWork = (IUnitOfWork)new UnitOfWork(context);

                    // Tung.Tran [20/05/2019][0105678]: Kaizen xử lý, Lấy dữ liệu Att_Roster theo kỳ ứng 1 lần cho 600 nhân viên
                    string nameTableGetData = "dicRosterByAdPay";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        var _listRosterByProfile = unitOfWork.CreateQueryable<Att_Roster>(m =>
                                      TotalData600.listProfileIds.Contains(m.ProfileID)
                                      && m.DateStart <= CutOffDuration.AdPayTo
                                      && m.DateEnd >= CutOffDuration.AdPayFrom
                                      && m.Status == RosterStatus.E_APPROVED.ToString()).ToList();

                        TotalData600.dicRosterByAdPay = _listRosterByProfile.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }


                    var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                    //TH1. Lương thay đổi trong khoảng từ ngày đầu tiên của tháng tính công tới ngày kết thúc của kì công chính:
                    //Cờ để check xem thay đổi trong time nào
                    bool _flag = false;
                    //TH 1: Thay đổi lương trong tháng tính lươngs
                    if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1), CutOffDuration.DateEnd, profileItem.ID))
                    {
                        var _listBasicSalary = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                        DateTime dateStart = _listBasicSalary.FirstOrDefault().DateOfEffect;
                        DateTime dateEnd = CutOffDuration.DateEnd;

                        var _listAttendanceItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.WorkDate >= dateStart && m.WorkDate < dateEnd).ToList();

                        //Số ngày trả lương (số ngày làm việc + số ngày nghỉ có trả lương) 
                        double _workPay = 0;
                        foreach (var i in _listAttendanceItem)
                        {
                            if (i.WorkPaidHours != 0 && i.AvailableHours != 0)
                            {
                                _workPay += (i.WorkPaidHours / i.AvailableHours);
                            }
                            if (i.PaidLeaveHours != 0 && i.AvailableHours != 0)
                            {
                                _workPay += (i.PaidLeaveHours / i.AvailableHours);
                            }
                        }

                        //Số ngày làm việc trong kỳ ứng công:
                        double _workPayInAdPayTo = 0;
                        if (CutOffDuration.AdPayFrom != null)
                        {
                            var _listRosterByProfile = TotalData600.dicRosterByAdPay.GetValueOrNew(profileItem.ID).Where(m => m.DateStart <= CutOffDuration.AdPayTo
                                                       && m.DateEnd >= CutOffDuration.AdPayFrom
                                                       && m.Status == RosterStatus.E_APPROVED.ToString())
                                                       .Select(m => new { m.DateStart, m.DateEnd }).ToList();

                            foreach (var i in _listRosterByProfile)
                            {
                                if (i.DateEnd != null)
                                {
                                    _workPayInAdPayTo += (i.DateEnd.Value.Subtract(i.DateStart).TotalDays + 1);
                                }
                            }
                        }

                        item = new ElementFormula(PayrollElement.ATT_PAIDWORKDAY_AFTER_CHANGE_BASICSALARY.ToString(), _workPay + _workPayInAdPayTo, 0);
                        listElementFormula.Add(item);
                        //Update lại cờ
                        _flag = true;
                    }

                    if (!_flag)
                    {

                        // Tung.Tran [20/05/2019][0105678]: Kaizen xử lý, Lấy dữ liệu Sal_BasicSalary có ngày hiệu lực nhỏ hơn ngày kết thúc kỳ ứng (Cho 600 nhân viên 1 lần)
                        nameTableGetData = "dicBasicSalaryAdPayTo";
                        if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                        {
                            var listBasicSalaryByProfile = unitOfWork.CreateQueryable<Sal_BasicSalary>(m =>
                                                            m.DateOfEffect <= CutOffDuration.AdPayTo
                                                            && TotalData600.listProfileIds.Contains(m.ProfileID)).ToList();

                            TotalData600.dicBasicSalaryAdPayTo = listBasicSalaryByProfile.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
                            TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                        }

                        //TH2. Lương thay đổi trong khoảng từ ngày kết thúc kỳ công đến ngày kết thúc của kì ứng công
                        var _listBasicSalaryByProfile = TotalData600.dicBasicSalaryAdPayTo.GetValueOrNew(profileItem.ID)
                                                        .Where(m => m.DateOfEffect <= CutOffDuration.AdPayTo)
                                                        .Select(m => new { m.ID, m.DateOfEffect, m.ProfileID }).ToList();

                        //TH 2: Lương thay đổi trong khoảng từ ngày kết thúc kỳ công đến ngày kết thúc của kì ứng công
                        if (CheckIsChangeBasicSalary(_listBasicSalaryByProfile.Translate<Sal_BasicSalaryEntity>(), CutOffDuration.DateEnd, CutOffDuration.AdPayTo ?? CutOffDuration.DateStart, profileItem.ID))
                        {
                            //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                            DateTime dateStart = _listBasicSalaryByProfile.FirstOrDefault().DateOfEffect;
                            DateTime dateEnd = CutOffDuration.AdPayTo ?? _listBasicSalaryByProfile.FirstOrDefault().DateOfEffect;

                            var _listRosterByProfile = TotalData600.dicRosterByAdPay.GetValueOrNew(profileItem.ID).Where(m => m.DateStart <= CutOffDuration.AdPayTo
                                                       && m.DateEnd >= CutOffDuration.AdPayFrom
                                                       && m.Status == RosterStatus.E_APPROVED.ToString())
                                                       .Select(m => new { m.DateStart, m.DateEnd }).ToList();

                            double _workPayInAdPayTo = 0;
                            foreach (var i in _listRosterByProfile)
                            {
                                if (i.DateEnd != null)
                                {
                                    _workPayInAdPayTo += (i.DateEnd.Value.Subtract(i.DateStart).TotalDays + 1);
                                }
                            }

                            item = new ElementFormula(PayrollElement.ATT_PAIDWORKDAY_AFTER_CHANGE_BASICSALARY.ToString(), _workPayInAdPayTo, 0);
                            listElementFormula.Add(item);
                            //Update lại cờ
                            _flag = true;
                        }
                    }

                    //Nếu không thay đổi lương
                    //Gán phần tử = 0
                    if (!_flag)
                    {
                        item = new ElementFormula(PayrollElement.ATT_PAIDWORKDAY_AFTER_CHANGE_BASICSALARY.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [25/04/2016][hien.nguyen][New][66716]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COUNT_LATEINMINUTES_MONTHLY.ToString(), PayrollElement.ATT_COUNT_EARLYOUTMINUTES_MONTHLY.ToString(), PayrollElement.ATT_TOTAL_LATE_MINUTES_MONTHLY.ToString(), PayrollElement.ATT_TOTAL_EARLY_MINUTES_MONTHLY.ToString() }))
            {
                double ATT_COUNT_LATEINMINUTES_MONTHLY = 0;
                double ATT_COUNT_EARLYOUTMINUTES_MONTHLY = 0;
                double ATT_TOTAL_LATE_MINUTES_MONTHLY = 0;
                double ATT_TOTAL_EARLY_MINUTES_MONTHLY = 0;
                var _listAttendancetableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                foreach (var i in _listAttendancetableItem)
                {
                    ATT_TOTAL_LATE_MINUTES_MONTHLY += i.LateInMinutes;
                    ATT_TOTAL_EARLY_MINUTES_MONTHLY += i.EarlyOutMinutes;
                    if (i.LateInMinutes != 0)
                    {
                        ATT_COUNT_LATEINMINUTES_MONTHLY++;
                    }
                    if (i.EarlyOutMinutes != 0)
                    {
                        ATT_COUNT_EARLYOUTMINUTES_MONTHLY++;
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_COUNT_LATEINMINUTES_MONTHLY.ToString(), ATT_COUNT_LATEINMINUTES_MONTHLY, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_COUNT_EARLYOUTMINUTES_MONTHLY.ToString(), ATT_COUNT_EARLYOUTMINUTES_MONTHLY, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_TOTAL_LATE_MINUTES_MONTHLY.ToString(), ATT_TOTAL_LATE_MINUTES_MONTHLY, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_TOTAL_EARLY_MINUTES_MONTHLY.ToString(), ATT_TOTAL_EARLY_MINUTES_MONTHLY, 0);
                listElementFormula.Add(item);

            }
            #endregion

            #region [06/03/2018][bang.nguyen][93115][New Func]: Đếm Số lần thiếu In Out trong tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_WORKDAY_COUNT_MISS_IN_OUT_IN_MONTH.ToString()))
            {
                string status = string.Empty;
                string nameTableGetData = "listAttWorkday";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.listAttWorkday = dataComputeSer.GetListAttWorkDay(TotalData600.strOrderByProfile, CutOffDuration, ref status);
                    if (TotalData600.listAttWorkday != null)
                    {
                        TotalData600.dicAttWorkday = TotalData600.listAttWorkday.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
                    }
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                //Trường hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông lưu store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_WORKDAY_COUNT_MISS_IN_OUT_IN_MONTH.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_COUNT_MISS_IN_OUT_IN_MONTH.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    double countMissInOutInMonth = 0;
                    //[11/09/2018][bang.nguyen][98480][Modify Func]
                    countMissInOutInMonth = TotalData600.listAttWorkday.Where(
                                                    s => s.ProfileID == profileItem.ID
                                                    && s.WorkDate >= CutOffDuration.DateStart
                                                    && s.WorkDate <= CutOffDuration.DateEnd
                                                    && (s.SrcType == WorkdaySrcType.E_MANUAL_IN.ToString()
                                                        || s.SrcType == WorkdaySrcType.E_MANUAL_INOUT.ToString()
                                                        || s.SrcType == WorkdaySrcType.E_MANUAL_OUT.ToString()))
                                                    .Count();

                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_COUNT_MISS_IN_OUT_IN_MONTH.ToString(), countMissInOutInMonth, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [06/03/2018][bang.nguyen][93115][New Func]: Đếm Số lần đi trễ về sớm trong tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLEITEM_COUNT_LATE_EARLY_IN_MONTH.ToString()))
            {
                double countLateEarlyInMonth = 0;
                double countLateInMonth = 0;
                double countEarlyInMonth = 0;

                var listAttendanceTableItemByPro = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).ToList();
                countLateInMonth = listAttendanceTableItemByPro.Where(s => s.LateInMinutes > 0).Count();
                countEarlyInMonth = listAttendanceTableItemByPro.Where(s => s.EarlyOutMinutes > 0).Count();

                countLateEarlyInMonth = countLateInMonth + countEarlyInMonth;
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_COUNT_LATE_EARLY_IN_MONTH.ToString(), countLateEarlyInMonth, 0);
                listElementFormula.Add(item);

            }
            #endregion

            #region [30/05/2016][HienNguyen][67695]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_WORKING_DAY_FOR_ATTENDANCE_.ToString(), new string[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                for (int i = 1; i <= 9; i++)
                {
                    DateTime[] _timeChangeSalary = CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID, i);
                    if (_timeChangeSalary != null)
                    {
                        var _listAttendanceItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.WorkDate <= _timeChangeSalary.LastOrDefault() && m.WorkDate >= _timeChangeSalary.FirstOrDefault() && m.ShiftID != null && m.StdWorkHours != null && m.StdWorkHours != 0 && m.WorkPaidHours != 0).ToList();
                        if (_listAttendanceItem.Count > 0)
                        {
                            item = new ElementFormula(PayrollElement.DYN_ATT_WORKING_DAY_FOR_ATTENDANCE_.ToString() + i.ToString(), _listAttendanceItem.Sum(m => m.WorkPaidHours / m.StdWorkHours), 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.DYN_ATT_WORKING_DAY_FOR_ATTENDANCE_.ToString() + i.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.DYN_ATT_WORKING_DAY_FOR_ATTENDANCE_.ToString() + i.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Phần tử công tháng hiện tại
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_STD_DAY.ToString(),
                PayrollElement.ATT_HOURS_PER_DAY.ToString(),
                PayrollElement.ATT_OVERTIME_PIT_HOURS.ToString(),
                PayrollElement.ATT_TOTAL_ANNUALLEAVE_AVAILABLE.ToString(),
                PayrollElement.ATT_ANNUALLEAVE_ADJACENT.ToString(),
                PayrollElement.ATT_TOTAL_SICK_AVAILABLE.ToString(),
                PayrollElement.ATT_SICK_ADJACENT.ToString(),
                PayrollElement.ATT_ANNUALLEAVE.ToString(),
                PayrollElement.ATT_SICKLEAVE.ToString(),
                PayrollElement.ATT_WORKING_NIGHTSHIFT.ToString(),
                PayrollElement.ATT_WORKING_DAY_FOR_ATTENDANCE.ToString(),
                PayrollElement.ATT_WORKING_NIGHTSHIFT_N_1.ToString(),
                PayrollElement.ATT_TOTAL_MISS_IN_OUT.ToString(),
                PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_N_1.ToString(),
                PayrollElement.ATT_ANNUALLEAVE_N_1.ToString() }))
            {
                var AttendanceTablePrev = TotalDataAll.Att_AttendanceTable_Prev.FirstOrDefault(m => m.ProfileID == profileItem.ID);
                if (AttendanceTablePrev != null)
                {
                    item = new ElementFormula(PayrollElement.ATT_WORKING_NIGHTSHIFT_N_1.ToString(), AttendanceTablePrev.NightShiftHours, 0);
                    listElementFormula.Add(item);
                    //[06/11/2015][hien.nguyen][Modify][59660]
                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_N_1.ToString(), AttendanceTablePrev.TotalPaidWorkDayCount ?? 0, 0);
                    listElementFormula.Add(item);
                    //[12/11/2015][hien.nguyen][Modify][59958]
                    item = new ElementFormula(PayrollElement.ATT_ANNUALLEAVE_N_1.ToString(), AttendanceTablePrev.AnlDayTaken, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_WORKING_NIGHTSHIFT_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    //[06/11/2015][hien.nguyen][Modify][59660]
                    item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    //[12/11/2015][hien.nguyen][Modify][59958]
                    item = new ElementFormula(PayrollElement.ATT_ANNUALLEAVE_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }

                if (objAttendanceTableProCut != null)
                {
                    item = new ElementFormula(PayrollElement.ATT_WORKING_DAY_FOR_ATTENDANCE.ToString(), objAttendanceTableProCut.RealWorkDayCount, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_STD_DAY.ToString(), objAttendanceTableProCut.StdWorkDayCount, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_HOURS_PER_DAY.ToString(), objAttendanceTableProCut.HourPerDay, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_WORKING_NIGHTSHIFT.ToString(), objAttendanceTableProCut.NightShiftHours, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_TOTAL_ANNUALLEAVE_AVAILABLE.ToString(), objAttendanceTableProCut.TotalAnlDayAvailable != null ? objAttendanceTableProCut.TotalAnlDayAvailable : 0, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_ANNUALLEAVE_ADJACENT.ToString(), objAttendanceTableProCut.AnlDayAdjacent, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_ANNUALLEAVE.ToString(), objAttendanceTableProCut.AnlDayTaken, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_SICKLEAVE.ToString(), objAttendanceTableProCut.SickDayTaken, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_TOTAL_SICK_AVAILABLE.ToString(), objAttendanceTableProCut.TotalSickDayAvailable, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_SICK_ADJACENT.ToString(), objAttendanceTableProCut.SickDayAdjacent, 0);
                    listElementFormula.Add(item);

                    //[27/10/2015][hien.nguyen][New][58662]
                    //Số lần quyên quẹt thẻ trong kỳ lương
                    item = new ElementFormula(PayrollElement.ATT_TOTAL_MISS_IN_OUT.ToString(), objAttendanceTableProCut.TotalMissInOut, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_WORKING_DAY_FOR_ATTENDANCE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_STD_DAY.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_HOURS_PER_DAY.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    //item = new ElementFormula(PayrollElement.ATT_WORKING_PAIDLEAVE_DAY.ToString(), 0, 0, "Null");
                    //listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_WORKING_NIGHTSHIFT.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_TOTAL_ANNUALLEAVE_AVAILABLE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_ANNUALLEAVE_ADJACENT.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_TOTAL_SICK_AVAILABLE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_SICK_ADJACENT.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_SICKLEAVE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_ANNUALLEAVE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    //[27/10/2015][hien.nguyen][New][58662]
                    //Số lần quyên quẹt thẻ trong kỳ lương
                    item = new ElementFormula(PayrollElement.ATT_TOTAL_MISS_IN_OUT.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region ATT_TOTAL_PAID_LEAVEDAY_DAY_1
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_1.ToString(), PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_2.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                var listAttendanceTableItemByProfileDic = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID) && objAttendanceTableProCut != null)
                {
                    var BasicSalaryIsChange = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                    var AttendanceTableItem1 = listAttendanceTableItemByProfileDic.Where(m => m.WorkDate < BasicSalaryIsChange.DateOfEffect).ToList();
                    var AttendanceTableItem2 = listAttendanceTableItemByProfileDic.Where(m => m.WorkDate >= BasicSalaryIsChange.DateOfEffect).ToList();

                    double Total_LeaveDay = 0;
                    //[02062016][bang.nguyen][68067][Modify func]
                    //Mỗi ngày nghỉ trả lương được tính bằng lấy giá trị cột PaidLeaveHours chia cho số giờ của ca làm việc trong ngày đó (PaidLeaveHours /AvailableHours)
                    //loc lai dữ liệu trước khi tính
                    AttendanceTableItem1 = AttendanceTableItem1.Where(s => s.PaidLeaveHours != 0 && s.AvailableHours != 0).ToList();
                    for (int j = 0; j < AttendanceTableItem1.Count; j++)
                    {

                        Total_LeaveDay += AttendanceTableItem1[j].PaidLeaveHours / AttendanceTableItem1[j].AvailableHours;
                    }
                    item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_1.ToString(), Total_LeaveDay, 0);
                    listElementFormula.Add(item);

                    Total_LeaveDay = 0;
                    //[02062016][bang.nguyen][68067][Modify func]
                    //Mỗi ngày nghỉ trả lương được tính bằng lấy giá trị cột PaidLeaveHours chia cho số giờ của ca làm việc trong ngày đó (PaidLeaveHours /AvailableHours)
                    //loc lai dữ liệu trước khi tính
                    AttendanceTableItem2 = AttendanceTableItem2.Where(s => s.PaidLeaveHours != 0 && s.AvailableHours != 0).ToList();
                    for (int j = 0; j < AttendanceTableItem2.Count; j++)
                    {
                        Total_LeaveDay += AttendanceTableItem2[j].PaidLeaveHours / AttendanceTableItem2[j].AvailableHours;
                    }
                    item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_2.ToString(), Total_LeaveDay, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    //[26/10/2015][hien.nguyen][Modify][58691]
                    //Nếu không có 2 mức lương thì gán giá trị vào enum ATT_TOTAL_PAID_LEAVEDAY_DAY_1
                    double Total_LeaveDay = 0;
                    for (int j = 0; j < listAttendanceTableItemByProfileDic.Count; j++)
                    {
                        if (listAttendanceTableItemByProfileDic[j].PaidLeaveHours > 0)
                        {
                            Total_LeaveDay++;
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_1.ToString(), Total_LeaveDay, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region ATT_TOTAL_PAID_LEAVEDAY_DAY_NOT_PAY_DETAIL
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_NOT_PAY_DETAIL.ToString()))
            {
                double Total_LeaveDay_NotPay = 0;
                if (objAttendanceTableProCut != null)
                {
                    var AttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.UnpaidLeaveHours != 0 && m.AvailableHours != 0).ToList();

                    for (int j = 0; j < AttendanceTableItem.Count; j++)
                    {
                        Total_LeaveDay_NotPay += AttendanceTableItem[j].UnpaidLeaveHours / AttendanceTableItem[j].AvailableHours;
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_NOT_PAY_DETAIL.ToString(), Total_LeaveDay_NotPay, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [27012015][bang.nguyen][63434][modify]: Lấy enum số ngày có đăng ký ngày nghỉ ( ngày nghỉ đã được duyệt ) theo từng loại ngày nghỉ
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_ATTTABLEITEM_COUNT_LEAVETYPE_", "_MONTH"))
            {
                int _countLeaveDay = 0;
                var listLeavedayType = TotalDataAll.listLeavedayType.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                List<Att_AttendanceTableItemEntity> lstAttTableItemByAttendanceTableID = new List<Att_AttendanceTableItemEntity>();
                //[01022016][bang.nguyen][63594][bug]
                //loc theo bang luong thang duoc chon
                if (objAttendanceTableProCut != null)
                {
                    lstAttTableItemByAttendanceTableID = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(s => s.LeaveTypeID != null).ToList();
                }
                foreach (var objLeavedayType in listLeavedayType)
                {
                    var lstAttTableItemByLeavedayType = lstAttTableItemByAttendanceTableID.Where(s => s.LeaveTypeID == objLeavedayType.ID).ToList();
                    _countLeaveDay = lstAttTableItemByLeavedayType.Count;
                    item = new ElementFormula("ATT_ATTTABLEITEM_COUNT_LEAVETYPE_" + objLeavedayType.Code + "_MONTH", _countLeaveDay, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [08032016][bang.nguyen][64082][Modify]: phần tử số giờ theo loại nghỉ trước khi thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_ATTTABLEITEM_SUM_LEAVEHOURS_", "_FIRST"))
            {
                //loc danh sach loai nghi
                var lstLeaveDaytype = TotalDataAll.listLeavedayType.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                if (lstLeaveDaytype.Count > 0)
                {
                    double _LeaveHours = 0;
                    var lstAttendanceTableItem = new List<Att_AttendanceTableItemEntity>();
                    //loc có thay đổi lương trong tháng (lần thay đổi cuối cùng trong kì lương)
                    var objChangeBasisSalary = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(s => s.ProfileID == profileItem.ID
                                                                                    && s.DateOfEffect >= CutOffDuration.DateStart
                                                                                    && s.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                    if (objChangeBasisSalary != null)
                    {
                        var objAttendanceTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => (s.CutOffDurationID == CutOffDuration.ID
                                                                                            || (s.CutOffDurationID == null && s.MonthYear != null && s.MonthYear.Value == CutOffDuration.MonthYear)
                                                                                            )).FirstOrDefault();
                        if (objAttendanceTable != null)
                        {
                            lstAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTable.ID).Where(s => s.WorkDate >= CutOffDuration.DateStart
                                                                                                && s.WorkDate <= objChangeBasisSalary.DateOfEffect.AddDays(-1)
                                                                                                && s.LeaveTypeID != null).ToList();

                        }
                    }
                    if (lstAttendanceTableItem.Count > 0)
                    {
                        foreach (var objLeaveDaytype in lstLeaveDaytype)
                        {
                            _LeaveHours = 0;
                            //_LeaveHours = lstAttendanceTableItem.Where(s => s.LeaveTypeID == objLeaveDaytype.ID).Select(s => s.LeaveHours).Sum();
                            foreach (var objAttendanceTableItem in lstAttendanceTableItem)
                            {
                                if (objAttendanceTableItem.LeaveTypeID == objLeaveDaytype.ID)
                                {
                                    _LeaveHours += objAttendanceTableItem.LeaveHours;
                                }
                                if (objAttendanceTableItem.LeaveWorkDayType == objLeaveDaytype.ID && objAttendanceTableItem.LeaveWorkDayHour != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.LeaveWorkDayHour.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveTypeID == objLeaveDaytype.ID)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType3ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours3 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours3.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType4ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours4 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours4.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType5ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours5 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours5.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType6ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours6 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours6.Value;
                                }
                            }

                            item = new ElementFormula("ATT_ATTTABLEITEM_SUM_LEAVEHOURS_" + objLeaveDaytype.Code + "_FIRST", _LeaveHours, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var objLeaveDaytype in lstLeaveDaytype)
                        {
                            item = new ElementFormula("ATT_ATTTABLEITEM_SUM_LEAVEHOURS_" + objLeaveDaytype.Code + "_FIRST", _LeaveHours, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region [08032016][bang.nguyen][64082][Modify]: phần tử số giờ theo loại nghỉ sau khi thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_ATTTABLEITEM_SUM_LEAVEHOURS_", "_LAST"))
            {
                //loc danh sach loai nghi
                var lstLeaveDaytype = TotalDataAll.listLeavedayType.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                if (lstLeaveDaytype.Count > 0)
                {
                    double _LeaveHours = 0;
                    var lstAttendanceTableItem = new List<Att_AttendanceTableItemEntity>();
                    //loc có thay đổi lương trong tháng (lần thay đổi cuối cùng trong kì lương)
                    var objChangeBasisSalary = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(s => s.ProfileID == profileItem.ID
                                                                                    && s.DateOfEffect >= CutOffDuration.DateStart
                                                                                    && s.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();

                    var objAttendanceTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => (s.CutOffDurationID == CutOffDuration.ID
                                                                                            || (s.CutOffDurationID == null && s.MonthYear != null && s.MonthYear.Value == CutOffDuration.MonthYear)
                                                                                            )).FirstOrDefault();
                    if (objAttendanceTable != null)
                    {
                        if (objChangeBasisSalary != null)
                        {

                            lstAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTable.ID).Where(s => s.WorkDate >= objChangeBasisSalary.DateOfEffect
                                                                                                    && s.WorkDate <= CutOffDuration.DateEnd
                                                                                                    && s.LeaveTypeID != null).ToList();
                        }
                        else
                        {
                            lstAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTable.ID).Where(s => s.WorkDate >= CutOffDuration.DateStart
                                                                                                    && s.WorkDate <= CutOffDuration.DateEnd
                                                                                                    && s.LeaveTypeID != null).ToList();
                        }
                    }

                    if (lstAttendanceTableItem.Count > 0)
                    {
                        foreach (var objLeaveDaytype in lstLeaveDaytype)
                        {
                            _LeaveHours = 0;
                            //_LeaveHours = lstAttendanceTableItem.Where(s => s.LeaveTypeID == objLeaveDaytype.ID).Select(s => s.LeaveHours).Sum();
                            foreach (var objAttendanceTableItem in lstAttendanceTableItem)
                            {
                                if (objAttendanceTableItem.LeaveTypeID == objLeaveDaytype.ID)
                                {
                                    _LeaveHours += objAttendanceTableItem.LeaveHours;
                                }
                                if (objAttendanceTableItem.LeaveWorkDayType == objLeaveDaytype.ID && objAttendanceTableItem.LeaveWorkDayHour != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.LeaveWorkDayHour.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveTypeID == objLeaveDaytype.ID)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType3ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours3 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours3.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType4ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours4 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours4.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType5ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours5 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours5.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType6ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours6 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours6.Value;
                                }
                            }
                            item = new ElementFormula("ATT_ATTTABLEITEM_SUM_LEAVEHOURS_" + objLeaveDaytype.Code + "_LAST", _LeaveHours, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var objLeaveDaytype in lstLeaveDaytype)
                        {
                            item = new ElementFormula("ATT_ATTTABLEITEM_SUM_LEAVEHOURS_" + objLeaveDaytype.Code + "_LAST", _LeaveHours, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region Số ngày nghỉ có trả lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY.ToString(), PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_NOT_PAY.ToString() }))
            {
                double Total_LeaveDay = 0;
                double Total_LeaveDay_NotPay = 0;
                if (objAttendanceTableProCut != null)
                {
                    var AttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);

                    for (int j = 0; j < AttendanceTableItem.Count; j++)
                    {
                        if (AttendanceTableItem[j].LeaveTypeID != null)
                        {
                            var LeaveDay = TotalDataAll.listLeavedayType.Where(m => m.ID == AttendanceTableItem[j].LeaveTypeID).FirstOrDefault();
                            if (LeaveDay != null)
                            {
                                //code củ là so sánh với IsWorkDay
                                if (LeaveDay.IsAnnualLeave || LeaveDay.PaidRate >= 1)
                                {
                                    if (AttendanceTableItem[j].PaidLeaveHours != 0 && AttendanceTableItem[j].AvailableHours != 0)
                                    {
                                        Total_LeaveDay += AttendanceTableItem[j].PaidLeaveHours / AttendanceTableItem[j].AvailableHours;
                                    }

                                }
                                else if (!LeaveDay.IsAnnualLeave && LeaveDay.PaidRate <= 0)
                                {
                                    //Total_LeaveDay_NotPay += AttendanceTableItem[j].UnpaidLeaveHours / AttendanceTableItem[j].AvailableHours; 
                                    Total_LeaveDay_NotPay++;
                                }
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY.ToString(), Total_LeaveDay, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_NOT_PAY.ToString(), Total_LeaveDay_NotPay, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [30/05/2016][HienNguyen][67695]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_TOTAL_PAID_LEAVEDAY_DAY_.ToString(), new string[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                for (int i = 1; i <= 9; i++)
                {
                    DateTime[] _timeChangeSalary = CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID, i);
                    //Có thay đổi
                    if (_timeChangeSalary != null)
                    {
                        double Total_LeaveDay = 0;
                        if (objAttendanceTableProCut != null)
                        {
                            var AttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.WorkDate <= _timeChangeSalary.LastOrDefault() && m.WorkDate >= _timeChangeSalary.FirstOrDefault()).ToList();

                            for (int j = 0; j < AttendanceTableItem.Count; j++)
                            {
                                if (AttendanceTableItem[j].LeaveTypeID != null)
                                {
                                    var LeaveDay = TotalDataAll.listLeavedayType.Where(m => m.ID == AttendanceTableItem[j].LeaveTypeID).FirstOrDefault();
                                    if (LeaveDay != null)
                                    {
                                        //code củ là so sánh với IsWorkDay
                                        if (LeaveDay.IsAnnualLeave || LeaveDay.PaidRate >= 1)
                                        {
                                            if (AttendanceTableItem[j].PaidLeaveHours != 0 && AttendanceTableItem[j].AvailableHours != 0)
                                            {
                                                Total_LeaveDay += AttendanceTableItem[j].PaidLeaveHours / AttendanceTableItem[j].AvailableHours;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        item = new ElementFormula(PayrollElement.DYN_ATT_TOTAL_PAID_LEAVEDAY_DAY_.ToString() + i.ToString(), Total_LeaveDay, 0);
                        listElementFormula.Add(item);
                    }
                    else//Không thay đổi
                    {
                        item = new ElementFormula(PayrollElement.DYN_ATT_TOTAL_PAID_LEAVEDAY_DAY_.ToString() + i.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [30/05/2016][HienNguyen][67695]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_SAL_BASIC_SALARY_.ToString(), new string[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                for (int i = 1; i <= 9; i++)
                {
                    Sal_BasicSalaryEntity _basicSalary = GetBasicSalaryIsChange(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID, i);
                    if (_basicSalary.HasValue())
                    {
                        item = new ElementFormula(PayrollElement.DYN_SAL_BASIC_SALARY_.ToString() + i.ToString(), _basicSalary.GrossAmount, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.DYN_SAL_BASIC_SALARY_.ToString() + i.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Số ngày nghỉ không trả lương tháng N-1
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_NOT_PAY_N_1.ToString(), PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_N_1.ToString() }))
            {
                double Total_LeaveDay = 0;
                double Total_LeaveDay_NotPay = 0;
                var AttendanceTable = TotalDataAll.Att_AttendanceTable_Prev.FirstOrDefault(m => m.ProfileID == profileItem.ID);
                if (AttendanceTable != null)
                {
                    //[10/08/2017][bang.nguyen][86578][bug]
                    var AttendanceTableItem_N_1 = TotalDataAll.listAttendanceTableItem_N_1.Where(m => m.AttendanceTableID == AttendanceTable.ID).ToList();

                    for (int j = 0; j < AttendanceTableItem_N_1.Count; j++)
                    {
                        if (AttendanceTableItem_N_1[j].LeaveTypeID != null)
                        {
                            var LeaveDay = TotalDataAll.listLeavedayType.Where(m => m.ID == AttendanceTableItem_N_1[j].LeaveTypeID).FirstOrDefault();
                            if (LeaveDay != null)
                            {
                                //code củ là so sánh với IsWorkDay
                                if (LeaveDay.IsAnnualLeave || LeaveDay.PaidRate >= 1)
                                {
                                    if (AttendanceTableItem_N_1[j].PaidLeaveHours != 0 && AttendanceTableItem_N_1[j].AvailableHours != 0)
                                    {
                                        Total_LeaveDay += AttendanceTableItem_N_1[j].PaidLeaveHours / AttendanceTableItem_N_1[j].AvailableHours;
                                    }
                                }
                                else if (!LeaveDay.IsAnnualLeave && LeaveDay.PaidRate <= 0)
                                {
                                    Total_LeaveDay_NotPay++;
                                }
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_N_1.ToString(), Total_LeaveDay, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_DAY_NOT_PAY_N_1.ToString(), Total_LeaveDay_NotPay, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Tổng số ngày công trong năm
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_TOTAL_WORKDAY_IN_YEAR.ToString() }))
            {
                var Attantendence = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(m => m.CutOffDurationID == CutOffDuration.ID).ToList();
                item = new ElementFormula(PayrollElement.ATT_TOTAL_WORKDAY_IN_YEAR.ToString(), Attantendence.Sum(m => m.StdWorkDayCount), 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Tổng giờ cộng thêm,Tổng giờ làm đêm cộng thêm
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_TOTAL_WORKHOUR_SUB_NIGHT.ToString(), PayrollElement.ATT_TOTAL_HOUR_SUB.ToString() }))
            {

                var Attantendence = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(m => m.CutOffDurationID == CutOffDuration.ID).ToList();
                if (Attantendence != null)
                {
                    item = new ElementFormula(PayrollElement.ATT_TOTAL_WORKHOUR_SUB_NIGHT.ToString(), Attantendence.Sum(m => m.SubNightWorkHoursTotal), 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_TOTAL_HOUR_SUB.ToString(), Attantendence.Sum(m => m.SubHoursTotal), 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_TOTAL_WORKHOUR_SUB_NIGHT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_TOTAL_HOUR_SUB.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Tổng số ngày công thực tế trong năm
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_TOTAL_REALITYWORKDAY_IN_YEAR.ToString() }))
            {
                var Attantendence = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(m => m.CutOffDurationID == CutOffDuration.ID).ToList();
                item = new ElementFormula(PayrollElement.ATT_TOTAL_REALITYWORKDAY_IN_YEAR.ToString(), Attantendence.Sum(m => m.RealWorkDayCount), 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Tổng số ngày làm việc trong năm (365-dayoff) task 56061
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_TOTAL_DAY_NOT_DAYOFF_IN_YEAR.ToString() }))
            {
                DateTime form = new DateTime(CutOffDuration.MonthYear.Year - 1, 4, 1);
                DateTime to = new DateTime(CutOffDuration.MonthYear.Year, 3, 31);
                //int days = new DateTime(CutOffDuration.MonthYear.Year, 12, 31).DayOfYear;
                double days = to.Subtract(form).TotalDays + 1;
                int dayOff = TotalDataAll.listDayOff.Where(m => m.DateOff >= form && m.DateOff <= to && (m.OrgStructureID == null || m.IsRoot == true)).Count();
                item = new ElementFormula(PayrollElement.ATT_TOTAL_DAY_NOT_DAYOFF_IN_YEAR.ToString(), days - dayOff, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Lấy OT theo từng loại và lấy tổng số giờ tăng ca đã quy đổi ra hệ số 1

            #region OT tháng N

            //[25/11/2015][hien.nguyen][Modify][60691]
            //Số giờ tăng ca loại nghỉ bù
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_OFFTYPE_", "_HOURS"))
            {
                var AttendanceTable = TotalDataAll.listAttendanceTable.FirstOrDefault(m => m.ID == objAttendanceTableProCut.ID);
                if (AttendanceTable.HasValue())
                {
                    foreach (var i in TotalDataAll.listOvertimeType)
                    {
                        double hours = 0;

                        if (AttendanceTable.OvertimeOFF1Type == i.ID)
                        {
                            hours += AttendanceTable.OvertimeOFF1Hours == null ? 0 : (double)AttendanceTable.OvertimeOFF1Hours;
                        }
                        if (AttendanceTable.OvertimeOFF2Type == i.ID)
                        {
                            hours += AttendanceTable.OvertimeOFF2Hours == null ? 0 : (double)AttendanceTable.OvertimeOFF2Hours;
                        }
                        if (AttendanceTable.OvertimeOFF3Type == i.ID)
                        {
                            hours += AttendanceTable.OvertimeOFF3Hours == null ? 0 : (double)AttendanceTable.OvertimeOFF3Hours;
                        }
                        if (AttendanceTable.OvertimeOFF4Type == i.ID)
                        {
                            hours += AttendanceTable.OvertimeOFF4Hours == null ? 0 : (double)AttendanceTable.OvertimeOFF4Hours;
                        }
                        if (AttendanceTable.OvertimeOFF5Type == i.ID)
                        {
                            hours += AttendanceTable.OvertimeOFF5Hours == null ? 0 : (double)AttendanceTable.OvertimeOFF5Hours;
                        }
                        if (AttendanceTable.OvertimeOFF6Type == i.ID)
                        {
                            hours += AttendanceTable.OvertimeOFF6Hours == null ? 0 : (double)AttendanceTable.OvertimeOFF6Hours;
                        }
                        item = new ElementFormula("ATT_OVERTIME_OFFTYPE_" + i.Code + "_HOURS", hours, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            //57194
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_", "_RATE") || CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_", "_RATE_PREV"))
            {
                DateTime DateEnd_Prev = CutOffDuration.DateEnd.AddMonths(-1);

                var ListOvertimeTypecode = TotalDataAll.listOvertimeTypeAll.Select(m => m.Code).Distinct().ToList();

                foreach (var i in ListOvertimeTypecode)
                {
                    //lấy loại overtime tháng hiện tại theo ngày hiệu lực
                    var OvertimeItem = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(m => m.Code == i && (m.DateEffective == null || m.DateEffective <= CutOffDuration.DateEnd));
                    if (OvertimeItem != null && OvertimeItem.Rate != null)
                    {
                        item = new ElementFormula("ATT_OVERTIME_" + i + "_RATE", OvertimeItem.Rate, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula("ATT_OVERTIME_" + i + "_RATE", 0, 0);
                        listElementFormula.Add(item);
                    }

                    //lấy loại overtime tháng N-1 tại theo ngày hiệu lực
                    OvertimeItem = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(m => m.Code == i && (m.DateEffective == null || m.DateEffective <= DateEnd_Prev));
                    if (OvertimeItem != null && OvertimeItem.Rate != null)
                    {
                        item = new ElementFormula("ATT_OVERTIME_" + i + "_RATE_PREV", OvertimeItem.Rate, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula("ATT_OVERTIME_" + i + "_RATE_PREV", 0, 0);
                        listElementFormula.Add(item);
                    }

                }
            }

            //[14/30/2016][HienNguyen][64065]
            //Phần tử phần tử tăng ca trước thay đổi lương 
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_", "_HOURS_BEFORE"))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                //có thay đổi lương trong tháng
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {
                    double OtHour = 0;
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                    //lấy dữ liệu công theo cutoff
                    List<Att_AttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                    if (listAttTableItem != null && listAttTableItem.Count > 0)
                    {
                        listAttTableItem = listAttTableItem.Where(m => m.WorkDate < dateStart2).ToList();
                        //duyệt wa các loại ot
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            OtHour = 0;
                            //tính số giờ OT của từng loại
                            foreach (var tableItem in listAttTableItem)
                            {
                                if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == OTType.ID)
                                {
                                    OtHour += tableItem.OvertimeHours;
                                }
                                if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours;
                                }
                                if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours2;
                                }
                                if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours3;
                                }
                                //[27/06/2017][bang.nguyen][83774][Modify Func]
                                if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == OTType.ID)
                                {
                                    if (tableItem.ExtraOvertimeHours4 != null)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours4.Value;
                                    }
                                }
                            }
                            item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_BEFORE", OtHour, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_BEFORE", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var OTType in TotalDataAll.listOvertimeType)
                    {
                        item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_BEFORE", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            //Tăng ca trước khi thay đổi lương và không có thay đổi lương cũng lưu vào phần tử này
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_", "_HOURS"))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                List<Cat_ElementEntity> listElement_OT = new List<Cat_ElementEntity>();

                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                //có thay đổi lương trong tháng
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {
                    double OtHour = 0;
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                    //lấy dữ liệu công theo cutoff
                    List<Att_AttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                    if (listAttTableItem != null && listAttTableItem.Count > 0)
                    {
                        listAttTableItem = listAttTableItem.Where(m => m.WorkDate < dateStart2).ToList();
                        //duyệt wa các loại ot
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            OtHour = 0;
                            //tính số giờ OT của từng loại
                            foreach (var tableItem in listAttTableItem)
                            {
                                if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == OTType.ID)
                                {
                                    OtHour += tableItem.OvertimeHours;
                                }
                                if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours;
                                }
                                if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours2;
                                }
                                if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours3;
                                }
                                //[27/06/2017][bang.nguyen][83774][Modify Func]
                                if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == OTType.ID)
                                {
                                    if (tableItem.ExtraOvertimeHours4 != null)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours4.Value;
                                    }
                                }
                            }
                            item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS", OtHour, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else//không thay đổi lương trong tháng
                {
                    listElement_OT = TotalDataAll.listElement_All.Where(m => m.ElementCode.StartsWith("ATT_OVERTIME_") && m.ElementCode.EndsWith("_HOURS")).ToList();
                    foreach (var OT in listElement_OT)
                    {
                        var itemOverTime = TotalDataAll.listOvertimeType.Where(m => m.Code == OT.ElementCode.Replace("ATT_OVERTIME_", "").Replace("_HOURS", "")).FirstOrDefault();

                        double value = 0;
                        if (itemOverTime != null && objAttendanceTableProCut != null)
                        {
                            if (objAttendanceTableProCut.Overtime1Type != null && objAttendanceTableProCut.Overtime1Type == itemOverTime.ID)
                            {
                                value += objAttendanceTableProCut.Overtime1Hours;
                            }
                            if (objAttendanceTableProCut.Overtime2Type != null && objAttendanceTableProCut.Overtime2Type == itemOverTime.ID)
                            {
                                value += objAttendanceTableProCut.Overtime2Hours;
                            }
                            if (objAttendanceTableProCut.Overtime3Type != null && objAttendanceTableProCut.Overtime3Type == itemOverTime.ID)
                            {
                                value += objAttendanceTableProCut.Overtime3Hours;
                            }
                            if (objAttendanceTableProCut.Overtime4Type != null && objAttendanceTableProCut.Overtime4Type == itemOverTime.ID)
                            {
                                value += objAttendanceTableProCut.Overtime4Hours;
                            }
                            if (objAttendanceTableProCut.Overtime5Type != null && objAttendanceTableProCut.Overtime5Type == itemOverTime.ID)
                            {
                                value += objAttendanceTableProCut.Overtime5Hours;
                            }
                            if (objAttendanceTableProCut.Overtime6Type != null && objAttendanceTableProCut.Overtime6Type == itemOverTime.ID)
                            {
                                value += objAttendanceTableProCut.Overtime6Hours;
                            }
                            //[27/06/2017][bang.nguyen][83774][Modify Func]
                            if (objAttendanceTableProCut.Overtime7Type != null && objAttendanceTableProCut.Overtime7Type == itemOverTime.ID)
                            {
                                if (objAttendanceTableProCut.Overtime7Hours != null)
                                {
                                    value += objAttendanceTableProCut.Overtime7Hours.Value;
                                }
                            }
                            if (objAttendanceTableProCut.Overtime8Type != null && objAttendanceTableProCut.Overtime8Type == itemOverTime.ID)
                            {
                                if (objAttendanceTableProCut.Overtime8Hours != null)
                                {
                                    value += objAttendanceTableProCut.Overtime8Hours.Value;
                                }
                            }
                            if (objAttendanceTableProCut.Overtime9Type != null && objAttendanceTableProCut.Overtime9Type == itemOverTime.ID)
                            {
                                if (objAttendanceTableProCut.Overtime9Hours != null)
                                {
                                    value += objAttendanceTableProCut.Overtime9Hours.Value;
                                }
                            }
                        }
                        item = new ElementFormula(OT.ElementCode, value, 0);
                        listElementFormula.Add(item);
                    }
                }

            }

            // Tung.Tran 0095765: Thêm phần tử lương tháng n-1
            //Tăng ca trước khi thay đổi lương và không có thay đổi lương cũng lưu vào phần tử này
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_", "_HOURS_PREV"))
            {
                if (cutOffDurationPre != null)
                {
                    var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                    string status = string.Empty;
                    string nameTableGetData = "listAttendanceTablePre";

                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        TotalData600.listAttendanceTablePre = dataComputeSer.GetAttendanceTableLastMonth(TotalData600, CutOffDuration, ref status);
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }
                    var status2 = string.Empty;
                    nameTableGetData = "listAttendanceTableItemPre_N_1";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        TotalData600.listAttendanceTableItemPre_N_1 = dataComputeSer.GetAttendanceTableItemLastMonth(TotalData600, cutOffDurationPre, ref status2);
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }

                    if (!string.IsNullOrEmpty(status) && !string.IsNullOrEmpty(status2))
                    {
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_PREV", 0, 0);
                            listElementFormula.Add(item);
                        }
                        TotalData600.statusBugStore += status + " " + status2 + " (" + "ATT_OVERTIME___HOURS_PREV" + ") ";
                    }
                    else
                    {
                        List<Cat_ElementEntity> listElement_OT = new List<Cat_ElementEntity>();
                        //Lấy lương cơ bản của nhân viên
                        List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                        SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= cutOffDurationPre.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                        //Có thay đổi lương trong tháng
                        if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= cutOffDurationPre.DateEnd).ToList(), cutOffDurationPre.DateStart, cutOffDurationPre.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                        {
                            #region Có thay đổi lương trong tháng
                            double OtHour = 0;
                            //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                            DateTime dateStart1 = cutOffDurationPre.DateStart;
                            DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                            //lấy dữ liệu công theo cutoff
                            List<Att_AttendanceTableItemEntity> listAttTableItem = TotalData600.listAttendanceTableItemPre_N_1.Where(m => m.ProfileID == profileItem.ID).ToList();

                            if (listAttTableItem != null && listAttTableItem.Count > 0)
                            {
                                listAttTableItem = listAttTableItem.Where(m => m.WorkDate < dateStart2).ToList();
                                //duyệt wa các loại ot
                                foreach (var OTType in TotalDataAll.listOvertimeType)
                                {
                                    OtHour = 0;
                                    //tính số giờ OT của từng loại
                                    foreach (var tableItem in listAttTableItem)
                                    {
                                        if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == OTType.ID)
                                        {
                                            OtHour += tableItem.OvertimeHours;
                                        }
                                        if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == OTType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours;
                                        }
                                        if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == OTType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours2;
                                        }
                                        if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == OTType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours3;
                                        }
                                        if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == OTType.ID)
                                        {
                                            if (tableItem.ExtraOvertimeHours4 != null)
                                            {
                                                OtHour += tableItem.ExtraOvertimeHours4.Value;
                                            }
                                        }
                                    }
                                    item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_PREV", OtHour, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            else
                            {
                                foreach (var OTType in TotalDataAll.listOvertimeType)
                                {
                                    item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_PREV", 0, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            #endregion
                        }
                        else//không thay đổi lương trong tháng
                        {
                            #region không thay đổi lương trong tháng
                            var prevMonth = CutOffDuration.MonthYear.AddMonths(-1);
                            var attendanceTablePrevProCut = TotalData600.listAttendanceTablePre.Where(m => m.ProfileID == profileItem.ID && m.MonthYear.Value.Month == prevMonth.Month && m.MonthYear.Value.Year == prevMonth.Year).FirstOrDefault();

                            if (attendanceTablePrevProCut != null)
                            {
                                listElement_OT = TotalDataAll.listElement_All.Where(m => m.ElementCode.StartsWith("ATT_OVERTIME_") && m.ElementCode.EndsWith("_HOURS_PREV")).ToList();
                                foreach (var OT in listElement_OT)
                                {
                                    var itemOverTime = TotalDataAll.listOvertimeType.Where(m => m.Code == OT.ElementCode.Replace("ATT_OVERTIME_", "").Replace("_HOURS_PREV", "")).FirstOrDefault();

                                    double value = 0;
                                    if (itemOverTime != null && attendanceTablePrevProCut != null)
                                    {
                                        if (attendanceTablePrevProCut.Overtime1Type != null && attendanceTablePrevProCut.Overtime1Type == itemOverTime.ID)
                                        {
                                            value += attendanceTablePrevProCut.Overtime1Hours;
                                        }
                                        if (attendanceTablePrevProCut.Overtime2Type != null && attendanceTablePrevProCut.Overtime2Type == itemOverTime.ID)
                                        {
                                            value += attendanceTablePrevProCut.Overtime2Hours;
                                        }
                                        if (attendanceTablePrevProCut.Overtime3Type != null && attendanceTablePrevProCut.Overtime3Type == itemOverTime.ID)
                                        {
                                            value += attendanceTablePrevProCut.Overtime3Hours;
                                        }
                                        if (attendanceTablePrevProCut.Overtime4Type != null && attendanceTablePrevProCut.Overtime4Type == itemOverTime.ID)
                                        {
                                            value += attendanceTablePrevProCut.Overtime4Hours;
                                        }
                                        if (attendanceTablePrevProCut.Overtime5Type != null && attendanceTablePrevProCut.Overtime5Type == itemOverTime.ID)
                                        {
                                            value += attendanceTablePrevProCut.Overtime5Hours;
                                        }
                                        if (attendanceTablePrevProCut.Overtime6Type != null && attendanceTablePrevProCut.Overtime6Type == itemOverTime.ID)
                                        {
                                            value += attendanceTablePrevProCut.Overtime6Hours;
                                        }
                                        //[27/06/2017][bang.nguyen][83774][Modify Func]
                                        if (attendanceTablePrevProCut.Overtime7Type != null && attendanceTablePrevProCut.Overtime7Type == itemOverTime.ID)
                                        {
                                            if (attendanceTablePrevProCut.Overtime7Hours != null)
                                            {
                                                value += attendanceTablePrevProCut.Overtime7Hours.Value;
                                            }
                                        }
                                        if (attendanceTablePrevProCut.Overtime8Type != null && attendanceTablePrevProCut.Overtime8Type == itemOverTime.ID)
                                        {
                                            if (attendanceTablePrevProCut.Overtime8Hours != null)
                                            {
                                                value += attendanceTablePrevProCut.Overtime8Hours.Value;
                                            }
                                        }
                                        if (attendanceTablePrevProCut.Overtime9Type != null && attendanceTablePrevProCut.Overtime9Type == itemOverTime.ID)
                                        {
                                            if (attendanceTablePrevProCut.Overtime9Hours != null)
                                            {
                                                value += attendanceTablePrevProCut.Overtime9Hours.Value;
                                            }
                                        }
                                    }
                                    item = new ElementFormula(OT.ElementCode, value, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            else
                            {
                                foreach (var OTType in TotalDataAll.listOvertimeType)
                                {
                                    item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_PREV", 0, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            #endregion
                        }
                    }
                }
                else
                {
                    foreach (var OTType in TotalDataAll.listOvertimeType)
                    {
                        item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_PREV", 0, 0);
                        listElementFormula.Add(item);
                    }
                }

            }


            #endregion

            //[30/05/2016][HienNguyen][67695]
            if (CheckIsExistFormula(listElementFormula, ref formula, "DYN_ATT_OVERTIME_", new string[] { "_HOURS_1", "_HOURS_2", "_HOURS_3", "_HOURS_4", "_HOURS_5", "_HOURS_6", "_HOURS_7", "_HOURS_8", "_HOURS_9" }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                for (int i = 1; i <= 9; i++)
                {
                    DateTime[] _timeChangeSalary = CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID, i);
                    //lấy dữ liệu công theo cutoff
                    List<Att_AttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);
                    foreach (var _OtType in TotalDataAll.listOvertimeType)
                    {
                        //Có thay đổi
                        if (_timeChangeSalary != null)
                        {
                            double OtHour = 0;
                            //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                            DateTime dateStart1 = _timeChangeSalary.FirstOrDefault();
                            DateTime dateStart2 = _timeChangeSalary.LastOrDefault();

                            if (listAttTableItem != null && listAttTableItem.Count > 0)
                            {
                                listAttTableItem = listAttTableItem.Where(m => m.WorkDate < dateStart2).ToList();
                                //tính số giờ OT của từng loại
                                foreach (var tableItem in listAttTableItem)
                                {
                                    if (objAttendanceTableProCut.Overtime1Type != null && objAttendanceTableProCut.Overtime1Type == _OtType.ID)
                                    {
                                        OtHour += objAttendanceTableProCut.Overtime1Hours;
                                    }
                                    if (objAttendanceTableProCut.Overtime2Type != null && objAttendanceTableProCut.Overtime2Type == _OtType.ID)
                                    {
                                        OtHour += objAttendanceTableProCut.Overtime2Hours;
                                    }
                                    if (objAttendanceTableProCut.Overtime3Type != null && objAttendanceTableProCut.Overtime3Type == _OtType.ID)
                                    {
                                        OtHour += objAttendanceTableProCut.Overtime3Hours;
                                    }
                                    if (objAttendanceTableProCut.Overtime4Type != null && objAttendanceTableProCut.Overtime4Type == _OtType.ID)
                                    {
                                        OtHour += objAttendanceTableProCut.Overtime4Hours;
                                    }
                                    if (objAttendanceTableProCut.Overtime5Type != null && objAttendanceTableProCut.Overtime5Type == _OtType.ID)
                                    {
                                        OtHour += objAttendanceTableProCut.Overtime5Hours;
                                    }
                                    if (objAttendanceTableProCut.Overtime6Type != null && objAttendanceTableProCut.Overtime6Type == _OtType.ID)
                                    {
                                        OtHour += objAttendanceTableProCut.Overtime6Hours;
                                    }
                                }
                                item = new ElementFormula("DYN_ATT_OVERTIME_" + _OtType.Code + "_HOURS", OtHour, 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula("DYN_ATT_OVERTIME_" + _OtType.Code + "_HOURS_" + i.ToString(), 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else//Không thay đổi
                        {
                            item = new ElementFormula("DYN_ATT_OVERTIME_" + _OtType.Code + "_HOURS_" + i.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            //HienNguyen-13102015-57107 Phần tử bù công
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_PAYBACKDURATION_", "_APPROVEHOURS") || CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_PAYBACKDURATION_", "_CONFIRMHOURS"))
            {
                List<Att_OvertimeEntity> ListOrvertimeByProfile = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.PaybackDurationID != null && m.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()).ToList();

                foreach (var OTType in TotalDataAll.listOvertimeType)
                {
                    double Approved = 0;
                    double Confirm = 0;

                    Approved = ListOrvertimeByProfile.Where(m => m.OvertimeTypeID == OTType.ID && m.ApproveHours != null).Sum(m => (double)m.ApproveHours);
                    Confirm = ListOrvertimeByProfile.Where(m => m.OvertimeTypeID == OTType.ID).Sum(m => m.ConfirmHours);

                    item = new ElementFormula("ATT_OVERTIME_PAYBACKDURATION_" + OTType.Code + "_APPROVEHOURS", Approved, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula("ATT_OVERTIME_PAYBACKDURATION_" + OTType.Code + "_CONFIRMHOURS", Confirm, 0);
                    listElementFormula.Add(item);
                }
            }

            #region phần tử lương giờ tăng ca nghỉ bù kỳ công
            //[06/12/2017][bang.nguyen][90719][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_TIMEOFF_", "_CUTOFFDURATION"))
            {
                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString()).FirstOrDefault();
                if (objAllSetting != null && !string.IsNullOrEmpty(objAllSetting.Value1))
                {
                    var strOVERTIMESTATUS = objAllSetting.Value1;
                    //[10/07/2018][bang.nguyen][95531][Modify Func]
                    //Điều chỉnh các phần tử lương sau, thêm điều kiện lấy dữ liệu Att_Overtime.IsPayback <> true
                    var listOvertimeTimeOffByProfile = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID
                    && m.WorkDateRoot <= CutOffDuration.DateEnd
                    && m.WorkDateRoot >= CutOffDuration.DateStart
                    && m.MethodPayment == MethodOption.E_TIMEOFF.ToString()
                    && (m.IsPayback == null || m.IsPayback == false)).ToList();
                    double totalHoursTimeOff = 0;

                    foreach (var type in TotalDataAll.listOvertimeType)
                    {
                        var ListOvertimeTimeOffByProfileAndType = listOvertimeTimeOffByProfile.Where(m => m.OvertimeTypeID == type.ID).ToList();

                        if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_APPROVED.ToString())
                        {
                            totalHoursTimeOff = ListOvertimeTimeOffByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()
                            && s.ApproveHours != null).Sum(m => m.ApproveHours.Value);
                        }
                        else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString())
                        {
                            totalHoursTimeOff = ListOvertimeTimeOffByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString()).Sum(m => m.ConfirmHours);
                        }
                        else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString())
                        {
                            totalHoursTimeOff = ListOvertimeTimeOffByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString()).Sum(m => m.RegisterHours);
                        }
                        else
                        {
                            totalHoursTimeOff = 0;
                        }
                        item = new ElementFormula("ATT_OVERTIME_TIMEOFF_" + type.Code + "_CUTOFFDURATION", totalHoursTimeOff, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var type in TotalDataAll.listOvertimeType)
                    {
                        item = new ElementFormula("ATT_OVERTIME_TIMEOFF_" + type.Code + "_CUTOFFDURATION", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            //[05/01/2016][hien.nguyen][Modify][62635]
            //Tổng số giờ tăng ca của kỳ trừ công
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_OFFTYPE_", "_BACKPAY") || CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_TIMEOFF_", "_BACKPAY"))
            {
                DateTime? backpayfrom = CutOffDuration.BackPayFrom;
                DateTime? backpayto = CutOffDuration.BackPayTo;

                if (backpayfrom == null || backpayto == null)
                {
                    foreach (var type in TotalDataAll.listOvertimeType)
                    {
                        item = new ElementFormula("ATT_OVERTIME_OFFTYPE_" + type.Code + "_BACKPAY", 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula("ATT_OVERTIME_TIMEOFF_" + type.Code + "_BACKPAY", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    //[24/11/2017][bang.nguyen][90070][New Func]
                    //Bổ sung phần tử lương giờ tăng ca nghỉ bù kỳ công trừ/Điều chỉnh phần tử số giờ OT trả tiền
                    var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString()).FirstOrDefault();
                    if (objAllSetting != null && !string.IsNullOrEmpty(objAllSetting.Value1))
                    {

                        var lisOverTimeByCutOffBackPayByProfileDic = TotalDataAll.dicOverTimeByCutOffBackPay.GetValueOrNew(profileItem.ID);
                        var strOVERTIMESTATUS = objAllSetting.Value1;
                        //[10/07/2018][bang.nguyen][95531][Modify Func]
                        //Điều chỉnh các phần tử lương sau, thêm điều kiện lấy dữ liệu Att_Overtime.IsPayback <> true
                        var ListOvertimeByProfile = lisOverTimeByCutOffBackPayByProfileDic.Where(m => m.ProfileID == profileItem.ID
                        && m.WorkDateRoot <= backpayto
                        && m.WorkDateRoot >= backpayfrom
                        && m.MethodPayment == MethodOption.E_CASHOUT.ToString()
                        && (m.IsPayback == null || m.IsPayback == false)).ToList();

                        //[10/07/2018][bang.nguyen][95531][Modify Func]
                        //Điều chỉnh các phần tử lương sau, thêm điều kiện lấy dữ liệu Att_Overtime.IsPayback <> true
                        var listOvertimeTimeOffByProfile = lisOverTimeByCutOffBackPayByProfileDic.Where(m => m.ProfileID == profileItem.ID
                        && m.WorkDateRoot <= backpayto
                        && m.WorkDateRoot >= backpayfrom
                        && m.MethodPayment == MethodOption.E_TIMEOFF.ToString()
                        && (m.IsPayback == null || m.IsPayback == false)).ToList();
                        double totalHours = 0;
                        double totalHoursTimeOff = 0;

                        foreach (var type in TotalDataAll.listOvertimeType)
                        {
                            var ListOvertimeByProfileAndType = ListOvertimeByProfile.Where(m => m.OvertimeTypeID == type.ID).ToList();
                            var ListOvertimeTimeOffByProfileAndType = listOvertimeTimeOffByProfile.Where(m => m.OvertimeTypeID == type.ID).ToList();

                            if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_APPROVED.ToString())
                            {
                                totalHours = ListOvertimeByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()
                                && s.ApproveHours != null).Sum(m => m.ApproveHours.Value);

                                totalHoursTimeOff = ListOvertimeTimeOffByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()
                                && s.ApproveHours != null).Sum(m => m.ApproveHours.Value);
                            }
                            else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString())
                            {
                                totalHours = ListOvertimeByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString()).Sum(m => m.ConfirmHours);

                                totalHoursTimeOff = ListOvertimeTimeOffByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString()).Sum(m => m.ConfirmHours);
                            }
                            else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString())
                            {
                                totalHours = ListOvertimeByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString()).Sum(m => m.RegisterHours);

                                totalHoursTimeOff = ListOvertimeTimeOffByProfileAndType.Where(s => s.Status == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString()).Sum(m => m.RegisterHours);
                            }
                            else
                            {
                                totalHours = 0;
                                totalHoursTimeOff = 0;
                            }
                            item = new ElementFormula("ATT_OVERTIME_OFFTYPE_" + type.Code + "_BACKPAY", totalHours, 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula("ATT_OVERTIME_TIMEOFF_" + type.Code + "_BACKPAY", totalHoursTimeOff, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var type in TotalDataAll.listOvertimeType)
                        {
                            item = new ElementFormula("ATT_OVERTIME_OFFTYPE_" + type.Code + "_BACKPAY", 0, 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula("ATT_OVERTIME_TIMEOFF_" + type.Code + "_BACKPAY", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            //[07/01/2016][hien.nguyen][Modify][62721]
            //Phần tử lương số ngày làm việc kì trừ công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_COUNT_DAY_WORKING_BACKPAY.ToString()))
            {
                using (var context = new VnrHrmDataContext())
                {
                    var unitOfWork = (IUnitOfWork)new UnitOfWork(context);

                    DateTime _monthPrev = CutOffDuration.MonthYear.AddMonths(-1);
                    DateTime _startdate = new DateTime(_monthPrev.Year, _monthPrev.Month, 1);
                    DateTime _enddata = CutOffDuration.DateEnd.AddMonths(-1);

                    var _attendanceTable_N_1 = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(m => m.MonthYear != null && m.MonthYear.Value.Year == _monthPrev.Year && m.MonthYear.Value.Month == _monthPrev.Month).FirstOrDefault();

                    var _attendanceTable_N = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(m => m.MonthYear != null && m.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();

                    if (_attendanceTable_N_1.HasValue() && _attendanceTable_N.HasValue())
                    {
                        var _listAttendanItem_N = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(_attendanceTable_N.ID);

                        // Tung.Tran [20/05/2019][0105678]: Kaizen xử lý
                        string nameTableGetData = "dic_AttendanceTableItem_N_1";
                        if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                        {
                            // Lấy bảng công master cho 600 nhân viên 1 lần
                            var arrayAttendanceTableIDs_N_1 = TotalDataAll.listAttendanceTable.Where(m => TotalData600.listProfileIds.Contains(m.ProfileID)
                                                       && m.MonthYear != null
                                                       && m.MonthYear.Value.Year == _monthPrev.Year
                                                       && m.MonthYear.Value.Month == _monthPrev.Month).Select(x => x.ID).ToArray();

                            // Lấy bảng công item cho 600 nhân viên 1 lần
                            var list_AttendanceTableItem_N_1 = unitOfWork.CreateQueryable<Att_AttendanceTableItem>(m => arrayAttendanceTableIDs_N_1.Contains(m.AttendanceTableID)
                                                        && m.WorkDate <= _enddata
                                                        && m.WorkDate >= _startdate).ToList();

                            TotalData600.dic_AttendanceTableItem_N_1 = list_AttendanceTableItem_N_1.GroupBy(x => x.AttendanceTableID).ToDictionary(x => x.Key, x => x.ToList());
                            TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                        }

                        var _listAttendanItem_N_1 = TotalData600.dic_AttendanceTableItem_N_1
                                                    .GetValueOrNew(_attendanceTable_N_1.ID)
                                                    .Where(m => m.WorkDate <= _enddata && m.WorkDate >= _startdate).ToList();


                        if (_listAttendanItem_N_1.Sum(m => m.WorkPaidHours) == 0)
                        {
                            _listAttendanItem_N = _listAttendanItem_N.Where(m => m.WorkDate <= CutOffDuration.BackPayTo && m.WorkDate >= CutOffDuration.BackPayFrom).ToList();

                            double _tmp = 0;

                            foreach (var _item in _listAttendanItem_N)
                            {
                                if (_item.WorkPaidHours != 0 && _item.AvailableHours != 0)
                                {
                                    _tmp += (_item.WorkPaidHours / _item.AvailableHours);
                                }
                            }

                            item = new ElementFormula(PayrollElement.HR_COUNT_DAY_WORKING_BACKPAY.ToString(), _tmp, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.HR_COUNT_DAY_WORKING_BACKPAY.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_COUNT_DAY_WORKING_BACKPAY.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            //HienNguyen-13102015-57107 Phần tử bù công
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_LEAVE_PAYBACKDURATION_", "_LEAVEHOURS") || CheckIsExistFormula(listElementFormula, ref formula, "ATT_LEAVE_PAYBACKDURATION_", "_LEAVEDAYS"))
            {
                List<Att_LeaveDayEntity> ListLeaveDayByProfile = TotalDataAll.dicLeaveDay.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.PaybackDurationID != null).ToList();

                foreach (var LDType in TotalDataAll.listLeavedayType)
                {
                    double Hours = 0;
                    double Days = 0;

                    Hours = ListLeaveDayByProfile.Where(m => m.LeaveDayTypeID == LDType.ID && m.LeaveHours != null).Sum(m => (double)m.LeaveHours);
                    Days = ListLeaveDayByProfile.Where(m => m.LeaveDayTypeID == LDType.ID && m.LeaveDays != null).Sum(m => (double)m.LeaveDays);

                    item = new ElementFormula("ATT_LEAVE_PAYBACKDURATION_" + LDType.Code + "_LEAVEHOURS", Hours, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula("ATT_LEAVE_PAYBACKDURATION_" + LDType.Code + "_LEAVEDAYS", Days, 0);
                    listElementFormula.Add(item);
                }
            }

            /// [17/06/2016][HienNguyen][68964]
            /// Số giờ tăng ca phụ trội
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_COUNT_OVERTIME_HOURS_EXTRA.ToString()))
            {
                //[10/07/2018][bang.nguyen][95531][Modify Func]
                //Điều chỉnh các phần tử lương sau, thêm điều kiện lấy dữ liệu Att_Overtime.IsPayback <> true
                var overtimeStatus = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString());
                if (overtimeStatus != null && overtimeStatus.Value1 != null)
                {
                    var listOvertimebyProfile = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID)
                        .Where(m => m.ApproveHours != null
                        && m.ApproveHours >= 2
                        && m.Status == overtimeStatus.Value1
                        && (m.IsPayback == null || m.IsPayback == false)).ToList();
                    item = new ElementFormula(PayrollElement.ATT_COUNT_OVERTIME_HOURS_EXTRA.ToString(), listOvertimebyProfile.Count * 0.5, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_OVERTIME_HOURS_EXTRA.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            #region Tổng Số Giờ Tăng Ca có ca làm việc và Tổng Số Giờ Tăng Ca không có ca làm việc
            //51206

            if (CheckIsExistFormula(listElementFormula, ref formula, "DYN_ATT_OVERTIME_SHIFT_", "_HOURS") || CheckIsExistFormula(listElementFormula, ref formula, "DYN_ATT_OVERTIME_NOT_SHIFT_", "_HOURS"))
            {
                List<Cat_ElementEntity> listElement_OT = new List<Cat_ElementEntity>();

                List<Att_AttendanceTableItemEntity> ListAttTableItem = new List<Att_AttendanceTableItemEntity>();
                if (objAttendanceTableProCut != null)
                {
                    ListAttTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID).Where(m => m.OvertimeTypeID != null).ToList();
                }

                foreach (var OverTimeItem in TotalDataAll.listOvertimeType)
                {
                    double valueIsShift = 0;
                    double valueIsNotShift = 0;
                    var ListAttTableItemByOverTimeType = ListAttTableItem.Where(m => m.OvertimeTypeID != null && m.OvertimeTypeID == OverTimeItem.ID).ToList();
                    valueIsShift = ListAttTableItemByOverTimeType.Where(m => m.ShiftID != null).Sum(m => m.OvertimeHours);
                    valueIsNotShift = ListAttTableItemByOverTimeType.Where(m => m.ShiftID == null).Sum(m => m.OvertimeHours);

                    item = new ElementFormula("DYN_ATT_OVERTIME_SHIFT_" + OverTimeItem.Code + "_HOURS", valueIsShift, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula("DYN_ATT_OVERTIME_NOT_SHIFT_" + OverTimeItem.Code + "_HOURS", valueIsNotShift, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Tổng giờ tăng ca trong tháng và tổng giờ tăng ca trong tháng có tính thuế

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_OVERTIME_PIT_HOURS.ToString(), PayrollElement.ATT_OVERTIME_HOURS.ToString() }))
            {
                double SumOvertime = 0;
                double SumOvertimeInsurance = 0;

                foreach (var itemOverTime in TotalDataAll.listOvertimeType)
                {
                    double value = 0;
                    if (itemOverTime != null && objAttendanceTableProCut != null)
                    {
                        if (objAttendanceTableProCut.Overtime1Type != null && objAttendanceTableProCut.Overtime1Type == itemOverTime.ID)
                        {
                            value += objAttendanceTableProCut.Overtime1Hours;
                        }
                        if (objAttendanceTableProCut.Overtime2Type != null && objAttendanceTableProCut.Overtime2Type == itemOverTime.ID)
                        {
                            value += objAttendanceTableProCut.Overtime2Hours;
                        }
                        if (objAttendanceTableProCut.Overtime3Type != null && objAttendanceTableProCut.Overtime3Type == itemOverTime.ID)
                        {
                            value += objAttendanceTableProCut.Overtime3Hours;
                        }
                        if (objAttendanceTableProCut.Overtime4Type != null && objAttendanceTableProCut.Overtime4Type == itemOverTime.ID)
                        {
                            value += objAttendanceTableProCut.Overtime4Hours;
                        }
                        if (objAttendanceTableProCut.Overtime5Type != null && objAttendanceTableProCut.Overtime5Type == itemOverTime.ID)
                        {
                            value += objAttendanceTableProCut.Overtime5Hours;
                        }
                        if (objAttendanceTableProCut.Overtime6Type != null && objAttendanceTableProCut.Overtime6Type == itemOverTime.ID)
                        {
                            value += objAttendanceTableProCut.Overtime6Hours;
                        }
                    }

                    if (itemOverTime != null)
                    {
                        SumOvertimeInsurance += value * itemOverTime.TaxRate;//Tính số giờ tăng ca có chịu thuế
                        SumOvertime += value * itemOverTime.Rate;//tính hệ số và lưu vào biến tổng số giờ tăng ca
                    }
                }
                //Lưu giá trị cho Enum tổng số giớ tăng ca trong tháng
                item = new ElementFormula(PayrollElement.ATT_OVERTIME_HOURS.ToString(), SumOvertime, 0);
                listElementFormula.Add(item);

                //Lưu giá trị cho Enum tổng số giớ tăng ca trong tháng có tính thuế
                item = new ElementFormula(PayrollElement.ATT_OVERTIME_PIT_HOURS.ToString(), SumOvertimeInsurance, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region Các loại OT nếu có thay đổi lương trong tháng

            //OT sau khi thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_", "_HOURS_AFTER"))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {
                    double OtHour = 0;
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                    //lấy dữ liệu công theo cutoff
                    List<Att_AttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                    if (listAttTableItem != null && listAttTableItem.Count > 0)
                    {
                        listAttTableItem = listAttTableItem.Where(m => m.WorkDate >= dateStart2).ToList();
                        //duyệt wa các loại ot
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            OtHour = 0;
                            //tính số giờ OT của từng loại
                            foreach (var tableItem in listAttTableItem)
                            {
                                if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == OTType.ID)
                                {
                                    OtHour += tableItem.OvertimeHours;
                                }
                                if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours;
                                }
                                if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours2;
                                }
                                if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours3;
                                }
                                //[27/06/2017][bang.nguyen][83774][Modify Func]
                                if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == OTType.ID)
                                {
                                    if (tableItem.ExtraOvertimeHours4 != null)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours4.Value;
                                    }
                                }
                            }
                            item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_AFTER", OtHour, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_AFTER", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else//không có lương cơ bản hoặc không có thay đổi lương trong tháng
                {
                    foreach (var OTType in TotalDataAll.listOvertimeType)
                    {
                        item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_AFTER", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion


            #region Tung.Tran 0095765: Thêm phần tử lương tháng n-1 ( Các loại OT nếu có thay đổi lương trong tháng N - 1)
            //OT sau khi thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_", "_HOURS_AFTER_PREV"))
            {
                if (cutOffDurationPre != null)
                {
                    var status = string.Empty;
                    string nameTableGetData = "listAttendanceTableItemPre_N_1";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        TotalData600.listAttendanceTableItemPre_N_1 = dataComputeSer.GetAttendanceTableItemLastMonth(TotalData600, cutOffDurationPre, ref status);
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }
                    if (!string.IsNullOrEmpty(status))
                    {
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_AFTER_PREV", 0, 0);
                            listElementFormula.Add(item);
                        }
                        TotalData600.statusBugStore += status + " (" + "ATT_OVERTIME__HOURS_AFTER_PREV" + ") ";
                    }
                    else
                    {
                        var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                        List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                        SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= cutOffDurationPre.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                        if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= cutOffDurationPre.DateEnd).ToList(), cutOffDurationPre.DateStart, cutOffDurationPre.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                        {
                            double OtHour = 0;
                            //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                            DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                            //lấy dữ liệu công theo cutoff
                            List<Att_AttendanceTableItemEntity> listAttTableItem = TotalData600.listAttendanceTableItemPre_N_1.Where(m => m.ProfileID == profileItem.ID).ToList();

                            if (listAttTableItem != null && listAttTableItem.Count > 0)
                            {
                                listAttTableItem = listAttTableItem.Where(m => m.WorkDate >= dateStart2).ToList();
                                //duyệt qua các loại ot
                                foreach (var OTType in TotalDataAll.listOvertimeType)
                                {
                                    OtHour = 0;
                                    //tính số giờ OT của từng loại
                                    foreach (var tableItem in listAttTableItem)
                                    {
                                        if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == OTType.ID)
                                        {
                                            OtHour += tableItem.OvertimeHours;
                                        }
                                        if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == OTType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours;
                                        }
                                        if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == OTType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours2;
                                        }
                                        if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == OTType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours3;
                                        }
                                        //[27/06/2017][bang.nguyen][83774][Modify Func]
                                        if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == OTType.ID)
                                        {
                                            if (tableItem.ExtraOvertimeHours4 != null)
                                            {
                                                OtHour += tableItem.ExtraOvertimeHours4.Value;
                                            }
                                        }
                                    }
                                    item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_AFTER_PREV", OtHour, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            else
                            {
                                foreach (var OTType in TotalDataAll.listOvertimeType)
                                {
                                    item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_AFTER_PREV", 0, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                        }
                        else//không có lương cơ bản hoặc không có thay đổi lương trong tháng
                        {
                            foreach (var OTType in TotalDataAll.listOvertimeType)
                            {
                                item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_AFTER_PREV", 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                    }
                }
                else
                {
                    foreach (var OTType in TotalDataAll.listOvertimeType)
                    {
                        item = new ElementFormula("ATT_OVERTIME_" + OTType.Code + "_HOURS_AFTER_PREV", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion


            /// [16/02/2017][HienNguyen][78734]
            /// Phần tử động công thức lương bộ phận
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_SALARY_DEPARTMENT_ELEMENT_.ToString(), ""))
            {
                string status = string.Empty;
                dataComputeSer.GetDicSalaryDepartmentItemDetail(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.DYN_SALARY_DEPARTMENT_ELEMENT_.ToString() + ") ";
                    foreach (var i in TotalDataAll.ListGradeSalDeptElement)
                    {
                        item = new ElementFormula(PayrollElement.DYN_SALARY_DEPARTMENT_ELEMENT_.ToString() + i.ElementCode.Trim(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    var listSalaryDepartmentItemDetailByProfileDic = TotalData600.dicSalaryDepartmentItemDetail.GetValueOrNew(profileItem.ID);
                    var departmentItemDetail = listSalaryDepartmentItemDetailByProfileDic.Where(m => m.ProfileID == profileItem.ID).ToList();
                    foreach (var i in TotalDataAll.ListGradeSalDeptElement)
                    {
                        item = new ElementFormula(PayrollElement.DYN_SALARY_DEPARTMENT_ELEMENT_.ToString() + i.ElementCode.Trim(), departmentItemDetail.Where(m => m.Code == i.ElementCode).Sum(m => m.Value), 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            //[21/03/2016][HienNguyen][0064668]
            //Phần tử tính lương đêm "Số Ngày OT" theo khung giờ và theo điều kiện giờ để tính phụ cấp tăng ca của 1 nhân viên
            if (CheckIsExistFormula(listElementFormula, ref formula, "DYN_ATT_OVERTIME_INPUTHOUR_", ""))
            {
                var lisOverTimeByProfileDic = TotalDataAll.dicOverTime.GetValueOrNew(profileItem.ID);

                //ds phan tu dc tinh
                List<string> lstElementByOT = new List<string>();

                //Lấy cấu hình duyệt tăng ca
                var _statusConfig = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name == AppConfig.HRM_ATT_OT_OVERTIMESTATUS.ToString());

                //cac phan tu dc cau hinh dạng này
                var _listFormularInput = formula.Where(m => m.StartsWith("DYN_ATT_OVERTIME_INPUTHOUR_") || m.StartsWith("DYN_ATT_OVERTIME_INPUTHOUR_")).ToList();
                if (_statusConfig != null && _statusConfig.Value1 != null && _statusConfig.Value1 != string.Empty)
                {
                    string strOVERTIMESTATUS = _statusConfig.Value1;
                    var lstOvertimeByProfile = new List<Att_OvertimeEntity>();
                    if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_APPROVED.ToString())
                    {
                        //[10/07/2018][bang.nguyen][95531][Modify Func]
                        //Điều chỉnh các phần tử lương sau, thêm điều kiện lấy dữ liệu Att_Overtime.IsPayback <> true
                        lstOvertimeByProfile = lisOverTimeByProfileDic.Where(m => m.ProfileID == profileItem.ID
                                                                            && m.WorkDate <= CutOffDuration.DateEnd
                                                                            && m.WorkDate >= CutOffDuration.DateStart
                                                                            && m.OvertimeTypeID != null
                                                                            && m.ShiftID != null
                                                                            && m.DurationType != null
                                                                            && m.DurationType != string.Empty
                                                                            && m.ApproveHours > 0
                                                                            && m.Status == EnumDropDown.OverTimeStatus.E_APPROVED.ToString()
                                                                            && (m.IsPayback == null || m.IsPayback == false)).ToList();

                    }
                    else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString())
                    {
                        //[05/12/2018][bang.nguyen][101505][Modify Func]
                        //lay theo trang thai cau hinh
                        lstOvertimeByProfile = lisOverTimeByProfileDic.Where(m => m.ProfileID == profileItem.ID
                                                                            && m.WorkDate <= CutOffDuration.DateEnd
                                                                            && m.WorkDate >= CutOffDuration.DateStart
                                                                            && m.OvertimeTypeID != null
                                                                            && m.ShiftID != null
                                                                            && m.DurationType != null
                                                                            && m.DurationType != string.Empty
                                                                            && m.ConfirmHours > 0
                                                                            && m.Status == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString()
                                                                            && (m.IsPayback == null || m.IsPayback == false)).ToList();
                    }
                    else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString())
                    {
                        //[10/07/2018][bang.nguyen][95531][Modify Func]
                        //Điều chỉnh các phần tử lương sau, thêm điều kiện lấy dữ liệu Att_Overtime.IsPayback <> true
                        lstOvertimeByProfile = lisOverTimeByProfileDic.Where(m => m.ProfileID == profileItem.ID
                                                                            && m.WorkDate <= CutOffDuration.DateEnd
                                                                            && m.WorkDate >= CutOffDuration.DateStart
                                                                            && m.OvertimeTypeID != null
                                                                            && m.ShiftID != null
                                                                            && m.DurationType != null
                                                                            && m.DurationType != string.Empty
                                                                            && m.RegisterHours > 0
                                                                            && m.Status == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString()
                                                                            && (m.IsPayback == null || m.IsPayback == false)).ToList();
                    }

                    if (lstOvertimeByProfile.Count > 0)
                    {
                        //danh sach gio dc cau hinh
                        List<double> lstHourInput = new List<double>();
                        foreach (var objformular in _listFormularInput)
                        {
                            int lastIndex = objformular.LastIndexOf("_");
                            if (lastIndex != -1)
                            {
                                string _valueHour = objformular.Substring(lastIndex + 1);
                                double _outValue = 0;
                                if (Double.TryParse(_valueHour, out _outValue))
                                {
                                    lstHourInput.Add(double.Parse(_valueHour));
                                }
                            }
                        }
                        if (lstHourInput.Count > 0) //nếu có danh sách giờ cấu hình phần tử
                        {
                            //ds ca theo ca trong tang ca
                            var lstShiftIDByOT = lstOvertimeByProfile.Select(s => s.ShiftID).Distinct().ToList();
                            var lstShiftByOT = TotalDataAll.listCat_Shift.Where(s => s.Code != null && s.Code != string.Empty && lstShiftIDByOT.Contains(s.ID)).ToList();
                            //ds loai tang ca trong tang ca
                            var lstOverTimeTypeIDByOT = lstOvertimeByProfile.Select(s => s.OvertimeTypeID).Distinct().ToList();
                            var lstOvertimeTypeByOT = TotalDataAll.listOvertimeType.Where(s => s.Code != null && s.Code != string.Empty && lstOverTimeTypeIDByOT.Contains(s.ID)).ToList();
                            //ds loai duration trong tang ca
                            var lstDurationTypeByOT = lstOvertimeByProfile.Select(s => s.DurationType).Distinct().ToList();

                            //ứng với từng số giờ cấu hình => đếm tăng ca thỏa cho phần tử
                            if (lstShiftByOT.Count > 0 && lstOvertimeTypeByOT.Count > 0 && lstDurationTypeByOT.Count > 0)
                            {
                                //theo loai tang ca
                                foreach (var objOverTimeType in lstOvertimeTypeByOT)
                                {
                                    //theo ca
                                    foreach (var objShift in lstShiftByOT)
                                    {
                                        //theo duration
                                        foreach (var objDurationType in lstDurationTypeByOT)
                                        {
                                            //theo gio dc cau hinh
                                            foreach (var hourInput in lstHourInput)
                                            {
                                                double countDayOT = 0;

                                                //[05/12/2018][bang.nguyen][101505][Modify Func]
                                                //lay theo trang thai cau hinh
                                                if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_APPROVED.ToString())
                                                {
                                                    countDayOT = lstOvertimeByProfile.Where(s => s.OvertimeTypeID == objOverTimeType.ID
                                                                                        && s.ShiftID == objShift.ID
                                                                                        && s.DurationType == objDurationType
                                                                                        && s.ApproveHours >= hourInput).Count();
                                                }
                                                else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_CONFIRM.ToString())
                                                {
                                                    countDayOT = lstOvertimeByProfile.Where(s => s.OvertimeTypeID == objOverTimeType.ID
                                                                                        && s.ShiftID == objShift.ID
                                                                                        && s.DurationType == objDurationType
                                                                                        && s.ConfirmHours >= hourInput).Count();
                                                }
                                                else if (strOVERTIMESTATUS == EnumDropDown.OverTimeStatus.E_SUBMIT.ToString())
                                                {
                                                    countDayOT = lstOvertimeByProfile.Where(s => s.OvertimeTypeID == objOverTimeType.ID
                                                                                        && s.ShiftID == objShift.ID
                                                                                        && s.DurationType == objDurationType
                                                                                        && s.RegisterHours >= hourInput).Count();
                                                }

                                                //gan gia tri cho phan tu
                                                if (countDayOT > 0)
                                                {
                                                    string _formularElement = "DYN_ATT_OVERTIME_INPUTHOUR_" + objOverTimeType.Code + "_" + objShift.Code + "_" + objDurationType + "_" + hourInput.ToString();
                                                    item = new ElementFormula(_formularElement, countDayOT, 0);
                                                    listElementFormula.Add(item);

                                                    //lst nhan biết phần tử nào đã được lưu
                                                    lstElementByOT.Add(_formularElement);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                //nếu phần tử không dc tính thì gán = 0
                foreach (var objformular in _listFormularInput)
                {
                    string _formularinput = objformular;
                    if (!lstElementByOT.Contains(_formularinput))
                    {
                        item = new ElementFormula(objformular, 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #region OT tháng N-1
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_", "_HOURS_PREV"))
            {
                List<Cat_ElementEntity> listElement_OT = TotalDataAll.listElement_All.Where(m => m.ElementCode.StartsWith("ATT_OVERTIME_") && m.ElementCode.EndsWith("_HOURS_PREV")).ToList();
                if (listElement_OT != null && listElement_OT.Count > 0)
                {
                    foreach (var OT in listElement_OT)
                    {
                        var itemOverTime = TotalDataAll.listOvertimeType.Where(m => m.Code == OT.ElementCode.Replace("ATT_OVERTIME_", "").Replace("_HOURS_PREV", "")).FirstOrDefault();

                        double value = 0;
                        var _tmpAttendanceTable = TotalDataAll.Att_AttendanceTable_Prev.Where(m => m.ProfileID == profileItem.ID).FirstOrDefault();
                        if (itemOverTime != null && _tmpAttendanceTable != null)
                        {
                            if (_tmpAttendanceTable.Overtime1Type != null && _tmpAttendanceTable.Overtime1Type == itemOverTime.ID)
                            {
                                value += _tmpAttendanceTable.Overtime1Hours;
                            }
                            if (_tmpAttendanceTable.Overtime2Type != null && _tmpAttendanceTable.Overtime2Type == itemOverTime.ID)
                            {
                                value += _tmpAttendanceTable.Overtime2Hours;
                            }
                            if (_tmpAttendanceTable.Overtime3Type != null && _tmpAttendanceTable.Overtime3Type == itemOverTime.ID)
                            {
                                value += _tmpAttendanceTable.Overtime3Hours;
                            }
                            if (_tmpAttendanceTable.Overtime4Type != null && _tmpAttendanceTable.Overtime4Type == itemOverTime.ID)
                            {
                                value += _tmpAttendanceTable.Overtime4Hours;
                            }
                            if (_tmpAttendanceTable.Overtime5Type != null && _tmpAttendanceTable.Overtime5Type == itemOverTime.ID)
                            {
                                value += _tmpAttendanceTable.Overtime5Hours;
                            }
                            if (_tmpAttendanceTable.Overtime6Type != null && _tmpAttendanceTable.Overtime6Type == itemOverTime.ID)
                            {
                                value += _tmpAttendanceTable.Overtime6Hours;
                            }
                        }
                        item = new ElementFormula(OT.ElementCode, value, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #endregion

            #region Lấy LeaveDay theo từng loại và lấy tổng nghỉ
            // Tung.Tran [16/05/2019][105482] : Bổ sung cộng dồn column LeaveDay6Days
            List<Cat_ElementEntity> listElement_Leave = new List<Cat_ElementEntity>();
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_LEAVE_", "_HOURS") || CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_LEAVE_HOURS.ToString(), PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_HOURS.ToString() }))
            {
                double SumLeaveday = 0;
                double SumLeavedayIsSalary = 0;

                listElement_Leave = TotalDataAll.listElement_All.Where(m => m.ElementCode.StartsWith("ATT_LEAVE_") && m.ElementCode.EndsWith("_HOURS")).ToList();

                foreach (var LD in listElement_Leave)
                {
                    var itemLeaveday = TotalDataAll.listLeavedayType.Where(m => m.Code == LD.ElementCode.Replace("ATT_LEAVE_", "").Replace("_HOURS", "")).FirstOrDefault();

                    double value = 0;
                    if (itemLeaveday != null && objAttendanceTableProCut != null)
                    {
                        if (objAttendanceTableProCut.LeaveDay1Type != null && objAttendanceTableProCut.LeaveDay1Type == itemLeaveday.ID)
                        {
                            value += objAttendanceTableProCut.LeaveDay1Hours;
                        }
                        if (objAttendanceTableProCut.LeaveDay2Type != null && objAttendanceTableProCut.LeaveDay2Type == itemLeaveday.ID)
                        {
                            value += objAttendanceTableProCut.LeaveDay2Hours;
                        }
                        if (objAttendanceTableProCut.LeaveDay3Type != null && objAttendanceTableProCut.LeaveDay3Type == itemLeaveday.ID)
                        {
                            value += objAttendanceTableProCut.LeaveDay3Hours;
                        }
                        if (objAttendanceTableProCut.LeaveDay4Type != null && objAttendanceTableProCut.LeaveDay4Type == itemLeaveday.ID)
                        {
                            value += objAttendanceTableProCut.LeaveDay4Hours;
                        }
                        if (objAttendanceTableProCut.LeaveDay5Type != null && objAttendanceTableProCut.LeaveDay5Type == itemLeaveday.ID)
                        {
                            value += objAttendanceTableProCut.LeaveDay5Hours;
                        }
                        if (objAttendanceTableProCut.LeaveDay6Type != null && objAttendanceTableProCut.LeaveDay6Type == itemLeaveday.ID)
                        {
                            value += objAttendanceTableProCut.LeaveDay6Hours;
                        }
                        if (objAttendanceTableProCut.LeaveDay7Type != null && objAttendanceTableProCut.LeaveDay7Type == itemLeaveday.ID)
                        {
                            value += objAttendanceTableProCut.LeaveDay7Hours ?? 0;
                        }
                        if (objAttendanceTableProCut.LeaveDay8Type != null && objAttendanceTableProCut.LeaveDay8Type == itemLeaveday.ID)
                        {
                            value += objAttendanceTableProCut.LeaveDay8Hours ?? 0;
                        }
                        if (objAttendanceTableProCut.LeaveDay9Type != null && objAttendanceTableProCut.LeaveDay9Type == itemLeaveday.ID)
                        {
                            value += objAttendanceTableProCut.LeaveDay9Hours ?? 0;
                        }
                        if (objAttendanceTableProCut.LeaveDay10Type != null && objAttendanceTableProCut.LeaveDay10Type == itemLeaveday.ID)
                        {
                            value += objAttendanceTableProCut.LeaveDay10Hours ?? 0;
                        }
                        if (objAttendanceTableProCut.LeaveDay11Type != null && objAttendanceTableProCut.LeaveDay11Type == itemLeaveday.ID)
                        {
                            value += objAttendanceTableProCut.LeaveDay11Hours ?? 0;
                        }
                        if (objAttendanceTableProCut.LeaveDay12Type != null && objAttendanceTableProCut.LeaveDay12Type == itemLeaveday.ID)
                        {
                            value += objAttendanceTableProCut.LeaveDay12Hours ?? 0;
                        }
                    }
                    item = new ElementFormula(LD.ElementCode, value, 0);
                    listElementFormula.Add(item);


                    SumLeaveday += value;//Tổng giờ nghỉ trong tháng
                    if (itemLeaveday != null)
                    {
                        SumLeavedayIsSalary += value * itemLeaveday.PaidRate;//tổng giờ nghỉ có trả lương
                    }
                }

                //tạo phần tử Enum tổng số giờ nghỉ trong tháng
                item = new ElementFormula(PayrollElement.ATT_LEAVE_HOURS.ToString(), SumLeaveday, 0);
                listElementFormula.Add(item);

                //tạo phần tử Enum tổng số giờ nghỉ trong tháng có tính lương
                item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_HOURS.ToString(), SumLeavedayIsSalary, 0);
                listElementFormula.Add(item);
            }

            //[12/11/2015][hien.nguyen][Modify][59947]
            //Tổng số giờ nghỉ của từng loại tháng N-1
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_LEAVE_", "_HOURS_PREV"))
            {
                var AttendanceTablePrev = TotalDataAll.Att_AttendanceTable_Prev.FirstOrDefault(m => m.ProfileID == profileItem.ID);

                listElement_Leave = TotalDataAll.listElement_All.Where(m => m.ElementCode.StartsWith("ATT_LEAVE_") && m.ElementCode.EndsWith("_HOURS_PREV")).ToList();

                foreach (var LD in listElement_Leave)
                {
                    var itemLeaveday = TotalDataAll.listLeavedayType.Where(m => m.Code == LD.ElementCode.Replace("ATT_LEAVE_", "").Replace("_HOURS_PREV", "")).FirstOrDefault();

                    double value = 0;
                    if (itemLeaveday != null && AttendanceTablePrev != null)
                    {
                        if (AttendanceTablePrev.LeaveDay1Type != null && AttendanceTablePrev.LeaveDay1Type == itemLeaveday.ID)
                        {
                            value += AttendanceTablePrev.LeaveDay1Hours;
                        }
                        if (AttendanceTablePrev.LeaveDay2Type != null && AttendanceTablePrev.LeaveDay2Type == itemLeaveday.ID)
                        {
                            value += AttendanceTablePrev.LeaveDay2Hours;
                        }
                        if (AttendanceTablePrev.LeaveDay3Type != null && AttendanceTablePrev.LeaveDay3Type == itemLeaveday.ID)
                        {
                            value += AttendanceTablePrev.LeaveDay3Hours;
                        }
                        if (AttendanceTablePrev.LeaveDay4Type != null && AttendanceTablePrev.LeaveDay4Type == itemLeaveday.ID)
                        {
                            value += AttendanceTablePrev.LeaveDay4Hours;
                        }
                        if (AttendanceTablePrev.LeaveDay5Type != null && AttendanceTablePrev.LeaveDay5Type == itemLeaveday.ID)
                        {
                            value += AttendanceTablePrev.LeaveDay5Hours;
                        }
                    }
                    item = new ElementFormula(LD.ElementCode, value, 0);
                    listElementFormula.Add(item);
                }
            }

            //Số ngày nghỉ của từng loại trong tháng
            // Tung.Tran [16/05/2019][105482] : Bổ sung cộng dồn column LeaveDay6Days
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_LEAVE_", "_DAY"))
            {
                listElement_Leave = TotalDataAll.listElement_All.Where(m => m.ElementCode.StartsWith("ATT_LEAVE_") && m.ElementCode.EndsWith("_DAY")).ToList();
                foreach (var LD in listElement_Leave)
                {
                    var itemLeaveday = TotalDataAll.listLeavedayType.Where(m => m.Code == LD.ElementCode.Replace("ATT_LEAVE_", "").Replace("_DAY", "")).FirstOrDefault();

                    double value = 0;
                    if (itemLeaveday != null && objAttendanceTableProCut != null)
                    {
                        if (objAttendanceTableProCut.LeaveDay1Type != null && objAttendanceTableProCut.LeaveDay1Type == itemLeaveday.ID && objAttendanceTableProCut.LeaveDay1Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay1Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay2Type != null && objAttendanceTableProCut.LeaveDay2Type == itemLeaveday.ID && objAttendanceTableProCut.LeaveDay2Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay2Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay3Type != null && objAttendanceTableProCut.LeaveDay3Type == itemLeaveday.ID && objAttendanceTableProCut.LeaveDay3Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay3Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay4Type != null && objAttendanceTableProCut.LeaveDay4Type == itemLeaveday.ID && objAttendanceTableProCut.LeaveDay4Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay4Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay5Type != null && objAttendanceTableProCut.LeaveDay5Type == itemLeaveday.ID && objAttendanceTableProCut.LeaveDay5Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay5Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay6Type != null && objAttendanceTableProCut.LeaveDay6Type == itemLeaveday.ID && objAttendanceTableProCut.LeaveDay6Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay6Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay7Type != null && objAttendanceTableProCut.LeaveDay7Type == itemLeaveday.ID && objAttendanceTableProCut.LeaveDay7Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay7Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay8Type != null && objAttendanceTableProCut.LeaveDay8Type == itemLeaveday.ID && objAttendanceTableProCut.LeaveDay8Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay8Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay9Type != null && objAttendanceTableProCut.LeaveDay9Type == itemLeaveday.ID && objAttendanceTableProCut.LeaveDay9Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay9Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay10Type != null && objAttendanceTableProCut.LeaveDay10Type == itemLeaveday.ID && objAttendanceTableProCut.LeaveDay10Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay10Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay11Type != null && objAttendanceTableProCut.LeaveDay11Type == itemLeaveday.ID && objAttendanceTableProCut.LeaveDay11Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay11Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay12Type != null && objAttendanceTableProCut.LeaveDay12Type == itemLeaveday.ID && objAttendanceTableProCut.LeaveDay12Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay12Days;
                        }
                    }
                    item = new ElementFormula(LD.ElementCode, value, 0);
                    listElementFormula.Add(item);
                }
            }

            //[31/12/2018][bang.nguyen][102243][modify]
            //Số ngày nghỉ của từng loại nghỉ có MedicalDocument = 1 (có chứng từ y tế) trong tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN26_ATT_LEAVE_MEDICALDOCUMENT_.ToString(), "_DAY"))
            {
                string strStartsWith = PayrollElement.DYN26_ATT_LEAVE_MEDICALDOCUMENT_.ToString();
                string strEndWith = "_DAY";
                var listformula = formula.Where(s => s.StartsWith(strStartsWith) && s.EndsWith(strEndWith)).Distinct().ToList();
                foreach (var formulaitem in listformula)
                {
                    var _formula = formulaitem;
                    var codeLeavedayType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                    var objLeavedayTypeMedicalDocument = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeavedayType && s.MedicalDocument == true).FirstOrDefault();

                    double value = 0;
                    if (objLeavedayTypeMedicalDocument != null && objAttendanceTableProCut != null)
                    {
                        if (objAttendanceTableProCut.LeaveDay1Type != null && objAttendanceTableProCut.LeaveDay1Type == objLeavedayTypeMedicalDocument.ID && objAttendanceTableProCut.LeaveDay1Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay1Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay2Type != null && objAttendanceTableProCut.LeaveDay2Type == objLeavedayTypeMedicalDocument.ID && objAttendanceTableProCut.LeaveDay2Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay2Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay3Type != null && objAttendanceTableProCut.LeaveDay3Type == objLeavedayTypeMedicalDocument.ID && objAttendanceTableProCut.LeaveDay3Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay3Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay4Type != null && objAttendanceTableProCut.LeaveDay4Type == objLeavedayTypeMedicalDocument.ID && objAttendanceTableProCut.LeaveDay4Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay4Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay5Type != null && objAttendanceTableProCut.LeaveDay5Type == objLeavedayTypeMedicalDocument.ID && objAttendanceTableProCut.LeaveDay5Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay5Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay6Type != null && objAttendanceTableProCut.LeaveDay6Type == objLeavedayTypeMedicalDocument.ID && objAttendanceTableProCut.LeaveDay6Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay6Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay7Type != null && objAttendanceTableProCut.LeaveDay7Type == objLeavedayTypeMedicalDocument.ID && objAttendanceTableProCut.LeaveDay7Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay7Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay8Type != null && objAttendanceTableProCut.LeaveDay8Type == objLeavedayTypeMedicalDocument.ID && objAttendanceTableProCut.LeaveDay8Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay8Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay9Type != null && objAttendanceTableProCut.LeaveDay9Type == objLeavedayTypeMedicalDocument.ID && objAttendanceTableProCut.LeaveDay9Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay9Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay10Type != null && objAttendanceTableProCut.LeaveDay10Type == objLeavedayTypeMedicalDocument.ID && objAttendanceTableProCut.LeaveDay10Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay10Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay11Type != null && objAttendanceTableProCut.LeaveDay11Type == objLeavedayTypeMedicalDocument.ID && objAttendanceTableProCut.LeaveDay11Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay11Days;
                        }
                        if (objAttendanceTableProCut.LeaveDay12Type != null && objAttendanceTableProCut.LeaveDay12Type == objLeavedayTypeMedicalDocument.ID && objAttendanceTableProCut.LeaveDay12Days != null)
                        {
                            value += (double)objAttendanceTableProCut.LeaveDay12Days;
                        }
                    }
                    item = new ElementFormula(formulaitem, value, 0);
                    listElementFormula.Add(item);
                    formula.Remove(formulaitem);
                }
            }

            //[11/01/2018][bang.nguyen][92258][new func]
            //số ngày nghỉ hoặc số giờ nghỉ tính như đi làm theo mã loại ngày nghỉ 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_ATTENDANCETABLE_SUM_LEAVEWORKDAY_DAYS_.ToString(), "_BYCODELEAVEDAYTYPE")
                || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_ATT_ATTENDANCETABLE_SUM_LEAVEWORKDAY_HOUR_.ToString(), "_BYCODELEAVEDAYTYPE"))
            {

                //số ngày nghỉ tính như đi làm theo mã loại ngày nghỉ
                var strStartsWith = PayrollElement.DYN_ATT_ATTENDANCETABLE_SUM_LEAVEWORKDAY_DAYS_.ToString();
                var strEndWith = "_BYCODELEAVEDAYTYPE";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();

                if (objAttendanceTableProCut != null)
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        var _formula = formulaitem;
                        double sumLeaveWorkDayDays = 0;
                        var codeLeaveDayType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");

                        var objShift = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();
                        if (objShift != null)
                        {
                            if (objAttendanceTableProCut.LeaveWorkDay1Type != null && objAttendanceTableProCut.LeaveWorkDay1Type == objShift.ID && objAttendanceTableProCut.LeaveWorkDay1Days != null)
                            {
                                sumLeaveWorkDayDays += objAttendanceTableProCut.LeaveWorkDay1Days.Value;
                            }
                            if (objAttendanceTableProCut.LeaveWorkDay2Type != null && objAttendanceTableProCut.LeaveWorkDay2Type == objShift.ID && objAttendanceTableProCut.LeaveWorkDay2Days != null)
                            {
                                sumLeaveWorkDayDays += objAttendanceTableProCut.LeaveWorkDay2Days.Value;
                            }
                        }

                        item = new ElementFormula(_formula, sumLeaveWorkDayDays, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }

                //số giờ nghỉ tính như đi làm theo mã loại ngày nghỉ
                strStartsWith = PayrollElement.DYN_ATT_ATTENDANCETABLE_SUM_LEAVEWORKDAY_HOUR_.ToString();
                strEndWith = "_BYCODELEAVEDAYTYPE";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();

                if (objAttendanceTableProCut != null)
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        var _formula = formulaitem;
                        double sumLeaveWorkDayHour = 0;
                        var codeLeaveDayType = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");

                        var objShift = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();
                        if (objShift != null)
                        {
                            if (objAttendanceTableProCut.LeaveWorkDay1Type != null && objAttendanceTableProCut.LeaveWorkDay1Type == objShift.ID && objAttendanceTableProCut.LeaveWorkDay1Hour != null)
                            {
                                sumLeaveWorkDayHour += objAttendanceTableProCut.LeaveWorkDay1Hour.Value;
                            }
                            if (objAttendanceTableProCut.LeaveWorkDay2Type != null && objAttendanceTableProCut.LeaveWorkDay2Type == objShift.ID && objAttendanceTableProCut.LeaveWorkDay2Hour != null)
                            {
                                sumLeaveWorkDayHour += objAttendanceTableProCut.LeaveWorkDay2Hour.Value;
                            }
                        }

                        item = new ElementFormula(_formula, sumLeaveWorkDayHour, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
            }


            #region Tung.Tran [09/03/2020][113304]: [New][HotFix v8.8.06.01_TAC] Phần tử lương ngày bắt đầu và kết thúc nghỉ thai sản	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN71_ATT_LEAVE_.ToString(), new string[] { "_GETSTARTDATE", "_GETENDDATE" }))
            {


                var strLeaveDayStatus = string.Empty;
                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_ANNUALDETAIL_LEAVEDAYSTATUS.ToString()).FirstOrDefault();
                if (objAllSetting != null)
                {
                    strLeaveDayStatus = objAllSetting.Value1;
                }
                var strStartsWith = PayrollElement.DYN71_ATT_LEAVE_.ToString();
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                var ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && (m.EndsWith("_GETSTARTDATE") || m.EndsWith("_GETENDDATE"))).Distinct().ToList();

                var listLeaveDayNotStatusByProfileDic = TotalDataAll.dicLeaveDayNotStatus.GetValueOrNew(profileItem.ID);

                foreach (var itemFormula in ListFormula)
                {
                    DateTime? dateStart = null;
                    DateTime? dateEnd = null;

                    var codeLeaveDayType = itemFormula.Replace(strStartsWith, "").Replace("_GETSTARTDATE", "").Replace("_GETENDDATE", "");
                    var objLeavedayType = TotalDataAll.listLeavedayType.FirstOrDefault(s => s.Code == codeLeaveDayType);

                    if (objLeavedayType != null)
                    {
                        var objLeaveDay = listLeaveDayNotStatusByProfileDic
                            .Where(x => x.DateEnd >= CutOffDuration.DateStart
                                    && x.DateStart <= CutOffDuration.DateEnd.AddDays(1)
                                    && x.Status == strLeaveDayStatus
                                    && x.LeaveDayTypeID == objLeavedayType.ID)
                            .OrderByDescending(x => x.DateStart)
                            .FirstOrDefault();

                        if (objLeaveDay != null)
                        {
                            dateStart = objLeaveDay.DateStart;
                            dateEnd = objLeaveDay.DateEnd;
                        }
                    }

                    if (itemFormula.EndsWith("_GETSTARTDATE"))
                    {
                        item = new ElementFormula(itemFormula, dateStart, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                    else if (itemFormula.EndsWith("_GETENDDATE"))
                    {
                        item = new ElementFormula(itemFormula, dateEnd, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion


            //[22/03/2017][bang.nguyen][79925][New Func](đã có phần tử mang ý nghĩa trước đó nhưng BA confirm nếu khác logic xử lý => vẫn thêm phần tử mới)
            //Lấy phần tử lương đếm số lần nghỉ trong tháng theo từng loại ngày nghỉ 
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_LEAVE_", "_COUNT"))
            {
                if (objAttendanceTableProCut != null)
                {
                    var listElementCountLeave = TotalDataAll.listElement_All.Where(s => s.ElementCode.StartsWith("ATT_LEAVE_") && s.ElementCode.EndsWith("_COUNT")).ToList();
                    var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                    foreach (var objElement in listElementCountLeave)
                    {
                        var objLeavedayType = TotalDataAll.listLeavedayType.Where(s => s.Code == objElement.ElementCode.Replace("ATT_LEAVE_", "").Replace("_COUNT", "")).FirstOrDefault();
                        if (objLeavedayType != null)
                        {
                            double _value = 0;
                            foreach (var objAttendanceTableItem in listAttendanceTableItem)
                            {
                                if (objAttendanceTableItem.LeaveTypeID == objLeavedayType.ID && objAttendanceTableItem.LeaveHours > 0)
                                {
                                    _value += 1;
                                }
                                if (objAttendanceTableItem.LeaveWorkDayType == objLeavedayType.ID && objAttendanceTableItem.LeaveWorkDayHour > 0)
                                {
                                    _value += 1;
                                }
                                if (objAttendanceTableItem.ExtraLeaveTypeID == objLeavedayType.ID && objAttendanceTableItem.ExtraLeaveHours > 0)
                                {
                                    _value += 1;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType3ID == objLeavedayType.ID && objAttendanceTableItem.ExtraLeaveHours3 > 0)
                                {
                                    _value += 1;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType4ID == objLeavedayType.ID && objAttendanceTableItem.ExtraLeaveHours4 > 0)
                                {
                                    _value += 1;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType5ID == objLeavedayType.ID && objAttendanceTableItem.ExtraLeaveHours5 > 0)
                                {
                                    _value += 1;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType6ID == objLeavedayType.ID && objAttendanceTableItem.ExtraLeaveHours6 > 0)
                                {
                                    _value += 1;
                                }
                            }
                            item = new ElementFormula(objElement.ElementCode, _value, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }


            //Số ngày nghỉ tháng N-1
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_LEAVE_", "_DAY_PREV"))
            {
                listElement_Leave = TotalDataAll.listElement_All.Where(m => m.ElementCode.StartsWith("ATT_LEAVE_") && m.ElementCode.EndsWith("_DAY_PREV")).ToList();
                var _tmpAttendanceTable = TotalDataAll.Att_AttendanceTable_Prev.Where(m => m.ProfileID == profileItem.ID).FirstOrDefault();
                foreach (var LD in listElement_Leave)
                {
                    var itemLeaveday = TotalDataAll.listLeavedayType.Where(m => m.Code == LD.ElementCode.Replace("ATT_LEAVE_", "").Replace("_DAY_PREV", "")).FirstOrDefault();

                    double value = 0;
                    if (itemLeaveday != null && _tmpAttendanceTable != null)
                    {
                        if (_tmpAttendanceTable.LeaveDay1Type != null && _tmpAttendanceTable.LeaveDay1Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay1Days != null ? (double)_tmpAttendanceTable.LeaveDay1Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay2Type != null && _tmpAttendanceTable.LeaveDay2Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay2Days != null ? (double)_tmpAttendanceTable.LeaveDay2Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay3Type != null && _tmpAttendanceTable.LeaveDay3Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay3Days != null ? (double)_tmpAttendanceTable.LeaveDay3Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay4Type != null && _tmpAttendanceTable.LeaveDay4Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay4Days != null ? (double)_tmpAttendanceTable.LeaveDay4Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay5Type != null && _tmpAttendanceTable.LeaveDay5Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay5Days != null ? (double)_tmpAttendanceTable.LeaveDay5Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay6Type != null && _tmpAttendanceTable.LeaveDay6Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay6Days != null ? (double)_tmpAttendanceTable.LeaveDay6Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay7Type != null && _tmpAttendanceTable.LeaveDay7Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay7Days != null ? (double)_tmpAttendanceTable.LeaveDay7Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay8Type != null && _tmpAttendanceTable.LeaveDay8Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay8Days != null ? (double)_tmpAttendanceTable.LeaveDay8Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay9Type != null && _tmpAttendanceTable.LeaveDay9Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay9Days != null ? (double)_tmpAttendanceTable.LeaveDay9Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay10Type != null && _tmpAttendanceTable.LeaveDay10Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay10Days != null ? (double)_tmpAttendanceTable.LeaveDay10Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay11Type != null && _tmpAttendanceTable.LeaveDay11Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay11Days != null ? (double)_tmpAttendanceTable.LeaveDay11Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay12Type != null && _tmpAttendanceTable.LeaveDay12Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay12Days != null ? (double)_tmpAttendanceTable.LeaveDay12Days : 0;
                        }
                    }
                    item = new ElementFormula(LD.ElementCode, value, 0);
                    listElementFormula.Add(item);
                }
            }

            //Tổng số Ngày Nghỉ từng loại trong năm
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_LEAVE_", "_DAY_INYEAR"))
            {
                using (var context = new VnrHrmDataContext())
                {
                    string status = string.Empty;
                    var unitOfWork = (IUnitOfWork)new UnitOfWork(context);

                    //[bang.nguyen][08/01/2018][92124][Modify Func]
                    //neu khong cau hinh nam tai chinh thi time tu dau nam den cuoi nam
                    DateTime from = new DateTime(CutOffDuration.MonthYear.Year, 1, 1);
                    DateTime to = new DateTime(CutOffDuration.MonthYear.Year, 12, 31);

                    //[15122015][bang.nguyen][60715][Modify ]
                    //sửa phần tử các loại ngày nghỉ lấy theo năm tài chính
                    //get cau hinh ket thuc nam tai chinh
                    var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name != null && s.Name == "HRM_EVA_CONFIG_DAYENDYEARFINANCE").FirstOrDefault();
                    if (objAllSetting != null && objAllSetting.Value1 != null)
                    {
                        //ngay cau hinh nam tai chinh
                        DateTime dateEndFinace;
                        if (DateTime.TryParse(objAllSetting.Value1, out dateEndFinace))
                        {
                            //ngày trong tháng tính lương
                            int dayInMonthCutOffDuration = DateTime.DaysInMonth(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month);
                            //ngày cuối tháng tính lương
                            to = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayInMonthCutOffDuration);
                            DateTime tempdateEndFinace = new DateTime(CutOffDuration.MonthYear.Year, dateEndFinace.Month, dateEndFinace.Day);
                            //ngày tiếp theo của ngày kết thúc năm tài chính
                            DateTime tempfrom = tempdateEndFinace.AddDays(1);
                            if (CutOffDuration.MonthYear.Month <= dateEndFinace.Month)
                            {
                                from = new DateTime(CutOffDuration.MonthYear.Year - 1, tempfrom.Month, tempfrom.Day);
                            }
                            else
                            {
                                from = new DateTime(CutOffDuration.MonthYear.Year, tempfrom.Month, tempfrom.Day);
                            }
                        }
                    }

                    string nameTableGetData = "listAttendanceTableInYear";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        TotalData600.listAttendanceTableInYear = unitOfWork.CreateQueryable<Att_AttendanceTable>(Guid.Empty,
                                                m => TotalData600.listProfileIds.Contains(m.ProfileID)
                                                && m.MonthYear != null
                                                && m.MonthYear.Value >= from
                                                && m.MonthYear.Value <= to).ToList();
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }

                    List<Att_AttendanceTable> listAttendanceTableByProfile = TotalData600.listAttendanceTableInYear.Where(
                                                m => m.ProfileID == profileItem.ID
                                                && m.MonthYear != null
                                                && m.MonthYear.Value >= from
                                                && m.MonthYear.Value <= to).ToList();

                    listElement_Leave = TotalDataAll.listElement_All.Where(m => m.ElementCode.StartsWith("ATT_LEAVE_") && m.ElementCode.EndsWith("_DAY_INYEAR")).ToList();

                    foreach (var LD in listElement_Leave)
                    {
                        var itemLeaveday = TotalDataAll.listLeavedayType.Where(m => m.Code == LD.ElementCode.Replace("ATT_LEAVE_", "").Replace("_DAY_INYEAR", "")).FirstOrDefault();

                        double value = 0;
                        foreach (var _tmpAttendanceTable in listAttendanceTableByProfile)
                        {
                            if (itemLeaveday != null && _tmpAttendanceTable != null)
                            {
                                if (_tmpAttendanceTable.LeaveDay1Type != null && _tmpAttendanceTable.LeaveDay1Type == itemLeaveday.ID)
                                {
                                    value += _tmpAttendanceTable.LeaveDay1Days != null ? (double)_tmpAttendanceTable.LeaveDay1Days : 0;
                                }
                                if (_tmpAttendanceTable.LeaveDay2Type != null && _tmpAttendanceTable.LeaveDay2Type == itemLeaveday.ID)
                                {
                                    value += _tmpAttendanceTable.LeaveDay2Days != null ? (double)_tmpAttendanceTable.LeaveDay2Days : 0;
                                }
                                if (_tmpAttendanceTable.LeaveDay3Type != null && _tmpAttendanceTable.LeaveDay3Type == itemLeaveday.ID)
                                {
                                    value += _tmpAttendanceTable.LeaveDay3Days != null ? (double)_tmpAttendanceTable.LeaveDay3Days : 0;
                                }
                                if (_tmpAttendanceTable.LeaveDay4Type != null && _tmpAttendanceTable.LeaveDay4Type == itemLeaveday.ID)
                                {
                                    value += _tmpAttendanceTable.LeaveDay4Days != null ? (double)_tmpAttendanceTable.LeaveDay4Days : 0;
                                }
                                if (_tmpAttendanceTable.LeaveDay5Type != null && _tmpAttendanceTable.LeaveDay5Type == itemLeaveday.ID)
                                {
                                    value += _tmpAttendanceTable.LeaveDay5Days != null ? (double)_tmpAttendanceTable.LeaveDay5Days : 0;
                                }
                                if (_tmpAttendanceTable.LeaveDay6Type != null && _tmpAttendanceTable.LeaveDay6Type == itemLeaveday.ID)
                                {
                                    value += _tmpAttendanceTable.LeaveDay6Days != null ? (double)_tmpAttendanceTable.LeaveDay6Days : 0;
                                }
                                if (_tmpAttendanceTable.LeaveDay7Type != null && _tmpAttendanceTable.LeaveDay7Type == itemLeaveday.ID)
                                {
                                    value += _tmpAttendanceTable.LeaveDay7Days != null ? (double)_tmpAttendanceTable.LeaveDay7Days : 0;
                                }
                                if (_tmpAttendanceTable.LeaveDay8Type != null && _tmpAttendanceTable.LeaveDay8Type == itemLeaveday.ID)
                                {
                                    value += _tmpAttendanceTable.LeaveDay8Days != null ? (double)_tmpAttendanceTable.LeaveDay8Days : 0;
                                }
                                if (_tmpAttendanceTable.LeaveDay9Type != null && _tmpAttendanceTable.LeaveDay9Type == itemLeaveday.ID)
                                {
                                    value += _tmpAttendanceTable.LeaveDay9Days != null ? (double)_tmpAttendanceTable.LeaveDay9Days : 0;
                                }
                                if (_tmpAttendanceTable.LeaveDay10Type != null && _tmpAttendanceTable.LeaveDay10Type == itemLeaveday.ID)
                                {
                                    value += _tmpAttendanceTable.LeaveDay10Days != null ? (double)_tmpAttendanceTable.LeaveDay10Days : 0;
                                }
                                if (_tmpAttendanceTable.LeaveDay11Type != null && _tmpAttendanceTable.LeaveDay11Type == itemLeaveday.ID)
                                {
                                    value += _tmpAttendanceTable.LeaveDay11Days != null ? (double)_tmpAttendanceTable.LeaveDay11Days : 0;
                                }
                                if (_tmpAttendanceTable.LeaveDay12Type != null && _tmpAttendanceTable.LeaveDay12Type == itemLeaveday.ID)
                                {
                                    value += _tmpAttendanceTable.LeaveDay12Days != null ? (double)_tmpAttendanceTable.LeaveDay12Days : 0;
                                }
                            }
                        }
                        item = new ElementFormula(LD.ElementCode, value, 0);
                        listElementFormula.Add(item);
                    }
                }
            }


            #region N-1
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_LEAVE_HOURS_PREV.ToString(), PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_HOURS_PREV.ToString() }))
            {
                //N-1
                double SumLeaveday_Prev = 0;
                double SumLeavedayIsSalary_Prev = 0;

                listElement_Leave = TotalDataAll.listElement_All.Where(m => m.ElementCode.StartsWith("ATT_LEAVE_") && m.ElementCode.EndsWith("_HOURS")).ToList();

                foreach (var LD in listElement_Leave)
                {
                    var itemLeaveday = TotalDataAll.listLeavedayType.Where(m => m.Code == LD.ElementCode.Replace("ATT_LEAVE_", "").Replace("_HOURS", "")).FirstOrDefault();

                    #region Lấy LeaveDay theo từng lại và lấy tổng ngày nghỉ tháng N - 1

                    double value = 0;
                    var _tmpAttendanceTable = TotalDataAll.Att_AttendanceTable_Prev.Where(m => m.ProfileID == profileItem.ID).FirstOrDefault();
                    if (itemLeaveday != null && _tmpAttendanceTable != null)
                    {
                        if (_tmpAttendanceTable.LeaveDay1Type != null && _tmpAttendanceTable.LeaveDay1Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay1Hours;
                        }
                        if (_tmpAttendanceTable.LeaveDay2Type != null && _tmpAttendanceTable.LeaveDay2Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay2Hours;
                        }
                        if (_tmpAttendanceTable.LeaveDay3Type != null && _tmpAttendanceTable.LeaveDay3Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay3Hours;
                        }
                        if (_tmpAttendanceTable.LeaveDay4Type != null && _tmpAttendanceTable.LeaveDay4Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay4Hours;
                        }
                        if (_tmpAttendanceTable.LeaveDay5Type != null && _tmpAttendanceTable.LeaveDay5Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay5Hours;
                        }
                    }
                    SumLeaveday_Prev += value;//Tổng giờ nghỉ trong tháng
                    if (itemLeaveday != null)
                    {
                        SumLeavedayIsSalary_Prev += value * itemLeaveday.PaidRate;//tổng giờ nghỉ có trả lương
                    }
                    #endregion
                }


                //Tổng số giờ nghỉ trong tháng N-1
                item = new ElementFormula(PayrollElement.ATT_LEAVE_HOURS_PREV.ToString(), SumLeaveday_Prev, 0);
                listElementFormula.Add(item);

                //Tổng số giờ nghỉ trong tháng có tính lương N-1
                item = new ElementFormula(PayrollElement.ATT_TOTAL_PAID_LEAVEDAY_HOURS_PREV.ToString(), SumLeavedayIsSalary_Prev, 0);
                listElementFormula.Add(item);
            }
            #endregion
            #endregion

            #region phan tu theo ki tru cong [20/07/2017][bang.nguyen][85096][New Func]

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
            PayrollElement.SAL_BASIC_SALARY_BACKPAY_1.ToString(),
            PayrollElement.SAL_BASIC_SALARY_BACKPAY_2.ToString(),
            PayrollElement.ATT_WORKPAIDHOURS_BACKPAY_1.ToString(),
            PayrollElement.ATT_WORKPAIDHOURS_BACKPAY_2.ToString(),
            PayrollElement.ATT_PAIDLEAVEHOURS_BACKPAY_1.ToString(),
            PayrollElement.ATT_PAIDLEAVEHOURS_BACKPAY_2.ToString(),
            PayrollElement.ATT_UNPAIDLEAVEHOURS_BACKPAY_1.ToString(),
            PayrollElement.ATT_UNPAIDLEAVEHOURS_BACKPAY_2.ToString()
            }))
            {
                var _BackPayFrom = CutOffDuration.BackPayFrom;
                var _BackPayTo = CutOffDuration.BackPayTo;
                double _SalaryBackpay1 = 0;
                double _SalaryBackpay2 = 0;
                double _WorkPaidHoursBackpay1 = 0;
                double _WorkPaidHoursBackpay2 = 0;
                double _PaidLeaveHourBackpay1 = 0;
                double _PaidLeaveHourBackpay2 = 0;
                double _UnPaidLeaveHourBackpay1 = 0;
                double _UNPaidLeaveHourBackpay2 = 0;

                if (_BackPayFrom != null && _BackPayTo != null)
                {
                    using (var context = new VnrHrmDataContext())
                    {
                        var unitOfWork = (IUnitOfWork)new UnitOfWork(context);

                        string nameTableGetData = "listBasicSalaryByCutOffDurationBackPay";
                        if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                        {
                            // do ki tru cong cua du an nay nam ngoai ki cong nen xu ly theo cach nay
                            TotalData600.listBasicSalaryByCutOffDurationBackPay = unitOfWork.CreateQueryable<Sal_BasicSalary>(Guid.Empty, s =>
                                     TotalData600.listProfileIds.Contains(s.ProfileID)
                                     && s.Status == EnumDropDown.Sal_BasicSalaryStatus.E_APPROVED.ToString()
                                     && s.DateOfEffect <= _BackPayTo)
                                     .Select(s => new Sal_BasicSalaryEntity
                                     {
                                         ProfileID = s.ProfileID,
                                         GrossAmount = s.GrossAmount,
                                         E_GrossAmount = s.E_GrossAmount,
                                         DateOfEffect = s.DateOfEffect
                                     }).ToList();

                            TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                        }

                        // do ki tru cong cua du an nay nam ngoai ki cong nen xu ly theo cach nay
                        var listBasicSalaryToBackPayTo = TotalData600.listBasicSalaryByCutOffDurationBackPay
                                                            .Where(s => s.ProfileID == profileItem.ID)
                                                            .OrderByDescending(s => s.DateOfEffect).ToList();

                        //dieu kien thay doi luong trong ki tru cong
                        //neu co thay doi luong trong ki tru cong moi tinh cho cac phan tu nay
                        if (listBasicSalaryToBackPayTo.Count() >= 2 && listBasicSalaryToBackPayTo.Where(s => s.DateOfEffect > _BackPayFrom).Count() > 0)
                        {
                            var objBasicSalaryFirstByBackPay = listBasicSalaryToBackPayTo.Where(s => s.DateOfEffect <= _BackPayFrom).FirstOrDefault();

                            //luong truoc thay doi luong cua ky tru cong
                            if (objBasicSalaryFirstByBackPay != null && objBasicSalaryFirstByBackPay.GrossAmount != null && objBasicSalaryFirstByBackPay.GrossAmount.ToDouble() != null)
                            {
                                _SalaryBackpay1 = objBasicSalaryFirstByBackPay.GrossAmount.ToDouble().Value;
                            }

                            //luong sau thay doi luong cua ky tru cong
                            var objBasicSalaryAfterByBackPay = listBasicSalaryToBackPayTo.Where(s => s.DateOfEffect > _BackPayFrom).FirstOrDefault();
                            if (objBasicSalaryAfterByBackPay != null && objBasicSalaryAfterByBackPay.GrossAmount != null && objBasicSalaryAfterByBackPay.GrossAmount.ToDouble() != null)
                            {
                                _SalaryBackpay2 = objBasicSalaryAfterByBackPay.GrossAmount.ToDouble().Value;
                            }

                            var objBasicSalaryByBackPay = listBasicSalaryToBackPayTo.FirstOrDefault();
                            if (objBasicSalaryByBackPay != null)
                            {
                                //du lieu cong da co ngay neu ki cong tru nam ngoai ki cong
                                var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).ToList();

                                //tong gio lam viec thuc te truoc khi thay doi luong trong ky tru cong
                                _WorkPaidHoursBackpay1 = listAttendanceTableItem.Where(s => s.WorkDate >= _BackPayFrom && s.WorkDate < objBasicSalaryByBackPay.DateOfEffect)
                                                            .Sum(s => s.WorkPaidHours);

                                //tong gio lam viec thuc te sau khi thay doi luong trong ky cong tru
                                _WorkPaidHoursBackpay2 = listAttendanceTableItem.Where(s => s.WorkDate >= objBasicSalaryByBackPay.DateOfEffect && s.WorkDate <= _BackPayTo)
                                                            .Sum(s => s.WorkPaidHours);

                                //tong gio nghi thuc te co huong luong truoc khi thay doi luong trong ky cong tru
                                _PaidLeaveHourBackpay1 = listAttendanceTableItem.Where(s => s.WorkDate >= _BackPayFrom && s.WorkDate < objBasicSalaryByBackPay.DateOfEffect)
                                                            .Sum(s => s.PaidLeaveHours);

                                //tong gio nghi thuc te co huong luong sau khi thay doi luong trong ky cong tru
                                _PaidLeaveHourBackpay2 = listAttendanceTableItem.Where(s => s.WorkDate >= objBasicSalaryByBackPay.DateOfEffect && s.WorkDate <= _BackPayTo)
                                                            .Sum(s => s.PaidLeaveHours);

                                //tong gio nghi thuc te khong huong luong truoc khi thay doi luong trong ky cong tru
                                _UnPaidLeaveHourBackpay1 = listAttendanceTableItem.Where(s => s.WorkDate >= _BackPayFrom && s.WorkDate < objBasicSalaryByBackPay.DateOfEffect)
                                                            .Sum(s => s.UnpaidLeaveHours);

                                //tong gio nghi thuc te co huong luong sau khi thay doi luong trong ky cong tru
                                _UNPaidLeaveHourBackpay2 = listAttendanceTableItem.Where(s => s.WorkDate >= objBasicSalaryByBackPay.DateOfEffect && s.WorkDate <= _BackPayTo)
                                                            .Sum(s => s.UnpaidLeaveHours);
                            }
                        }
                        else // khong thay doi luong trong ki tru cong
                        {
                            //luong sau thay doi luong cua ky tru cong
                            var objBasicSalaryByBackPay = listBasicSalaryToBackPayTo.FirstOrDefault();
                            if (objBasicSalaryByBackPay != null && objBasicSalaryByBackPay.GrossAmount != null && objBasicSalaryByBackPay.GrossAmount.ToDouble() != null)
                            {
                                _SalaryBackpay2 = objBasicSalaryByBackPay.GrossAmount.ToDouble().Value;
                            }

                            var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).ToList();

                            //tong gio lam viec thuc te sau khi thay doi luong trong ky cong tru
                            _WorkPaidHoursBackpay2 = listAttendanceTableItem.Where(s => s.WorkDate >= _BackPayFrom && s.WorkDate <= _BackPayTo).Sum(s => s.WorkPaidHours);

                            //tong gio lam viec thuc te sau khi thay doi luong trong ky cong tru
                            _PaidLeaveHourBackpay2 = listAttendanceTableItem.Where(s => s.WorkDate >= _BackPayFrom && s.WorkDate <= _BackPayTo).Sum(s => s.PaidLeaveHours);

                            //tong gio nghi thuc te co huong luong sau khi thay doi luong trong ky cong tru
                            _UNPaidLeaveHourBackpay2 = listAttendanceTableItem.Where(s => s.WorkDate >= _BackPayFrom && s.WorkDate <= _BackPayTo).Sum(s => s.UnpaidLeaveHours);

                        }
                    }
                }

                //luong truoc thay doi luong cua ky tru cong
                item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_BACKPAY_1.ToString(), _SalaryBackpay1, 0);
                listElementFormula.Add(item);

                //luong sau thay doi luong cua ky tru cong
                item = new ElementFormula(PayrollElement.SAL_BASIC_SALARY_BACKPAY_2.ToString(), _SalaryBackpay2, 0);
                listElementFormula.Add(item);

                //tong so gio lam viec thuc te truoc khi thay doi luong ky tru cong
                item = new ElementFormula(PayrollElement.ATT_WORKPAIDHOURS_BACKPAY_1.ToString(), _WorkPaidHoursBackpay1, 0);
                listElementFormula.Add(item);

                //tong so gio lam viec thuc te sau khi thay doi luong ky tru cong
                item = new ElementFormula(PayrollElement.ATT_WORKPAIDHOURS_BACKPAY_2.ToString(), _WorkPaidHoursBackpay2, 0);
                listElementFormula.Add(item);

                //tong gio nghi thuc te co huong luong truoc khi thay doi luong ky tru cong
                item = new ElementFormula(PayrollElement.ATT_PAIDLEAVEHOURS_BACKPAY_1.ToString(), _PaidLeaveHourBackpay1, 0);
                listElementFormula.Add(item);

                //tong gio nghi thuc te co huong luong sau khi thay doi luong ky tru cong
                item = new ElementFormula(PayrollElement.ATT_PAIDLEAVEHOURS_BACKPAY_2.ToString(), _PaidLeaveHourBackpay2, 0);
                listElementFormula.Add(item);

                //tong gio nghi thuc te khong huong luong truoc khi thay doi luong ky tru cong
                item = new ElementFormula(PayrollElement.ATT_UNPAIDLEAVEHOURS_BACKPAY_1.ToString(), _UnPaidLeaveHourBackpay1, 0);
                listElementFormula.Add(item);

                //tong gio nghi thuc te khong huong luong sau khi thay doi luong ky tru cong
                item = new ElementFormula(PayrollElement.ATT_UNPAIDLEAVEHOURS_BACKPAY_2.ToString(), _UNPaidLeaveHourBackpay2, 0);
                listElementFormula.Add(item);

            }

            //So ngay di cong tac khong an trua cua ky tru cong
            //[20/07/2017][bang.nguyen][85096][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_COUNT_LEAVEDAYS_NOTMEAL_BACKPAY.ToString()))
            {
                int _CountLeavedaysNotMealBackPay = 0;
                var _BackPayFrom = CutOffDuration.BackPayFrom;
                var _BackPayTo = CutOffDuration.BackPayTo;
                if (_BackPayFrom != null && _BackPayTo != null)
                {
                    //[29/12/2018][bang.nguyen]
                    //ban đầu hiểu là chỉ có 1 loại IsMeal = 1
                    //=> hiện có thể có nhiều loại IsMeal = 1
                    var listLeaveDayTypeIDIsMeal = TotalDataAll.listLeavedayType.Where(s => s.IsMeal == true).Select(s => s.ID).ToList();
                    if (listLeaveDayTypeIDIsMeal.Count > 0)
                    {
                        string status = string.Empty;
                        string nameTableGetData = "listAtt_LeaveDayBackPay";

                        if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                        {
                            Sal_GetDataComputePayrollKZServices getDataComputePayrollServices = new Sal_GetDataComputePayrollKZServices();
                            getDataComputePayrollServices.UserLogin = TotalDataAll.UserLogin;
                            TotalData600.listAtt_LeaveDayBackPay = getDataComputePayrollServices.GetLeaveDayByTimeLine(TotalData600.strOrderByProfile, _BackPayFrom, _BackPayTo, ref status);
                            TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                        }
                        if (!string.IsNullOrEmpty(status))
                        {
                            TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_COUNT_LEAVEDAYS_NOTMEAL_BACKPAY.ToString() + ") ";
                        }
                        else
                        {
                            var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_ATT_ANNUALDETAIL_LEAVEDAYSTATUS.ToString()).FirstOrDefault();
                            string statusLeaveday = string.Empty;
                            if (objAllSetting != null && !string.IsNullOrEmpty(objAllSetting.Value1))
                            {
                                statusLeaveday = objAllSetting.Value1;
                            }
                            //[25/12/2018][bang.nguyen][102075][modify]
                            //khi so sanh ngày công và ngày nghỉ (chỉ nên xét theo ngày) (ngày nghỉ có giờ nên xét thêm giờ sẽ không lấy được đúng ngày)
                            var listLeavedayBackPay = TotalData600.listAtt_LeaveDayBackPay.Where(s => s.ProfileID == profileItem.ID
                            && s.DateStart.Date <= _BackPayTo
                            && s.DateEnd.Date >= _BackPayFrom
                            && s.HaveMeal == null
                            && listLeaveDayTypeIDIsMeal.Contains(s.LeaveDayTypeID));
                            if (!string.IsNullOrEmpty(statusLeaveday))
                            {
                                listLeavedayBackPay = listLeavedayBackPay.Where(s => s.Status == statusLeaveday).ToList();
                            }

                            if (listLeavedayBackPay.Count() > 0)
                            {

                                var minDateStart = listLeavedayBackPay.Min(s => s.DateStart.Date);
                                var maxDateEnd = listLeavedayBackPay.Max(s => s.DateEnd.Date);

                                var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                s.CutOffDurationID == CutOffDuration.ID
                                && s.WorkDate >= minDateStart
                                && s.WorkDate <= maxDateEnd
                                && (s.ShiftID != null || s.Shift2ID != null)).ToList();
                                foreach (var objAttendanceTableItem in listAttendanceTableItem)
                                {
                                    if (listLeavedayBackPay.Where(s => s.DateStart.Date <= objAttendanceTableItem.WorkDate && objAttendanceTableItem.WorkDate <= s.DateEnd.Date).Count() > 0)
                                    {
                                        _CountLeavedaysNotMealBackPay += 1;
                                    }
                                }
                            }
                        }
                    }
                }

                //So ngay di cong tac khong an trua cua ky tru cong
                item = new ElementFormula(PayrollElement.ATT_COUNT_LEAVEDAYS_NOTMEAL_BACKPAY.ToString(), _CountLeavedaysNotMealBackPay, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region Tung.Tran [17072018][0096558] Enum lương phép bù phép bù  (Att_CompensationDetail)
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_COMPENSATIONDETAIL_AVAILABLE.ToString(), PayrollElement.ATT_COMPENSATIONDETAIL_INITAVAILABLEINMONTH.ToString(), PayrollElement.ATT_COMPENSATIONDETAIL_REMAIN.ToString() }))
            {
                //lay data nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listAttCompensationDetail";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.listAttCompensationDetail = dataComputeSer.GetAttCompensationDetail(TotalData600, CutOffDuration, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_COMPENSATIONDETAIL_AVAILABLE.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.ATT_COMPENSATIONDETAIL_AVAILABLE.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_COMPENSATIONDETAIL_INITAVAILABLEINMONTH.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_COMPENSATIONDETAIL_REMAIN.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var objCompensationDetaiByProfile = TotalData600.listAttCompensationDetail.Where(s => s.ProfileID == profileItem.ID
                                                                               && s.MonthYear != null
                                                                               && s.MonthYear.Value.Year == CutOffDuration.MonthYear.Year
                                                                               && s.MonthYear.Value.Month == CutOffDuration.MonthYear.Month).FirstOrDefault();
                    double? avilable = 0;
                    double? initAvailableInMonth = 0;
                    double? remain = 0;



                    if (objCompensationDetaiByProfile != null)
                    {
                        avilable = objCompensationDetaiByProfile.Available;
                        initAvailableInMonth = objCompensationDetaiByProfile.InitAvailableInMonth;
                        remain = objCompensationDetaiByProfile.Remain;
                    }
                    item = new ElementFormula(PayrollElement.ATT_COMPENSATIONDETAIL_AVAILABLE.ToString(), avilable, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_COMPENSATIONDETAIL_INITAVAILABLEINMONTH.ToString(), initAvailableInMonth, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_COMPENSATIONDETAIL_REMAIN.ToString(), remain, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Công chuẩn trong chế độ công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.CAT_GRADEATTENDANCE_HOURONWORKDATE.ToString(), ""))
            {
                double _HourOnWorkDate = 0;
                var objAttTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();
                if (objAttTable != null && objAttTable.GradeAttendanceID != null)
                {
                    var objGradeAttendance = TotalDataAll.ListCat_GradeAttendance.Where(s => s.ID == objAttTable.GradeAttendanceID).FirstOrDefault();
                    if (objGradeAttendance != null && objGradeAttendance.HourOnWorkDate != null)
                    {
                        _HourOnWorkDate = objGradeAttendance.HourOnWorkDate.Value;
                    }
                }
                item = new ElementFormula(PayrollElement.CAT_GRADEATTENDANCE_HOURONWORKDATE.ToString(), _HourOnWorkDate, 0, string.Empty);
                listElementFormula.Add(item);
            }

            // Enum lấy Phương thức tính công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.CAT_GRADEATTENDANCE_EDTYPE.ToString(), ""))
            {
                // Phương thức tính công của chế độ công
                var eDType = string.Empty;

                var objAttTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();
                if (objAttTable != null && objAttTable.GradeAttendanceID != null)
                {
                    var objGradeAttendance = TotalDataAll.ListCat_GradeAttendance.Where(s => s.ID == objAttTable.GradeAttendanceID).FirstOrDefault();
                    if (objGradeAttendance != null && objGradeAttendance.HourOnWorkDate != null)
                    {
                        eDType = objGradeAttendance.EDType;
                    }
                }
                item = new ElementFormula(PayrollElement.CAT_GRADEATTENDANCE_EDTYPE.ToString(), eDType, 0, string.Empty);
                listElementFormula.Add(item);
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_OVERTIME_", "_RATETAX"))
            {
                var ListOvertimeTypecode = TotalDataAll.listOvertimeTypeAll.Select(m => m.Code).Distinct().ToList();

                foreach (var i in ListOvertimeTypecode)
                {
                    //lấy loại overtime tháng hiện tại theo ngày hiệu lực
                    var OvertimeItem = TotalDataAll.listOvertimeTypeAll.FirstOrDefault(m => m.Code == i && (m.DateEffective == null || m.DateEffective <= CutOffDuration.DateEnd));
                    if (OvertimeItem != null)
                    {
                        item = new ElementFormula("ATT_OVERTIME_" + i + "_RATETAX", OvertimeItem.TaxRate, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula("ATT_OVERTIME_" + i + "_RATETAX", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion


            #region [Tung.Tran][104818][26/04/2019][TLG] Số ngày thực tế đi làm (Tính tạm ứng)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_ACTUALWORKINGHOURS_BYUNUSUALPAY.ToString(), ""))
            {
                double sumActualWorkingHours = 0;

                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();

                if (objAllSettingDayKeepUnusualPay != null)
                {

                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                s.CutOffDurationID == CutOffDuration.ID)
                                                .OrderBy(x => x.WorkDate)
                                                .Take(dayKeepUnusualPay)
                                                .ToList();

                        sumActualWorkingHours = listAttendanceTableItem
                                                .Where(x => x.AvailableHours != 0)
                                                .Sum(a => a.WorkHours / a.AvailableHours);
                    }
                }

                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_ACTUALWORKINGHOURS_BYUNUSUALPAY.ToString(), sumActualWorkingHours, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region [Tung.Tran][104818][26/04/2019][TLG] Tổng ngày nghỉ thứ 7 từ đầu kỳ đến ngày chốt tạm ứng  (Tính tạm ứng)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLEITEM_COUNT_SATURDAYTIMEOFF_BYUNUSUALPAY.ToString(), ""))
            {

                int countResult = 0;

                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                           s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();
                if (objAllSettingDayKeepUnusualPay != null)
                {


                    var listRosterProfileDic = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);
                    var listRosterByProfile = listRosterProfileDic.Where(m => m.DateStart <= CutOffDuration.DateEnd &&
                                                                           m.DateEnd >= CutOffDuration.DateStart &&
                                                                           m.Status == RosterStatus.E_APPROVED.ToString()).ToList();
                    //rostergroup thang N
                    var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s =>
                                                        s.Status == RosterStatus.E_APPROVED.ToString()
                                                        && s.DateStart <= CutOffDuration.DateEnd
                                                        && s.DateEnd >= CutOffDuration.DateStart).ToList();

                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                      s.CutOffDurationID == CutOffDuration.ID)
                                                      .OrderBy(x => x.WorkDate)
                                                      .Take(dayKeepUnusualPay)
                                                      .ToList();

                        // Lấy ca loại nghỉ bù của nhân viên
                        var rosterTypeByTimeOff = listRosterByProfile.Where(x => x.Type == RosterType.E_TIME_OFF.ToString()).ToList();

                        // Nếu nhân viên có ca nghỉ bù thì mới xử lý tiếp
                        if (rosterTypeByTimeOff != null)
                        {
                            // Đếm từ bắt đầu kỳ công đến hết số ngày chốt tạm ứng
                            // => Lấy những ngày nào là thứ 7 + có ca là E_TIME_OFF
                            countResult = listAttendanceTableItem.Where(x =>
                            {
                                if (x.WorkDate.DayOfWeek == DayOfWeek.Saturday)
                                {
                                    if (rosterTypeByTimeOff.Where(a => a.DateStart.Date <= x.WorkDate.Date && (a.DateEnd == null || (a.DateEnd.Value.Date >= x.WorkDate.Date))).Count() > 0)
                                    {
                                        return true;
                                    }
                                }
                                return false;
                            }).Count();
                        }
                    }
                }

                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_COUNT_SATURDAYTIMEOFF_BYUNUSUALPAY.ToString(), countResult, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region [Tung.Tran][104818][26/04/2019][TLG] Enum động - Tổng ngày nghỉ theo loại (Tính tạm ứng)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN38_ATT_ATTENDANCETABLEITEM_SUMLEAVEHOURS_.ToString(), "_BYUNUSUALPAY"))
            {
                List<string> listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN38_ATT_ATTENDANCETABLEITEM_SUMLEAVEHOURS_.ToString()) && m.EndsWith("_BYUNUSUALPAY")).Distinct().ToList();

                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                          s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();

                if (objAllSettingDayKeepUnusualPay == null)
                {
                    foreach (var itemFormula in listFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    foreach (var itemFormula in listFormula)
                    {
                        double sumDayLeaveHours = 0;
                        int dayKeepUnusualPay = 0;

                        if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                        {
                            var listAttendanceTableItemByUnusualPay = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                              s.AvailableHours != 0
                                                              && s.CutOffDurationID == CutOffDuration.ID)
                                                             .OrderBy(x => x.WorkDate)
                                                             .Take(dayKeepUnusualPay)
                                                             .ToList();

                            var codeLeaveDayType = itemFormula.Replace(PayrollElement.DYN38_ATT_ATTENDANCETABLEITEM_SUMLEAVEHOURS_.ToString(), "").Replace("_BYUNUSUALPAY", "");

                            var objLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();

                            if (objLeaveDayType != null)
                            {
                                foreach (var objAttendanceTableItem in listAttendanceTableItemByUnusualPay)
                                {
                                    if (objAttendanceTableItem.LeaveTypeID == objLeaveDayType.ID && objAttendanceTableItem.LeaveHours > 0)
                                    {
                                        sumDayLeaveHours += (objAttendanceTableItem.LeaveHours / objAttendanceTableItem.AvailableHours);
                                    }
                                    if (objAttendanceTableItem.ExtraLeaveTypeID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours > 0)
                                    {
                                        sumDayLeaveHours += (objAttendanceTableItem.ExtraLeaveHours / objAttendanceTableItem.AvailableHours);
                                    }
                                    if (objAttendanceTableItem.ExtraLeaveType3ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours3 > 0)
                                    {
                                        sumDayLeaveHours += (objAttendanceTableItem.ExtraLeaveHours3.Value / objAttendanceTableItem.AvailableHours);
                                    }
                                    if (objAttendanceTableItem.ExtraLeaveType4ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours4 > 0)
                                    {
                                        sumDayLeaveHours += (objAttendanceTableItem.ExtraLeaveHours4.Value / objAttendanceTableItem.AvailableHours);
                                    }
                                    if (objAttendanceTableItem.ExtraLeaveType5ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours5 > 0)
                                    {
                                        sumDayLeaveHours += (objAttendanceTableItem.ExtraLeaveHours5.Value / objAttendanceTableItem.AvailableHours);
                                    }
                                    if (objAttendanceTableItem.ExtraLeaveType6ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours6 > 0)
                                    {
                                        sumDayLeaveHours += (objAttendanceTableItem.ExtraLeaveHours6.Value / objAttendanceTableItem.AvailableHours);
                                    }
                                }
                            }
                        }

                        item = new ElementFormula(itemFormula, sumDayLeaveHours, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region [Tung.Tran][104818][26/04/2019][TLG] Số ngày lễ tết (Tính tạm ứng)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLEITEM_COUNT_HOLIDAY_BYUNUSUALPAY.ToString(), ""))
            {
                int countHoliday = 0;

                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();

                if (objAllSettingDayKeepUnusualPay != null)
                {
                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                s.CutOffDurationID == CutOffDuration.ID)
                                                .OrderBy(x => x.WorkDate)
                                                .Take(dayKeepUnusualPay)
                                                .ToList();

                        string[] arrayHoliDayType = { EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString(), EnumDropDown.DayOffType.E_HOLIDAY.ToString() };

                        countHoliday = listAttendanceTableItem.Where(x => TotalDataAll.listDayOff.FirstOrDefault(a => arrayHoliDayType.Contains(a.Type) && a.DateOff.Date == x.WorkDate) != null).Count();
                    }
                }

                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_COUNT_HOLIDAY_BYUNUSUALPAY.ToString(), countHoliday, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region Hien.Le [13/07/2019] Bamboo Airways: Phần tử tính số tiền dựa vào mã vai trò, mã chức vụ
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SUM_AMOUNT_ATT_TIMESHEET.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicAtt_TimeSheet(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + CatElementType.FLIGHT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SUM_AMOUNT_ATT_TIMESHEET.ToString(), 0, 0);
                }
                else
                {
                    //DS Thời gian bay
                    var listAtt_TimeSheetByProfile = TotalData600.dicAtt_TimeSheet.GetValueOrNew(profileItem.ID);

                    List<Att_TimeSheetEntity> listTimeSheetItem = listAtt_TimeSheetByProfile.Where(m => m.ProfileID == profileItem.ID && m.Date <= CutOffDuration.DateEnd && m.Date >= CutOffDuration.DateStart).ToList();

                    // DS Đơn giá công việc
                    List<Cat_UnitPriceEntity> listUnitPrice = TotalDataAll.listCat_UnitPrice.Where(m => m.Date <= CutOffDuration.DateEnd).OrderByDescending(m => m.Date).ToList();

                    //Lấy ra danh sách thời gian bay group by theo RoleID, JobTypeID
                    var listTimeSheetItemGroup = listTimeSheetItem.GroupBy(x => new { x.RoleID, x.JobTypeID }).Select(s => s.FirstOrDefault()).ToList();
                    double totalAmount = 0;
                    foreach (var timeSheetItemGroup in listTimeSheetItemGroup)
                    {
                        double amount = 0;

                        var noHour = listTimeSheetItem.Where(x => x.NoHour != null && x.JobTypeID == timeSheetItemGroup.JobTypeID && x.RoleID == timeSheetItemGroup.RoleID).Sum(x => x.NoHour.Value);

                        var objUnitPrice = listUnitPrice.FirstOrDefault(x => x.RoleID == timeSheetItemGroup.RoleID && x.JobTypeID == timeSheetItemGroup.JobTypeID);

                        if (objUnitPrice != null && objUnitPrice.Amount != null)
                        {
                            amount = objUnitPrice.Amount.Value;
                        }
                        totalAmount += (amount * noHour);
                    }
                    item = new ElementFormula(PayrollElement.SUM_AMOUNT_ATT_TIMESHEET.ToString(), totalAmount, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [Hien.Le][0111849][06/02/2020]: Thêm Enum Phần Tử Lương Lấy Số Ngày Công Trước /Sau Thay Đổi Costcenter	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLEITEM_WORKDATE_BYCOSTCENTREID.ToString()))
            {
                DateTime? workDateChange = null;

                var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID)
                    .Where(p => p.CutOffDurationID == CutOffDuration.ID).OrderByDescending(p => p.WorkDate).ToList();

                foreach (var attendanceTableItem in listAttendanceTableItem.Select((value, index) => new { Value = value, Index = index }))
                {
                    //Get the value through item.Value;
                    var attendanceTableItemCurrent = attendanceTableItem.Value;
                    //Get the index through item.Index;
                    int currentIndex = attendanceTableItem.Index;
                    currentIndex++;
                    if (currentIndex != listAttendanceTableItem.Count())
                    {
                        var attendanceTableItemNext = listAttendanceTableItem[currentIndex];
                        if (attendanceTableItemCurrent.CostCentreID == attendanceTableItemNext.CostCentreID)
                        {
                            continue;
                        }
                        workDateChange = attendanceTableItemCurrent.WorkDate;
                        break;
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLEITEM_WORKDATE_BYCOSTCENTREID.ToString(), workDateChange, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region [Khoa.nguyen][0113209]Thêm phần tử lương tính tổng số lần bổ sung quẹt thẻ của nhân viên trong phòng ban theo chu kỳ công 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTWORKDATE_COUNT_MANUAL_INOUT.ToString()))
            {

                string status = string.Empty;
                string status2 = string.Empty;
                string status3 = string.Empty;
                int countInOut = 0;
                string strOrderNumber = string.Empty;

                dataComputeSer.GetListProfileAll(TotalData600, TotalDataAll, ref status);
                dataComputeSer.ListWorkHistoryAllProfile(TotalData600, CutOffDuration, ref status2);
                dataComputeSer.GetListAttWorkDayTypeOfTransfer(TotalData600, CutOffDuration, ref status3);


                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status2) || !string.IsNullOrEmpty(status3))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_ATTWORKDATE_COUNT_MANUAL_INOUT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_ATTWORKDATE_COUNT_MANUAL_INOUT.ToString(), countInOut, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    Hre_WorkHistoryEntity WorkHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.Status == EnumDropDown.Status.E_APPROVED.ToString() && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                    if (WorkHistoryByProfile != null)
                    {
                        var objProfilePositon = TotalDataAll.listPosition.FirstOrDefault(s => s.IsDiligence == true && s.ID == WorkHistoryByProfile.PositionID);
                        if (objProfilePositon != null)
                        {
                            var listOrderNumber = Sal_CommonServices.GetChildOrgOrderNumber(TotalDataAll.listOrgStructure, WorkHistoryByProfile.OrganizationStructureID.Value, strOrderNumber);
                            if (!string.IsNullOrEmpty(listOrderNumber))
                            {
                                var lstOrderNumber = listOrderNumber.Split(",").Select(s => int.Parse(s)).ToList();

                                var lstProfileIDHistory = TotalData600.listProfileAllOrderNumber.Where(x => lstOrderNumber.Contains(x.OrderNumber)).Select(x => x.ID).ToList();
                                var lstEnumType = TotalDataAll.ListCat_NameEntity.Where(s => s.EnumType == EnumDropDown.TypeOfTransfer.E_STOP.ToString()).Select(s => s.ID).ToList();


                                var lstHreWorkhistoryTypeOfTransfer = TotalData600.listWorkHistoryAllProfile.Where(x => lstProfileIDHistory.Contains(x.ProfileID)
                                && x.ProfileID != profileItem.ID
                                ).OrderByDescending(x => x.DateEffective)
                                .GroupBy(s => s.ProfileID)
                                .Select(s => s.FirstOrDefault())
                                .ToList();

                                if (lstHreWorkhistoryTypeOfTransfer.Count > 0)
                                {
                                    var lstProfileIDTypeOfTransfer = lstHreWorkhistoryTypeOfTransfer.Where(x => (x.TypeOfTransferID != null && !lstEnumType.Contains(x.TypeOfTransferID.Value)) || x.TypeOfTransferID == null).Select(x => x.ProfileID).ToList();
                                    countInOut = TotalData600.listAttWorkdayAllProfileTypeOfTransfet.Where(x => lstProfileIDTypeOfTransfer.Contains(x.ProfileID)
                                        && (x.SrcType == WorkdaySrcType.E_MANUAL_IN.ToString()
                                        || x.SrcType == WorkdaySrcType.E_MANUAL_OUT.ToString()
                                        || x.SrcType == WorkdaySrcType.E_MANUAL_INOUT.ToString())
                                        && x.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                    ).Count();
                                }

                            }
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_ATTWORKDATE_COUNT_MANUAL_INOUT.ToString(), countInOut, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [Khoa.nguyen][0113208]2.3 Thêm phần tử lương tính tổng số lần trễ sớm của tất cả nhân viên trong phòng ban theo chu kỳ công 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLE_LATEEARLYCOUNT_ALLPROFILE.ToString()))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                string status3 = string.Empty;
                int SumlateEarlyCount = 0;
                string strOrderNumber = string.Empty;

                dataComputeSer.GetListProfileAll(TotalData600, TotalDataAll, ref status);
                dataComputeSer.ListWorkHistoryAllProfile(TotalData600, CutOffDuration, ref status2);
                dataComputeSer.GetAttendanceTableAllProfile(TotalData600, CutOffDuration, ref status3);


                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status2) || !string.IsNullOrEmpty(status3))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_ATTENDANCETABLE_LATEEARLYCOUNT_ALLPROFILE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_LATEEARLYCOUNT_ALLPROFILE.ToString(), SumlateEarlyCount, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    Hre_WorkHistoryEntity WorkHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.Status == EnumDropDown.Status.E_APPROVED.ToString() && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                    if (WorkHistoryByProfile != null)
                    {
                        var objProfilePositon = TotalDataAll.listPosition.FirstOrDefault(s => s.IsDiligence == true && s.ID == WorkHistoryByProfile.PositionID);
                        if (objProfilePositon != null)
                        {
                            var listOrderNumber = Sal_CommonServices.GetChildOrgOrderNumber(TotalDataAll.listOrgStructure, WorkHistoryByProfile.OrganizationStructureID.Value, strOrderNumber);
                            if (!string.IsNullOrEmpty(listOrderNumber))
                            {
                                var lstOrderNumber = listOrderNumber.Split(",").Select(s => int.Parse(s)).ToList();

                                var lstProfileIDHistory = TotalData600.listProfileAllOrderNumber.Where(x => lstOrderNumber.Contains(x.OrderNumber)).Select(x => x.ID).ToList();
                                var lstEnumType = TotalDataAll.ListCat_NameEntity.Where(s => s.EnumType == EnumDropDown.TypeOfTransfer.E_STOP.ToString()).Select(s => s.ID).ToList();


                                var lstHreWorkhistoryTypeOfTransfer = TotalData600.listWorkHistoryAllProfile.Where(x => lstProfileIDHistory.Contains(x.ProfileID)
                                && x.ProfileID != profileItem.ID
                                ).OrderByDescending(x => x.DateEffective)
                                .GroupBy(s => s.ProfileID)
                                .Select(s => s.FirstOrDefault())
                                .ToList();

                                if (lstHreWorkhistoryTypeOfTransfer.Count > 0)
                                {
                                    var lstProfileIDTypeOfTransfer = lstHreWorkhistoryTypeOfTransfer.Where(x => (x.TypeOfTransferID != null && !lstEnumType.Contains(x.TypeOfTransferID.Value)) || x.TypeOfTransferID == null).Select(x => x.ProfileID).ToList();
                                    var lateEarlyCount = TotalData600.listAttendanceTableAllProfile.Where(x => x.LateEarlyCount != null && lstProfileIDTypeOfTransfer.Contains(x.ProfileID)).Select(x => x.LateEarlyCount).Sum();
                                    SumlateEarlyCount = lateEarlyCount != 0 ? lateEarlyCount.Value : 0;
                                }

                            }
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_LATEEARLYCOUNT_ALLPROFILE.ToString(), SumlateEarlyCount, 0);
                    listElementFormula.Add(item);
                }

            }
            #endregion

            #region khoa.nguyen 24/07/2020 [0117570: [IRV] Thêm enum phần tử lương lấy ra Mã trình độ, Kỹ năng và cấp bậc ngoại ngữ]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HRE_PROFILELANGUAGELEVEL_SPECIALTYPE.ToString(),
            PayrollElement.HRE_PROFILELANGUAGELEVEL_SPECIALSKILL.ToString(),
            PayrollElement.HRE_PROFILELANGUAGELEVEL_SPECIALLEVEL.ToString(),
            }))
            {

                string status = string.Empty;
                string codeSPECIALTYPE = string.Empty;
                string codeSPECIALSKILL = string.Empty;
                string codeSPECIALLEVEL = string.Empty;
                Guid guidCheck = Guid.Empty;

                dataComputeSer.GetListProfileLanguageLevel(TotalData600, CutOffDuration, ref status);


                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_PROFILELANGUAGELEVEL_SPECIALTYPE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_PROFILELANGUAGELEVEL_SPECIALTYPE.ToString(), codeSPECIALTYPE, 0);

                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_PROFILELANGUAGELEVEL_SPECIALSKILL.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_PROFILELANGUAGELEVEL_SPECIALSKILL.ToString(), codeSPECIALSKILL, 0);

                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_PROFILELANGUAGELEVEL_SPECIALLEVEL.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_PROFILELANGUAGELEVEL_SPECIALLEVEL.ToString(), codeSPECIALLEVEL, 0);

                    listElementFormula.Add(item);
                }
                else
                {
                    var objProfileLanguageLevel = TotalData600.listProfileLanguageLevel.OrderByDescending(x => x.DateStart).FirstOrDefault(x => x.ProfileID == profileItem.ID);
                    if (objProfileLanguageLevel != null)
                    {
                        if (objProfileLanguageLevel.SpecialTypeID != null && Guid.TryParse(objProfileLanguageLevel.SpecialTypeID.ToString(), out guidCheck))
                        {
                            var objSpecialType = TotalDataAll.ListCat_NameEntity.FirstOrDefault(x => (x.ID == objProfileLanguageLevel.SpecialTypeID.Value)
                            && (x.NameEntityType == "E_LANGUAGE_TYPE"));
                            codeSPECIALTYPE = objSpecialType != null ? objSpecialType.Code : string.Empty;
                        }

                        if (objProfileLanguageLevel.SpecialSkillID != null && Guid.TryParse(objProfileLanguageLevel.SpecialSkillID.ToString(), out guidCheck))
                        {
                            var objSpecialType = TotalDataAll.ListCat_NameEntity.FirstOrDefault(x => (x.ID == objProfileLanguageLevel.SpecialSkillID.Value)
                            && (x.NameEntityType == "E_LANGUAGE_SKILL"));
                            codeSPECIALSKILL = objSpecialType != null ? objSpecialType.Code : string.Empty;
                        }

                        if (objProfileLanguageLevel.SpecialLevelID != null && Guid.TryParse(objProfileLanguageLevel.SpecialLevelID.ToString(), out guidCheck))
                        {
                            var objSpecialType = TotalDataAll.ListCat_NameEntity.FirstOrDefault(x => (x.ID == objProfileLanguageLevel.SpecialLevelID.Value)
                            && (x.NameEntityType == "E_LANGUAGE_LEVEL"));
                            codeSPECIALLEVEL = objSpecialType != null ? objSpecialType.Code : string.Empty;
                        }
                    }

                    item = new ElementFormula(PayrollElement.HRE_PROFILELANGUAGELEVEL_SPECIALTYPE.ToString(), codeSPECIALTYPE, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.HRE_PROFILELANGUAGELEVEL_SPECIALSKILL.ToString(), codeSPECIALSKILL, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.HRE_PROFILELANGUAGELEVEL_SPECIALLEVEL.ToString(), codeSPECIALLEVEL, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Khoa.nguyen 117791: [IRV] Thêm enum phần tử lương lấy ra Mã trình độ, Kỹ năng và cấp bậc ngoại ngữ	
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HRE_CORPORATEINFORMATION_VALUE.ToString(),
            PayrollElement.HRE_CORPORATEINFORMATION_DATESTART.ToString(),
            PayrollElement.HRE_CORPORATEINFORMATION_DATEEND.ToString(),
            }))
            {

                string status = string.Empty;
                int corpateInformationvalue = 0;
                DateTime? dateStart = null;
                DateTime? dateEnd = null;
                Guid guidCheck = Guid.Empty;

                dataComputeSer.GetListCorporateInformation(TotalData600, CutOffDuration, ref status);


                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_CORPORATEINFORMATION_VALUE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_CORPORATEINFORMATION_VALUE.ToString(), corpateInformationvalue, 0);

                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_CORPORATEINFORMATION_DATESTART.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_CORPORATEINFORMATION_DATESTART.ToString(), dateStart, 0);

                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_CORPORATEINFORMATION_DATEEND.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_CORPORATEINFORMATION_DATEEND.ToString(), dateEnd, 0);

                    listElementFormula.Add(item);
                }
                else
                {
                    var objCorporateInformation = TotalData600.listCorporateInformation.OrderByDescending(x => x.DateStart).FirstOrDefault(x => x.ProfileID == profileItem.ID);
                    if (objCorporateInformation != null)
                    {
                        corpateInformationvalue = 1;
                        dateStart = objCorporateInformation.DateStart != null ? objCorporateInformation.DateStart : null;
                        dateEnd = objCorporateInformation.DateEnd != null ? objCorporateInformation.DateEnd : null;
                    }
                    item = new ElementFormula(PayrollElement.HRE_CORPORATEINFORMATION_VALUE.ToString(), corpateInformationvalue, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.HRE_CORPORATEINFORMATION_DATESTART.ToString(), dateStart, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.HRE_CORPORATEINFORMATION_DATEEND.ToString(), dateEnd, 0);
                    listElementFormula.Add(item);

                }
            }

            #endregion


            #region Khoa.nguyen 117792: [IRV] TThêm enum phần tử lương Thông tin thẻ cư trú của NV, NBĐ và NKT của Thông tin thẻ cư trú 	
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HRE_RESIDENCECARD_VALUE.ToString(),
            PayrollElement.HRE_RESIDENCECARD_DATESTART.ToString(),
            PayrollElement.HRE_RESIDENCECARD_DATEEND.ToString(),
            }))
            {

                string status = string.Empty;
                int residenceCardvalue = 0;
                DateTime? dateStart = null;
                DateTime? dateEnd = null;
                Guid guidCheck = Guid.Empty;

                dataComputeSer.GetListResidenceCard(TotalData600, CutOffDuration, ref status);


                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_RESIDENCECARD_VALUE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_RESIDENCECARD_VALUE.ToString(), residenceCardvalue, 0);

                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_RESIDENCECARD_DATESTART.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_RESIDENCECARD_DATESTART.ToString(), dateStart, 0);

                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_RESIDENCECARD_DATEEND.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_RESIDENCECARD_DATEEND.ToString(), dateEnd, 0);

                    listElementFormula.Add(item);
                }
                else
                {
                    var objResidenceCard = TotalData600.listResidenceCard.OrderByDescending(x => x.DateAllocated).FirstOrDefault(x => x.ProfileID == profileItem.ID);
                    if (objResidenceCard != null)
                    {
                        residenceCardvalue = 1;
                        dateStart = objResidenceCard.DateStart != null ? objResidenceCard.DateStart : null;
                        dateEnd = objResidenceCard.DateEnd != null ? objResidenceCard.DateEnd : null;
                    }
                    item = new ElementFormula(PayrollElement.HRE_RESIDENCECARD_VALUE.ToString(), residenceCardvalue, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.HRE_RESIDENCECARD_DATESTART.ToString(), dateStart, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.HRE_RESIDENCECARD_DATEEND.ToString(), dateEnd, 0);
                    listElementFormula.Add(item);

                }
            }

            #endregion



            #region Hien.Le [03/04/2020] 0113203: Thêm phần tử lương tính số giờ tăng ca của phòng ban theo chu kỳ công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLE_TOTALOVERTIMEORG.ToString()))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                string status3 = string.Empty;
                string status4 = string.Empty;
                double? totalOvertimeOrg = 0.0;
                string strOrderNumber = string.Empty;

                dataComputeSer.GetListProfileAll(TotalData600, TotalDataAll, ref status);
                dataComputeSer.ListWorkHistoryAllProfile(TotalData600, CutOffDuration, ref status2);
                dataComputeSer.GetListAttWorkDayTypeOfTransfer(TotalData600, CutOffDuration, ref status3);
                dataComputeSer.GetAttendanceTableAllProfile(TotalData600, CutOffDuration, ref status4);

                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status2) || !string.IsNullOrEmpty(status3) || !string.IsNullOrEmpty(status4))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_ATTENDANCETABLE_TOTALOVERTIMEORG.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_TOTALOVERTIMEORG.ToString(), totalOvertimeOrg, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    //Lấy dòng lịch sử của nhân viên đang tính lương
                    Hre_WorkHistoryEntity workHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m =>
                        m.ProfileID == profileItem.ID
                        && m.DateEffective <= CutOffDuration.DateEnd
                        && m.Status == EnumDropDown.Status.E_APPROVED.ToString()).
                        OrderByDescending(m => m.DateEffective).FirstOrDefault();

                    if (workHistoryByProfile != null)
                    {
                        //B1: Lấy dòng chức vụ có check tính thưởng chuyên cần
                        var objProfilePosition = TotalDataAll.listPosition.FirstOrDefault(p => p.ID == workHistoryByProfile.PositionID && p.IsDiligence == true);
                        if (objProfilePosition != null)
                        {
                            //B2: Từ phòng ban cha lấy được danh sách phòng ban con.
                            var listOrderNumber = Sal_CommonServices.GetChildOrgOrderNumber(TotalDataAll.listOrgStructure, workHistoryByProfile.OrganizationStructureID.Value, strOrderNumber);
                            if (!string.IsNullOrEmpty(listOrderNumber))
                            {
                                var lstOrderNumber = listOrderNumber.Split(",").Select(s => int.Parse(s)).ToList();
                                var lstProfileIDHistory = TotalData600.listProfileAllOrderNumber.Where(x => lstOrderNumber.Contains(x.OrderNumber)).Select(x => x.ID).ToList();
                                var lstEnumType = TotalDataAll.ListCat_NameEntity.Where(s => s.EnumType == EnumDropDown.TypeOfTransfer.E_STOP.ToString()).Select(s => s.ID).ToList();
                                //B3: Lấy ALL ProfileID thuộc List Phòng ban ở B2 
                                //B3.1: Lấy Hre_WorkHistory theo dk
                                var lstHreWorkhistoryTypeOfTransfer = TotalData600.listWorkHistoryAllProfile.Where(x => lstProfileIDHistory.Contains(x.ProfileID) && x.ProfileID != profileItem.ID).OrderByDescending(x => x.DateEffective)
                                .GroupBy(s => s.ProfileID)
                                .Select(s => s.FirstOrDefault())
                                .ToList();

                                if (lstHreWorkhistoryTypeOfTransfer.Count > 0)
                                {
                                    //B3.2: Loại bỏ các dòng điều chuyển là nghỉ việc
                                    var lstProfileIDTypeOfTransfer = lstHreWorkhistoryTypeOfTransfer.Where(x => (x.TypeOfTransferID != null && !lstEnumType.Contains(x.TypeOfTransferID.Value)) || x.TypeOfTransferID == null).Select(x => x.ProfileID).ToList();

                                    var listAttendanceTableAllProfile = TotalData600.listAttendanceTableAllProfile.Where(x => lstProfileIDTypeOfTransfer.Contains(x.ProfileID)).ToList();

                                    //B4: SUM tổng số giờ OT của tất cả nhân viên của B3
                                    totalOvertimeOrg = listAttendanceTableAllProfile.Sum(x => x.Overtime1Hours + x.Overtime2Hours + x.Overtime3Hours + x.Overtime4Hours + x.Overtime5Hours + x.Overtime6Hours + x.Overtime7Hours + x.Overtime8Hours + x.Overtime9Hours);
                                }
                            }
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_TOTALOVERTIMEORG.ToString(), totalOvertimeOrg, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Hien.Le [09/04/2020] 113204: Thêm phần tử lương tính số lần luân chuyển, đổi ca, đổi ngày làm việc của nhân viên trong phòng ban theo chu kỳ công
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLE_CHANGESHIFTTYPE.ToString()))
            {
                string status = string.Empty;
                string status2 = string.Empty;
                string status3 = string.Empty;
                string status4 = string.Empty;
                double? changeShiftType = 0.0;
                string strOrderNumber = string.Empty;

                dataComputeSer.GetListProfileAll(TotalData600, TotalDataAll, ref status);
                dataComputeSer.ListWorkHistoryAllProfile(TotalData600, CutOffDuration, ref status2);
                dataComputeSer.GetListAttWorkDayTypeOfTransfer(TotalData600, CutOffDuration, ref status3);
                dataComputeSer.GetAttendanceTableAllProfile(TotalData600, CutOffDuration, ref status4);

                if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(status2) || !string.IsNullOrEmpty(status3) || !string.IsNullOrEmpty(status4))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_ATTENDANCETABLE_CHANGESHIFTTYPE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_CHANGESHIFTTYPE.ToString(), changeShiftType, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    string nameTableGetData = "listAttendanceTableAllProfileFor";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        foreach (var objProfileItem in TotalData600.listProfileSplit)
                        {
                            //Lấy dòng lịch sử của nhân viên đang tính lương
                            Hre_WorkHistoryEntity workHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(objProfileItem.ID)
                                .Where(m => m.ProfileID == objProfileItem.ID
                                                && m.DateEffective <= CutOffDuration.DateEnd
                                                && m.Status == EnumDropDown.Status.E_APPROVED.ToString())
                                .OrderByDescending(m => m.DateEffective).FirstOrDefault();

                            if (workHistoryByProfile != null)
                            {
                                //B1: Lấy dòng chức vụ có check tính thưởng chuyên cần
                                var objProfilePosition = TotalDataAll.listPosition.FirstOrDefault(p => p.ID == workHistoryByProfile.PositionID && p.IsDiligence == true);
                                if (objProfilePosition != null)
                                {
                                    //B2: Từ phòng ban cha lấy được danh sách phòng ban con.
                                    var listOrderNumber = Sal_CommonServices.GetChildOrgOrderNumber(TotalDataAll.listOrgStructure, workHistoryByProfile.OrganizationStructureID.Value, strOrderNumber);
                                    if (!string.IsNullOrEmpty(listOrderNumber))
                                    {
                                        var lstOrderNumber = listOrderNumber.Split(",").Select(s => int.Parse(s)).ToList();

                                        var lstProfileIDHistory = TotalData600.listProfileAllOrderNumber
                                            .Where(x => lstOrderNumber.Contains(x.OrderNumber)).Select(x => x.ID).ToList();

                                        var lstEnumTypeID = TotalDataAll.ListCat_NameEntity
                                            .Where(s => s.EnumType == EnumDropDown.TypeOfTransfer.E_STOP.ToString()).Select(s => s.ID).ToList();

                                        //B3: Lấy ALL ProfileID thuộc List Phòng ban ở B2 
                                        //B3.1: Lấy Hre_WorkHistory theo dk
                                        var lstHreWorkhistoryTypeOfTransfer = TotalData600.listWorkHistoryAllProfile
                                            .Where(x => lstProfileIDHistory.Contains(x.ProfileID) && x.ProfileID != profileItem.ID).OrderByDescending(x => x.DateEffective)
                                            .GroupBy(s => s.ProfileID)
                                            .Select(s => s.FirstOrDefault())
                                            .ToList();

                                        if (lstHreWorkhistoryTypeOfTransfer.Count > 0)
                                        {
                                            //B3.2: Loại bỏ các dòng điều chuyển là nghỉ việc
                                            var lstProfileIDTypeOfTransfer = lstHreWorkhistoryTypeOfTransfer
                                                .Where(x => (x.TypeOfTransferID != null && !lstEnumTypeID.Contains(x.TypeOfTransferID.Value)) || x.TypeOfTransferID == null)
                                                .Select(x => x.ProfileID).ToList();

                                            //Lấy danh sách ID của AttendanceTable
                                            var listAttendanceTableAllProfile = TotalData600.listAttendanceTableAllProfile
                                                .Where(x => lstProfileIDTypeOfTransfer.Contains(x.ProfileID)).Select(p => p.ID).ToList();

                                            //Lưu vết nhân viên và danh sách bảng công master
                                            TotalData600.dicAttAttendanceTableMasterByProfileID.Add(objProfileItem.ID, listAttendanceTableAllProfile);
                                        }
                                    }
                                }
                            }
                        }
                        //Get all values dictionary
                        var listAttendanceTableID = TotalData600.dicAttAttendanceTableMasterByProfileID.SelectMany(d => d.Value).Distinct().ToList();
                        //Lấy bảng lương chi tiết
                        dataComputeSer.GetAttendanceTableItemAllByAttendanceTableID(TotalData600, listAttendanceTableID, CutOffDuration, ref status);
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }
                    var listAttAttendanceTable = TotalData600.dicAttAttendanceTableMasterByProfileID.GetValueOrNew(profileItem.ID);
                    //B4: Đếm tổng số lần đổi ca của ALL NV của B3
                    changeShiftType = TotalData600.listAttendanceTableItemByAttendanceTableID.Where(p => listAttAttendanceTable.Contains(p.AttendanceTableID) && p.ChangeShiftType != null).Count();
                    item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_CHANGESHIFTTYPE.ToString(), changeShiftType, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Hien.Le [01/06/2020] 0115511: Enum động - Tổng ngày nghỉ theo loại (Ngày xác nhận tạm ứng = Số ngày chốt tạm ứng) (Tính tạm ứng) 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATTI_SUM_ACTUALWORKINGHOURS_DAYKEEP_BYUNUSUALPAY.ToString(), ""))
            {
                double sumActualWorkingHours = 0;

                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();

                if (objAllSettingDayKeepUnusualPay != null)
                {
                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);

                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                s.CutOffDurationID == CutOffDuration.ID
                                                //BA chốt logic mới
                                                && s.WorkDate >= CutOffDuration.DateStart
                                                && s.WorkDate <= monthYearKeepUnusualPay)
                                                .OrderBy(x => x.WorkDate)
                                                .ToList();

                        sumActualWorkingHours = listAttendanceTableItem
                                                .Where(x => x.AvailableHours != 0)
                                                .Sum(a => a.WorkHours / a.AvailableHours);
                    }
                }

                item = new ElementFormula(PayrollElement.ATTI_SUM_ACTUALWORKINGHOURS_DAYKEEP_BYUNUSUALPAY.ToString(), sumActualWorkingHours, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region Hien.Le [01/06/2020] 0115511: Tổng ngày nghỉ thứ 7 từ đầu kỳ đến ngày chốt tạm ứng (Ngày xác nhận tạm ứng = Số ngày chốt tạm ứng) (Tính tạm ứng)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATTI_COUNT_SATURDAYTIMEOFF_DAYKEEP_BYUNUSUALPAY.ToString(), ""))
            {
                int countResult = 0;

                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                           s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();
                if (objAllSettingDayKeepUnusualPay != null)
                {


                    var listRosterProfileDic = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);
                    var listRosterByProfile = listRosterProfileDic.Where(m => m.DateStart <= CutOffDuration.DateEnd &&
                                                                           m.DateEnd >= CutOffDuration.DateStart &&
                                                                           m.Status == RosterStatus.E_APPROVED.ToString()).ToList();
                    //rostergroup thang N
                    var listRosterGroup = TotalDataAll.ListRosterGroup.Where(s =>
                                                        s.Status == RosterStatus.E_APPROVED.ToString()
                                                        && s.DateStart <= CutOffDuration.DateEnd
                                                        && s.DateEnd >= CutOffDuration.DateStart).ToList();

                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);

                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                      s.CutOffDurationID == CutOffDuration.ID
                                                      //BA chốt logic mới
                                                      && s.WorkDate >= CutOffDuration.DateStart
                                                      && s.WorkDate <= monthYearKeepUnusualPay)
                                                      .OrderBy(x => x.WorkDate)
                                                      .ToList();

                        // Lấy ca loại nghỉ bù của nhân viên
                        var rosterTypeByTimeOff = listRosterByProfile.Where(x => x.Type == RosterType.E_TIME_OFF.ToString()).ToList();

                        // Nếu nhân viên có ca nghỉ bù thì mới xử lý tiếp
                        if (rosterTypeByTimeOff != null)
                        {
                            // Đếm từ bắt đầu kỳ công đến hết số ngày chốt tạm ứng
                            // => Lấy những ngày nào là thứ 7 + có ca là E_TIME_OFF
                            countResult = listAttendanceTableItem.Where(x =>
                            {
                                if (x.WorkDate.DayOfWeek == DayOfWeek.Saturday)
                                {
                                    if (rosterTypeByTimeOff.Where(a => a.DateStart.Date <= x.WorkDate.Date && (a.DateEnd == null || (a.DateEnd.Value.Date >= x.WorkDate.Date))).Count() > 0)
                                    {
                                        return true;
                                    }
                                }
                                return false;
                            }).Count();
                        }
                    }
                }

                item = new ElementFormula(PayrollElement.ATTI_COUNT_SATURDAYTIMEOFF_DAYKEEP_BYUNUSUALPAY.ToString(), countResult, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region Hien.Le [01/06/2020] 0115511 Enum động - Tổng ngày nghỉ theo loại (Ngày xác nhận tạm ứng = Số ngày chốt tạm ứng) (Tính tạm ứng)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN38_ATTI_SUMLEAVEHOURS_DAYKEEP_UNUSUALPAY_.ToString(), "_BYUNUSUALPAY"))
            {
                List<string> listFormula = formula.Where(m => m.StartsWith(PayrollElement.DYN38_ATTI_SUMLEAVEHOURS_DAYKEEP_UNUSUALPAY_.ToString()) && m.EndsWith("_BYUNUSUALPAY")).Distinct().ToList();

                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                          s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();

                if (objAllSettingDayKeepUnusualPay == null)
                {
                    foreach (var itemFormula in listFormula)
                    {
                        item = new ElementFormula(itemFormula, 0, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
                else
                {
                    foreach (var itemFormula in listFormula)
                    {
                        double sumDayLeaveHours = 0;
                        int dayKeepUnusualPay = 0;

                        if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                        {
                            DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);

                            var listAttendanceTableItemByUnusualPay = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                              s.AvailableHours != 0
                                                              && s.CutOffDurationID == CutOffDuration.ID
                                                              //BA chốt logic mới
                                                              && s.WorkDate >= CutOffDuration.DateStart
                                                              && s.WorkDate <= monthYearKeepUnusualPay)
                                                             .OrderBy(x => x.WorkDate)
                                                             .ToList();

                            var codeLeaveDayType = itemFormula.Replace(PayrollElement.DYN38_ATTI_SUMLEAVEHOURS_DAYKEEP_UNUSUALPAY_.ToString(), "").Replace("_BYUNUSUALPAY", "");

                            var objLeaveDayType = TotalDataAll.listLeavedayType.Where(s => s.Code == codeLeaveDayType).FirstOrDefault();

                            if (objLeaveDayType != null)
                            {
                                foreach (var objAttendanceTableItem in listAttendanceTableItemByUnusualPay)
                                {
                                    if (objAttendanceTableItem.LeaveTypeID == objLeaveDayType.ID && objAttendanceTableItem.LeaveHours > 0)
                                    {
                                        sumDayLeaveHours += (objAttendanceTableItem.LeaveHours / objAttendanceTableItem.AvailableHours);
                                    }
                                    if (objAttendanceTableItem.ExtraLeaveTypeID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours > 0)
                                    {
                                        sumDayLeaveHours += (objAttendanceTableItem.ExtraLeaveHours / objAttendanceTableItem.AvailableHours);
                                    }
                                    if (objAttendanceTableItem.ExtraLeaveType3ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours3 > 0)
                                    {
                                        sumDayLeaveHours += (objAttendanceTableItem.ExtraLeaveHours3.Value / objAttendanceTableItem.AvailableHours);
                                    }
                                    if (objAttendanceTableItem.ExtraLeaveType4ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours4 > 0)
                                    {
                                        sumDayLeaveHours += (objAttendanceTableItem.ExtraLeaveHours4.Value / objAttendanceTableItem.AvailableHours);
                                    }
                                    if (objAttendanceTableItem.ExtraLeaveType5ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours5 > 0)
                                    {
                                        sumDayLeaveHours += (objAttendanceTableItem.ExtraLeaveHours5.Value / objAttendanceTableItem.AvailableHours);
                                    }
                                    if (objAttendanceTableItem.ExtraLeaveType6ID == objLeaveDayType.ID && objAttendanceTableItem.ExtraLeaveHours6 > 0)
                                    {
                                        sumDayLeaveHours += (objAttendanceTableItem.ExtraLeaveHours6.Value / objAttendanceTableItem.AvailableHours);
                                    }
                                }
                            }
                        }

                        item = new ElementFormula(itemFormula, sumDayLeaveHours, 0);
                        listElementFormula.Add(item);
                        formula.Remove(itemFormula);
                    }
                }
            }
            #endregion

            #region Hien.Le [01/06/2020] 0115511 Số ngày lễ tết (Ngày xác nhận tạm ứng = Số ngày chốt tạm ứng) (Tính tạm ứng)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATTI_COUNT_HOLIDAY_DAYKEEP_BYUNUSUALPAY.ToString(), ""))
            {
                int countHoliday = 0;

                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();

                if (objAllSettingDayKeepUnusualPay != null)
                {
                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);

                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                s.CutOffDurationID == CutOffDuration.ID
                                                //BA chốt logic mới
                                                && s.WorkDate >= CutOffDuration.DateStart
                                                && s.WorkDate <= monthYearKeepUnusualPay)
                                                .OrderBy(x => x.WorkDate)
                                                .ToList();

                        string[] arrayHoliDayType = { EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString(), EnumDropDown.DayOffType.E_HOLIDAY.ToString() };

                        countHoliday = listAttendanceTableItem.Where(x => TotalDataAll.listDayOff.FirstOrDefault(a => arrayHoliDayType.Contains(a.Type) && a.DateOff.Date == x.WorkDate) != null).Count();
                    }
                }

                item = new ElementFormula(PayrollElement.ATTI_COUNT_HOLIDAY_DAYKEEP_BYUNUSUALPAY.ToString(), countHoliday, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region Hien.Le [08/01/2021] 123092: [Spindex] Lấy phần tử lương cơ bản,Tổng số giờ tăng ca trước/ sau trong kỳ tăng ca
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.SAL_BS_CHANGE_SALARY_ATT_OT.ToString(),
                PayrollElement.SAL_BS_GROSSAMOUNT_BEFORE_ATT_OT.ToString(),
                PayrollElement.SAL_BS_GROSSAMOUNT_AFTER_ATT_OT.ToString()
            }))
            {
                if (CutOffDuration.OvertimeStart != null && CutOffDuration.OvertimeStart != null)
                {
                    //Lương cơ bản theo kỳ lương
                    var listbasicSalaryProfile = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID)
                           .Where(p => p.ProfileID == profileItem.ID
                       && p.DateOfEffect <= CutOffDuration.OvertimeEnd
                       && p.Status == EnumDropDown.Status.E_APPROVED.ToString()).OrderByDescending(p => p.DateOfEffect).ToList();
                    //Có thay đổi lương hay không 
                    if (!CheckIsChangeBasicSalary(listbasicSalaryProfile, CutOffDuration.OvertimeStart.Value, CutOffDuration.OvertimeEnd.Value, profileItem.ID))
                    {
                        //(Không thay đổi -> 1 mức lương)
                        item = new ElementFormula(PayrollElement.SAL_BS_CHANGE_SALARY_ATT_OT.ToString(), 0, 0, string.Empty);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_BS_GROSSAMOUNT_BEFORE_ATT_OT.ToString(), 0, 0, string.Empty);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_BS_GROSSAMOUNT_AFTER_ATT_OT.ToString(), 0, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        //Có thay đổi lương (Có 2 mức lương tháng)
                        item = new ElementFormula(PayrollElement.SAL_BS_CHANGE_SALARY_ATT_OT.ToString(), 1, 0, string.Empty);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.SAL_BS_GROSSAMOUNT_AFTER_ATT_OT.ToString(), listbasicSalaryProfile.FirstOrDefault()?.GrossAmount.ToDouble() ?? 0, 0, string.Empty);
                        listElementFormula.Add(item);
                        if (listbasicSalaryProfile.Count > 1)
                        {
                            //Dòng lương cơ bản thay đổi trong tháng mới nhất (Mục đích để lấy ra ngày hiệu lực)
                            var objBasicSalaryChangeLastByCutOff = listbasicSalaryProfile.OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                            double? grossAmount = 0;
                            if (objBasicSalaryChangeLastByCutOff != null)
                            {
                                var objBasicSalaryBefore = listbasicSalaryProfile.FirstOrDefault(p => p.ProfileID == profileItem.ID && p.DateOfEffect < objBasicSalaryChangeLastByCutOff.DateOfEffect);
                                if (objBasicSalaryBefore != null)
                                {
                                    if (!string.IsNullOrEmpty(objBasicSalaryBefore.GrossAmount))
                                    {
                                        grossAmount = objBasicSalaryBefore.GrossAmount.ToDouble();
                                    }
                                }
                            }
                            item = new ElementFormula(PayrollElement.SAL_BS_GROSSAMOUNT_BEFORE_ATT_OT.ToString(), grossAmount, 0, string.Empty);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.SAL_BS_GROSSAMOUNT_BEFORE_ATT_OT.ToString(), 0, 0, string.Empty);
                            listElementFormula.Add(item);
                        }
                    }
                }
                //Nếu kỳ tăng ca NULL gán tất cả enum = 0
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_BS_CHANGE_SALARY_ATT_OT.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_GROSSAMOUNT_BEFORE_ATT_OT.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_GROSSAMOUNT_AFTER_ATT_OT.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [Nghia.Dang][128738][06/05/2021][AVN] Số ngày đi công tác theo loại (Tính tạm ứng)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_BUSSINESSTRAVELHOURS_BYUNUSUALPAY_.ToString(), ""))
            {
                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();
                var strStartsWith = PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_BUSSINESSTRAVELHOURS_BYUNUSUALPAY_.ToString();
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith)).Distinct().ToList();
                int dayKeepUnusualPay = 0;
                if (objAllSettingDayKeepUnusualPay != null && int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                {
                    DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);

                    var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                            s.CutOffDurationID == CutOffDuration.ID
                                            //BA chốt logic mới
                                            && s.WorkDate >= CutOffDuration.DateStart
                                            && s.WorkDate <= monthYearKeepUnusualPay)
                                            .OrderBy(x => x.WorkDate)
                                            .ToList();
                    foreach (var formulaitem in ListFormula)
                    {
                        double sumBussinessTravelHours = 0;
                        var codeType = formulaitem.Replace(strStartsWith, "").Replace(" ", "");
                        if (!string.IsNullOrEmpty(codeType))
                        {
                            var objBusinessTravel = TotalDataAll.listBusinessTravel.FirstOrDefault(x => x.BusinessTravelCode == codeType);
                            foreach (var objAttendanceTableItem in listAttendanceTableItem)
                            {
                                if (objBusinessTravel != null && (objAttendanceTableItem.BusinessTravelTypeID1 != null && objAttendanceTableItem.BusinessTravelDay1 != null && objAttendanceTableItem.BusinessTravelTypeID1 == objBusinessTravel.ID))
                                {
                                    sumBussinessTravelHours += objAttendanceTableItem.BusinessTravelDay1.Value;
                                }
                                if (objBusinessTravel != null && (objAttendanceTableItem.BusinessTravelTypeID2 != null && objAttendanceTableItem.BusinessTravelDay2 != null && objAttendanceTableItem.BusinessTravelTypeID2 == objBusinessTravel.ID))
                                {
                                    sumBussinessTravelHours += objAttendanceTableItem.BusinessTravelDay2.Value;
                                }
                            }
                        }
                        item = new ElementFormula(formulaitem, sumBussinessTravelHours, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {

                        item = new ElementFormula(formulaitem, 0, 0, string.Empty);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region Nghia.Dang [05/06/2021] 128378: Enum động - Số giờ đi trễ (Tính tạm ứng) 
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATTI_SUM_LATEINMINUTE_DAYKEEP_BYUNUSUALPAY.ToString(),
                PayrollElement.ATTI_SUM_EARLYOUTMINUTE_DAYKEEP_BYUNUSUALPAY.ToString(),
                PayrollElement.ATTI_COUNT_WORKPAIDHOUR_DAYKEEP_BYUNUSUALPAY.ToString(),
                PayrollElement.ATTI_SUM_NIGHTSHIFTHOUR_DAYKEEP_BYUNUSUALPAY.ToString(),
            }))
            {
                int sumLateHours = 0;
                int sumEarlyHours = 0;
                double sumnNightShiftHours = 0;
                int countWorkPaidHours = 0;
                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();

                if (objAllSettingDayKeepUnusualPay != null)
                {

                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);

                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                s.CutOffDurationID == CutOffDuration.ID
                                                //BA chốt logic mới
                                                && s.WorkDate >= CutOffDuration.DateStart
                                                && s.WorkDate <= monthYearKeepUnusualPay)
                                                .OrderBy(x => x.WorkDate)
                                                .ToList();
                        sumLateHours = listAttendanceTableItem.Where(x => x.LateInMinutes != 0).Sum(a => a.LateInMinutes);
                        sumEarlyHours = listAttendanceTableItem.Where(x => x.EarlyOutMinutes != 0).Sum(a => a.EarlyOutMinutes);
                        countWorkPaidHours = listAttendanceTableItem.Where(x => x.WorkPaidHours != 0).Count();
                        sumnNightShiftHours = listAttendanceTableItem.Where(x => x.NightShiftHours != 0 && x.AvailableHours != 0).Sum(x => (x.NightShiftHours / x.AvailableHours));
                    }
                }
                item = new ElementFormula(PayrollElement.ATTI_SUM_LATEINMINUTE_DAYKEEP_BYUNUSUALPAY.ToString(), sumLateHours, 0, string.Empty);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATTI_SUM_EARLYOUTMINUTE_DAYKEEP_BYUNUSUALPAY.ToString(), sumEarlyHours, 0, string.Empty);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATTI_COUNT_WORKPAIDHOUR_DAYKEEP_BYUNUSUALPAY.ToString(), countWorkPaidHours, 0, string.Empty);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATTI_SUM_NIGHTSHIFTHOUR_DAYKEEP_BYUNUSUALPAY.ToString(), sumnNightShiftHours, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion
            #region MinhNguyenVan [29/06/2021] 128378: Enum động - Số giờ đi trễ chuyên cần 
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATTI_SUM_LATEINMINUTE_DILIGENCE_BYUNUSUALPAY.ToString(),
                PayrollElement.ATTI_SUM_EARLYOUTMINUTE_DILIGENCE_BYUNUSUALPAY.ToString(),
            }))
            {
                double? sumLateHours2 = 0;
                double? sumEarlyHours2 = 0;

                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();

                if (objAllSettingDayKeepUnusualPay != null)
                {

                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);

                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                s.CutOffDurationID == CutOffDuration.ID
                                                && s.WorkDate >= CutOffDuration.DateStart
                                                && s.WorkDate <= monthYearKeepUnusualPay)
                                                .OrderBy(x => x.WorkDate)
                                                .ToList();
                        sumLateHours2 = listAttendanceTableItem.Where(x => x.LateInMinutes2 != 0).Sum(a => a.LateInMinutes2);
                        sumEarlyHours2 = listAttendanceTableItem.Where(x => x.EarlyOutMinutes2 != 0).Sum(a => a.EarlyOutMinutes2);

                    }
                }
                item = new ElementFormula(PayrollElement.ATTI_SUM_LATEINMINUTE_DILIGENCE_BYUNUSUALPAY.ToString(), sumLateHours2, 0, string.Empty);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.ATTI_SUM_EARLYOUTMINUTE_DILIGENCE_BYUNUSUALPAY.ToString(), sumEarlyHours2, 0, string.Empty);
                listElementFormula.Add(item);

            }
            #endregion
            #region Nghia.Dang [05/06/2021] 128930: SỐ NGÀY CÔNG TRƯỚC KHI LÊN CHÍNH THỨC (Tính tạm ứng) 
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATTI_SUM_WORKPAIDHOUR_DAYKEEP_DATEENDPROBATION_BYUNUSUALPAY.ToString() }))
            {
                double sumWorkPaidHours = 0;
                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();
                if (objAllSettingDayKeepUnusualPay != null)
                {
                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);
                        if (profileItem.DateEndProbation != null && monthYearKeepUnusualPay > profileItem.DateEndProbation.Value)
                        {
                            monthYearKeepUnusualPay = profileItem.DateEndProbation.Value;
                        }
                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                s.CutOffDurationID == CutOffDuration.ID
                                                //BA chốt logic mới
                                                && s.WorkDate >= CutOffDuration.DateStart
                                                && s.WorkDate <= monthYearKeepUnusualPay)
                                                .OrderBy(x => x.WorkDate)
                                                .ToList();
                        sumWorkPaidHours = listAttendanceTableItem.Where(x => x.WorkPaidHours != 0 && x.AvailableHours != 0).Sum(a => a.WorkPaidHours / a.AvailableHours);
                    }
                }
                item = new ElementFormula(PayrollElement.ATTI_SUM_WORKPAIDHOUR_DAYKEEP_DATEENDPROBATION_BYUNUSUALPAY.ToString(), sumWorkPaidHours, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion
            #region Nghia.Dang [05/06/2021] 128930: SỐ NGÀY NGHỈ TRƯỚC KHI LÊN CHÍNH THỨC (Tính tạm ứng) 
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATTI_SUM_WORKPAIDHOUR_DAYLEAVE_DATEENDPROBATION_BYUNUSUALPAY.ToString() }))
            {
                double sumWorkPaidHours = 0;
                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();
                if (objAllSettingDayKeepUnusualPay != null)
                {
                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);
                        if (profileItem.DateEndProbation != null && monthYearKeepUnusualPay > profileItem.DateEndProbation.Value)
                        {
                            monthYearKeepUnusualPay = profileItem.DateEndProbation.Value;
                        }
                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                s.CutOffDurationID == CutOffDuration.ID
                                                //BA chốt logic mới
                                                && s.WorkDate >= CutOffDuration.DateStart
                                                && s.WorkDate <= monthYearKeepUnusualPay)
                                                .OrderBy(x => x.WorkDate)
                                                .ToList();
                        foreach (var objAttendance in listAttendanceTableItem)
                        {
                            if (objAttendance.LeaveHours != 0 && objAttendance.StdWorkHours != null && objAttendance.StdWorkHours != 0)
                            {
                                sumWorkPaidHours += objAttendance.LeaveHours / objAttendance.StdWorkHours.Value;
                            }
                            if (objAttendance.ExtraLeaveHours != 0 && objAttendance.StdWorkHours != null && objAttendance.StdWorkHours != 0)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours / objAttendance.StdWorkHours.Value;
                            }
                            if (objAttendance.ExtraLeaveHours3 != null && objAttendance.ExtraLeaveHours3 != 0 && objAttendance.StdWorkHours != null && objAttendance.StdWorkHours != 0)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours3.Value / objAttendance.StdWorkHours.Value;
                            }
                            if (objAttendance.ExtraLeaveHours4 != null && objAttendance.ExtraLeaveHours4 != 0 && objAttendance.StdWorkHours != null && objAttendance.StdWorkHours != 0)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours4.Value / objAttendance.StdWorkHours.Value;
                            }
                            if (objAttendance.ExtraLeaveHours5 != null && objAttendance.ExtraLeaveHours5 != 0 && objAttendance.StdWorkHours != null && objAttendance.StdWorkHours != 0)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours5.Value / objAttendance.StdWorkHours.Value;
                            }
                            if (objAttendance.ExtraLeaveHours6 != null && objAttendance.ExtraLeaveHours6 != 0 && objAttendance.StdWorkHours != null && objAttendance.StdWorkHours != 0)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours6.Value / objAttendance.StdWorkHours.Value;
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATTI_SUM_WORKPAIDHOUR_DAYLEAVE_DATEENDPROBATION_BYUNUSUALPAY.ToString(), sumWorkPaidHours, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region Tung.Tran [14/02/2022][0139094]: Enum đặc thù cho dự án AVN
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.AVN_ATTI_SUM_BYUNUSUALPAY.ToString() }))
            {
                double sumWorkPaidHours = 0;
                double sumBussinessTravelHours = 0;
                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();
                if (objAllSettingDayKeepUnusualPay != null)
                {
                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);
                        var listCat_LeavedayType = TotalDataAll.listLeavedayType.Where(x => x.PaidRate > 0).Select(x => x.ID).ToList();
                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                //BA chốt logic mới
                                                s.WorkDate >= CutOffDuration.DateStart
                                                && s.WorkDate <= monthYearKeepUnusualPay)
                                                .OrderBy(x => x.WorkDate)
                                                .ToList();

                        #region Logic enum ATTI_SUM_TOTAL_LEAVE_PAIDDAY_BYUNUSUALPAY
                        foreach (var objAttendance in listAttendanceTableItem)
                        {
                            if (objAttendance.AvailableHours != 0)
                            {
                                sumWorkPaidHours += objAttendance.WorkPaidHours / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.LeaveTypeID != null && objAttendance.PaidRate > 0)
                            {
                                sumWorkPaidHours += objAttendance.LeaveHours / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveTypeID != null && objAttendance.PaidRateEx1 > 0)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType3ID != null && objAttendance.PaidRateEx3 > 0 && objAttendance.ExtraLeaveHours3 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours3.Value / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType4ID != null && objAttendance.PaidRateEx4 > 0 && objAttendance.ExtraLeaveHours4 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours4.Value / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType5ID != null && objAttendance.PaidRateEx5 > 0 && objAttendance.ExtraLeaveHours5 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours5.Value / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType6ID != null && objAttendance.PaidRateEx6 > 0 && objAttendance.ExtraLeaveHours6 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours6.Value / objAttendance.AvailableHours;
                            }
                        }

                        #endregion

                        #region Logic enum ATT_ATTENDANCETABLEITEM_SUM_BUSSINESSTRAVELHOURS_BYUNUSUALPAY_
                        foreach (var objBusinessTravel in TotalDataAll.listBusinessTravel)
                        {
                            foreach (var objAttendanceTableItem in listAttendanceTableItem)
                            {
                                if (objBusinessTravel != null && (objAttendanceTableItem.BusinessTravelTypeID1 != null && objAttendanceTableItem.BusinessTravelDay1 != null && objAttendanceTableItem.BusinessTravelTypeID1 == objBusinessTravel.ID))
                                {
                                    sumBussinessTravelHours += objAttendanceTableItem.BusinessTravelDay1.Value;
                                }
                                if (objBusinessTravel != null && (objAttendanceTableItem.BusinessTravelTypeID2 != null && objAttendanceTableItem.BusinessTravelDay2 != null && objAttendanceTableItem.BusinessTravelTypeID2 == objBusinessTravel.ID))
                                {
                                    sumBussinessTravelHours += objAttendanceTableItem.BusinessTravelDay2.Value;
                                }
                            }
                        }
                        #endregion
                    }
                }
                item = new ElementFormula(PayrollElement.AVN_ATTI_SUM_BYUNUSUALPAY.ToString(), sumWorkPaidHours + sumBussinessTravelHours, 0, string.Empty);
                listElementFormula.Add(item);
            }

            #endregion

            #region Nghia.Dang [15/07/2021] 130334: Tổng số ngày công hưởng lương (Tính tạm ứng):
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATTI_SUM_TOTAL_LEAVE_PAIDDAY_BYUNUSUALPAY.ToString() }))
            {
                double sumWorkPaidHours = 0;
                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();
                if (objAllSettingDayKeepUnusualPay != null)
                {
                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);
                        var listCat_LeavedayType = TotalDataAll.listLeavedayType.Where(x => x.PaidRate > 0).Select(x => x.ID).ToList();
                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                //BA chốt logic mới
                                                s.WorkDate >= CutOffDuration.DateStart
                                                && s.WorkDate <= monthYearKeepUnusualPay)
                                                .OrderBy(x => x.WorkDate)
                                                .ToList();
                        foreach (var objAttendance in listAttendanceTableItem)
                        {
                            if (objAttendance.AvailableHours != 0)
                            {
                                sumWorkPaidHours += objAttendance.WorkPaidHours / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.LeaveTypeID != null && objAttendance.PaidRate > 0)
                            {
                                sumWorkPaidHours += objAttendance.LeaveHours / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveTypeID != null && objAttendance.PaidRateEx1 > 0)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType3ID != null && objAttendance.PaidRateEx3 > 0 && objAttendance.ExtraLeaveHours3 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours3.Value / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType4ID != null && objAttendance.PaidRateEx4 > 0 && objAttendance.ExtraLeaveHours4 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours4.Value / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType5ID != null && objAttendance.PaidRateEx5 > 0 && objAttendance.ExtraLeaveHours5 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours5.Value / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType6ID != null && objAttendance.PaidRateEx6 > 0 && objAttendance.ExtraLeaveHours6 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours6.Value / objAttendance.AvailableHours;
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATTI_SUM_TOTAL_LEAVE_PAIDDAY_BYUNUSUALPAY.ToString(), sumWorkPaidHours, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region Nghia.Dang [15/07/2021] 130334: Tổng số ngày công hưởng lương (Tính tạm ứng):
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATTI_SUM_TOTAL_LEAVE_UNPAIDDAY_BYUNUSUALPAY.ToString() }))
            {
                double sumWorkPaidHours = 0;
                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();
                if (objAllSettingDayKeepUnusualPay != null)
                {
                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);
                        var listCat_LeavedayType = TotalDataAll.listLeavedayType.Where(x => x.PaidRate > 0).Select(x => x.ID).ToList();
                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                s.WorkDate >= CutOffDuration.DateStart
                                                && s.WorkDate <= monthYearKeepUnusualPay)
                                                .OrderBy(x => x.WorkDate)
                                                .ToList();
                        foreach (var objAttendance in listAttendanceTableItem)
                        {
                            if (objAttendance.AvailableHours != 0 && objAttendance.LeaveTypeID != null && objAttendance.PaidRate == 0)
                            {
                                sumWorkPaidHours += objAttendance.LeaveHours / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveTypeID != null && objAttendance.PaidRateEx1 == 0)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType3ID != null && objAttendance.PaidRateEx3 == 0 && objAttendance.ExtraLeaveHours3 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours3.Value / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType4ID != null && objAttendance.PaidRateEx4 == 0 && objAttendance.ExtraLeaveHours4 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours4.Value / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType5ID != null && objAttendance.PaidRateEx5 == 0 && objAttendance.ExtraLeaveHours5 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours5.Value / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType6ID != null && objAttendance.PaidRateEx6 == 0 && objAttendance.ExtraLeaveHours6 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours6.Value / objAttendance.AvailableHours;
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATTI_SUM_TOTAL_LEAVE_UNPAIDDAY_BYUNUSUALPAY.ToString(), sumWorkPaidHours, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region Khoa.nguyen [05/06/2021] 128929 Enum Tổng ngày nghỉ trong kỳ chốt công ứng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATTI_SUM_LEVAVEDAYHOURS_STDWORKHOURS_BYUNUSUALPAY.ToString(), ""))
            {
                double? resultSum = 0;

                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();

                if (objAllSettingDayKeepUnusualPay != null)
                {
                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);

                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                s.CutOffDurationID == CutOffDuration.ID
                                                //BA chốt logic mới
                                                && s.WorkDate >= CutOffDuration.DateStart
                                                && s.WorkDate <= monthYearKeepUnusualPay)
                                                .OrderBy(x => x.WorkDate)
                                                .ToList();
                        foreach (var itemTable in listAttendanceTableItem)
                        {

                            double? sumHours = itemTable.LeaveHours + itemTable.ExtraLeaveHours;

                            if (itemTable.ExtraLeaveHours3 != null)
                            {
                                sumHours += itemTable.ExtraLeaveHours3;
                            }
                            if (itemTable.ExtraLeaveHours4 != null)
                            {
                                sumHours += itemTable.ExtraLeaveHours4;
                            }
                            if (itemTable.ExtraLeaveHours5 != null)
                            {
                                sumHours += itemTable.ExtraLeaveHours5;
                            }
                            if (itemTable.ExtraLeaveHours6 != null)
                            {
                                sumHours += itemTable.ExtraLeaveHours6;
                            }
                            resultSum += (sumHours / itemTable.StdWorkHours ?? 0);
                        }

                    }
                }

                item = new ElementFormula(PayrollElement.ATTI_SUM_LEVAVEDAYHOURS_STDWORKHOURS_BYUNUSUALPAY.ToString(), resultSum, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region Khoa.nguyen  [05/06/2021] 128929 Số ngày tăng ca đăng ký trong kế hoạch tăng ca
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_OVERTIMEPLAN_SUM_APPVOVEDHOURS_STDWORKHOURS.ToString()))
            {

                string status = string.Empty;
                double? resultSum = 0;
                Guid guidCheck = Guid.Empty;

                dataComputeSer.GetAttOverTimePLan(TotalData600, CutOffDuration, ref status);


                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_OVERTIMEPLAN_SUM_APPVOVEDHOURS_STDWORKHOURS.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_OVERTIMEPLAN_SUM_APPVOVEDHOURS_STDWORKHOURS.ToString(), resultSum, 0);
                    listElementFormula.Add(item);
                }
                else
                {

                    var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                                s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();
                    if (objAllSettingDayKeepUnusualPay != null)
                    {
                        int dayKeepUnusualPay = 0;
                        if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                        {
                            DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);
                            var listOvertimePlan = TotalData600.dicAttOverTimePLan.GetValueOrNew(profileItem.ID)
                            .Where(x => x.WorkDate.Date >= CutOffDuration.DateStart
                             && x.WorkDate.Date <= monthYearKeepUnusualPay
                             && x.Status == "E_APPROVED").OrderBy(x => x.WorkDate).ToList();

                            foreach (var itemOverTime in listOvertimePlan)
                            {
                                resultSum += itemOverTime.ApproveHours ?? 0;
                            }

                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_OVERTIMEPLAN_SUM_APPVOVEDHOURS_STDWORKHOURS.ToString(), resultSum, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Nghia.Dang  [12/07/2021] [127643] Thêm phần tử lương hệ số xếp loại công 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_ATTENDANCETABLE_EVALUATIONRESULT.ToString()))
            {
                double EvaluationResult = 0;
                var objAttendanceTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();
                if (objAttendanceTable != null && objAttendanceTable.EvaluationResult != null)
                {
                    EvaluationResult = objAttendanceTable.EvaluationResult.Value;
                }
                item = new ElementFormula(PayrollElement.ATT_ATTENDANCETABLE_EVALUATIONRESULT.ToString(), EvaluationResult, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion
            #region Tung.Tran [11/08/2021][131630]: Đếm số ngày từ ngày bắt đầu kỳ công > ngày vào làm (Trừ T7,CN)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.COUNT_DAY_BEFORE_JOIN.ToString()))
            {
                double result = 0;
                if (profileItem.DateHire >= CutOffDuration.DateStart)
                {
                    for (DateTime date = CutOffDuration.DateStart; date < profileItem.DateHire; date = date.AddDays(1))
                    {
                        if (date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday)
                        {
                            result += 1;
                        }
                    }
                }
                double sumWorkPaidHours = 0;
                var objAllSettingDayKeepUnusualPay = TotalDataAll.listAllSettingEntity.Where(s =>
                            s.Name == AppConfig.HRM_SAL_UNUSUALPAY_DAYKEEPUNUSUALPAY.ToString()).FirstOrDefault();
                if (objAllSettingDayKeepUnusualPay != null)
                {
                    int dayKeepUnusualPay = 0;
                    if (int.TryParse(objAllSettingDayKeepUnusualPay.Value1, out dayKeepUnusualPay))
                    {
                        DateTime monthYearKeepUnusualPay = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayKeepUnusualPay);
                        var listCat_LeavedayType = TotalDataAll.listLeavedayType.Where(x => x.PaidRate > 0).Select(x => x.ID).ToList();
                        var listAttendanceTableItem = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                s.WorkDate >= CutOffDuration.DateStart
                                                && s.WorkDate <= monthYearKeepUnusualPay)
                                                .OrderBy(x => x.WorkDate)
                                                .ToList();
                        foreach (var objAttendance in listAttendanceTableItem)
                        {
                            if (objAttendance.AvailableHours != 0 && objAttendance.LeaveTypeID != null && objAttendance.PaidRate == 0)
                            {
                                sumWorkPaidHours += objAttendance.LeaveHours / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveTypeID != null && objAttendance.PaidRateEx1 == 0)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType3ID != null && objAttendance.PaidRateEx3 == 0 && objAttendance.ExtraLeaveHours3 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours3.Value / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType4ID != null && objAttendance.PaidRateEx4 == 0 && objAttendance.ExtraLeaveHours4 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours4.Value / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType5ID != null && objAttendance.PaidRateEx5 == 0 && objAttendance.ExtraLeaveHours5 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours5.Value / objAttendance.AvailableHours;
                            }
                            if (objAttendance.AvailableHours != 0 && objAttendance.ExtraLeaveType6ID != null && objAttendance.PaidRateEx6 == 0 && objAttendance.ExtraLeaveHours6 != null)
                            {
                                sumWorkPaidHours += objAttendance.ExtraLeaveHours6.Value / objAttendance.AvailableHours;
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.COUNT_DAY_BEFORE_JOIN.ToString(), result + sumWorkPaidHours, 0);
                listElementFormula.Add(item);
            }
            #endregion
        }
        #endregion

        #region Nhánh các enum Nhánh enum Nhân sự, bảo hiểm , canteen, .... 
        public void GetStaticValuesHR(
           ComputePayrollDataModelKZAll TotalDataAll,
           ComputePayrollDataModelKZ TotalData600,
           List<ElementFormula> listElementFormula,
           Hre_ProfileEntity profileItem,
           Att_CutOffDurationEntity CutOffDuration,
           List<string> formula,
           Guid? GradePayrollID,
           Att_AttendanceTableEntity objAttendanceTableProCut,
           Dictionary<Guid, ValueCount> listTmpDeduction,
           Sal_GetDataComputePayrollKZServices dataComputeSer,
           Att_CutOffDurationEntity cutOffDurationPre,
           Att_RecalAttendanceTableEntity objRecalAttendanceTableProCut
           )
        {


            ElementFormula item = new ElementFormula();

            #region Hien.Le [25/01/2019] 0123090: [Spindex] Thêm phần tử lương: Đếm lên số lần bổ sung in out theo loại lý do thiếu in out trong kỳ công

            #endregion
            #region Tung.Tran [08/03/2020] [113594]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
            PayrollElement.CAT_TRADEUNIONISTPOSITION_CODE.ToString(),
            PayrollElement.CAT_TRADEUNIONISTPOSITION_TRADEUNIONISTPOSITIONNAME.ToString()
            }))
            {

                string codeTrade = string.Empty;
                string nameTrade = string.Empty;

                if (!Common.IsNullOrGuidEmpty(profileItem.TradeUnionistPositionID))
                {
                    var objTradeUnionistPosition = TotalDataAll.listTradeUnionistPosition.FirstOrDefault(x => x.ID == profileItem.TradeUnionistPositionID);
                    if (objTradeUnionistPosition != null)
                    {
                        codeTrade = objTradeUnionistPosition.Code;
                        nameTrade = objTradeUnionistPosition.TradeUnionistPositionName;
                    }
                }

                item = new ElementFormula(PayrollElement.CAT_TRADEUNIONISTPOSITION_CODE.ToString(), codeTrade, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.CAT_TRADEUNIONISTPOSITION_TRADEUNIONISTPOSITIONNAME.ToString(), nameTrade, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [18/07/2017][bang.nguyen][85222][Modify Func]: Cac phan tu theo hop dong
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
            PayrollElement.HR_IS_CHANGE_CONTRACT.ToString(),
            PayrollElement.HR_CONSTRACT_TYPE_CODE_BEFEFORE_CHANGECONTRACT.ToString(),
            PayrollElement.HR_CONSTRACT_TYPE_CODE_AFTER_CHANGECONTRACT.ToString(),
            PayrollElement.ATT_PAIDWORKDAY_BEFORE_CHANGE_CONTRACT.ToString(),
            PayrollElement.ATT_PAIDWORKDAY_AFTER_CHANGE_CONTRACT.ToString()}))
            {

                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_IS_CHANGE_CONTRACT.ToString() + ") ";
                }
                else
                {

                    var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);

                    //TotalData600.ListContract
                    var listContract = listContractByProfileDic.Where(s => s.ProfileID == profileItem.ID && s.DateStart <= CutOffDuration.DateEnd && s.Status == ContractSearchStatus.E_APPROVED.ToString())
                        .OrderByDescending(s => s.DateStart).ToList();

                    //co thay doi hop dong trong thang
                    int _changeContract = 0;
                    if (listContract.Count >= 2 && listContract.Where(s => s.DateStart > CutOffDuration.DateStart).Count() > 0)
                    {
                        _changeContract = 1;
                    }
                    item = new ElementFormula(PayrollElement.HR_IS_CHANGE_CONTRACT.ToString(), _changeContract, 0);
                    listElementFormula.Add(item);


                    string _Code_BEFEFORE_CHANGECONTRACT = string.Empty;
                    string _Code_AFTER_CHANGECONTRACT = string.Empty;
                    double _PAIDWORKDAY_BEFORE_CHANGE = 0;
                    double _PAIDWORKDAY_AFTER_CHANGE = 0;

                    var objContractFirstInMonth = listContract.Where(s => s.DateStart > CutOffDuration.DateStart).FirstOrDefault();
                    if (objContractFirstInMonth != null)
                    {
                        //ma loai hd truoc khi thay doi luong trong thang
                        var objContractNextFirst = listContract.Where(s => s.DateStart < objContractFirstInMonth.DateStart).FirstOrDefault();
                        if (objContractNextFirst != null && !string.IsNullOrEmpty(objContractNextFirst.TypeCode))
                        {
                            _Code_BEFEFORE_CHANGECONTRACT = objContractNextFirst.TypeCode;
                        }

                        //ma loai hd sau khi thay doi trong thang
                        if (!string.IsNullOrEmpty(objContractFirstInMonth.TypeCode))
                        {
                            _Code_AFTER_CHANGECONTRACT = objContractFirstInMonth.TypeCode;
                        }

                        var objAttTable = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID).FirstOrDefault(s => s.CutOffDurationID == CutOffDuration.ID);
                        double _HourOnWorkDate = 0;
                        if (objAttTable != null && objAttTable.GradeAttendanceID != null)
                        {
                            var objGradeAttendance = TotalDataAll.ListCat_GradeAttendance.Where(s => s.ID == objAttTable.GradeAttendanceID).FirstOrDefault();
                            if (objGradeAttendance != null && objGradeAttendance.HourOnWorkDate != null)
                            {
                                _HourOnWorkDate = objGradeAttendance.HourOnWorkDate.Value;
                            }
                        }
                        #region so ngay cong truoc khi thay doi luong trong thang
                        var listAttendanceTableItemBefore = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                            s.CutOffDurationID == CutOffDuration.ID
                                                            && s.WorkDate >= CutOffDuration.DateStart
                                                            && s.WorkDate < objContractFirstInMonth.DateStart).ToList();


                        ////duyệt wa tất cả các dòng
                        foreach (var objAttendanceTableItem in listAttendanceTableItemBefore)
                        {
                            if (objAttendanceTableItem.WorkPaidHours != 0)
                            {
                                var _WorkPaidHours = objAttendanceTableItem.WorkPaidHours;
                                if (objAttendanceTableItem.Shift2ID == null && objAttendanceTableItem.ShiftID == null)
                                {
                                    if (_HourOnWorkDate != 0)
                                    {
                                        _PAIDWORKDAY_BEFORE_CHANGE += _WorkPaidHours / _HourOnWorkDate;
                                    }
                                }
                                else if (objAttendanceTableItem.Shift2ID == null)
                                {
                                    if (objAttendanceTableItem.ShiftID != null)
                                    {
                                        var objshift = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendanceTableItem.ShiftID).FirstOrDefault();
                                        if (objshift != null && objshift.StdWorkHours != null && objshift.StdWorkHours != 0)
                                        {
                                            _PAIDWORKDAY_BEFORE_CHANGE += _WorkPaidHours / objshift.StdWorkHours.Value;
                                        }
                                    }
                                }
                                else if (objAttendanceTableItem.Shift2ID != null)
                                {
                                    var objshift = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendanceTableItem.ShiftID).FirstOrDefault();
                                    double _shiftStdWorkHours = 0;
                                    if (objshift != null && objshift.StdWorkHours != null && objshift.StdWorkHours != 0)
                                    {
                                        _shiftStdWorkHours = objshift.StdWorkHours.Value;
                                    }
                                    double _shift2WorkPaidHours = 0;
                                    var objshitf2 = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendanceTableItem.Shift2ID).FirstOrDefault();
                                    if (objshitf2 != null && objshitf2.StdWorkHours != null && objshitf2.StdWorkHours != 0)
                                    {
                                        _shift2WorkPaidHours = objshitf2.StdWorkHours.Value;
                                    }
                                    double sumshiftStdWorkHours = _shiftStdWorkHours + _shift2WorkPaidHours;
                                    if (sumshiftStdWorkHours != 0)
                                    {
                                        _PAIDWORKDAY_BEFORE_CHANGE += _WorkPaidHours / (sumshiftStdWorkHours / 2);
                                    }
                                }
                            }
                        }
                        #endregion

                        #region so ngay cong sau khi thay doi luong trong thang
                        var listAttendanceTableItemAfter = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(s =>
                                                            s.CutOffDurationID == CutOffDuration.ID
                                                            && s.WorkDate >= objContractFirstInMonth.DateStart
                                                            && s.WorkDate <= CutOffDuration.DateEnd).ToList();

                        ////duyệt wa tất cả các dòng
                        foreach (var objAttendanceTableItem in listAttendanceTableItemAfter)
                        {
                            if (objAttendanceTableItem.WorkPaidHours != 0)
                            {
                                var _WorkPaidHours = objAttendanceTableItem.WorkPaidHours;
                                if (objAttendanceTableItem.Shift2ID == null && objAttendanceTableItem.ShiftID == null)
                                {
                                    if (_HourOnWorkDate != 0)
                                    {
                                        _PAIDWORKDAY_AFTER_CHANGE += _WorkPaidHours / _HourOnWorkDate;
                                    }
                                }
                                else if (objAttendanceTableItem.Shift2ID == null)
                                {
                                    if (objAttendanceTableItem.ShiftID != null)
                                    {
                                        var objshift = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendanceTableItem.ShiftID).FirstOrDefault();
                                        if (objshift != null && objshift.StdWorkHours != null && objshift.StdWorkHours != 0)
                                        {
                                            _PAIDWORKDAY_AFTER_CHANGE += _WorkPaidHours / objshift.StdWorkHours.Value;
                                        }
                                    }
                                }
                                else if (objAttendanceTableItem.Shift2ID != null)
                                {
                                    var objshift = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendanceTableItem.ShiftID).FirstOrDefault();
                                    double _shiftStdWorkHours = 0;
                                    if (objshift != null && objshift.StdWorkHours != null && objshift.StdWorkHours != 0)
                                    {
                                        _shiftStdWorkHours = objshift.StdWorkHours.Value;
                                    }
                                    double _shift2WorkPaidHours = 0;
                                    var objshitf2 = TotalDataAll.listCat_Shift.Where(s => s.ID == objAttendanceTableItem.Shift2ID).FirstOrDefault();
                                    if (objshitf2 != null && objshitf2.StdWorkHours != null && objshitf2.StdWorkHours != 0)
                                    {
                                        _shift2WorkPaidHours = objshitf2.StdWorkHours.Value;
                                    }
                                    double sumshiftStdWorkHours = _shiftStdWorkHours + _shift2WorkPaidHours;
                                    if (sumshiftStdWorkHours != 0)
                                    {
                                        _PAIDWORKDAY_AFTER_CHANGE += _WorkPaidHours / (sumshiftStdWorkHours / 2);
                                    }
                                }
                            }
                        }
                        #endregion

                    }
                    item = new ElementFormula(PayrollElement.HR_CONSTRACT_TYPE_CODE_BEFEFORE_CHANGECONTRACT.ToString(), _Code_BEFEFORE_CHANGECONTRACT, 0);
                    listElementFormula.Add(item);

                    //ma loai hd sau khi thay doi trong thang
                    item = new ElementFormula(PayrollElement.HR_CONSTRACT_TYPE_CODE_AFTER_CHANGECONTRACT.ToString(), _Code_AFTER_CHANGECONTRACT, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_PAIDWORKDAY_BEFORE_CHANGE_CONTRACT.ToString(), _PAIDWORKDAY_BEFORE_CHANGE, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_PAIDWORKDAY_AFTER_CHANGE_CONTRACT.ToString(), _PAIDWORKDAY_AFTER_CHANGE, 0);
                    listElementFormula.Add(item);
                }

            }
            #endregion

            #region [04/03/2019][bang.nguyen][103557][modify Func]: Mã nhóm nhân viên
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_WORKHISTORY_EMPLOYEEGROUPCODE.ToString()))
            {
                string codeEmployeeGroupCode = string.Empty;
                var objWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                    .Where(s => s.ProfileID == profileItem.ID && s.DateEffective <= CutOffDuration.DateEnd && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                    .OrderByDescending(s => s.DateEffective).FirstOrDefault();

                if (objWorkHistory != null && !string.IsNullOrEmpty(objWorkHistory.EmployeeGroupCode))
                {
                    codeEmployeeGroupCode = objWorkHistory.EmployeeGroupCode;
                }

                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_EMPLOYEEGROUPCODE.ToString(), codeEmployeeGroupCode, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [25/09/2018][bang.nguyen][98842][modify Func]: Mã chức vụ
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_WORKHISTORY_POSITION_CODE.ToString()))
            {
                string codePosition = string.Empty;
                var objWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                    .Where(s => s.ProfileID == profileItem.ID && s.DateEffective <= CutOffDuration.DateEnd && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                    .OrderByDescending(s => s.DateEffective).FirstOrDefault();

                if (objWorkHistory != null && !string.IsNullOrEmpty(objWorkHistory.PositionCode))
                {
                    codePosition = objWorkHistory.PositionCode;
                }

                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_POSITION_CODE.ToString(), codePosition, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [05/06/2018][bang.nguyen][95742][New Func]: quá trình công tác trước thay đổi (nếu có thay đổi trong kỳ)
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HRE_WORKHISTORY_POSITION_NAME_BEFORE.ToString(),
            PayrollElement.HRE_WORKHISTORY_DIVISION_NAME_BEFORE.ToString(),PayrollElement.HRE_WORKHISTORY_SECTION_NAME_BEFORE.ToString(),
            PayrollElement.HRE_WORKHISTORY_POSITION_CODE_BEFORE.ToString()
            }))
            {
                string _POSITION_NAME_BEFORE = string.Empty;
                string _DIVISION_NAME_BEFORE = string.Empty;
                string _SECTION_NAME_BEFORE = string.Empty;
                string _POSITION_CODE_BEFORE = string.Empty;

                var listWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                    .Where(s => s.ProfileID == profileItem.ID && s.DateEffective <= CutOffDuration.DateEnd && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                    .OrderByDescending(s => s.DateEffective).ToList();

                //dong thay doi trong kỳ
                var objWorkHistoryChangeInCutOff = listWorkHistory.Where(s => s.DateEffective > CutOffDuration.DateStart).FirstOrDefault();

                //neu co >= 2 dong va có 1 dòng trong kỳ => có thay đổi
                if (listWorkHistory.Count >= 2 && objWorkHistoryChangeInCutOff != null)
                {
                    var objWorkHistoryBefore = listWorkHistory[1];
                    if (objWorkHistoryBefore.PositionID != objWorkHistoryChangeInCutOff.PositionID)
                    {
                        if (!string.IsNullOrEmpty(objWorkHistoryBefore.PositionName))
                        {
                            _POSITION_NAME_BEFORE = objWorkHistoryBefore.PositionName;
                        }
                        if (!string.IsNullOrEmpty(objWorkHistoryBefore.PositionCode))
                        {
                            _POSITION_CODE_BEFORE = objWorkHistoryBefore.PositionCode;
                        }
                    }
                    if (objWorkHistoryBefore.OrganizationStructureID != objWorkHistoryChangeInCutOff.OrganizationStructureID)
                    {
                        if (!string.IsNullOrEmpty(objWorkHistoryBefore.E_DIVISION))
                        {
                            _DIVISION_NAME_BEFORE = objWorkHistoryBefore.E_DIVISION;
                        }
                        if (!string.IsNullOrEmpty(objWorkHistoryBefore.E_SECTION))
                        {
                            _SECTION_NAME_BEFORE = objWorkHistoryBefore.E_SECTION;
                        }
                    }
                }

                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_POSITION_NAME_BEFORE.ToString(), _POSITION_NAME_BEFORE, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_DIVISION_NAME_BEFORE.ToString(), _DIVISION_NAME_BEFORE, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_SECTION_NAME_BEFORE.ToString(), _SECTION_NAME_BEFORE, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_POSITION_CODE_BEFORE.ToString(), _POSITION_CODE_BEFORE, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [16/05/2018][bang.nguyen][94771][Modify Func] tu 16/05/2018 cac phan tu lay theo lich su thi lay o day
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_WORKHISTORY_ABILITYTILE_ABILITYTITLEVNI.ToString()))
            {
                string _ABILITYTITLEVNI = string.Empty;
                var objWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                    .Where(s => s.ProfileID == profileItem.ID && s.DateEffective <= CutOffDuration.DateEnd && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                    .OrderByDescending(s => s.DateEffective).FirstOrDefault();

                if (objWorkHistory != null)
                {
                    if (objWorkHistory.AbilityTileID != null)
                    {
                        var objAbilityTile = TotalDataAll.listCat_AbilityTile.Where(s => s.ID == objWorkHistory.AbilityTileID).FirstOrDefault();
                        if (objAbilityTile != null && !string.IsNullOrEmpty(objAbilityTile.AbilityTitleVNI))
                        {
                            _ABILITYTITLEVNI = objAbilityTile.AbilityTitleVNI;
                        }
                    }
                }

                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_ABILITYTILE_ABILITYTITLEVNI.ToString(), _ABILITYTITLEVNI, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [24/01/2018][bang.nguyen][92651][Modify Func] Mã cửa hàng gốc 
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HR_WORKHISTORY_SHOP_CODE.ToString(),
                PayrollElement.HRE_WORKHISTORY_EMPLOYMENTTYPE.ToString(),
                PayrollElement.HRE_WORKHISTORY_EMPLOYMENTTYPE_VIEW.ToString()}))
            {
                string codeShop = string.Empty;
                string employmentType = string.Empty;
                string employmentTypeView = string.Empty;

                var objWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                    .Where(s => s.ProfileID == profileItem.ID && s.DateEffective <= CutOffDuration.DateEnd && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                    .OrderByDescending(s => s.DateEffective).FirstOrDefault();

                if (objWorkHistory != null && objWorkHistory.ShopID != null)
                {
                    var objShop = TotalDataAll.listShop.Where(s => s.ID == objWorkHistory.ShopID).FirstOrDefault();
                    if (objShop != null && !string.IsNullOrEmpty(objShop.Code))
                    {
                        codeShop = objShop.Code;
                    }
                }
                if (objWorkHistory != null && !string.IsNullOrEmpty(objWorkHistory.EmploymentType))
                {
                    employmentType = objWorkHistory.EmploymentType;
                    employmentTypeView = objWorkHistory.EmploymentType.TranslateString();
                }

                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_SHOP_CODE.ToString(), codeShop, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_EMPLOYMENTTYPE.ToString(), employmentType, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_EMPLOYMENTTYPE_VIEW.ToString(), employmentTypeView, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [08/08/2018][bang.nguyen][86503][Modify Func] phần tử lương tên đệm người quản lý trực tiếp
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_WORKHISTORY_SUPERVISOR_MIDDLENAME.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetListProfileBySupervisor(TotalData600, TotalDataAll, CutOffDuration, ref status);

                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_WORKHISTORY_SUPERVISOR_MIDDLENAME.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HR_WORKHISTORY_SUPERVISOR_MIDDLENAME.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }

                string middleName = string.Empty;
                var objWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                    .Where(s => s.ProfileID == profileItem.ID && s.DateEffective <= CutOffDuration.DateEnd && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                    .OrderByDescending(s => s.DateEffective).FirstOrDefault();

                if (objWorkHistory != null && !string.IsNullOrEmpty(objWorkHistory.Supervisor))
                {
                    if (TotalData600.listProfileBySupervisor != null)
                    {
                        var tempMiddleName = TotalData600.listProfileBySupervisor.Where(s =>
                        s.CodeEmp == objWorkHistory.Supervisor
                        && s.MiddleName != string.Empty && s.MiddleName != null)
                        .Select(s => s.MiddleName)
                        .FirstOrDefault();
                        if (tempMiddleName != null)
                        {
                            middleName = tempMiddleName;
                        }
                    }
                }

                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_SUPERVISOR_MIDDLENAME.ToString(), middleName, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Tên quốc tịch nhân viên
            //[08/05/2017][bang.nguyen][82034][Modify Func]
            //Tên quốc tịch nhân viên
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_PROFILE_NATIONALITY.ToString()))
            {
                string _NationalityName = string.Empty;
                if (profileItem.NationalityID != null)
                {
                    var objCountry = TotalDataAll.ListCountry.Where(s => s.ID == profileItem.NationalityID).FirstOrDefault();
                    if (objCountry != null && objCountry.CountryName != null)
                    {
                        _NationalityName = objCountry.CountryName;
                    }
                }
                item = new ElementFormula(PayrollElement.HR_PROFILE_NATIONALITY.ToString(), _NationalityName, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region cấp phòng ban theo lịch sử 
            //[09/10/2018][bang.nguyen][99370][Modify Func]
            //[10/06/2017][bang.nguyen][82034][Modify Func]
            //E_UNIT va E_UNIT_CODE theo lịch sử
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
            PayrollElement.HR_WORKHISTORY_E_UNIT.ToString(),
            PayrollElement.HR_WORKHISTORY_E_UNIT_CODE.ToString(),
            PayrollElement.HR_WORKHISTORY_E_COMPANY.ToString(),
            PayrollElement.HR_WORKHISTORY_E_COMPANY_CODE.ToString(),
            PayrollElement.HR_WORKHISTORY_E_BRANCH.ToString(),
            PayrollElement.HR_WORKHISTORY_E_BRANCH_CODE.ToString(),
            PayrollElement.HR_WORKHISTORY_E_DIVISION.ToString(),
            PayrollElement.HR_WORKHISTORY_E_DIVISION_CODE.ToString(),
            PayrollElement.HR_WORKHISTORY_E_DEPARTMENT.ToString(),
            PayrollElement.HR_WORKHISTORY_E_DEPARTMENT_CODE.ToString(),
            PayrollElement.HR_WORKHISTORY_E_TEAM.ToString(),
            PayrollElement.HR_WORKHISTORY_E_TEAM_CODE.ToString(),
            PayrollElement.HR_WORKHISTORY_E_SECTION.ToString(),
            PayrollElement.HR_WORKHISTORY_E_SECTION_CODE.ToString(),}))
            {
                string e_UNIT = string.Empty;
                string e_UNIT_CODE = string.Empty;
                string e_COMPANY = string.Empty;
                string e_COMPANY_CODE = string.Empty;
                string e_BRANCH = string.Empty;
                string e_BRANCH_CODE = string.Empty;
                string e_DIVISION = string.Empty;
                string e_DIVISION_CODE = string.Empty;
                string e_DEPARTMENT = string.Empty;
                string e_DEPARTMENT_CODE = string.Empty;
                string e_TEAM = string.Empty;
                string e_TEAM_CODE = string.Empty;
                string e_SECTION = string.Empty;
                string e_SECTION_CODE = string.Empty;

                var objWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                        .Where(s => s.ProfileID == profileItem.ID
                            && s.Status == WorkHistoryStatus.E_APPROVED.ToString()
                            && s.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(s => s.DateEffective)
                        .FirstOrDefault();
                if (objWorkHistory != null)
                {
                    if (!string.IsNullOrEmpty(objWorkHistory.E_UNIT))
                    {
                        e_UNIT = objWorkHistory.E_UNIT;
                    }
                    if (!string.IsNullOrEmpty(objWorkHistory.E_UNIT_CODE))
                    {
                        e_UNIT_CODE = objWorkHistory.E_UNIT_CODE;
                    }

                    if (!string.IsNullOrEmpty(objWorkHistory.E_COMPANY))
                    {
                        e_COMPANY = objWorkHistory.E_COMPANY;
                    }
                    if (!string.IsNullOrEmpty(objWorkHistory.E_COMPANY_CODE))
                    {
                        e_COMPANY_CODE = objWorkHistory.E_COMPANY_CODE;
                    }

                    if (!string.IsNullOrEmpty(objWorkHistory.E_BRANCH))
                    {
                        e_BRANCH = objWorkHistory.E_BRANCH;
                    }
                    if (!string.IsNullOrEmpty(objWorkHistory.E_BRANCH_CODE))
                    {
                        e_BRANCH_CODE = objWorkHistory.E_BRANCH_CODE;
                    }

                    if (!string.IsNullOrEmpty(objWorkHistory.E_DIVISION))
                    {
                        e_DIVISION = objWorkHistory.E_DIVISION;
                    }
                    if (!string.IsNullOrEmpty(objWorkHistory.E_DIVISION_CODE))
                    {
                        e_DIVISION_CODE = objWorkHistory.E_DIVISION_CODE;
                    }

                    if (!string.IsNullOrEmpty(objWorkHistory.E_DEPARTMENT))
                    {
                        e_DEPARTMENT = objWorkHistory.E_DEPARTMENT;
                    }
                    if (!string.IsNullOrEmpty(objWorkHistory.E_DEPARTMENT_CODE))
                    {
                        e_DEPARTMENT_CODE = objWorkHistory.E_DEPARTMENT_CODE;
                    }

                    if (!string.IsNullOrEmpty(objWorkHistory.E_TEAM))
                    {
                        e_TEAM = objWorkHistory.E_TEAM;
                    }
                    if (!string.IsNullOrEmpty(objWorkHistory.E_TEAM_CODE))
                    {
                        e_TEAM_CODE = objWorkHistory.E_TEAM_CODE;
                    }

                    if (!string.IsNullOrEmpty(objWorkHistory.E_SECTION))
                    {
                        e_SECTION = objWorkHistory.E_SECTION;
                    }
                    if (!string.IsNullOrEmpty(objWorkHistory.E_SECTION_CODE))
                    {
                        e_SECTION_CODE = objWorkHistory.E_SECTION_CODE;
                    }
                }

                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_UNIT.ToString(), e_UNIT, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_UNIT_CODE.ToString(), e_UNIT_CODE, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_COMPANY.ToString(), e_COMPANY, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_COMPANY_CODE.ToString(), e_COMPANY_CODE, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_BRANCH.ToString(), e_BRANCH, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_BRANCH_CODE.ToString(), e_BRANCH_CODE, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_DIVISION.ToString(), e_DIVISION, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_DIVISION_CODE.ToString(), e_DIVISION_CODE, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_DEPARTMENT.ToString(), e_DEPARTMENT, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_DEPARTMENT_CODE.ToString(), e_DEPARTMENT_CODE, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_TEAM.ToString(), e_TEAM, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_TEAM_CODE.ToString(), e_TEAM_CODE, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_SECTION.ToString(), e_SECTION, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_E_SECTION_CODE.ToString(), e_SECTION_CODE, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Mã nhóm phụ cấp theo lịch sử
            //[10/06/2017][bang.nguyen][82034][Modify Func]
            //Mã nhóm phụ cấp theo lịch sử
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_WORKHISTORY_USUALALLOWANCEGROUPCODE.ToString()))
            {
                string _UsualAllowanceGroupCode = string.Empty;

                var objWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(s => s.ProfileID == profileItem.ID
                                                                    && s.Status == WorkHistoryStatus.E_APPROVED.ToString()
                                                                    && s.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (objWorkHistory != null && !string.IsNullOrEmpty(objWorkHistory.UsualAllowanceGroupCode))
                {
                    _UsualAllowanceGroupCode = objWorkHistory.UsualAllowanceGroupCode;
                }
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_USUALALLOWANCEGROUPCODE.ToString(), _UsualAllowanceGroupCode, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Datecomeback,loại điều động, ngày hiệu lực trong quá trình công tác
            //[08/05/2017][bang.nguyen][82034][Modify Func]
            //Datecomeback,loại điều động, ngày hiệu lực trong quá trình công tác
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HR_WORKHISTORY_DATECOMBACK.ToString(), PayrollElement.HR_WORKHISTORY_DATEEFFECTIVE.ToString(), PayrollElement.HR_WORKHISTORY_TYPEOFTRANSFER.ToString(), PayrollElement.HR_WORKHISTORY_PERMISSION.ToString() }))
            {
                DateTime? _DateComeBack = null;
                DateTime? _DateEffective = null;
                string _TypeOfTransfer = string.Empty;
                string _Permission = string.Empty;

                var objWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(s => s.ProfileID == profileItem.ID
                                                                    && s.Status == WorkHistoryStatus.E_APPROVED.ToString()
                                                                    && s.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(s => s.DateEffective).FirstOrDefault();
                if (objWorkHistory != null)
                {
                    if (objWorkHistory.DateComeBack != null)
                    {
                        _DateComeBack = objWorkHistory.DateComeBack;
                    }
                    _DateEffective = objWorkHistory.DateEffective;
                    if (objWorkHistory.TypeOfTransferID != null)
                    {
                        var objNameEntity = TotalDataAll.ListCat_NameEntity.Where(s => s.ID == objWorkHistory.TypeOfTransferID).FirstOrDefault();
                        if (objNameEntity != null && objNameEntity.NameEntityName != null)
                        {
                            _TypeOfTransfer = objNameEntity.NameEntityName;
                        }
                    }
                    //[26/05/2017][bang.nguyen][83018][Modify Func]
                    //lấy thông tin Permission trong quá trình công tác
                    if (!string.IsNullOrEmpty(objWorkHistory.Permission))
                    {
                        _Permission = objWorkHistory.Permission;
                    }
                }

                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_DATECOMBACK.ToString(), _DateComeBack, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_DATEEFFECTIVE.ToString(), _DateEffective, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_TYPEOFTRANSFER.ToString(), _TypeOfTransfer, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_PERMISSION.ToString(), _Permission, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Loại nghỉ việc của nhân viên nghỉ việc
            //[22/04/2017][bang.nguyen][81350][	New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HRE_STOPWORKING_TYPEOFSTOP.ToString(), PayrollElement.HRE_STOPWORKING_TYPEOFSTOPCODE.ToString() }))
            {


                string TypeOfStopName = string.Empty;
                string TypeOfStopCode = string.Empty;
                int _numberDayQuit = 0;
                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_SAL_NUMBER_DAY_PROFILE_QUIT.ToString()).FirstOrDefault();
                if (objAllSetting != null && objAllSetting.Value1 != null && objAllSetting.Value1 != string.Empty)
                {
                    _numberDayQuit = int.Parse(objAllSetting.Value1);
                }
                DateTime _dateStart = CutOffDuration.DateStart.AddDays(_numberDayQuit);
                DateTime _dateEnd = CutOffDuration.DateEnd.AddDays(_numberDayQuit);

                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);
                var objStopWorking = listStopWorkingByProfile.Where(s => s.ProfileID == profileItem.ID
                                                                            && s.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString()
                                                                            && s.DateStop >= _dateStart
                                                                            && s.DateStop <= _dateEnd
                                                                            && s.TypeOfStopID != null).OrderByDescending(s => s.DateStop).FirstOrDefault();
                if (objStopWorking != null)
                {
                    var objNameEntity = TotalDataAll.ListCat_NameEntity.Where(s => s.ID == objStopWorking.TypeOfStopID).FirstOrDefault();
                    if (objNameEntity != null)
                    {
                        TypeOfStopName = objNameEntity.NameEntityName;
                        TypeOfStopCode = objNameEntity.Code;

                    }
                }

                item = new ElementFormula(PayrollElement.HRE_STOPWORKING_TYPEOFSTOP.ToString(), TypeOfStopName, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HRE_STOPWORKING_TYPEOFSTOPCODE.ToString(), TypeOfStopCode, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Hien.Le [25/07/2019] [0107575] Lấy phần tử lương kiểm tra là nhân viên nghỉ hưu
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HR_IS_RETIRE.ToString() }))
            {
                item = new ElementFormula(PayrollElement.HR_IS_RETIRE.ToString(), profileItem.IsRetire == true ? 1 : 0, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region Khoa.Nguyen [05/08/2019] 0107498: Thêm phần tử lương tính Số ngày vi phạm nghỉ việc 
            //Khoa.Nguyen [11/01/2021] 0123091: [Spindex] Thêm phần tử lương ngày nộp đơn, ngày yêu cầu nghỉ việc	
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HRE_STOPWORKING_NUMBER_OF_DAYVIOLATION.ToString(), PayrollElement.HRE_STOPWORKING_LASTWORKINGDAY.ToString(), PayrollElement.HRE_STOPWORKING_NUMBERDAYQUITJOB.ToString() }))
            {

                int numberDayProfileQuit = 0;
                int numberOfDayViolationProfile = 0;
                DateTime? lastWorkingDayProfile = null;
                int? numberDayQuitJob = 0;
                // Cấu hình nghỉ việc được tính
                var objAllSettingEntity = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name != null && m.Name == AppConfig.HRM_HRE_CONFIG_QUITCAL.ToString());
                // Cấu hình số ngày tính nhân viên nghỉ việc
                var objDateStopWorking = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name != null && m.Name == AppConfig.HRM_SAL_NUMBER_DAY_PROFILE_QUIT.ToString());

                if (objDateStopWorking != null && !string.IsNullOrEmpty(objDateStopWorking.Value1))
                {
                    int.TryParse(objDateStopWorking.Value1, out numberDayProfileQuit);
                }

                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);
                var objStopWorking = listStopWorkingByProfile.Where(
                    s => s.DateStop != null
                    && s.DateStop >= CutOffDuration.DateStart.AddDays(numberDayProfileQuit)
                    && s.DateStop <= CutOffDuration.DateEnd.AddDays(numberDayProfileQuit)
                    && ((objAllSettingEntity == null || string.IsNullOrEmpty(objAllSettingEntity.Value1)) || (s.Status == objAllSettingEntity.Value1)))
                        .OrderByDescending(s => s.DateStop)
                        .FirstOrDefault();
                if (objStopWorking != null)
                {
                    numberOfDayViolationProfile = objStopWorking.NumberOfDayViolation ?? 0;
                    lastWorkingDayProfile = objStopWorking.LastWorkingDay;

                    var objContractType = TotalDataAll.lstContractType.FirstOrDefault(x => x.ID == objStopWorking.ContractTypeID);
                    if (objContractType != null && objContractType.NumberDayQuitJob != null)
                    {
                        numberDayQuitJob = objContractType.NumberDayQuitJob;
                    }
                }

                item = new ElementFormula(PayrollElement.HRE_STOPWORKING_NUMBER_OF_DAYVIOLATION.ToString(), numberOfDayViolationProfile, 0, string.Empty);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HRE_STOPWORKING_LASTWORKINGDAY.ToString(), lastWorkingDayProfile.ToString() ?? string.Empty, 0, string.Empty);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HRE_STOPWORKING_NUMBERDAYQUITJOB.ToString(), numberDayQuitJob, 0, string.Empty);
                listElementFormula.Add(item);

            }

            #endregion

            #region khoa.nguyen [25/06/2019] [0106680]: Thêm enum phần tử lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.INS_ISPREGNANT_INSURANCE_BYMONTH.ToString()))
            {
                //[25/06/2019][khoa.nguyen][0106680: Thêm enum phần tử lương]
                string status = string.Empty;
                dataComputeSer.GetListnsurance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_ISPREGNANT_INSURANCE_BYMONTH.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.INS_ISPREGNANT_INSURANCE_BYMONTH.ToString(), 0, 0);
                    listElementFormula.Add(item);

                }
                else
                {
                    var listInsuranceByProfile = TotalData600.dicInsurance.GetValueOrNew(profileItem.ID);
                    var listInsuranceByMonth = listInsuranceByProfile.Where(m => m.ProfileID == profileItem.ID
                            && m.MonthYear != null
                            && m.MonthYear.Value.Year == CutOffDuration.MonthYear.Year
                            && m.MonthYear.Value.Month == CutOffDuration.MonthYear.Month
                            ).ToList();

                    if (listInsuranceByMonth.Count > 0)
                    {
                        var listInsuranceIspaybackTrue = listInsuranceByMonth.Where(m => m.IsPayback == true).ToList();
                        //Nếu IsPayback == true && Nếu có check cấu hình “Phân tích BH theo đợt” thì vẫn ưu tiên IsPayback == true
                        if (listInsuranceIspaybackTrue.Count > 0)
                        {
                            var objInsurancePeriod = listInsuranceIspaybackTrue.OrderByDescending(p => p.Period).FirstOrDefault();
                            item = new ElementFormula(PayrollElement.INS_ISPREGNANT_INSURANCE_BYMONTH.ToString(), objInsurancePeriod.IsPregnant == true ? 1 : 0, 0);
                            listElementFormula.Add(item);
                        }
                        else //Trường hợp IsPayback == false thì lấy ra những dòng có Period lớn nhất
                        {
                            var listInsuranceIspaybackFalse = listInsuranceByMonth.Where(m => m.IsPayback == false).ToList();
                            var objInsurancePeriodFalse = listInsuranceIspaybackFalse.OrderByDescending(p => p.Period).FirstOrDefault();
                            item = new ElementFormula(PayrollElement.INS_ISPREGNANT_INSURANCE_BYMONTH.ToString(), objInsurancePeriodFalse.IsPregnant == true ? 1 : 0, 0);
                            listElementFormula.Add(item);

                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.INS_ISPREGNANT_INSURANCE_BYMONTH.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }

                }
            }
            #endregion

            #region [17/01/2017][HienNguyen][78162]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.HRE_SHOPHISTORY_REGION.ToString(),
                PayrollElement.HRE_SHOPHISTORY_REGION_CODE.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicShopHistory(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_SHOPHISTORY_REGION.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_SHOPHISTORY_REGION.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listShopHistoryByProfileDic = TotalData600.dicShopHistory.GetValueOrNew(profileItem.ID);
                    var shopHistoryByProfile = listShopHistoryByProfileDic.Where(
                                    m => m.ProfileID == profileItem.ID
                                    && m.DateEffective <= CutOffDuration.DateEnd
                                    && m.Status == EnumDropDown.ShopHistoryStatus.E_APPROVED.ToString()).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                    string regionCode = string.Empty;

                    if (shopHistoryByProfile.HasValue())
                    {
                        item = new ElementFormula(PayrollElement.HRE_SHOPHISTORY_REGION.ToString(), shopHistoryByProfile.RegionName ?? string.Empty, 0);
                        listElementFormula.Add(item);

                        //[26/10/2017][bang.nguyen][88730][Modify Func]
                        //Mã vùng miền địa lý
                        if (!string.IsNullOrEmpty(shopHistoryByProfile.RegionCode))
                        {
                            regionCode = shopHistoryByProfile.RegionCode;
                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HRE_SHOPHISTORY_REGION.ToString(), string.Empty, 0);
                        listElementFormula.Add(item);
                    }

                    item = new ElementFormula(PayrollElement.HRE_SHOPHISTORY_REGION_CODE.ToString(), regionCode, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [9/3/2017][HienNguyen][0078499]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
            PayrollElement.HRE_DATESTART_PREGNANCY_1.ToString(),
            PayrollElement.HRE_DATESTART_PREGNANCY_2.ToString(),
            PayrollElement.HRE_DATESTART_PREGNANCY_3.ToString(),
            PayrollElement.HRE_DATESTART_PREGNANCY_4.ToString(),
            PayrollElement.HRE_DATESTART_PREGNANCY_5.ToString(),
            PayrollElement.HRE_DATEEND_PREGNANCY_1.ToString(),
            PayrollElement.HRE_DATEEND_PREGNANCY_2.ToString(),
            PayrollElement.HRE_DATEEND_PREGNANCY_3.ToString(),
            PayrollElement.HRE_DATEEND_PREGNANCY_4.ToString(),
            PayrollElement.HRE_DATEEND_PREGNANCY_5.ToString(),
            PayrollElement.HRE_DATE_PREGNANCY_1.ToString(),
            PayrollElement.HRE_DATE_PREGNANCY_2.ToString(),
            PayrollElement.HRE_DATE_PREGNANCY_3.ToString(),
            PayrollElement.HRE_DATE_PREGNANCY_4.ToString(),
            PayrollElement.HRE_DATE_PREGNANCY_5.ToString(),
            }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicInsuranceRecord(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_DATESTART_PREGNANCY_1.ToString() + ") ";
                    #region Set value null
                    item = new ElementFormula(PayrollElement.HRE_DATESTART_PREGNANCY_1.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATESTART_PREGNANCY_2.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATESTART_PREGNANCY_3.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATESTART_PREGNANCY_4.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATESTART_PREGNANCY_5.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATEEND_PREGNANCY_1.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATEEND_PREGNANCY_2.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATEEND_PREGNANCY_3.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATEEND_PREGNANCY_4.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATEEND_PREGNANCY_5.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATE_PREGNANCY_1.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATE_PREGNANCY_2.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATE_PREGNANCY_3.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATE_PREGNANCY_4.ToString(), null, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_DATE_PREGNANCY_5.ToString(), null, 0);
                    listElementFormula.Add(item);
                    #endregion
                }
                else
                {
                    var listInsRecord = TotalData600.ListInsuranceRecord.Where(m => m.ProfileID == profileItem.ID
                                        && m.InsuranceType == InsuranceRecordType.E_PREGNANCY_SUCKLE.ToString()
                                        && m.DateStart != null
                                        && m.DateEnd != null)
                                        .Select(m => new { m.DateStart, m.DateEnd })
                                        .OrderBy(m => m.DateStart).ToList();

                    if (listInsRecord != null && listInsRecord.Count > 0)
                    {
                        for (int i = 1; i <= 5; i++)
                        {
                            if (listInsRecord.Count >= i)
                            {
                                if (listInsRecord[i - 1].DateStart != null)
                                {
                                    listElementFormula.Add(new ElementFormula("HRE_DATESTART_PREGNANCY_" + i, listInsRecord[i - 1].DateStart, 0));
                                }
                                if (listInsRecord[i - 1].DateEnd != null)
                                {
                                    listElementFormula.Add(new ElementFormula("HRE_DATEEND_PREGNANCY_" + i, listInsRecord[i - 1].DateEnd, 0));
                                }
                                if (listInsRecord[i - 1].DateStart != null && listInsRecord[i - 1].DateEnd != null)
                                {
                                    listElementFormula.Add(new ElementFormula("HRE_DATE_PREGNANCY_" + i, (listInsRecord[i - 1].DateEnd.Value - listInsRecord[i - 1].DateStart.Value).TotalDays / 365, 0));
                                }
                            }
                            else
                            {
                                listElementFormula.Add(new ElementFormula("HRE_DATESTART_PREGNANCY_" + i, null, 0));
                                listElementFormula.Add(new ElementFormula("HRE_DATEEND_PREGNANCY_" + i, null, 0));
                                listElementFormula.Add(new ElementFormula("HRE_DATE_PREGNANCY_" + i, null, 0));
                            }
                        }
                    }
                    else
                    {
                        #region Set value null
                        item = new ElementFormula(PayrollElement.HRE_DATESTART_PREGNANCY_1.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATESTART_PREGNANCY_2.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATESTART_PREGNANCY_3.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATESTART_PREGNANCY_4.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATESTART_PREGNANCY_5.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATEEND_PREGNANCY_1.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATEEND_PREGNANCY_2.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATEEND_PREGNANCY_3.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATEEND_PREGNANCY_4.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATEEND_PREGNANCY_5.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATE_PREGNANCY_1.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATE_PREGNANCY_2.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATE_PREGNANCY_3.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATE_PREGNANCY_4.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATE_PREGNANCY_5.ToString(), null, 0);
                        listElementFormula.Add(item);
                        #endregion
                    }
                }
            }
            #endregion

            #region [9/3/2017][HienNguyen][0078499] Enum thời gian làm việc trước 01/01/2009
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.HRE_DATE_CONTRACT_BELOW12MONTH.ToString(),
                PayrollElement.HRE_DATEEND_CONTRACT_BELOW12MONTH.ToString(),
                PayrollElement.HRE_DATESTART_CONTRACT_BELOW12MONTH.ToString() }))
            {
                using (var context = new VnrHrmDataContext())
                {
                    var unitOfWork = (IUnitOfWork)new UnitOfWork(context);
                    string nameTableGetData = "ListCat_ContractType";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        TotalData600.ListCat_ContractType = unitOfWork.CreateQueryable<Cat_ContractType>(Guid.Empty).ToList();
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }
                    nameTableGetData = "listHre_ContractAll";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        TotalData600.listHre_ContractAll = unitOfWork.CreateQueryable<Hre_Contract>(m => TotalData600.listProfileIds.Contains(m.ProfileID)).ToList();
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }

                    var listContractType = TotalData600.ListCat_ContractType.Where(m =>
                            m.Type == EnumDropDown.TypeContract.E_PROBATION.ToString())
                            .Select(m => m.ID).ToList();

                    var listContract = TotalData600.listHre_ContractAll.Where(m =>
                            m.ProfileID == profileItem.ID
                            && listContractType.Contains(m.ContractTypeID))
                            .Select(m => new { m.ProfileID, m.DateEnd, m.DateStart }).ToList();

                    if (listContract.Count == 0)
                    {
                        item = new ElementFormula(PayrollElement.HRE_DATEEND_CONTRACT_BELOW12MONTH.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATESTART_CONTRACT_BELOW12MONTH.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATE_CONTRACT_BELOW12MONTH.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    else if (listContract.Count == 1)
                    {
                        DateTime dateEnd = listContract.FirstOrDefault().DateEnd ?? DateTime.MinValue;
                        DateTime dateStart = listContract.FirstOrDefault().DateStart;
                        item = new ElementFormula(PayrollElement.HRE_DATEEND_CONTRACT_BELOW12MONTH.ToString(), dateEnd, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATESTART_CONTRACT_BELOW12MONTH.ToString(), dateStart, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATE_CONTRACT_BELOW12MONTH.ToString(), dateEnd.Subtract(dateStart).TotalDays / 365, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HRE_DATEEND_CONTRACT_BELOW12MONTH.ToString(), listContract.OrderByDescending(m => m.DateEnd).FirstOrDefault().DateStart, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HRE_DATESTART_CONTRACT_BELOW12MONTH.ToString(), listContract.OrderBy(m => m.DateStart).FirstOrDefault().DateEnd, 0);
                        listElementFormula.Add(item);

                        double day = 0;
                        foreach (var i in listContract)
                        {
                            DateTime dateEnd = i.DateEnd ?? DateTime.MaxValue;
                            day += (i.DateEnd.Value.Subtract(i.DateStart).TotalDays / 365);
                        }
                        item = new ElementFormula(PayrollElement.HRE_DATE_CONTRACT_BELOW12MONTH.ToString(), day, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [9/3/2017][HienNguyen][0078499] Enum thời gian làm việc trước 01/01/2009
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_WORKTIME_BEFORE_2009.ToString()))
            {
                double day = 0;
                if (profileItem.DateQuit != null && profileItem.DateHire <= new DateTime(2008, 12, 31))
                {
                    day = new DateTime(2009, 1, 1).Subtract(profileItem.DateHire ?? new DateTime(2009, 1, 1)).TotalDays / 365;
                }
                item = new ElementFormula(PayrollElement.HRE_WORKTIME_BEFORE_2009.ToString(), day, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [22/12/2016][bang.nguyen][76876][New func] “NV có HĐ thời vụ” trong kỳ tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_CONTRACT_IS_CASUAL.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_CONTRACT_IS_CASUAL.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_CONTRACT_IS_CASUAL.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);

                    int _IsCasual = 0;
                    var objContracByProfile = listContractByProfileDic.Where(s => s.ProfileID == profileItem.ID
                                                                                && s.Type == EnumDropDown.TypeContract.E_CASUAL.ToString()
                                                                                && ((CutOffDuration.DateStart <= s.DateStart && s.DateStart <= CutOffDuration.DateEnd)
                                                                                    || (CutOffDuration.DateStart <= s.DateEnd && s.DateEnd <= CutOffDuration.DateEnd)
                                                                                    || (s.DateStart <= CutOffDuration.DateStart && CutOffDuration.DateEnd <= s.DateEnd)
                                                                                    )).FirstOrDefault();
                    if (objContracByProfile != null)
                    {
                        _IsCasual = 1;
                    }
                    item = new ElementFormula(PayrollElement.HRE_CONTRACT_IS_CASUAL.ToString(), _IsCasual, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [02/11/2016][bang.nguyen][74945][New func] Mã Loại Ngạch lương theo hợp đồng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_CONTRACT_SALARYCLASSTYPE_CODE.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_CONTRACT_SALARYCLASSTYPE_CODE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_CONTRACT_SALARYCLASSTYPE_CODE.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);
                    string salaryClassTypeCode = string.Empty;
                    var listContracByProfile = listContractByProfileDic.Where(s => s.DateStart <= CutOffDuration.DateEnd && s.DateEnd >= CutOffDuration.DateStart && s.ProfileID == profileItem.ID).ToList();
                    //Hre_Contract.DateStart mới nhất
                    var objContractByProfile = listContracByProfile.OrderByDescending(s => s.DateStart).FirstOrDefault();
                    if (objContractByProfile != null && objContractByProfile.SalaryClassTypeID != null)
                    {
                        var objSalaryClassType = TotalDataAll.listSalaryClassType.Where(s => s.ID == objContractByProfile.SalaryClassTypeID).FirstOrDefault();
                        if (objSalaryClassType != null)
                        {
                            salaryClassTypeCode = objSalaryClassType.Code;
                        }
                    }
                    item = new ElementFormula(PayrollElement.HRE_CONTRACT_SALARYCLASSTYPE_CODE.ToString(), salaryClassTypeCode, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [05082016][bang.nguyen][71816][Modify Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_WORKHISTORY_ORGSTRUCTURE_CODE.ToString()))
            {
                string _OrgStructureCode = string.Empty;
                var lstHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(s => s.ProfileID == profileItem.ID
                                                                    //&& s.DateEffective >= CutOffDuration.DateStart
                                                                    && s.DateEffective <= CutOffDuration.DateEnd
                                                                    && s.OrgStructureCode != null
                                                                    && s.OrgStructureCode != string.Empty).ToList();
                if (lstHistory.Count > 0)
                {
                    var objHistory = lstHistory.OrderByDescending(s => s.DateEffective).FirstOrDefault();
                    if (objHistory != null)
                    {
                        _OrgStructureCode = objHistory.OrgStructureCode;
                    }
                }
                item = new ElementFormula(PayrollElement.HR_WORKHISTORY_ORGSTRUCTURE_CODE.ToString(), _OrgStructureCode, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [20062016][bang.nguyen][69000][New Func] + [23/06/2016][HienNguyen][0069278][New]
            // Tham gia đoàn viên: và Là cựu chiến binh
            // Có tham gia đảng viên
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.HR_PROFILEPARTYUNION_ISVETERANUNIONIST.ToString(),
                PayrollElement.HR_PROFILEPARTYUNION_ISYOUTHUNIONIST.ToString(),
                PayrollElement.HR_PROFILEPARTYUNION_ISCOMMUNISTPARTYMEMBER.ToString(),
                PayrollElement.HRE_PROFILE_ISCOMMUNISTPARTYMEMBER.ToString()
            }))
            {

                string status = string.Empty;
                dataComputeSer.GetDicProfilePartyUnion(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_PROFILEPARTYUNION_ISVETERANUNIONIST.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.HR_PROFILEPARTYUNION_ISVETERANUNIONIST.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_PROFILEPARTYUNION_ISYOUTHUNIONIST.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_PROFILEPARTYUNION_ISCOMMUNISTPARTYMEMBER.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_PROFILE_ISCOMMUNISTPARTYMEMBER.ToString(), 0, 0);
                    listElementFormula.Add(item);

                }
                else
                {
                    var listProfilePartyUnionByProfileDic = TotalData600.dicProfilePartyUnion.GetValueOrNew(profileItem.ID);

                    var objProfilePartyUnionByYouthUnionEnrolledDate = listProfilePartyUnionByProfileDic.Where(s => s.ProfileID == profileItem.ID && s.YouthUnionEnrolledDate <= CutOffDuration.DateEnd).OrderByDescending(s => s.YouthUnionEnrolledDate).FirstOrDefault();
                    var _IsVeteranUnionist = 0;
                    var _IsYouthUnionist = 0;
                    if (objProfilePartyUnionByYouthUnionEnrolledDate != null && objProfilePartyUnionByYouthUnionEnrolledDate.IsYouthUnionist == true)
                    {
                        _IsYouthUnionist = 1;
                    }
                    var objProfilePartyUnionByVeteranUnionEnrolledDate = listProfilePartyUnionByProfileDic.Where(s => s.ProfileID == profileItem.ID && s.VeteranUnionEnrolledDate <= CutOffDuration.DateEnd).OrderByDescending(s => s.VeteranUnionEnrolledDate).FirstOrDefault();
                    if (objProfilePartyUnionByVeteranUnionEnrolledDate != null && objProfilePartyUnionByVeteranUnionEnrolledDate.IsVeteranUnionist == true)
                    {
                        _IsVeteranUnionist = 1;
                    }

                    var objProfilePartyUnionByCommunistPartyMemberDate = listProfilePartyUnionByProfileDic.Where(s => s.ProfileID == profileItem.ID && s.CommunistPartyReserveDate <= CutOffDuration.DateEnd).OrderByDescending(s => s.CommunistPartyReserveDate).FirstOrDefault();
                    var isCommunistPartyMember = 0;
                    if (objProfilePartyUnionByCommunistPartyMemberDate != null && objProfilePartyUnionByCommunistPartyMemberDate.IsCommunistPartyMember == true)
                    {
                        isCommunistPartyMember = 1;
                    }
                    //Khoa.nguyen 0121553: Thêm phần tử lương kiểm tra tham gia Công đoàn, Đảng không dựa vào ngày tham gia	
                    var isCommunistPartyMemberFisrt = 0;
                    var objProfileIsCommunistPartyMember = listProfilePartyUnionByProfileDic.Where(s => s.ProfileID == profileItem.ID && s.IsCommunistPartyMember == true).FirstOrDefault();

                    if (objProfileIsCommunistPartyMember != null)
                    {
                        isCommunistPartyMemberFisrt = 1;
                    }

                    item = new ElementFormula(PayrollElement.HR_PROFILEPARTYUNION_ISVETERANUNIONIST.ToString(), _IsVeteranUnionist, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_PROFILEPARTYUNION_ISYOUTHUNIONIST.ToString(), _IsYouthUnionist, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_PROFILEPARTYUNION_ISCOMMUNISTPARTYMEMBER.ToString(), isCommunistPartyMember, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_PROFILE_ISCOMMUNISTPARTYMEMBER.ToString(), isCommunistPartyMemberFisrt, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region HR_IS_HOLD_LEAVE_MATERNITY
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_IS_HOLD_LEAVE_MATERNITY.ToString()))
            {

                string status = string.Empty;

                var listHoldSalaryByProfile = TotalDataAll.dicHoldSalary.GetValueOrNew(profileItem.ID);
                var ListHoldSalaryByProfileCondition = listHoldSalaryByProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthSalary <= CutOffDuration.DateEnd && m.MonthSalary >= CutOffDuration.DateStart).ToList();
                if (ListHoldSalaryByProfileCondition.Count > 0)
                {
                    if (ListHoldSalaryByProfileCondition.Any(m => m.IsLeaveM != null && m.IsLeaveM == true))
                    {
                        item = new ElementFormula(PayrollElement.HR_IS_HOLD_LEAVE_MATERNITY.ToString(), 1, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_IS_HOLD_LEAVE_MATERNITY.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_IS_HOLD_LEAVE_MATERNITY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region HR_PROFILE_DATEHIRENEW
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HR_PROFILE_DATEHIRENEW.ToString(),PayrollElement.HR_WORKINGDAY.ToString()
            , PayrollElement.HR_LEAVEDAY.ToString(), PayrollElement.HR_IS_LEAVEDAY.ToString(), PayrollElement.HR_IS_WORKINGDAY.ToString()
            , PayrollElement.HR_IS_WORKINGDAY_FOR_MONTHYEAR.ToString(), PayrollElement.HR_IS_WORKINGDAY_N_1.ToString(), PayrollElement.HR_IS_WORKINGDAY_FOR_MONTHYEAR_N_1.ToString()
            , PayrollElement.HR_DATEENDPROBATION.ToString(), PayrollElement.HR_IS_HOLD_SALARY.ToString(), PayrollElement.HR_DATE_STOPWORKING.ToString()
            , PayrollElement.HR_COUNT_MONTH_DATECOMBACK_YEAR_PREV.ToString(), PayrollElement.HR_CODEEMP.ToString(), PayrollElement.HR_DATEQUIT_REQUEST.ToString()
            , PayrollElement.HR_DATEQUITREQUEST.ToString(),PayrollElement.HR_PROFILE_DATEAPPLYATTENDANCECODE.ToString() }))
            {


                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                //Lấy ngày vào làm hoặc ngày vào làm lại
                DateTime DateHire = Hre_StopWorkingServices.GetDateHileOrDateComback(listStopWorkingByProfile, profileItem, CutOffDuration.DateEnd);
                //NV có ngày vào làm trong tháng
                item = new ElementFormula(PayrollElement.HR_IS_WORKINGDAY.ToString(), (DateHire <= CutOffDuration.DateEnd && DateHire >= CutOffDuration.DateStart) == true ? 1 : 0, 0);
                listElementFormula.Add(item);

                //NV có ngày vào làm trong tháng theo MonthYear 57127
                item = new ElementFormula(PayrollElement.HR_IS_WORKINGDAY_FOR_MONTHYEAR.ToString(), (CutOffDuration.MonthYear.Month == DateHire.Month && CutOffDuration.MonthYear.Year == DateHire.Year) == true ? 1 : 0, 0);
                listElementFormula.Add(item);

                //57125
                if (DateHire == profileItem.DateHire)
                {
                    item = new ElementFormula(PayrollElement.HR_DATE_STOPWORKING.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);

                    DateTime LastYear_Prev = new DateTime(CutOffDuration.MonthYear.Year - 1, 12, 31);
                    double CountMonth = ((LastYear_Prev.Year - profileItem.DateHire.Value.Year) * 12) + LastYear_Prev.Month - profileItem.DateHire.Value.Month;
                    item = new ElementFormula(PayrollElement.HR_COUNT_MONTH_DATECOMBACK_YEAR_PREV.ToString(), CountMonth, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_DATE_STOPWORKING.ToString(), DateHire, 0);
                    listElementFormula.Add(item);

                    DateTime LastYear_Prev = new DateTime(CutOffDuration.MonthYear.Year - 1, 12, 31);
                    double CountMonth = ((LastYear_Prev.Year - DateHire.Year) * 12) + LastYear_Prev.Month - DateHire.Month;
                    item = new ElementFormula(PayrollElement.HR_COUNT_MONTH_DATECOMBACK_YEAR_PREV.ToString(), CountMonth, 0);
                    listElementFormula.Add(item);
                }

                //tháng N-1
                Att_CutOffDurationEntity CutoffDuration_Prev = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutOffDuration.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                if (CutoffDuration_Prev != null)
                {
                    //Lấy ngày vào làm hoặc ngày vào làm lại tháng N-1
                    //[06/11/2015][hien.nguyen][Bug][59665]
                    //Lấy theo từ ngày 1 => ngày cuối tháng
                    DateTime DateHire_N_1 = Hre_StopWorkingServices.GetDateHileOrDateComback(listStopWorkingByProfile, profileItem, new DateTime(CutoffDuration_Prev.MonthYear.Year, CutoffDuration_Prev.MonthYear.Month, 1).AddMonths(1).AddDays(-1));

                    //NV có ngày vào làm trong tháng N-1
                    item = new ElementFormula(PayrollElement.HR_IS_WORKINGDAY_N_1.ToString(), (DateHire_N_1 <= CutoffDuration_Prev.DateEnd && DateHire_N_1 >= CutoffDuration_Prev.DateStart) == true ? 1 : 0, 0);
                    listElementFormula.Add(item);

                    //57127
                    if (DateHire_N_1 == profileItem.DateHire)
                    {
                        item = new ElementFormula(PayrollElement.HR_IS_WORKINGDAY_FOR_MONTHYEAR_N_1.ToString(), (CutoffDuration_Prev.MonthYear.Month == profileItem.DateHire.Value.Month && CutoffDuration_Prev.MonthYear.Year == profileItem.DateHire.Value.Year) == true ? 1 : 0, 0);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_IS_WORKINGDAY_FOR_MONTHYEAR_N_1.ToString(), (CutoffDuration_Prev.MonthYear.Month == DateHire_N_1.Month && CutoffDuration_Prev.MonthYear.Year == DateHire_N_1.Year) == true ? 1 : 0, 0);
                    }
                    listElementFormula.Add(item);
                }
                else
                {
                    //NV có ngày vào làm trong tháng N-1
                    item = new ElementFormula(PayrollElement.HR_IS_WORKINGDAY_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_IS_WORKINGDAY_FOR_MONTHYEAR_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                var listHoldSalaryByProfile = TotalDataAll.dicHoldSalary.GetValueOrNew(profileItem.ID);
                //Bị giữ lương
                item = new ElementFormula(PayrollElement.HR_IS_HOLD_SALARY.ToString(), Sal_HoldSalaryServices.IsProfileHoldSalary(listHoldSalaryByProfile, profileItem.ID, CutOffDuration.DateEnd) == true ? 1 : 0, 0);
                listElementFormula.Add(item);

                //[70579][HienNguyen][New]
                //DateQuitRequest < 15(tháng đang tính lương) trả kết quả ra 1
                item = new ElementFormula(PayrollElement.HR_DATEQUIT_REQUEST.ToString(), (profileItem.DateQuitRequest != null && profileItem.DateQuitRequest < new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 15)) ? 1 : 0, 0);
                listElementFormula.Add(item);

                //[30//11/2017][bang.nguyen][90414][New Func]
                //ngày nghỉ theo đơn
                if (profileItem.DateQuitRequest != null)
                {
                    item = new ElementFormula(PayrollElement.HR_DATEQUITREQUEST.ToString(), profileItem.DateQuitRequest, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_DATEQUITREQUEST.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }


                item = new ElementFormula(PayrollElement.HR_CODEEMP.ToString(), profileItem.CodeEmp ?? string.Empty, 0);
                listElementFormula.Add(item);


                //Ngày vào làm
                item = new ElementFormula(PayrollElement.HR_WORKINGDAY.ToString(), profileItem.DateHire, 0);
                listElementFormula.Add(item);

                //Ngày vào làm mới
                //[02/10/2017][bang.nguyen][88358][new function]
                item = new ElementFormula(PayrollElement.HR_PROFILE_DATEHIRENEW.ToString(), profileItem.DatehireNew, 0);
                listElementFormula.Add(item);

                //Ngày kết thúc thử việc
                item = new ElementFormula(PayrollElement.HR_DATEENDPROBATION.ToString(), profileItem.DateEndProbation != null ? profileItem.DateEndProbation : DateTime.MinValue, 0, profileItem.DateEndProbation != null ? "" : "Null");
                listElementFormula.Add(item);

                //Ngày nghỉ việc
                item = new ElementFormula(PayrollElement.HR_LEAVEDAY.ToString(), profileItem.DateQuit != null ? profileItem.DateQuit : DateTime.MaxValue, 0, profileItem.DateQuit != null ? "" : "Null");
                listElementFormula.Add(item);

                //NV có ngày nghỉ việc trong tháng
                item = new ElementFormula(PayrollElement.HR_IS_LEAVEDAY.ToString(), (profileItem.DateQuit <= CutOffDuration.DateEnd && profileItem.DateQuit >= CutOffDuration.DateStart) == true ? 0 : 1, 0);
                listElementFormula.Add(item);

                // [28/11/2018][bang.nguyen][101369][modify Func]
                // Ngày áp dụng mã chấm công
                if (profileItem.DateApplyAttendanceCode != null)
                {
                    item = new ElementFormula(PayrollElement.HR_PROFILE_DATEAPPLYATTENDANCECODE.ToString(), profileItem.DateApplyAttendanceCode, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_PROFILE_DATEAPPLYATTENDANCECODE.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [31122015][bang.nguyen][new func][62323]: Số ngày thâm niên (tính từ ngày vào làm tới hết ngày nghỉ việc)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_WORKINGDAY_COUNTMONTH.ToString()))
            {
                double totalDay = 0;
                if (profileItem.DateHire != null && profileItem.DateQuit != null)
                {
                    totalDay = (profileItem.DateQuit.Value - profileItem.DateHire.Value).TotalDays;
                }
                item = new ElementFormula(PayrollElement.HR_WORKINGDAY_COUNTMONTH.ToString(), totalDay, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [15/06/2016][HienNguyen][68881][NEW] + [18/06/2016][HienNguyen][69068][MODYFI]
            /// Phần tử đếm số ngày chủ nhật trong kỳ lương và có ca làm việc
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_COUNT_SUNDAY_IN_ROSTER.ToString()))
            {
                List<DateTime> listSunday = new List<DateTime>();
                if (profileItem.DateHire <= CutOffDuration.DateStart && profileItem.DateQuit != null && profileItem.DateQuit < CutOffDuration.DateEnd)
                {
                    listSunday = Common.CountSundayInMonth(CutOffDuration.DateStart, profileItem.DateQuit.Value);
                }
                else if (profileItem.DateHire != null && profileItem.DateHire > CutOffDuration.DateStart && profileItem.DateQuit != null && profileItem.DateQuit < CutOffDuration.DateEnd)
                {
                    listSunday = Common.CountSundayInMonth(profileItem.DateHire.Value, profileItem.DateQuit.Value);
                }
                else if (profileItem.DateHire != null && profileItem.DateHire > CutOffDuration.DateStart && (profileItem.DateQuit == null || profileItem.DateQuit >= CutOffDuration.DateEnd))
                {
                    listSunday = Common.CountSundayInMonth(profileItem.DateHire.Value, CutOffDuration.DateEnd);
                }
                else if (profileItem.DateHire != null && profileItem.DateHire < CutOffDuration.DateStart && (profileItem.DateQuit == null || profileItem.DateQuit >= CutOffDuration.DateEnd))
                {
                    listSunday = Common.CountSundayInMonth(CutOffDuration.DateStart, CutOffDuration.DateEnd);
                }

                var listRosterByProfile = TotalDataAll.dicRoster.GetValueOrNew(profileItem.ID);
                int countDay = 0;
                foreach (var sunday in listSunday)
                {
                    if (listRosterByProfile.Any(m => m.SunShiftID != null && m.DateStart <= sunday && (m.DateEnd == null || m.DateEnd >= sunday) && (m.Type == RosterType.E_CHANGE_SHIFT.ToString() || m.Type == RosterType.E_DEFAULT.ToString())))
                    {
                        countDay++;
                    }
                }
                item = new ElementFormula(PayrollElement.HR_COUNT_SUNDAY_IN_ROSTER.ToString(), countDay, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [01/03/2018][bang.nguyen][93228][New Func] Đếm số ngày chủ nhật có ca và có in out trong kỳ
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_COUNT_SUNDAY_SHIFT_INOUT_IN_CUTOFF.ToString()))
            {
                int countSunday = 0;

                var listAttendanceTableItemByProfile = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID)
                    .Where(m => m.CutOffDurationID == CutOffDuration.ID
                    && m.WorkDate >= CutOffDuration.DateStart
                    && m.WorkDate <= CutOffDuration.DateEnd
                    && (m.ShiftID != null || m.Shift2ID != null)
                    && m.FirstInTime != null
                    && m.LastOutTime != null).ToList();

                foreach (var objAttendanceTableItemByProfile in listAttendanceTableItemByProfile)
                {
                    if (objAttendanceTableItemByProfile.WorkDate.DayOfWeek == DayOfWeek.Sunday)
                    {
                        countSunday += 1;
                    }
                }

                item = new ElementFormula(PayrollElement.ATT_COUNT_SUNDAY_SHIFT_INOUT_IN_CUTOFF.ToString(), countSunday, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [07/12/2015][hien.nguyen][New Func][61376] + [10/06/2016][HienNguyen][68633]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HR_COSTSOURCE_NAME.ToString(), PayrollElement.HR_COMPANY_NAME.ToString(), PayrollElement.HR_EMPLOYEEGROUP_NAME.ToString(), PayrollElement.HR_IS_PROFILE_ROOT.ToString(), PayrollElement.HR_HISTORY_LABORTYPE.ToString() }))
            {
                Hre_WorkHistoryEntity WorkHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                if (WorkHistoryByProfile.HasValue())
                {
                    item = new ElementFormula(PayrollElement.HR_COSTSOURCE_NAME.ToString(), WorkHistoryByProfile.CostSourceName, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_COMPANY_NAME.ToString(), WorkHistoryByProfile.CompanyName, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_EMPLOYEEGROUP_NAME.ToString(), WorkHistoryByProfile.EmployeeGroupName, 0);
                    listElementFormula.Add(item);

                    //[20/06/2016][bang.nguyen][68824][modify]
                    item = new ElementFormula(PayrollElement.HR_HISTORY_LABORTYPE.ToString(), WorkHistoryByProfile.LaborTypeView, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_COSTSOURCE_NAME.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_COMPANY_NAME.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_EMPLOYEEGROUP_NAME.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_HISTORY_LABORTYPE.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }

                // [10/06/2016][HienNguyen][68633]
                if (profileItem.RootProfileID == null || profileItem.RootProfileID == profileItem.ID)
                {
                    item = new ElementFormula(PayrollElement.HR_IS_PROFILE_ROOT.ToString(), true, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_IS_PROFILE_ROOT.ToString(), false, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region HR_PROFILE_POSITION
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HR_PROFILE_POSITION.ToString(), PayrollElement.HR_PROFILE_JOBTITLE.ToString(), PayrollElement.HR_PROFILE_EMPLOYEETYPENAME.ToString(), PayrollElement.HR_PROFILE_EMPLOYEETYPECODE.ToString(), PayrollElement.HR_PROFILE_PAYROLLGROUPCODE.ToString() }))
            {
                Hre_WorkHistoryEntity WorkHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                //[28/11/2017][bang.nguyen][90475][bug]
                var strPositionName = string.Empty;
                var strJobTitleName = string.Empty;
                var strEmployeeTypeName = string.Empty;
                var strPayrollGroupCode = string.Empty;
                var strEmployeeTypeCode = string.Empty;


                if (WorkHistoryByProfile != null)
                {
                    if (!string.IsNullOrEmpty(WorkHistoryByProfile.PositionName))
                    {
                        strPositionName = WorkHistoryByProfile.PositionName;
                    }
                    if (!string.IsNullOrEmpty(WorkHistoryByProfile.JobTitleName))
                    {
                        strJobTitleName = WorkHistoryByProfile.JobTitleName;
                    }
                    //[09/11/2015][hien.nguyen][Modify][59734]
                    if (!string.IsNullOrEmpty(WorkHistoryByProfile.EmployeeTypeName))
                    {
                        strEmployeeTypeName = WorkHistoryByProfile.EmployeeTypeName;
                    }
                    if (!string.IsNullOrEmpty(WorkHistoryByProfile.PayrollGroupCode))
                    {
                        strPayrollGroupCode = WorkHistoryByProfile.PayrollGroupCode;
                    }
                    //[Nghia.Dang] [16/09/2020] 0119322: Bổ sung phần tử lương: lấy giá trị mã loại nhân viên
                    if (!string.IsNullOrEmpty(WorkHistoryByProfile.EmployeeTypeCode))
                    {
                        strEmployeeTypeCode = WorkHistoryByProfile.EmployeeTypeCode;
                    }
                }

                item = new ElementFormula(PayrollElement.HR_PROFILE_POSITION.ToString(), strPositionName, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_PROFILE_JOBTITLE.ToString(), strJobTitleName, 0);
                listElementFormula.Add(item);
                //[09/11/2015][hien.nguyen][Modify][59734]
                item = new ElementFormula(PayrollElement.HR_PROFILE_EMPLOYEETYPENAME.ToString(), strEmployeeTypeName, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_PROFILE_PAYROLLGROUPCODE.ToString(), strPayrollGroupCode, 0);
                listElementFormula.Add(item);
                //[Nghia.Dang] [16/09/2020] 0119322: Bổ sung phần tử lương: lấy giá trị mã loại nhân viên
                item = new ElementFormula(PayrollElement.HR_PROFILE_EMPLOYEETYPECODE.ToString(), strEmployeeTypeCode, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region [20/05/2016][hien.nguyen][Modify][59734]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HR_HISTORY_REGIONDETAIL_MINSALARY.ToString(), PayrollElement.HR_HISTORY_REGIONDETAIL_MAXSALARY.ToString() }))
            {

                //lay data nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listRegionDetail";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    Sal_GetDataComputePayrollKZServices getDataComputePayrollServices = new Sal_GetDataComputePayrollKZServices();
                    getDataComputePayrollServices.UserLogin = TotalDataAll.UserLogin;
                    TotalData600.listRegionDetail = getDataComputePayrollServices.GetListRegionDetail(ref status);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }

                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_HISTORY_REGIONDETAIL_MINSALARY.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.HR_HISTORY_REGIONDETAIL_MINSALARY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_HISTORY_REGIONDETAIL_MAXSALARY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    double _minSalary = 0;
                    double _maxSalary = 0;
                    //dòng gần nhất của lịch sử theo kì lương
                    Hre_WorkHistoryEntity objWorkHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                    if (objWorkHistoryByProfile != null && objWorkHistoryByProfile.RegionID != null)
                    {
                        //dòng có RegionID != null mới nhất trong kì lương
                        var objRegionDetail = TotalData600.listRegionDetail.Where(s => s.RegionID != null
                                                                                    && s.RegionID == objWorkHistoryByProfile.RegionID
                                                                                    && s.DateOfEffect != null
                                                                                    && s.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                        if (objRegionDetail != null && objRegionDetail.MinSalary != null)
                        {
                            _minSalary = objRegionDetail.MinSalary.Value;
                        }
                        if (objRegionDetail != null && objRegionDetail.MaxSalary != null)
                        {
                            _maxSalary = objRegionDetail.MaxSalary.Value;
                        }
                    }
                    item = new ElementFormula(PayrollElement.HR_HISTORY_REGIONDETAIL_MINSALARY.ToString(), _minSalary, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_HISTORY_REGIONDETAIL_MAXSALARY.ToString(), _maxSalary, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region phan tu Mức lương tối thiểu theo vùng của NV
            //[05032016][bang.nguyen][64029][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_PROFILE_REGIONDETAIL_MINSALARY.ToString()))
            {
                //Lấy data nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listRegionDetail";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    Sal_GetDataComputePayrollKZServices getDataComputePayrollServices = new Sal_GetDataComputePayrollKZServices();
                    getDataComputePayrollServices.UserLogin = TotalDataAll.UserLogin;
                    TotalData600.listRegionDetail = getDataComputePayrollServices.GetListRegionDetail(ref status);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }

                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_PROFILE_REGIONDETAIL_MINSALARY.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HR_PROFILE_REGIONDETAIL_MINSALARY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    double _minSalary = 0;
                    //dòng gần nhất của lịch sử theo kì lương
                    Hre_WorkHistoryEntity objWorkHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.DateEffective <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                    if (objWorkHistoryByProfile != null && objWorkHistoryByProfile.RegionID != null)
                    {
                        //dòng có RegionID != null mới nhất trong kì lương
                        var objRegionDetail = TotalData600.listRegionDetail.Where(s => s.RegionID != null
                                                                                    && s.RegionID == objWorkHistoryByProfile.RegionID
                                                                                    && s.DateOfEffect != null && s.DateOfEffect >= CutOffDuration.DateStart
                                                                                    && s.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                        if (objRegionDetail != null && objRegionDetail.MinSalary != null)
                        {
                            _minSalary = objRegionDetail.MinSalary.Value;
                        }
                    }
                    item = new ElementFormula(PayrollElement.HR_PROFILE_REGIONDETAIL_MINSALARY.ToString(), _minSalary, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region phần tử phương tiện đi lại của nhân viên
            //[05032016][bang.nguyen][64226][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_PROFILE_NAMEENTITY_VEHICLE_CODE.ToString()))
            {
                string _VehicleCode = string.Empty;
                if (profileItem.VehicleID != null)
                {
                    var objVehicle = TotalDataAll.ListCat_NameEntity.Where(s => s.NameEntityType == EnumDropDown.EntityType.E_VEHICLE.ToString() && s.ID == profileItem.VehicleID.Value).FirstOrDefault();
                    if (objVehicle != null && !string.IsNullOrEmpty(objVehicle.Code))
                    {
                        _VehicleCode = objVehicle.Code;
                    }
                }
                item = new ElementFormula(PayrollElement.HR_PROFILE_NAMEENTITY_VEHICLE_CODE.ToString(), _VehicleCode, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region phần tử mã ký túc xã của nhân viên
            //[05032016][bang.nguyen][64229][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_PROFILE_DORMITORY_DORMITORYCODE.ToString()))
            {
                string _DormitoryCode = string.Empty;
                if (profileItem.DormitoryID != null)
                {
                    var objDormitory = TotalDataAll.ListCat_Dormitory.Where(s => s.ID == profileItem.DormitoryID).FirstOrDefault();
                    if (objDormitory != null && !string.IsNullOrEmpty(objDormitory.DormitoryCode))
                    {
                        _DormitoryCode = objDormitory.DormitoryCode;
                    }
                }
                item = new ElementFormula(PayrollElement.HR_PROFILE_DORMITORY_DORMITORYCODE.ToString(), _DormitoryCode, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region phần tử mã lý do nghỉ việc
            //[23032016][bang.nguyen][65129][Modify Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.HR_STOPWORKING_RESIGNREASON_CODE.ToString(),
                PayrollElement.HR_STOPWORKING_RESIGNREASON_NAME.ToString() }))
            {


                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                //lấy cấu hình số ngày tính nhân viên nghỉ việc
                int _numberDayQuit = 0;
                string _ResignReasonCode = string.Empty;
                string _ResignReasonName = string.Empty;
                var objAllSetting = TotalDataAll.listAllSettingEntity.Where(s => s.Name == AppConfig.HRM_SAL_NUMBER_DAY_PROFILE_QUIT.ToString()).FirstOrDefault();
                if (objAllSetting != null && objAllSetting.Value1 != null && objAllSetting.Value1 != string.Empty)
                {
                    _numberDayQuit = int.Parse(objAllSetting.Value1);
                }
                var lstStopWorking = listStopWorkingByProfile.Where(s => s.Status == EnumDropDown.StopWorkStatus.E_APPROVED.ToString()
                                                                            && s.DateStop >= CutOffDuration.DateStart.AddDays(_numberDayQuit)
                                                                            && s.DateStop <= CutOffDuration.DateEnd.AddDays(_numberDayQuit)
                                                                            && s.ProfileID == profileItem.ID
                                                                            && s.ResignReasonID != null).ToList();
                if (lstStopWorking.Count > 0)
                {
                    var objStopWorking = lstStopWorking.OrderByDescending(s => s.DateStop).FirstOrDefault();
                    if (objStopWorking != null && objStopWorking.ResignReasonID != null)
                    {
                        var objResignReason = TotalDataAll.ListCat_ResignReason.Where(s => s.Code != null && s.Code != string.Empty && s.ID == objStopWorking.ResignReasonID).FirstOrDefault();
                        if (objResignReason != null)
                        {
                            _ResignReasonCode = objResignReason.Code;
                            _ResignReasonName = objResignReason.ResignReasonName;
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.HR_STOPWORKING_RESIGNREASON_CODE.ToString(), _ResignReasonCode, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.HR_STOPWORKING_RESIGNREASON_NAME.ToString(), _ResignReasonName, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Số ngày từ ngày vào đến cuối tháng, không tính những ngày dayoff từ ngày vào đến cuối tháng (VD: vào ngày 05/01, số ngày dayoff từ mùng 5 đến 31 = 6 => trả về: 31 (số ngày trong tháng) - 5 (ngày vào) + 1 (từ 5 đến 31 là 27 ngày nên phải + thêm 1) - 6 (số ngày dayoff từ ngày 05/01 đến 31/01) = 21)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_COUNT_DAY_TO_DATEEND_CUTOFF.ToString()))
            {


                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                DateTime DateHire = Hre_StopWorkingServices.GetDateHileOrDateComback(listStopWorkingByProfile, profileItem, CutOffDuration.DateEnd);

                if (DateHire != null && DateHire >= new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1))
                {
                    DateTime DateStart = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                    DateTime DateEnd = DateStart.AddMonths(1).AddDays(-1);
                    //số ngày trong tháng
                    double dayInCutoff = DateEnd.Subtract(DateHire).TotalDays + 1;
                    double dayOff = TotalDataAll.listDayOff.Where(m => m.DateOff <= DateEnd && m.DateOff >= DateHire && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID) && m.Type == EnumDropDown.DayOffType.E_WEEKEND_HLD.ToString()).Count();

                    item = new ElementFormula(PayrollElement.HR_COUNT_DAY_TO_DATEEND_CUTOFF.ToString(), dayInCutoff - dayOff, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_COUNT_DAY_TO_DATEEND_CUTOFF.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Tổng số ngày đay off có trong tháng tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_COUNT_DAYOFF_MONTH.ToString()))
            {
                if (CutOffDuration != null)
                {
                    double dayOff = TotalDataAll.listDayOff.Where(m => m.DateOff <= CutOffDuration.DateEnd && m.DateOff >= CutOffDuration.DateStart && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID)).Count();
                    item = new ElementFormula(PayrollElement.ATT_COUNT_DAYOFF_MONTH.ToString(), dayOff, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_COUNT_DAYOFF_MONTH.ToString(), 0, 0, "null");
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Số ngày trong tháng tính lương - tổng số ngày dayoff trong tháng tính lương (VD: tháng 1 có 31 ngày - 8 ngày dayoff = 23)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_COUNT_DAY_IN_CUTOFF.ToString()))
            {
                DateTime DateStart = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                DateTime DateEnd = DateStart.AddMonths(1).AddDays(-1);

                double dayInCutoff = DateEnd.Subtract(DateStart).TotalDays + 1;
                double dayOff = TotalDataAll.listDayOff.Where(m => m.DateOff <= DateEnd && m.DateOff >= DateStart && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID)).Count();

                item = new ElementFormula(PayrollElement.HR_COUNT_DAY_IN_CUTOFF.ToString(), dayInCutoff - dayOff, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region [16112015][bang.nguyen][60089][New Func] đếm số ngày trong tháng từ đầu kỳ đến cuối kỳ lương trừ những ngày dayoff trong tháng có type = 'E_WEEKEND_HLD'
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_COUNT_DAY_IN_CUTOFF_WEEKEND.ToString()))
            {
                DateTime DateStart = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                DateTime DateEnd = DateStart.AddMonths(1).AddDays(-1);

                double dayInCutoff = DateEnd.Subtract(DateStart).TotalDays + 1;
                double dayOff = TotalDataAll.listDayOff.Where(m => m.DateOff <= DateEnd && m.DateOff >= DateStart && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID) && m.Type == EnumDropDown.DayOffType.E_WEEKEND_HLD.ToString()).Count();

                item = new ElementFormula(PayrollElement.HR_COUNT_DAY_IN_CUTOFF_WEEKEND.ToString(), dayInCutoff - dayOff, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region [19/10/2015][hien.nguyen][New Func][58493]
            //Số ngày dayoff từ ngày 1 tháng tính lương đến ngày vào làm (Tháng N và tháng N-1) (VD: vào làm ngày 05/01, 01/01, 02/01 là ngày dayoff => trả về 2)
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HR_COUNT_DAYOFF_TO_DATEHIRE.ToString(), PayrollElement.HR_COUNT_DAYOFF_TO_DATEHIRE_N_1.ToString() }))
            {

                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                #region Tháng N
                //ngày đầu tháng tính lương
                DateTime DateStart = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                //ngay trong thang N
                int dayInMonth_N = DateTime.DaysInMonth(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month);
                //ngay cuoi thang N
                DateTime DateEnd_N = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, dayInMonth_N);
                //ngày vào làm
                DateTime DateHire = Hre_StopWorkingServices.GetDateHileOrDateComback(listStopWorkingByProfile, profileItem, CutOffDuration.DateEnd);

                //nếu ngày làm việc lớn hơn ngày đầu tháng
                //[04112015][bang.nguyen][modify][59503]
                //đếm số ngày dayoff từ ngày 1 của tháng N đến ngày vào làm/vào làm lại nếu ngày vào làm/vào làm lại trong tháng N
                if (DateHire != null && DateHire >= DateStart && DateHire <= DateEnd_N)
                {
                    //[03102015][bang.nguyen][modify][59440]
                    //đếm số ngày dayoff có Type = 'E_WEEKEND_HLD' hoặc 'E_HOLIDAY_HLD'
                    int DayNumber = TotalDataAll.listDayOff.Where(m => m.DateOff <= DateHire && m.DateOff >= DateStart && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID) && (m.Type == EnumDropDown.DayOffType.E_WEEKEND_HLD.ToString() || m.Type == EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString())).Count();
                    item = new ElementFormula(PayrollElement.HR_COUNT_DAYOFF_TO_DATEHIRE.ToString(), DayNumber, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_COUNT_DAYOFF_TO_DATEHIRE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                #endregion

                #region Tháng N-1
                //Get kỳ lương tháng N-1
                var CutOffDuration_Prev = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear.Date < CutOffDuration.MonthYear.Date).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                if (CutOffDuration_Prev != null)
                {
                    //ngày đầu tháng tính lương
                    DateTime DateStart_N_1 = new DateTime(CutOffDuration_Prev.MonthYear.Year, CutOffDuration_Prev.MonthYear.Month, 1);
                    //ngay trong thang
                    int dayInMonth_N_1 = DateTime.DaysInMonth(CutOffDuration_Prev.MonthYear.Year, CutOffDuration_Prev.MonthYear.Month);
                    //ngay cuoi thang N_1
                    DateTime DateEnd_N_1 = new DateTime(CutOffDuration_Prev.MonthYear.Year, CutOffDuration_Prev.MonthYear.Month, dayInMonth_N_1);
                    //ngày vào làm
                    //DateTime DateHire_N_1 = Hre_StopWorkingServices.GetDateHileOrDateComback(TotalData600.listHre_StopWorking, profileItem, CutOffDuration_Prev.DateEnd);


                    //nếu ngày làm việc lớn hơn ngày đầu tháng (thang N-1)
                    //[22102015][bang.nguyen][58493]
                    //Thêm phần tử số ngày dayoff từ ngày 1 đến ngày vào làm/vào làm lại của tháng N-1
                    //[04112015][bang.nguyen][modify][59503]
                    //đếm số ngày dayoff từ ngày 1 của tháng N-1 đến ngày vào làm/vào làm lại nếu ngày vào làm/vào làm lại trong tháng N-1
                    if (DateHire != null && DateHire >= DateStart_N_1 && DateHire <= DateEnd_N_1)
                    {
                        //[03102015][bang.nguyen][modify][59440]
                        //đếm số ngày dayoff có Type = 'E_WEEKEND_HLD' hoặc 'E_HOLIDAY_HLD'
                        int DayNumber = TotalDataAll.listDayOff.Where(m => m.DateOff <= DateHire && m.DateOff >= DateStart_N_1 && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID) && (m.Type == EnumDropDown.DayOffType.E_WEEKEND_HLD.ToString() || m.Type == EnumDropDown.DayOffType.E_HOLIDAY_HLD.ToString())).Count();
                        item = new ElementFormula(PayrollElement.HR_COUNT_DAYOFF_TO_DATEHIRE_N_1.ToString(), DayNumber, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_COUNT_DAYOFF_TO_DATEHIRE_N_1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_COUNT_DAYOFF_TO_DATEHIRE_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                #endregion
            }

            #endregion

            #region Nhân viên có ngày vào làm hoặc ngày đi làm lại trong khoảng từ ngày 1 đến ngày chốt lương trong tháng tính lương thì trả về 1, nếu không trả về 0
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HR_IS_BACK_TO_WORK.ToString(), PayrollElement.HR_IS_BACK_TO_WORK_N_1.ToString() }))
            {



                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                //[03/11/2015][hien.nguyen][Modify][59429]
                //Tháng N
                //Lấy các phần tử tính lương nằm trong Grade của nhân viên
                Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd);
                if (Grade.HasValue() && Grade.SalaryDayClose.HasValue)
                {
                    //Ngày chốt lương trong tháng tính lương
                    DateTime DateStart = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                    DateTime DateClose = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1);
                    if (Grade.SalaryDayClose.HasValue)
                    {
                        DateClose = Common.GetDateCloseByMonthYear(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, Grade.SalaryDayClose.Value);
                    }

                    //Lấy ngày vào làm hoặc ngày vào làm lại
                    DateTime DateHire = Hre_StopWorkingServices.GetDateHileOrDateComback(listStopWorkingByProfile, profileItem, DateClose);

                    if (DateHire <= DateClose && DateHire >= DateStart)
                    {
                        item = new ElementFormula(PayrollElement.HR_IS_BACK_TO_WORK.ToString(), 1, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_IS_BACK_TO_WORK.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_IS_BACK_TO_WORK.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }


                //Tháng N-1
                //Lấy các phần tử tính lương nằm trong Grade của nhân viên
                Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart.AddMonths(-1), CutOffDuration.DateEnd.AddMonths(-1));

                if (Grade.HasValue() && Grade.SalaryDayClose.HasValue)
                {
                    //Ngày chốt lương trong tháng tính lương
                    DateTime DateStart = new DateTime(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, 1);
                    DateTime DateClose = Common.GetDateCloseByMonthYear(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, Grade.SalaryDayClose.Value);

                    //Lấy ngày vào làm hoặc ngày vào làm lại
                    DateTime DateHire = Hre_StopWorkingServices.GetDateHileOrDateComback(listStopWorkingByProfile, profileItem, DateClose);

                    if (DateHire <= DateClose && DateHire >= DateStart)
                    {
                        item = new ElementFormula(PayrollElement.HR_IS_BACK_TO_WORK_N_1.ToString(), 1, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_IS_BACK_TO_WORK_N_1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_IS_BACK_TO_WORK_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Nhân viên có trong  doanh sách kỷ luật trong tháng tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_NUMBER_DAY_BEFORE_WORK.ToString()))
            {


                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                double CountDay = 0;
                DateTime DateHire = Hre_StopWorkingServices.GetDateHileOrDateComback(listStopWorkingByProfile, profileItem, CutOffDuration.DateEnd);

                //nếu ngày vào làm lớn hơn
                if (DateHire != null && DateHire > CutOffDuration.DateStart && DateHire <= CutOffDuration.DateEnd)
                {
                    DateTime dateStart = new DateTime(DateHire.Year, DateHire.Month, 1);
                    CountDay = DateHire.Subtract(dateStart).TotalDays;

                    int DayOff = TotalDataAll.listDayOff.Where(m => ((m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID) || m.OrgStructureID == profileItem.OrgStructureID) && m.DateOff >= dateStart && m.DateOff < DateHire).Count();
                    CountDay -= DayOff;
                }

                item = new ElementFormula(PayrollElement.HR_NUMBER_DAY_BEFORE_WORK.ToString(), CountDay, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region Nhân viên có trong  doanh sách kỷ luật trong tháng tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_NUMBER_DAY_BEFORE_WORK_PREV.ToString()))
            {



                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                DateTime DateStartPrev = CutOffDuration.DateStart.AddMonths(-1);
                DateTime DateEndPrev = CutOffDuration.DateEnd.AddMonths(-1);
                double CountDay = 0;
                int DayClose = 1;

                //Lấy các phần tử tính lương nằm trong Grade của nhân viên
                Sal_GradeEntity Grade = FindGradePayrollByProfileAndMonthYear(TotalDataAll.dicGrade, profileItem.ID, CutOffDuration.DateStart, CutOffDuration.DateEnd);
                Cat_GradePayrollEntity CatGrade = Grade != null ? TotalDataAll.listCat_GradePayroll.Where(m => m.ID == Grade.GradePayrollID).FirstOrDefault() : null;
                if (CatGrade != null && CatGrade.SalaryDayClose != null)
                {
                    DayClose = (int)CatGrade.SalaryDayClose;
                }

                //lấy ngày vào làm gần nhất
                DateTime DateHire = Hre_StopWorkingServices.GetDateHileOrDateComback(listStopWorkingByProfile, profileItem, DateEndPrev);

                //nếu ngày vào làm lớn hơn
                if (DateHire != null && DateHire > DateStartPrev && DateHire <= DateEndPrev && DateHire.Day > DayClose)
                {
                    CountDay = new DateTime(DateHire.Year, DateHire.Month, 1).AddMonths(1).AddDays(-1).Subtract(DateHire).TotalDays + 1;
                    DateStartPrev = new DateTime(DateHire.Year, DateHire.Month, 1).AddMonths(1).AddDays(-1);
                    int DayOff = TotalDataAll.listDayOff.Where(m => (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID) && m.DateOff <= DateStartPrev && m.DateOff >= DateHire).Count();
                    CountDay -= DayOff;
                }

                item = new ElementFormula(PayrollElement.HR_NUMBER_DAY_BEFORE_WORK_PREV.ToString(), CountDay, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region Số tiền khen thưởng
            //[25/09/2017][bang.nguyen][87693][new func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_REWARD_TOTAL_AMOUNT.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicReward(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_REWARD_TOTAL_AMOUNT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HR_REWARD_TOTAL_AMOUNT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listRewardByProfileDic = TotalData600.dicReward.GetValueOrNew(profileItem.ID);
                    double sumRewardValue = 0;
                    sumRewardValue = listRewardByProfileDic.Where(m => m.ProfileID == profileItem.ID
                    && m.RewardValue != null
                    && m.DateOfEffective >= CutOffDuration.DateStart && m.DateOfEffective <= CutOffDuration.DateEnd)
                        .Sum(s => s.RewardValue.Value);
                    item = new ElementFormula(PayrollElement.HR_REWARD_TOTAL_AMOUNT.ToString(), sumRewardValue, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [25/09/2017][bang.nguyen][87693][new func] Số tiền kỷ luật
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_DISCIPLINE_TOTAL_AMOUNT.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetListDiscipline(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_DISCIPLINE_TOTAL_AMOUNT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HR_DISCIPLINE_TOTAL_AMOUNT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    double sumAmountOfFine = 0;
                    var listDisciplineByProfile = TotalData600.dicDiscipline.GetValueOrNew(profileItem.ID);

                    sumAmountOfFine = listDisciplineByProfile.Where(m => m.ProfileID == profileItem.ID
                    && m.AmountOfFine != null
                    && m.DateOfEffective >= CutOffDuration.DateStart && m.DateOfEffective <= CutOffDuration.DateEnd)
                        .Sum(s => s.AmountOfFine.Value);



                    item = new ElementFormula(PayrollElement.HR_DISCIPLINE_TOTAL_AMOUNT.ToString(), sumAmountOfFine, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Nhân viên có trong  doanh sách kỷ luật trong tháng tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_IS_DISCIPLINE.ToString()))//đã lấy lên chưa ?
            {
                string status = string.Empty;
                dataComputeSer.GetListDiscipline(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_IS_DISCIPLINE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HR_IS_DISCIPLINE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    DateTime datefrom = new DateTime(CutOffDuration.MonthYear.Year - 1, 4, 1);
                    DateTime dateto = new DateTime(CutOffDuration.MonthYear.Year, 3, 31);
                    var listDisciplineByProfile = TotalData600.dicDiscipline.GetValueOrNew(profileItem.ID);
                    var listDisciplineProfile = listDisciplineByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffective >= datefrom && m.DateOfEffective <= dateto).FirstOrDefault();

                    item = new ElementFormula(PayrollElement.HR_IS_DISCIPLINE.ToString(), listDisciplineProfile != null ? 1 : 0, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region [18/08/2017][bang.nguyen][86706][New Func] muc tien phat thang
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_SUM_DISCIPLINE_AMOUNTOFFINE_INMONTH.ToString()))//đã lấy lên chưa ?
            {

                string status = string.Empty;
                dataComputeSer.GetListDiscipline(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_SUM_DISCIPLINE_AMOUNTOFFINE_INMONTH.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_SUM_DISCIPLINE_AMOUNTOFFINE_INMONTH.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    double _sumAmountOfFine = 0;

                    var listDisciplineByProfile = TotalData600.dicDiscipline.GetValueOrNew(profileItem.ID);

                    var listDisciplineProfile = listDisciplineByProfile
                                                 .Where(m =>
                                                 m.ProfileID == profileItem.ID
                                                 && m.DateOfEffective <= CutOffDuration.DateEnd
                                                 && CutOffDuration.DateStart <= m.DateEndOfViolation)
                                                 .ToList();

                    if (listDisciplineProfile.Count > 0)
                    {
                        foreach (var objDiscipline in listDisciplineProfile)
                        {
                            if (objDiscipline.DateEndOfViolation != null && objDiscipline.DateOfEffective != null && objDiscipline.AmountOfFine != null)
                            {
                                var numberMonthEffective = ((objDiscipline.DateEndOfViolation.Value.Year - objDiscipline.DateOfEffective.Value.Year) * 12) + objDiscipline.DateEndOfViolation.Value.Month - objDiscipline.DateOfEffective.Value.Month + 1;

                                if (numberMonthEffective != 0)
                                {
                                    _sumAmountOfFine += objDiscipline.AmountOfFine.Value / numberMonthEffective;
                                }
                            }
                        }
                    }

                    item = new ElementFormula(PayrollElement.SAL_SUM_DISCIPLINE_AMOUNTOFFINE_INMONTH.ToString(), _sumAmountOfFine, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Số lần NV bị kỹ luật trong tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_COUNT_DISCIPLINE.ToString()))//đã lấy lên chưa ?
            {
                string status = string.Empty;
                dataComputeSer.GetListDiscipline(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_COUNT_DISCIPLINE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HR_COUNT_DISCIPLINE.ToString(), 0, 0);
                    listElementFormula.Add(item); ;
                }
                else
                {
                    var listDisciplineByProfile = TotalData600.dicDiscipline.GetValueOrNew(profileItem.ID);
                    var listDisciplineProfile = listDisciplineByProfile.Count(m =>
                                                m.ProfileID == profileItem.ID
                                                && m.DateOfEffective >= CutOffDuration.DateStart
                                                && m.DateOfEffective <= CutOffDuration.DateEnd);
                    item = new ElementFormula(PayrollElement.HR_COUNT_DISCIPLINE.ToString(), listDisciplineProfile, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Phần tử tổng thời gian tạm hoãn công việc tính tới cuối kỳ lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_TOTAL_DAY_STOP_WORKING.ToString()))
            {

                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);
                item = new ElementFormula(PayrollElement.HR_TOTAL_DAY_STOP_WORKING.ToString(), SumStopWorkingDay(listStopWorkingByProfile.Where(m => m.ProfileID == profileItem.ID).ToList(), CutOffDuration.DateEnd), 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region Nhân viên có được tính trợ cấp hay không (Có ngày vào làm từ 1996<=N<=31/12/2008)
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_IS_COMPUTE_SUBSIDIZE.ToString()))
            {
                DateTime from = new DateTime(1996, 1, 1);
                DateTime to = new DateTime(2008, 12, 31);
                item = new ElementFormula(PayrollElement.HR_IS_COMPUTE_SUBSIDIZE.ToString(), (profileItem.DateHire <= to && profileItem.DateHire >= from) == true ? 1 : 0, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Số hợp đồng và mã hợp đồng
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
            PayrollElement.HR_CONTRACT_CODE.ToString(),
            PayrollElement.HR_CONTRACT_NUMBER.ToString(),
            PayrollElement.HR_CONSTRACT_TYPE_CODE.ToString(),
            PayrollElement.HR_CONSTRACT_DURATION.ToString(),
            PayrollElement.HR_CONSTRACT_TYPE_UNITTIME.ToString(),
            PayrollElement.HR_CONTRACT_CODE_TYPE_ASC.ToString(),
            PayrollElement.HR_CONTRACT_DATESTART_ASC.ToString(),
            PayrollElement.HR_CONTRACT_DATEEND_ASC.ToString(),
        }))
            {

                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_CONTRACT_CODE.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.HR_CONSTRACT_DURATION.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_CONSTRACT_TYPE_UNITTIME.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.HR_CONSTRACT_DURATION.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_CONSTRACT_TYPE_UNITTIME.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);
                    var ContractByProfile = listContractByProfileDic.Where(m => m.ProfileID == profileItem.ID).OrderByDescending(m => m.DateStart).FirstOrDefault();
                    if (ContractByProfile != null)
                    {
                        item = new ElementFormula(PayrollElement.HR_CONTRACT_CODE.ToString(), ContractByProfile.Code, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HR_CONTRACT_NUMBER.ToString(), ContractByProfile.ContractNo, 0);
                        listElementFormula.Add(item);
                        //[06/11/2015][hien.nguyen][Modify][59713]
                        item = new ElementFormula(PayrollElement.HR_CONSTRACT_TYPE_CODE.ToString(), ContractByProfile.TypeCode, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_CONTRACT_CODE.ToString(), string.Empty, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HR_CONTRACT_NUMBER.ToString(), string.Empty, 0, "Null");
                        listElementFormula.Add(item);
                        //[06/11/2015][hien.nguyen][Modify][59713]
                        item = new ElementFormula(PayrollElement.HR_CONSTRACT_TYPE_CODE.ToString(), string.Empty, 0);
                        listElementFormula.Add(item);
                    }

                    // [12/11/2018][tung.tran][Modify][100831]
                    var ContractByProfileApproved = listContractByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.Status == "E_APPROVED").OrderByDescending(m => m.DateStart).FirstOrDefault();
                    if (ContractByProfileApproved != null)
                    {
                        item = new ElementFormula(PayrollElement.HR_CONSTRACT_DURATION.ToString(), ContractByProfileApproved.Duration, 0);
                        listElementFormula.Add(item);
                        //Hien.Le [08/08/2019] [0107808] [Modify]
                        item = new ElementFormula(PayrollElement.HR_CONSTRACT_TYPE_UNITTIME.ToString(), ContractByProfileApproved.ContractUnitTime, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_CONSTRACT_DURATION.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HR_CONSTRACT_TYPE_UNITTIME.ToString(), string.Empty, 0, "Null");
                        listElementFormula.Add(item);
                    }
                    //Khoa.nguyen [11/11/2019]:0110070: [New Function] Thêm phần tử lương để cấp, thanh toán phép năm
                    var objContractByProfileAsc = listContractByProfileDic.Where(p => p.ProfileID == profileItem.ID
                    && ((p.DateEnd == null ? p.DateEnd = DateTime.MaxValue : p.DateEnd) >= CutOffDuration.DateStart)
                    && p.Status == EnumDropDown.StatusApproved.E_APPROVED.ToString()
                    ).OrderBy(m => m.DateStart).FirstOrDefault();

                    if (objContractByProfileAsc != null)
                    {
                        var objContractTypeAsc = TotalDataAll.lstContractType.FirstOrDefault(s => s.ID == objContractByProfileAsc.ContractTypeID);

                        item = new ElementFormula(PayrollElement.HR_CONTRACT_CODE_TYPE_ASC.ToString(), objContractTypeAsc.Code, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HR_CONTRACT_DATESTART_ASC.ToString(), objContractByProfileAsc.DateStart, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HR_CONTRACT_DATEEND_ASC.ToString(), objContractByProfileAsc.DateEnd, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_CONTRACT_CODE_TYPE_ASC.ToString(), string.Empty, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HR_CONTRACT_DATESTART_ASC.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.HR_CONTRACT_DATEEND_ASC.ToString(), 0, 0);
                        listElementFormula.Add(item);

                    }

                }
            }

            #endregion

            #region [21/07/2016][bang.nguyen][70873][Modify Func] mã loại hợp đồng đầu tiên
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_CONSTRACT_FIRST_TYPE_CODE.ToString()))
            {

                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_CONSTRACT_FIRST_TYPE_CODE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HR_CONSTRACT_FIRST_TYPE_CODE.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);
                    var lstcontractByProfile = listContractByProfileDic.Where(s => s.ProfileID == profileItem.ID
                                                                            && s.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                                                            && s.IsMLC != true
                                                                            && s.DateStart <= CutOffDuration.DateEnd
                                                                            && (s.DateEnd == null || (s.DateEnd >= CutOffDuration.DateStart))
                                                                            ).ToList();
                    string _codeContractType = string.Empty;
                    if (lstcontractByProfile.Count > 0)
                    {
                        var objContractFirst = lstcontractByProfile.OrderBy(s => s.DateStart).FirstOrDefault();
                        if (objContractFirst != null && objContractFirst.TypeCode != null)
                        {
                            _codeContractType = objContractFirst.TypeCode;
                        }
                    }
                    item = new ElementFormula(PayrollElement.HR_CONSTRACT_FIRST_TYPE_CODE.ToString(), _codeContractType, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region HR_IS_BIRTHDAY
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HR_IS_BIRTHDAY.ToString(), PayrollElement.HR_PROFILE_BIRTHDAY_CUTOFFDURATION.ToString() }))
            {
                /*
                    [22122015][bang.nguyen][62148][Modify Func]

                    [25/12/2015][hien.nguyen][62314][Modify Func]                
                */

                DateTime tempDateOfBirth = DateTime.MinValue;
                if (profileItem.DateOfBirth != null)
                {
                    tempDateOfBirth = profileItem.DateOfBirth.Value;

                    if (tempDateOfBirth.Month == CutOffDuration.DateEnd.Month)
                    {
                        item = new ElementFormula(PayrollElement.HR_IS_BIRTHDAY.ToString(), 1, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_IS_BIRTHDAY.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }

                    // [25/11/2017][bang.nguyen][90302][New Func]
                    // Ngày sinh trong tháng tính lương
                    bool isCheckDateOfBirthInCutOff = false;
                    DateTime dateOfBirth = profileItem.DateOfBirth.Value;
                    for (DateTime date = CutOffDuration.DateStart; date <= CutOffDuration.DateEnd; date = date.AddDays(1))
                    {
                        if (dateOfBirth.Month == date.Month && dateOfBirth.Day == date.Day)
                        {
                            isCheckDateOfBirthInCutOff = true;
                            break;
                        }
                    }
                    if (isCheckDateOfBirthInCutOff)
                    {
                        item = new ElementFormula(PayrollElement.HR_PROFILE_BIRTHDAY_CUTOFFDURATION.ToString(), dateOfBirth, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_PROFILE_BIRTHDAY_CUTOFFDURATION.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.HR_IS_BIRTHDAY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HR_PROFILE_BIRTHDAY_CUTOFFDURATION.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region HR_COUNT_MONTH_WORKING
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_COUNT_MONTH_WORKING.ToString()))
            {
                double Month = DateTime.Now.Date.Subtract(profileItem.DateHire.Value.Date).TotalDays;
                item = new ElementFormula(PayrollElement.HR_COUNT_MONTH_WORKING.ToString(), Month, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region HDT JOB

            #region Ngày vào làm và ngày kết thúc HDT JOB tháng N
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_START_DATE_HDTJOB.ToString())
                || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HR_END_DATE_HDTJOB.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (HR_START_DATE_HDTJOB) ";

                    item = new ElementFormula(PayrollElement.HR_START_DATE_HDTJOB.ToString(), null, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.HR_END_DATE_HDTJOB.ToString(), null, 0, "Null");
                    listElementFormula.Add(item);

                }
                else
                {
                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);

                    Hre_HDTJobEntity HDTJOB_DateFrom = new Hre_HDTJobEntity();
                    //Ngày vào làm HDT JOB
                    HDTJOB_DateFrom = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateFrom <= CutOffDuration.DateEnd && (m.DateTo >= CutOffDuration.DateStart || m.DateTo == null) && m.Status == HDTJobStatus.E_APPROVE.ToString()).OrderBy(m => m.DateFrom).FirstOrDefault();
                    if (HDTJOB_DateFrom != null)
                    {
                        DateTime form = HDTJOB_DateFrom.DateFrom != null ? (DateTime)HDTJOB_DateFrom.DateFrom : DateTime.MinValue;
                        DateTime to = HDTJOB_DateFrom.DateTo != null ? (DateTime)HDTJOB_DateFrom.DateTo : CutOffDuration.DateEnd;

                        item = new ElementFormula(PayrollElement.HR_START_DATE_HDTJOB.ToString(), form, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.HR_END_DATE_HDTJOB.ToString(), to, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_START_DATE_HDTJOB.ToString(), DateTime.MinValue, 0, "Null");
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.HR_END_DATE_HDTJOB.ToString(), DateTime.MinValue, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region Ngày vào làm và ngày kết thúc HDT JOB tháng N-1
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.HR_END_DATE_HDTJOB_PREV.ToString(),
                PayrollElement.HR_START_DATE_HDTJOB_PREV.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HR_END_DATE_HDTJOB_PREV.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.HR_START_DATE_HDTJOB_PREV.ToString(), null, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.HR_END_DATE_HDTJOB_PREV.ToString(), null, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);
                    var CutOffDuration_Prev = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear == CutOffDuration.MonthYear.AddMonths(-1)).OrderByDescending(m => m.MonthYear).FirstOrDefault();

                    if (CutOffDuration_Prev != null)
                    {
                        List<Hre_HDTJobEntity> listHre_HDTJob_Prev = new List<Hre_HDTJobEntity>();
                        Hre_HDTJobEntity HDTJOB_DateFrom = new Hre_HDTJobEntity();
                        //Ngày vào làm HDT JOB
                        HDTJOB_DateFrom = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateFrom <= CutOffDuration_Prev.DateEnd && (m.DateTo >= CutOffDuration_Prev.DateStart || m.DateTo == null) && m.Status == HDTJobStatus.E_APPROVE.ToString()).OrderBy(m => m.DateFrom).FirstOrDefault();
                        if (HDTJOB_DateFrom != null)
                        {
                            DateTime form = HDTJOB_DateFrom.DateFrom != null ? (DateTime)HDTJOB_DateFrom.DateFrom : DateTime.MinValue;
                            DateTime to = HDTJOB_DateFrom.DateTo != null ? (DateTime)HDTJOB_DateFrom.DateTo : CutOffDuration.DateEnd;

                            item = new ElementFormula(PayrollElement.HR_START_DATE_HDTJOB_PREV.ToString(), form, 0);
                            listElementFormula.Add(item);

                            item = new ElementFormula(PayrollElement.HR_END_DATE_HDTJOB_PREV.ToString(), to, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.HR_START_DATE_HDTJOB_PREV.ToString(), DateTime.MinValue, 0, "Null");
                            listElementFormula.Add(item);

                            item = new ElementFormula(PayrollElement.HR_END_DATE_HDTJOB_PREV.ToString(), DateTime.MinValue, 0, "Null");
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.HR_START_DATE_HDTJOB_PREV.ToString(), DateTime.MinValue, 0, "Không tồn tại kỳ N-1");
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.HR_END_DATE_HDTJOB_PREV.ToString(), DateTime.MinValue, 0, "Không tồn tại kỳ N-1");
                        listElementFormula.Add(item);
                    }
                }
            }


            #endregion

            #region Tính số ngày công đi làm HDT JOB Tháng N

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_WORKDAY_HDTJOB_4.ToString()) || CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_WORKDAY_HDTJOB_5.ToString()))//đã lấy lên chưa ?
            {
                double HDTJobDay = 0;
                if (objAttendanceTableProCut != null)
                {
                    if (objAttendanceTableProCut.HDTJobType1 != null && objAttendanceTableProCut.HDTJobType1 == EnumDropDown.HDTJobType.E_TYPE4.ToString())
                    {
                        HDTJobDay += objAttendanceTableProCut.HDTJobDayCount1 != null ? (int)objAttendanceTableProCut.HDTJobDayCount1 : 0;
                    }
                    if (objAttendanceTableProCut.HDTJobType2 != null && objAttendanceTableProCut.HDTJobType2 == EnumDropDown.HDTJobType.E_TYPE4.ToString())
                    {
                        HDTJobDay += objAttendanceTableProCut.HDTJobDayCount2 != null ? (int)objAttendanceTableProCut.HDTJobDayCount2 : 0;
                    }
                    if (objAttendanceTableProCut.HDTJobType3 != null && objAttendanceTableProCut.HDTJobType3 == EnumDropDown.HDTJobType.E_TYPE4.ToString())
                    {
                        HDTJobDay += objAttendanceTableProCut.HDTJobDayCount3 != null ? (int)objAttendanceTableProCut.HDTJobDayCount3 : 0;
                    }
                }

                //Số ngày công làm HDT Job Loại 4 (tháng N)
                item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDTJOB_4.ToString(), HDTJobDay, 0);
                listElementFormula.Add(item);

                HDTJobDay = 0;
                if (objAttendanceTableProCut != null)
                {
                    if (objAttendanceTableProCut.HDTJobType1 != null && objAttendanceTableProCut.HDTJobType1 == EnumDropDown.HDTJobType.E_TYPE5.ToString())
                    {
                        HDTJobDay += objAttendanceTableProCut.HDTJobDayCount1 != null ? (int)objAttendanceTableProCut.HDTJobDayCount1 : 0;
                    }
                    if (objAttendanceTableProCut.HDTJobType2 != null && objAttendanceTableProCut.HDTJobType2 == EnumDropDown.HDTJobType.E_TYPE5.ToString())
                    {
                        HDTJobDay += objAttendanceTableProCut.HDTJobDayCount2 != null ? (int)objAttendanceTableProCut.HDTJobDayCount2 : 0;
                    }
                    if (objAttendanceTableProCut.HDTJobType3 != null && objAttendanceTableProCut.HDTJobType3 == EnumDropDown.HDTJobType.E_TYPE5.ToString())
                    {
                        HDTJobDay += objAttendanceTableProCut.HDTJobDayCount3 != null ? (int)objAttendanceTableProCut.HDTJobDayCount3 : 0;
                    }
                }

                //Số ngày công làm HDT Job Loại 5 (tháng N)
                item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDTJOB_5.ToString(), HDTJobDay, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region Tính số ngày công đi làm HDT JOB Tháng N-1

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_WORKDAY_HDTJOB_PREV_4.ToString(), PayrollElement.ATT_WORKDAY_HDTJOB_PREV_5.ToString() }))
            {
                //lấy dữ liệu công tháng N-1
                var objAttendanceTableProCut_Prev = TotalDataAll.Att_AttendanceTable_Prev.Where(m => m.ProfileID == profileItem.ID).FirstOrDefault();

                double HDTJobDay = 0;
                if (objAttendanceTableProCut_Prev != null && objAttendanceTableProCut_Prev.HDTJobType1 != null && objAttendanceTableProCut_Prev.HDTJobType1 == EnumDropDown.HDTJobType.E_TYPE4.ToString())
                {
                    HDTJobDay += objAttendanceTableProCut_Prev.HDTJobDayCount1 != null ? (int)objAttendanceTableProCut_Prev.HDTJobDayCount1 : 0;
                }
                if (objAttendanceTableProCut_Prev != null && objAttendanceTableProCut_Prev.HDTJobType2 != null && objAttendanceTableProCut_Prev.HDTJobType2 == EnumDropDown.HDTJobType.E_TYPE4.ToString())
                {
                    HDTJobDay += objAttendanceTableProCut_Prev.HDTJobDayCount2 != null ? (int)objAttendanceTableProCut_Prev.HDTJobDayCount2 : 0;
                }
                if (objAttendanceTableProCut_Prev != null && objAttendanceTableProCut_Prev.HDTJobType3 != null && objAttendanceTableProCut_Prev.HDTJobType3 == EnumDropDown.HDTJobType.E_TYPE4.ToString())
                {
                    HDTJobDay += objAttendanceTableProCut_Prev.HDTJobDayCount3 != null ? (int)objAttendanceTableProCut_Prev.HDTJobDayCount3 : 0;
                }

                //Số ngày công làm HDT Job Loại 4 (tháng N)
                item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDTJOB_PREV_4.ToString(), HDTJobDay, 0);
                listElementFormula.Add(item);

                HDTJobDay = 0;
                if (objAttendanceTableProCut_Prev != null && objAttendanceTableProCut_Prev.HDTJobType1 != null && objAttendanceTableProCut_Prev.HDTJobType1 == EnumDropDown.HDTJobType.E_TYPE5.ToString())
                {
                    HDTJobDay += objAttendanceTableProCut_Prev.HDTJobDayCount1 != null ? (int)objAttendanceTableProCut_Prev.HDTJobDayCount1 : 0;
                }
                if (objAttendanceTableProCut_Prev != null && objAttendanceTableProCut_Prev.HDTJobType2 != null && objAttendanceTableProCut_Prev.HDTJobType2 == EnumDropDown.HDTJobType.E_TYPE5.ToString())
                {
                    HDTJobDay += objAttendanceTableProCut_Prev.HDTJobDayCount2 != null ? (int)objAttendanceTableProCut_Prev.HDTJobDayCount2 : 0;
                }
                if (objAttendanceTableProCut_Prev != null && objAttendanceTableProCut_Prev.HDTJobType3 != null && objAttendanceTableProCut_Prev.HDTJobType3 == EnumDropDown.HDTJobType.E_TYPE5.ToString())
                {
                    HDTJobDay += objAttendanceTableProCut_Prev.HDTJobDayCount3 != null ? (int)objAttendanceTableProCut_Prev.HDTJobDayCount3 : 0;
                }

                //Số ngày công làm HDT Job Loại 5 (tháng N)
                item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDTJOB_PREV_5.ToString(), HDTJobDay, 0);
                listElementFormula.Add(item);
            }

            #endregion

            #region Phần tử kiểm tra có ngày ra HDT hay không tháng N và tháng N-1

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_HDT_IS_DATE_END.ToString(),
                PayrollElement.ATT_HDT_IS_DATE_END_N_1.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_HDT_IS_DATE_END.ToString() + ") ";
                }
                else
                {

                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);

                    #region Tháng N
                    List<Hre_HDTJobEntity> HDTJOBByProfile = new List<Hre_HDTJobEntity>();
                    HDTJOBByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateFrom <= CutOffDuration.DateEnd && (m.DateTo >= CutOffDuration.DateStart || m.DateTo == null) && m.Status == HDTJobStatus.E_APPROVE.ToString()).ToList();
                    if (HDTJOBByProfile.Any(m => m.DateTo == null))
                    {
                        item = new ElementFormula(PayrollElement.ATT_HDT_IS_DATE_END.ToString(), 1, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_HDT_IS_DATE_END.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    #endregion

                    #region Tháng N-1

                    DateTime DateStartN1 = CutOffDuration.DateStart.AddMonths(-1);
                    DateTime DateEndN1 = CutOffDuration.DateEnd.AddMonths(-1);

                    HDTJOBByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateFrom <= DateEndN1 && (m.DateTo >= DateStartN1 || m.DateTo == null) && m.Status == HDTJobStatus.E_APPROVE.ToString()).ToList();
                    if (HDTJOBByProfile.Any(m => m.DateTo == null))
                    {
                        item = new ElementFormula(PayrollElement.ATT_HDT_IS_DATE_END.ToString(), 1, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_HDT_IS_DATE_END.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    #endregion
                }
            }

            #endregion

            #region MyRegion

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_HDT_IS_EVERY_DAYOFF.ToString(),
                PayrollElement.ATT_HDT_IS_EVERY_DAYOFF_N_1.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_HDT_IS_EVERY_DAYOFF.ToString() + ") ";
                }
                else
                {

                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);

                    Hre_HDTJobEntity listHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateTo != null && m.DateFrom <= CutOffDuration.DateEnd && m.DateTo >= CutOffDuration.DateStart && m.Status == HDTJobStatus.E_APPROVE.ToString()).OrderByDescending(m => m.DateTo).FirstOrDefault();

                    #region Tháng N
                    if (listHDTByProfile != null && listHDTByProfile.DateTo != null && listHDTByProfile.DateTo < CutOffDuration.DateEnd)
                    {
                        double DayOff = TotalDataAll.listDayOff.Count(m => (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID) && m.DateOff <= CutOffDuration.DateEnd && m.DateOff >= listHDTByProfile.DateTo);
                        if (DayOff > 0)
                        {
                            double Day = CutOffDuration.DateEnd.Subtract(listHDTByProfile.DateTo.Value).TotalDays + 1;
                            if (DayOff == Day)
                            {
                                item = new ElementFormula(PayrollElement.ATT_HDT_IS_EVERY_DAYOFF.ToString(), 1, 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.ATT_HDT_IS_EVERY_DAYOFF.ToString(), 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.ATT_HDT_IS_EVERY_DAYOFF.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_HDT_IS_EVERY_DAYOFF.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    #endregion

                    #region Tháng N-1
                    DateTime DateStartN1 = CutOffDuration.DateStart.AddMonths(-1);
                    DateTime DateEndN1 = CutOffDuration.DateEnd.AddMonths(-1);
                    listHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateTo != null && m.DateFrom <= DateEndN1 && m.DateTo >= DateStartN1 && m.Status == HDTJobStatus.E_APPROVE.ToString()).OrderByDescending(m => m.DateTo).FirstOrDefault();
                    if (listHDTByProfile != null && listHDTByProfile.DateTo != null && listHDTByProfile.DateTo < CutOffDuration.DateEnd)
                    {
                        double DayOff = TotalDataAll.listDayOff.Count(m => (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID) && m.DateOff <= CutOffDuration.DateEnd && m.DateOff >= listHDTByProfile.DateTo);
                        if (DayOff > 0)
                        {
                            double Day = CutOffDuration.DateEnd.Subtract(listHDTByProfile.DateTo.Value).TotalDays + 1;
                            if (DayOff == Day)
                            {
                                item = new ElementFormula(PayrollElement.ATT_HDT_IS_EVERY_DAYOFF_N_1.ToString(), 1, 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.ATT_HDT_IS_EVERY_DAYOFF_N_1.ToString(), 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.ATT_HDT_IS_EVERY_DAYOFF_N_1.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_HDT_IS_EVERY_DAYOFF_N_1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    #endregion

                }
            }
            #endregion

            #region Số ngày làm HDT loại 4 và 5 trừ ngày DayOff (tháng N và tháng N-1)
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_4.ToString(),
                PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_5.ToString(),
                PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_4_N_1.ToString(),
                PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_5_N_1.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_4.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_4.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_5.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_4_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_5_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    DateTime DateStartN1 = CutOffDuration.DateStart.AddMonths(-1);
                    DateTime DateEndN1 = CutOffDuration.DateEnd.AddMonths(-1);

                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);
                    List<Hre_HDTJobEntity> ListHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.Status == HDTJobStatus.E_APPROVE.ToString()).ToList();
                    List<Hre_HDTJobEntity> ListHDTByProfileN = ListHDTByProfile.Where(m => m.DateFrom <= CutOffDuration.DateEnd && (m.DateTo >= CutOffDuration.DateStart || m.DateTo == null)).ToList();
                    List<Hre_HDTJobEntity> ListHDTByProfileN1 = ListHDTByProfile.Where(m => m.DateFrom <= DateEndN1 && (m.DateTo >= DateStartN1 || m.DateTo == null)).ToList();

                    #region tính số ngày làm HDT loại 4
                    List<Hre_HDTJobEntity> ListHDTByProfileN_Type4 = ListHDTByProfileN.Where(m => m.Type == EnumDropDown.HDTJobType.E_TYPE4.ToString()).ToList();
                    double Day_Type4 = 0;
                    DateTime _tmp = new DateTime();
                    foreach (var i in ListHDTByProfileN_Type4)
                    {
                        _tmp = i.DateTo != null && i.DateTo <= CutOffDuration.DateEnd ? i.DateTo.Value : CutOffDuration.DateEnd;
                        if (i.DateFrom != null)
                        {
                            Day_Type4 += _tmp.Subtract(i.DateFrom != null && i.DateFrom >= CutOffDuration.DateStart ? i.DateFrom.Value : CutOffDuration.DateStart).TotalDays + 1;
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_4.ToString(), Day_Type4, 0);
                    listElementFormula.Add(item);
                    #endregion

                    #region tính số ngày làm HDT loại 5
                    List<Hre_HDTJobEntity> ListHDTByProfileN_Type5 = ListHDTByProfileN.Where(m => m.Type == EnumDropDown.HDTJobType.E_TYPE5.ToString()).ToList();
                    double Day_Type5 = 0;
                    foreach (var i in ListHDTByProfileN_Type5)
                    {
                        _tmp = i.DateTo != null && i.DateTo <= CutOffDuration.DateEnd ? i.DateTo.Value : CutOffDuration.DateEnd;
                        if (i.DateFrom != null)
                        {
                            Day_Type5 += _tmp.Subtract(i.DateFrom != null && i.DateFrom >= CutOffDuration.DateStart ? i.DateFrom.Value : CutOffDuration.DateStart).TotalDays + 1;
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_5.ToString(), Day_Type5, 0);
                    listElementFormula.Add(item);
                    #endregion

                    #region tính số ngày làm HDT loại 4 tháng N-1
                    ListHDTByProfileN_Type4 = ListHDTByProfileN1.Where(m => m.Type == EnumDropDown.HDTJobType.E_TYPE4.ToString()).ToList();
                    Day_Type4 = 0;
                    _tmp = new DateTime();
                    foreach (var i in ListHDTByProfileN_Type4)
                    {
                        _tmp = i.DateTo != null && i.DateTo <= DateEndN1 ? i.DateTo.Value : DateEndN1;
                        if (i.DateFrom != null)
                        {
                            Day_Type4 += _tmp.Subtract(i.DateFrom != null && i.DateFrom >= DateStartN1 ? i.DateFrom.Value : DateStartN1).TotalDays + 1;
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_4_N_1.ToString(), Day_Type4, 0);
                    listElementFormula.Add(item);
                    #endregion

                    #region tính số ngày làm HDT loại 5 tháng N-1
                    ListHDTByProfileN_Type5 = ListHDTByProfileN1.Where(m => m.Type == EnumDropDown.HDTJobType.E_TYPE5.ToString()).ToList();
                    Day_Type5 = 0;
                    foreach (var i in ListHDTByProfileN_Type5)
                    {
                        _tmp = i.DateTo != null && i.DateTo <= DateEndN1 ? i.DateTo.Value : DateEndN1;
                        if (i.DateFrom != null)
                        {
                            Day_Type5 += _tmp.Subtract(i.DateFrom != null && i.DateFrom >= DateStartN1 ? i.DateFrom.Value : DateStartN1).TotalDays + 1;
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_HDT_NOT_DAYOFF_5_N_1.ToString(), Day_Type5, 0);
                    listElementFormula.Add(item);
                    #endregion
                }
            }
            #endregion

            #region Số ngày Day Off từ đầu tháng đến ngày vào HDT

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_DAYOFF_STARTMONTH_STARTHDT.ToString(),
                PayrollElement.ATT_DAYOFF_STARTMONTH_STARTHDT_N_1.ToString() }))
            {


                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_DAYOFF_STARTMONTH_STARTHDT.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.ATT_DAYOFF_STARTMONTH_STARTHDT.ToString(), 0, 0, "null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_DAYOFF_STARTMONTH_STARTHDT_N_1.ToString(), 0, 0, "null");
                    listElementFormula.Add(item);
                }
                else
                {

                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);

                    #region Tháng N
                    Hre_HDTJobEntity ListHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.Status == HDTJobStatus.E_APPROVE.ToString() && m.DateTo != null && m.DateFrom != null && m.DateFrom <= CutOffDuration.DateEnd && m.DateTo >= CutOffDuration.DateStart).OrderBy(m => m.DateFrom).FirstOrDefault();

                    if (ListHDTByProfile != null)
                    {
                        double DayOff = TotalDataAll.listDayOff.Count(m => m.DateOff <= ListHDTByProfile.DateFrom && m.DateOff >= CutOffDuration.DateStart && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID));
                        item = new ElementFormula(PayrollElement.ATT_DAYOFF_STARTMONTH_STARTHDT.ToString(), DayOff, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_DAYOFF_STARTMONTH_STARTHDT.ToString(), 0, 0, "null");
                        listElementFormula.Add(item);
                    }
                    #endregion

                    #region Tháng N-1
                    DateTime DateStartN1 = CutOffDuration.DateStart.AddMonths(-1);
                    DateTime DateEndN1 = CutOffDuration.DateEnd.AddMonths(-1);
                    ListHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.Status == HDTJobStatus.E_APPROVE.ToString() && m.DateTo != null && m.DateFrom != null && m.DateFrom <= DateEndN1 && m.DateTo >= DateStartN1).OrderBy(m => m.DateFrom).FirstOrDefault();

                    if (ListHDTByProfile != null)
                    {
                        double DayOff = TotalDataAll.listDayOff.Count(m => m.DateOff <= ListHDTByProfile.DateFrom && m.DateOff >= DateStartN1 && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID));
                        item = new ElementFormula(PayrollElement.ATT_DAYOFF_STARTMONTH_STARTHDT_N_1.ToString(), DayOff, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_DAYOFF_STARTMONTH_STARTHDT_N_1.ToString(), 0, 0, "null");
                        listElementFormula.Add(item);
                    }
                    #endregion
                }
            }

            #endregion

            #region số ngày từ ngày vào hdt đến cuối tháng trừ số ngày dayoff từ ngày vào đến cuối tháng(tháng N và tháng N-1)

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_WORKDAY_STARTHDT_MONTHEND.ToString(),
                PayrollElement.ATT_WORKDAY_STARTHDT_MONTHEND_N_1.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_WORKDAY_STARTHDT_MONTHEND.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_MONTHEND.ToString(), 0, 0, "null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_MONTHEND_N_1.ToString(), 0, 0, "null");
                    listElementFormula.Add(item);
                }
                else
                {
                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);

                    double WorkDay = 0;
                    double DayOff = 0;

                    #region Tháng N
                    List<Hre_HDTJobEntity> ListHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.Status == HDTJobStatus.E_APPROVE.ToString() && m.DateTo != null && m.DateFrom != null && m.DateFrom <= CutOffDuration.DateEnd && m.DateTo >= CutOffDuration.DateStart).OrderBy(m => m.DateFrom).ToList();

                    if (ListHDTByProfile.Count > 0)
                    {
                        foreach (var i in ListHDTByProfile)
                        {
                            if (i.DateFrom != null && i.DateTo != null)
                            {
                                if (i.DateTo < CutOffDuration.DateEnd)
                                {
                                    WorkDay += i.DateTo.Value.Subtract(i.DateFrom.Value).TotalDays + 1;
                                }
                                else
                                {
                                    WorkDay += CutOffDuration.DateEnd.Subtract(i.DateFrom.Value).TotalDays + 1;
                                }
                            }
                        }
                        DayOff = TotalDataAll.listDayOff.Count(m => m.DateOff >= ListHDTByProfile.FirstOrDefault().DateFrom && m.DateOff <= CutOffDuration.DateEnd && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID));
                        item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_MONTHEND.ToString(), WorkDay - DayOff, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_MONTHEND.ToString(), 0, 0, "null");
                        listElementFormula.Add(item);
                    }
                    #endregion

                    #region Tháng N-1
                    DateTime DateStartN1 = CutOffDuration.DateStart.AddMonths(-1);
                    DateTime DateEndN1 = CutOffDuration.DateEnd.AddMonths(-1);
                    WorkDay = 0;
                    DayOff = 0;
                    ListHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.Status == HDTJobStatus.E_APPROVE.ToString() && m.DateTo != null && m.DateFrom != null && m.DateFrom <= DateEndN1 && m.DateTo >= DateStartN1).OrderBy(m => m.DateFrom).ToList();

                    if (ListHDTByProfile.Count > 0)
                    {
                        foreach (var i in ListHDTByProfile)
                        {
                            if (i.DateFrom != null && i.DateTo != null)
                            {
                                if (i.DateTo < CutOffDuration.DateEnd)
                                {
                                    WorkDay += i.DateTo.Value.Subtract(i.DateFrom.Value).TotalDays + 1;
                                }
                                else
                                {
                                    WorkDay += CutOffDuration.DateEnd.Subtract(i.DateFrom.Value).TotalDays + 1;
                                }
                            }
                        }
                        DayOff = TotalDataAll.listDayOff.Count(m => m.DateOff >= ListHDTByProfile.FirstOrDefault().DateFrom && m.DateOff <= CutOffDuration.DateEnd && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID));
                        item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_MONTHEND_N_1.ToString(), WorkDay - DayOff, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_MONTHEND_N_1.ToString(), 0, 0, "null");
                        listElementFormula.Add(item);
                    }

                    #endregion
                }
            }

            #endregion

            #region số ngày từ ngày ra HDT tháng N-1 đến cuối tháng N-1 trừ những ngày Dayoff

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_WORKDAY_ENDHDT_MONTHEND_N_1.ToString(),
                PayrollElement.ATT_WORKDAY_ENDHDT_MONTHEND_N_2.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_WORKDAY_ENDHDT_MONTHEND_N_1.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_ENDHDT_MONTHEND_N_1.ToString(), 0, 0, "null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_ENDHDT_MONTHEND_N_2.ToString(), 0, 0, "null");
                    listElementFormula.Add(item);
                }
                else
                {
                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);

                    DateTime DateStartN1 = CutOffDuration.DateStart.AddMonths(-1);
                    DateTime DateEndN1 = CutOffDuration.DateEnd.AddMonths(-1);

                    DateTime DateStartN2 = CutOffDuration.DateStart.AddMonths(-2);
                    DateTime DateEndN2 = CutOffDuration.DateEnd.AddMonths(-2);


                    #region Tháng N-1
                    Hre_HDTJobEntity ListHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.Status == HDTJobStatus.E_APPROVE.ToString() && m.DateFrom != null && m.DateTo != null && m.DateFrom <= DateEndN1 && (m.DateTo == null || m.DateTo >= DateStartN1)).OrderBy(m => m.DateTo).FirstOrDefault();
                    if (ListHDTByProfile != null && ListHDTByProfile.DateTo < CutOffDuration.DateEnd)
                    {
                        double dayoff = TotalDataAll.listDayOff.Count(m => m.DateOff >= ListHDTByProfile.DateTo.Value.AddDays(1) && m.DateOff <= CutOffDuration.DateEnd && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID));
                        item = new ElementFormula(PayrollElement.ATT_WORKDAY_ENDHDT_MONTHEND_N_1.ToString(), dayoff, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_WORKDAY_ENDHDT_MONTHEND_N_1.ToString(), 0, 0, "null");
                        listElementFormula.Add(item);
                    }

                    #endregion

                    #region Tháng N-2
                    ListHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.Status == HDTJobStatus.E_APPROVE.ToString() && m.DateFrom != null && m.DateTo != null && m.DateFrom <= DateEndN2 && (m.DateTo == null || m.DateTo >= DateStartN2)).OrderBy(m => m.DateTo).FirstOrDefault();
                    if (ListHDTByProfile != null && ListHDTByProfile.DateTo < CutOffDuration.DateEnd)
                    {
                        double dayoff = TotalDataAll.listDayOff.Count(m => m.DateOff >= ListHDTByProfile.DateTo.Value.AddDays(1) && m.DateOff <= CutOffDuration.DateEnd && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID));
                        item = new ElementFormula(PayrollElement.ATT_WORKDAY_ENDHDT_MONTHEND_N_2.ToString(), dayoff, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_WORKDAY_ENDHDT_MONTHEND_N_2.ToString(), 0, 0, "null");
                        listElementFormula.Add(item);
                    }

                    #endregion
                }
            }

            #endregion

            #region số ngày từ ngày vào hdt tháng N-1 đến ngày ra hdt tháng N-1 trừ ngày dayoff tháng N-1 và N-2
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_1.ToString(),
                PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_2.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_1.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {

                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);

                    DateTime DateStartN1 = CutOffDuration.DateStart.AddMonths(-1);
                    DateTime DateEndN1 = CutOffDuration.DateEnd.AddMonths(-1);
                    DateTime DateStartN2 = CutOffDuration.DateStart.AddMonths(-2);
                    DateTime DateEndN2 = CutOffDuration.DateEnd.AddMonths(-2);
                    double workDayHDT = 0;
                    double DayOff = TotalDataAll.listDayOff.Count(m => m.DateOff <= DateEndN1 && m.DateOff >= DateStartN1 && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID));

                    #region Tháng N-1
                    List<Hre_HDTJobEntity> ListHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.Status == HDTJobStatus.E_APPROVE.ToString() && m.DateTo != null && m.DateFrom != null && m.DateFrom <= DateEndN1 && m.DateTo >= DateStartN1).OrderBy(m => m.DateFrom).ToList();
                    foreach (var i in ListHDTByProfile)
                    {
                        workDayHDT += i.DateTo.Value.Subtract(i.DateFrom.Value).TotalDays + 1;
                    }
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_1.ToString(), workDayHDT - DayOff, 0);
                    listElementFormula.Add(item);

                    #endregion

                    #region Tháng N-2
                    workDayHDT = 0;
                    DayOff = TotalDataAll.listDayOff.Count(m => m.DateOff <= DateEndN2 && m.DateOff >= DateStartN2 && (m.OrgStructureID == null || m.OrgStructureID == profileItem.OrgStructureID));
                    ListHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.Status == HDTJobStatus.E_APPROVE.ToString() && m.DateTo != null && m.DateFrom != null && m.DateFrom <= DateEndN2 && m.DateTo >= DateStartN2).OrderBy(m => m.DateFrom).ToList();
                    foreach (var i in ListHDTByProfile)
                    {
                        workDayHDT += i.DateTo.Value.Subtract(i.DateFrom.Value).TotalDays + 1;
                    }
                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_2.ToString(), workDayHDT - DayOff, 0);
                    listElementFormula.Add(item);
                    #endregion
                }
            }
            #endregion

            #region Ngày vào HDT tháng N-1 và N-2

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_STARTDATE_HDT_N_1.ToString(),
                PayrollElement.ATT_STARTDATE_HDT_N_2.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetListHre_HDTJob_All(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_STARTDATE_HDT_N_1.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listHDTJobByProfile = TotalData600.dicHre_HDTJob_All.GetValueOrNew(profileItem.ID);

                    DateTime DateStartN1 = CutOffDuration.DateStart.AddMonths(-1);
                    DateTime DateEndN1 = CutOffDuration.DateEnd.AddMonths(-1);
                    DateTime DateStartN2 = CutOffDuration.DateStart.AddMonths(-2);
                    DateTime DateEndN2 = CutOffDuration.DateEnd.AddMonths(-2);

                    Hre_HDTJobEntity ListHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.Status == HDTJobStatus.E_APPROVE.ToString() && m.DateTo != null && m.DateFrom != null && m.DateFrom <= DateEndN1 && m.DateTo >= DateStartN1).OrderBy(m => m.DateFrom).FirstOrDefault();
                    if (ListHDTByProfile != null)
                    {
                        item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_1.ToString(), ListHDTByProfile.DateFrom, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }

                    ListHDTByProfile = listHDTJobByProfile.Where(m => m.ProfileID == profileItem.ID && m.Status == HDTJobStatus.E_APPROVE.ToString() && m.DateTo != null && m.DateFrom != null && m.DateFrom <= DateEndN2 && m.DateTo >= DateStartN2).OrderBy(m => m.DateFrom).FirstOrDefault();
                    if (ListHDTByProfile != null)
                    {
                        item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_2.ToString(), ListHDTByProfile.DateFrom, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_WORKDAY_STARTHDT_ENDHDT_N_2.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #endregion

            #region [07/08/2017][bang.nguyen][86434][New Func] phan tu la thang dau tien tham gia bao hiem
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.INS_ISFIRSTMONTH_ISSOCIALINSURANCE.ToString()))
            {

                string status = string.Empty;
                dataComputeSer.GetListnsurance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_ISFIRSTMONTH_ISSOCIALINSURANCE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.INS_ISFIRSTMONTH_ISSOCIALINSURANCE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var IsFirstMonthIsSocialIns = 0;
                    DateTime? tempDate = null;
                    if (profileItem.DatehireNew != null)
                    {
                        tempDate = profileItem.DatehireNew;
                    }
                    else if (profileItem.DateHire != null)
                    {
                        tempDate = profileItem.DateHire;
                    }
                    if (tempDate != null)
                    {
                        var listInsuranceByProfile = TotalData600.dicInsurance.GetValueOrNew(profileItem.ID);

                        DateTime? minMonthYearIsSocialIns = listInsuranceByProfile
                        .Where(s => s.ProfileID == profileItem.ID
                        && s.IsSocialInsurance == true
                        && s.MonthYear != null
                        && ((s.MonthYear.Value.Month == tempDate.Value.Month && s.MonthYear.Value.Year == tempDate.Value.Year)
                            || (s.MonthYear >= tempDate))
                        ).Min(s => s.MonthYear);
                        if (minMonthYearIsSocialIns != null && minMonthYearIsSocialIns >= CutOffDuration.DateStart && minMonthYearIsSocialIns <= CutOffDuration.DateEnd)
                        {
                            IsFirstMonthIsSocialIns = 1;
                        }
                    }

                    item = new ElementFormula(PayrollElement.INS_ISFIRSTMONTH_ISSOCIALINSURANCE.ToString(), IsFirstMonthIsSocialIns, 0);
                    listElementFormula.Add(item);

                }
            }

            #endregion

            #region [08/11/2016][HienNguyen][75370] Phần tử lương lấy giá trị tăng lao động 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.INS_IS_INCREASE_LABOR.ToString()))
            {

                string status = string.Empty;
                dataComputeSer.GetDicReportD02Item(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_IS_INCREASE_LABOR.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.INS_IS_INCREASE_LABOR.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listReportD02ItemByProfileDic = TotalData600.dicReportD02Item.GetValueOrNew(profileItem.ID);
                    var reportD02ByProfile = listReportD02ItemByProfileDic.Where(m => m.ProfileID == profileItem.ID).OrderByDescending(m => m.MonthFrom).FirstOrDefault();
                    if (reportD02ByProfile.HasValue() && reportD02ByProfile.Status == TypeInsuranceD02TS.E_TANG_LD.ToString())
                    {
                        item = new ElementFormula(PayrollElement.INS_IS_INCREASE_LABOR.ToString(), 1, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.INS_IS_INCREASE_LABOR.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region số tháng đóng bảo hiểm thất nghiệp của nhân viên và số tháng không đóng bảo hiểm thất nghiệp của nhân viên
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.INS_PROFILEINSURANCEMONTHLY_COUNT_ISUNEMPINSURANCE.ToString(), PayrollElement.INS_PROFILEINSURANCEMONTHLY_COUNT_ISUNEMPINSURANCE_NOT.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetListnsurance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_PROFILEINSURANCEMONTHLY_COUNT_ISUNEMPINSURANCE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.INS_PROFILEINSURANCEMONTHLY_COUNT_ISUNEMPINSURANCE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {

                    var listInsuranceByProfile = TotalData600.dicInsurance.GetValueOrNew(profileItem.ID);

                    int _countISUNEMPINSURANCE = 0;
                    var lstlistInsurance = listInsuranceByProfile.Where(s => s.ProfileID == profileItem.ID
                                                                            && s.IsUnEmpInsurance == true
                                                                            && s.MonthYear <= CutOffDuration.DateEnd).ToList();

                    int _countISUNEMPINSURANCENot = 0;
                    var lstlistInsuranceNot = listInsuranceByProfile.Where(s => s.ProfileID == profileItem.ID
                                                                            && s.IsUnEmpInsurance == false
                                                                            && s.MonthYear <= CutOffDuration.DateEnd).ToList();

                    if (lstlistInsurance.Count > 0)
                    {
                        _countISUNEMPINSURANCE = lstlistInsurance.Count;
                    }
                    if (lstlistInsuranceNot.Count > 0)
                    {
                        _countISUNEMPINSURANCENot = lstlistInsuranceNot.Count;

                    }

                    item = new ElementFormula(PayrollElement.INS_PROFILEINSURANCEMONTHLY_COUNT_ISUNEMPINSURANCE.ToString(), _countISUNEMPINSURANCE, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_PROFILEINSURANCEMONTHLY_COUNT_ISUNEMPINSURANCE_NOT.ToString(), _countISUNEMPINSURANCENot, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Tổng số ngày công thực tế trong năm
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.INS_VOLUNTARYINS_INFO_MONTHLYPAID.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicVoluntaryInsInfo(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_VOLUNTARYINS_INFO_MONTHLYPAID.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.INS_VOLUNTARYINS_INFO_MONTHLYPAID.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listVoluntaryInsInfoByProfileDic = TotalData600.dicVoluntaryInsInfo.GetValueOrNew(profileItem.ID);
                    Ins_VoluntaryInsInfoEntity VoluntaryInsInfoByProfile = listVoluntaryInsInfoByProfileDic.Where(m => m.ProfieldID == profileItem.ID).OrderByDescending(m => m.StartDate).FirstOrDefault();
                    if (VoluntaryInsInfoByProfile != null)
                    {
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINS_INFO_MONTHLYPAID.ToString(), VoluntaryInsInfoByProfile.MonthlyPaid ?? 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINS_INFO_MONTHLYPAID.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region [18/03/2016][Hien.Nguyen][64755] Đếm số ngày có ca làm việc từ kết thúc kỳ bảo hiểm + 1 đến kết thúc kỳ lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDCUTOFF_TOENDMONTH.ToString()))
            {

                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDCUTOFF_TOENDMONTH.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDCUTOFF_TOENDMONTH.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {

                    //Lấy ngày chốt kỳ bảo hiểm
                    var _valueConfig = TotalDataAll.listAllSettingEntity.Where(m => m.Name != null && m.Name == AppConfig.HRM_INS_CONFIG_PERIODINSURANCEDAYDEFAULTTO.ToString()).FirstOrDefault();
                    if (_valueConfig.HasValue())
                    {
                        try
                        {
                            DateTime _start = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, int.Parse(_valueConfig.Value1) + 1);

                            var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);

                            //Tìm hợp đồng mới nhất của NV
                            var _contractByProfile = listContractByProfileDic.Where(m => m.ProfileID == profileItem.ID
                                && (m.Type == EnumDropDown.TypeContract.E_DURATION.ToString()
                                || m.Type == EnumDropDown.TypeContract.E_NODURATION.ToString())).OrderBy(m => m.DateStart).FirstOrDefault();

                            if (_contractByProfile.HasValue() && _contractByProfile.DateStart <= CutOffDuration.DateEnd && _contractByProfile.DateStart >= _start)
                            {
                                //Đếm số ngày trong Att_AttendanceTableItem Where ShiftID <> null: Theo Ngày bắt đầu HĐ chính thức đầu tiên đến ngày kết thúc
                                var _value = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.CutOffDurationID == CutOffDuration.ID && m.ShiftID != null && m.WorkDate <= CutOffDuration.DateEnd && m.WorkDate >= _contractByProfile.DateStart).Count();

                                item = new ElementFormula(PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDCUTOFF_TOENDMONTH.ToString(), _value, 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDCUTOFF_TOENDMONTH.ToString(), 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        catch
                        {
                            item = new ElementFormula(PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDCUTOFF_TOENDMONTH.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else//Nếu không có cấu hình cho phần tử =0
                    {
                        item = new ElementFormula(PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDCUTOFF_TOENDMONTH.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }



            }

            #endregion

            #region [18/03/2016][Hien.Nguyen][64755] Đếm số ngày có ca làm việc từ kết thúc kỳ bảo hiểm + 1 đến kết thúc kỳ lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDMONTH.ToString()))
            {

                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDMONTH.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDMONTH.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    //Lấy ngày chốt kỳ bảo hiểm
                    var _valueConfig = TotalDataAll.listAllSettingEntity.Where(m => m.Name != null && m.Name == AppConfig.HRM_INS_CONFIG_PERIODINSURANCEDAYDEFAULTFROM.ToString()).FirstOrDefault();
                    if (_valueConfig.HasValue())
                    {
                        try
                        {
                            var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);

                            DateTime _start = CutOffDuration.DateStart.AddMonths(-1);
                            DateTime _end = CutOffDuration.DateEnd.AddMonths(-1);
                            //Ngày bắt đầu kỳ bảo hiểm
                            DateTime _startInsurance = new DateTime(CutOffDuration.MonthYear.AddMonths(-1).Year, CutOffDuration.MonthYear.AddMonths(-1).Month, int.Parse(_valueConfig.Value1));
                            //Ngày cuối tháng N-1
                            DateTime _endMonth = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1).AddDays(-1);

                            //Tìm hợp đồng mới nhất của NV
                            var _contractByProfile = listContractByProfileDic.Where(m => m.ProfileID == profileItem.ID
                                && (m.Type == EnumDropDown.TypeContract.E_DURATION.ToString()
                                || m.Type == EnumDropDown.TypeContract.E_NODURATION.ToString())).OrderBy(m => m.DateStart).FirstOrDefault();

                            if (_contractByProfile.HasValue())
                            {
                                if (_contractByProfile.DateStart >= _startInsurance && _contractByProfile.DateStart <= _end)
                                {
                                    //Đếm số ngày trong Att_AttendanceTableItem Where ShiftID <> null: Theo Ngày kết thúc kỳ lương N-1 +1 ngày đến Ngày cuối tháng N-1 
                                    var _value = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.CutOffDurationID == CutOffDuration.ID && m.ShiftID != null && m.WorkDate >= _end.AddDays(1) && m.WorkDate <= _endMonth).Count();

                                    item = new ElementFormula(PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDMONTH.ToString(), _value, 0);
                                    listElementFormula.Add(item);
                                }
                                else if (_contractByProfile.DateStart >= _end && _contractByProfile.DateStart <= _endMonth)
                                {
                                    //Đếm số ngày trong Att_AttendanceTableItem Where ShiftID <> null: Theo Ngày bắt đầu HĐ chính thức đầu tiên đến ngày kết thúc
                                    var _value = TotalDataAll.dicAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.CutOffDurationID == CutOffDuration.ID && m.ShiftID != null && m.WorkDate >= _startInsurance && m.WorkDate <= _end).Count();

                                    item = new ElementFormula(PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDMONTH.ToString(), _value, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDMONTH.ToString(), 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        catch
                        {
                            item = new ElementFormula(PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDMONTH.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.INS_COUNT_ATTENDANCETABLEITEM_WORKDATE_TOENDMONTH.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region HienNguyen-14102015-58286 + [17/02/2016][hien.nguyen][Modify][63673]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.INS_SOCIAL_CAPE_AMOUNT.ToString(),
                PayrollElement.INS_HEALTH_CAPE_AMOUNT.ToString(),
                PayrollElement.INS_UNEMPLOY_CAPE_AMOUNT.ToString(),
                PayrollElement.INS_INSURANCE_SALARY.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicInsuaranceSalary(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_SOCIAL_CAPE_AMOUNT.ToString() + ") ";
                }
                else
                {
                    var listInsuaranceSalaryByProfileDic = TotalData600.dicInsuaranceSalary.GetValueOrNew(profileItem.ID);
                    double Value = 0;
                    var InsuranceSalaryByProfile = listInsuaranceSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID).OrderByDescending(m => m.DateEffect).FirstOrDefault();
                    if (InsuranceSalaryByProfile != null && InsuranceSalaryByProfile.InsuranceAmount != null)
                    {
                        Value = (double)InsuranceSalaryByProfile.InsuranceAmount;
                    }
                    item = new ElementFormula(PayrollElement.INS_INSURANCE_SALARY.ToString(), Value, 0);
                    listElementFormula.Add(item);

                    if (InsuranceSalaryByProfile != null && InsuranceSalaryByProfile.InsuranceAmount != null)
                    {
                        var _catNameEntity = TotalDataAll.listValueEntity.Where(m => m.Type == ValueEntityType.E_INSURANCE_CAPE_AMOUNT.ToString()).FirstOrDefault();
                        if (_catNameEntity != null && _catNameEntity.Value != null)
                        {
                            if (_catNameEntity.Value >= InsuranceSalaryByProfile.InsuranceAmount)
                            {
                                item = new ElementFormula(PayrollElement.INS_SOCIAL_CAPE_AMOUNT.ToString(), InsuranceSalaryByProfile.InsuranceAmount, 0);
                                listElementFormula.Add(item);
                                item = new ElementFormula(PayrollElement.INS_HEALTH_CAPE_AMOUNT.ToString(), InsuranceSalaryByProfile.InsuranceAmount, 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.INS_SOCIAL_CAPE_AMOUNT.ToString(), _catNameEntity.Value, 0);
                                listElementFormula.Add(item);
                                item = new ElementFormula(PayrollElement.INS_HEALTH_CAPE_AMOUNT.ToString(), _catNameEntity.Value, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.INS_SOCIAL_CAPE_AMOUNT.ToString(), 0, 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula(PayrollElement.INS_HEALTH_CAPE_AMOUNT.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }

                        if (profileItem.RegionID != null)
                        {
                            //Lấy data nếu chưa được lấy trước đó
                            string status2 = string.Empty;
                            string nameTableGetData = "listRegionDetail";
                            if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                            {
                                Sal_GetDataComputePayrollKZServices getDataComputePayrollServices = new Sal_GetDataComputePayrollKZServices();
                                getDataComputePayrollServices.UserLogin = TotalDataAll.UserLogin;
                                TotalData600.listRegionDetail = getDataComputePayrollServices.GetListRegionDetail(ref status2);
                                TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                            }

                            //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                            if (!string.IsNullOrEmpty(status2))
                            {
                                TotalData600.statusBugStore += status + " (" + PayrollElement.INS_UNEMPLOY_CAPE_AMOUNT.ToString() + ") ";
                                item = new ElementFormula(PayrollElement.INS_UNEMPLOY_CAPE_AMOUNT.ToString(), 0, 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                var _regionByProfile = TotalData600.listRegionDetail.Where(m => m.RegionID == profileItem.RegionID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                                if (_regionByProfile.HasValue() && _regionByProfile.MaxSalary.HasValue)
                                {
                                    if (InsuranceSalaryByProfile.InsuranceAmount < _regionByProfile.MaxSalary)
                                    {
                                        item = new ElementFormula(PayrollElement.INS_UNEMPLOY_CAPE_AMOUNT.ToString(), InsuranceSalaryByProfile.InsuranceAmount, 0);
                                        listElementFormula.Add(item);
                                    }
                                    else
                                    {
                                        item = new ElementFormula(PayrollElement.INS_UNEMPLOY_CAPE_AMOUNT.ToString(), _regionByProfile.MaxSalary, 0);
                                        listElementFormula.Add(item);
                                    }
                                }
                                else
                                {
                                    item = new ElementFormula(PayrollElement.INS_UNEMPLOY_CAPE_AMOUNT.ToString(), 0, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.INS_UNEMPLOY_CAPE_AMOUNT.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            #endregion

            #region INS_HEALTH_INSURANCE_PAYROLL
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.INS_HEALTH_INSURANCE_PAYROLL.ToString(), PayrollElement.INS_SOCIAL_INSURANCE_PAYROLL.ToString(), PayrollElement.INS_UNEMP_INSURANCE_PAYROLL.ToString(), PayrollElement.INS_SALARY_INSURANCE_PAYROLL.ToString(), PayrollElement.INS_SALARY_HDT_PAYROLL.ToString(), PayrollElement.INS_SALARY_HDT_PAYROLL_N_1.ToString() }))
            {
                var listInsuranceForPayrollMonthlyByProfileDic = TotalDataAll.dicInsuranceForPayrollMonthly.GetValueOrNew(profileItem.ID);

                //[03/02/2016][hien.nguyen][Modify][63280]
                //tháng N
                var InsuranceForPayrollMonthlyByProfile = listInsuranceForPayrollMonthlyByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.MonthYearEffect != null && m.MonthYearEffect <= CutOffDuration.DateEnd && m.MonthYearEffect >= CutOffDuration.DateStart && m.IsPayback == null).OrderByDescending(m => m.MonthYearEffect).FirstOrDefault();

                if (InsuranceForPayrollMonthlyByProfile != null)
                {
                    item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PAYROLL.ToString(), InsuranceForPayrollMonthlyByProfile.HealthInsEmpAmount == null ? null : InsuranceForPayrollMonthlyByProfile.HealthInsEmpAmount, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PAYROLL.ToString(), InsuranceForPayrollMonthlyByProfile.SocialInsEmpAmount == null ? null : InsuranceForPayrollMonthlyByProfile.SocialInsEmpAmount, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PAYROLL.ToString(), InsuranceForPayrollMonthlyByProfile.UnemployEmpAmount == null ? null : InsuranceForPayrollMonthlyByProfile.UnemployEmpAmount, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_SALARY_INSURANCE_PAYROLL.ToString(), InsuranceForPayrollMonthlyByProfile.SalaryInsurance == null ? null : InsuranceForPayrollMonthlyByProfile.SalaryInsurance, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_SALARY_HDT_PAYROLL.ToString(), InsuranceForPayrollMonthlyByProfile.AmountHDTIns == null ? null : InsuranceForPayrollMonthlyByProfile.AmountHDTIns, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PAYROLL.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PAYROLL.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PAYROLL.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_SALARY_INSURANCE_PAYROLL.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_SALARY_HDT_PAYROLL.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }

                //tháng N-1
                var CutOffDurationPrev = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutOffDuration.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                Ins_InsuranceForPayrollMonthlyEntity InsuranceForPayrollMonthlyByProfile_N_1 = null;
                if (CutOffDurationPrev != null)
                {
                    InsuranceForPayrollMonthlyByProfile_N_1 = listInsuranceForPayrollMonthlyByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.MonthYearEffect != null && m.MonthYearEffect <= CutOffDurationPrev.DateEnd && m.MonthYearEffect >= CutOffDurationPrev.DateStart).OrderByDescending(m => m.MonthYearEffect).FirstOrDefault();
                }
                if (InsuranceForPayrollMonthlyByProfile_N_1 != null)
                {
                    item = new ElementFormula(PayrollElement.INS_SALARY_HDT_PAYROLL_N_1.ToString(), InsuranceForPayrollMonthlyByProfile_N_1.AmountHDTIns ?? 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.INS_SALARY_HDT_PAYROLL_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region [09/11/2015][hien.nguyen][Modify][59743]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_N_1.ToString(),
                PayrollElement.INS_UNEMP_INSURANCE_PROFILE_N_1.ToString(),
                PayrollElement.INS_HEALTH_INSURANCE_PROFILE_N_1.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetListnsurance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_N_1.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PROFILE_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PROFILE_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listInsuranceByProfile = TotalData600.dicInsurance.GetValueOrNew(profileItem.ID);

                    //Lấy số tháng N-1
                    DateTime MonthYear_N_1 = CutOffDuration.MonthYear.AddMonths(-1);
                    //Lấy dữ liệu BH By Profile
                    Ins_ProfileInsuranceMonthlyEntity InsItemByProfile = listInsuranceByProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthYear != null && m.MonthYear.Value.Year == MonthYear_N_1.Year && m.MonthYear.Value.Month == MonthYear_N_1.Month && (m.IsPayback == null || m.IsPayback == false)).FirstOrDefault();
                    if (InsItemByProfile.HasValue())
                    {
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_N_1.ToString(), InsItemByProfile.SocialInsEmpAmount == null ? null : InsItemByProfile.SocialInsEmpAmount, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PROFILE_N_1.ToString(), InsItemByProfile.UnemployEmpAmount == null ? null : InsItemByProfile.UnemployEmpAmount, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PROFILE_N_1.ToString(), InsItemByProfile.HealthInsEmpAmount == null ? null : InsItemByProfile.HealthInsEmpAmount, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_N_1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PROFILE_N_1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PROFILE_N_1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region [20/05/2016][HienNguyen][67689]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.INS_UNEMP_INSURANCE_PAYBACK.ToString(), PayrollElement.INS_SOCIAL_INSURANCE_PAYBACK.ToString(), PayrollElement.INS_HEALTH_INSURANCE_PAYBACK.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetListnsurance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_PROFILEINSURANCEMONTHLY_COUNT_ISUNEMPINSURANCE.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PAYBACK.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PAYBACK.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PAYBACK.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listInsuranceByProfile = TotalData600.dicInsurance.GetValueOrNew(profileItem.ID);

                    Ins_ProfileInsuranceMonthlyEntity InsItem = listInsuranceByProfile.Where(m => m.ProfileID == profileItem.ID
                                        && m.MonthYear != null
                                        && m.MonthYear.Value.Year == CutOffDuration.MonthYear.Year
                                        && m.MonthYear.Value.Month == CutOffDuration.MonthYear.Month
                                        && m.IsPayback == true
                                        && m.MonthYearEffect != null
                                        && m.MonthYearEffect <= CutOffDuration.MonthYear).OrderByDescending(m => m.MonthYearEffect).FirstOrDefault();

                    if (InsItem != null)
                    {
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PAYBACK.ToString(), InsItem.MoneyUnEmpInsurance == null ? null : InsItem.MoneyUnEmpInsurance, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PAYBACK.ToString(), InsItem.MoneySocialInsurance == null ? null : InsItem.MoneySocialInsurance, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PAYBACK.ToString(), InsItem.MoneyHealthInsurance == null ? null : InsItem.MoneyHealthInsurance, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PAYBACK.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PAYBACK.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PAYBACK.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region INS_HEALTH_INSURANCE
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.INS_HEALTH_INSURANCE.ToString(),
                PayrollElement.INS_SALARY_INSURANCE.ToString(),
                PayrollElement.INS_SOCIAL_INSURANCE.ToString(),
                PayrollElement.INS_UNEMP_INSURANCE.ToString(),
                PayrollElement.INS_SOCIAL_INSURANCE_PROFILE.ToString(),
                PayrollElement.INS_SOCIAL_INSURANCE_COMPANY.ToString(),
                PayrollElement.INS_UNEMP_INSURANCE_PROFILE.ToString(),
                PayrollElement.INS_UNEMP_INSURANCE_COMPANY.ToString(),
                PayrollElement.INS_HEALTH_INSURANCE_PROFILE.ToString(),
                PayrollElement.INS_HEALTH_INSURANCE_COMPANY.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetListnsurance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_HEALTH_INSURANCE.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_SALARY_INSURANCE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PROFILE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_COMPANY.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PROFILE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_COMPANY.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PROFILE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_COMPANY.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
                else
                {
                    var listInsuranceByProfile = TotalData600.dicInsurance.GetValueOrNew(profileItem.ID);

                    Ins_ProfileInsuranceMonthlyEntity InsItem = listInsuranceByProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthYear != null && m.MonthYear.Value.Year == CutOffDuration.MonthYear.Year && m.MonthYear.Value.Month == CutOffDuration.MonthYear.Month && (m.IsPayback == null || m.IsPayback == false)).FirstOrDefault();
                    if (InsItem != null)
                    {
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE.ToString(), InsItem.MoneyHealthInsurance == null ? null : InsItem.MoneyHealthInsurance, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_SALARY_INSURANCE.ToString(), InsItem.SalaryInsurance == null ? null : InsItem.SalaryInsurance, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE.ToString(), InsItem.MoneySocialInsurance == null ? null : InsItem.MoneySocialInsurance, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE.ToString(), InsItem.MoneyUnEmpInsurance == null ? null : InsItem.MoneyUnEmpInsurance, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PROFILE.ToString(), InsItem.SocialInsEmpAmount == null ? null : InsItem.SocialInsEmpAmount, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_COMPANY.ToString(), InsItem.SocialInsComAmount == null ? null : InsItem.SocialInsComAmount, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PROFILE.ToString(), InsItem.UnemployEmpAmount == null ? null : InsItem.UnemployEmpAmount, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_COMPANY.ToString(), InsItem.UnemployComAmount == null ? null : InsItem.UnemployComAmount, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PROFILE.ToString(), InsItem.HealthInsEmpAmount == null ? null : InsItem.HealthInsEmpAmount, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_COMPANY.ToString(), InsItem.HealthInsComAmount == null ? null : InsItem.HealthInsComAmount, 0);
                        listElementFormula.Add(item);

                    }
                    else//nếu không có bảo hiểm thì cập nhất value = 0
                    {
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_SALARY_INSURANCE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PROFILE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_COMPANY.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PROFILE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_COMPANY.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PROFILE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_COMPANY.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region [20/11/2015][hien.nguyen][Modify][60311]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_RATE.ToString(),
                PayrollElement.INS_SOCIAL_INSURANCE_COMPANY_RATE.ToString(),
                PayrollElement.INS_UNEMP_INSURANCE_PROFILE_RATE.ToString(),
                PayrollElement.INS_UNEMP_INSURANCE_COMPANY_RATE.ToString(),
                PayrollElement.INS_HEALTH_INSURANCE_PROFILE_RATE.ToString(),
                PayrollElement.INS_HEALTH_INSURANCE_COMPANY_RATE.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetListnsurance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_RATE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_RATE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_COMPANY_RATE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PROFILE_RATE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_COMPANY_RATE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PROFILE_RATE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_COMPANY_RATE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
                else
                {
                    var listInsuranceByProfile = TotalData600.dicInsurance.GetValueOrNew(profileItem.ID);

                    Ins_ProfileInsuranceMonthlyEntity InsItem = listInsuranceByProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthYear != null && m.MonthYear.Value.Year == CutOffDuration.MonthYear.Year && m.MonthYear.Value.Month == CutOffDuration.MonthYear.Month && (m.IsPayback == null || m.IsPayback == false)).FirstOrDefault();
                    if (InsItem != null)
                    {
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_RATE.ToString(), InsItem.SocialInsEmpRate == null ? 0 : InsItem.SocialInsEmpRate, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_COMPANY_RATE.ToString(), InsItem.SocialInsComRate == null ? 0 : InsItem.SocialInsComRate, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PROFILE_RATE.ToString(), InsItem.UnemployEmpRate == null ? 0 : InsItem.UnemployEmpRate, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_COMPANY_RATE.ToString(), InsItem.UnemployComRate == null ? 0 : InsItem.UnemployComRate, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PROFILE_RATE.ToString(), InsItem.HealthInsEmpRate == null ? 0 : InsItem.HealthInsEmpRate, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_COMPANY_RATE.ToString(), InsItem.HealthInsComRate == null ? 0 : InsItem.HealthInsComRate, 0);
                        listElementFormula.Add(item);

                    }
                    else//nếu không có bảo hiểm thì cập nhất value = 0
                    {
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_RATE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_COMPANY_RATE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PROFILE_RATE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_COMPANY_RATE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PROFILE_RATE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_COMPANY_RATE.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region INS_SOCIAL_INSURANCE_PROFILE_PAYBACK
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_PAYBACK.ToString(),
                PayrollElement.INS_SOCIAL_INSURANCE_COMPANY_PAYBACK.ToString(),
                PayrollElement.INS_UNEMP_INSURANCE_PROFILE_PAYBACK.ToString(),
                PayrollElement.INS_UNEMP_INSURANCE_COMPANY_PAYBACK.ToString(),
                PayrollElement.INS_HEALTH_INSURANCE_PROFILE_PAYBACK.ToString(),
                PayrollElement.INS_HEALTH_INSURANCE_COMPANY_PAYBACK.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetListnsurance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_PAYBACK.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_PAYBACK.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_COMPANY_PAYBACK.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PROFILE_PAYBACK.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_COMPANY_PAYBACK.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PROFILE_PAYBACK.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_COMPANY_PAYBACK.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
                else
                {
                    var listInsuranceByProfile = TotalData600.dicInsurance.GetValueOrNew(profileItem.ID);

                    List<Ins_ProfileInsuranceMonthlyEntity> InsItem = listInsuranceByProfile.Where(m => m.ProfileID == profileItem.ID && m.MonthYear != null && m.MonthYear.Value.Year == CutOffDuration.MonthYear.Year && m.MonthYear.Value.Month == CutOffDuration.MonthYear.Month && m.IsPayback != null && m.IsPayback == true).ToList();
                    if (InsItem != null)
                    {
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_PAYBACK.ToString(), InsItem.Sum(m => m.SocialInsEmpAmount != null ? (double)m.SocialInsEmpAmount : 0), 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_COMPANY_PAYBACK.ToString(), InsItem.Sum(m => m.SocialInsComAmount != null ? (double)m.SocialInsComAmount : 0), 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PROFILE_PAYBACK.ToString(), InsItem.Sum(m => m.UnemployEmpAmount != null ? (double)m.UnemployEmpAmount : 0), 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_COMPANY_PAYBACK.ToString(), InsItem.Sum(m => m.UnemployComAmount != null ? (double)m.UnemployComAmount : 0), 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PROFILE_PAYBACK.ToString(), InsItem.Sum(m => m.HealthInsEmpAmount != null ? (double)m.HealthInsEmpAmount : 0), 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_COMPANY_PAYBACK.ToString(), InsItem.Sum(m => m.HealthInsComAmount != null ? (double)m.HealthInsComAmount : 0), 0);
                        listElementFormula.Add(item);
                    }
                    else//nếu không có bảo hiểm thì cập nhất value = 0
                    {
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_PROFILE_PAYBACK.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_SOCIAL_INSURANCE_COMPANY_PAYBACK.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_PROFILE_PAYBACK.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_UNEMP_INSURANCE_COMPANY_PAYBACK.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_PROFILE_PAYBACK.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_HEALTH_INSURANCE_COMPANY_PAYBACK.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region Tỷ giá đóng BHXH
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.INS_INSURANCE_USD_TO_VND.ToString(), PayrollElement.INS_INSURANCE_CAPE_AMOUNT.ToString(), PayrollElement.INS_INSURANCE_MINIMUM_SALARY.ToString() }))
            {
                Cat_ValueEntityEntity ValueEntityByCutOff = TotalDataAll.listValueEntity.Where(m => m.Type == ValueEntityType.INSURANCE_USD_TO_VND.ToString() && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (ValueEntityByCutOff != null)
                {
                    item = new ElementFormula(PayrollElement.INS_INSURANCE_USD_TO_VND.ToString(), ValueEntityByCutOff.Value != null ? ValueEntityByCutOff.Value : 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.INS_INSURANCE_USD_TO_VND.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }

                ValueEntityByCutOff = TotalDataAll.listValueEntity.Where(m => m.Type == ValueEntityType.E_INSURANCE_CAPE_AMOUNT.ToString() && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (ValueEntityByCutOff != null)
                {
                    item = new ElementFormula(PayrollElement.INS_INSURANCE_CAPE_AMOUNT.ToString(), ValueEntityByCutOff.Value != null ? ValueEntityByCutOff.Value : 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.INS_INSURANCE_CAPE_AMOUNT.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }

                ValueEntityByCutOff = TotalDataAll.listValueEntity.Where(m => m.Type == ValueEntityType.E_MINIMUM_SALARY.ToString() && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                if (ValueEntityByCutOff != null)
                {
                    item = new ElementFormula(PayrollElement.INS_INSURANCE_MINIMUM_SALARY.ToString(), ValueEntityByCutOff.Value != null ? ValueEntityByCutOff.Value : 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.INS_INSURANCE_MINIMUM_SALARY.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Lấy taget & actual của shop
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_COM_TAGET_SHOP.ToString(), PayrollElement.SAL_COM_ACTUAL_SHOP.ToString(), PayrollElement.SAL_COM_PRECENT_REVENUE.ToString() }))
            {
                //[27/10/2015][hien.nguyen][Modify][59011]
                //Lấy shopID thì History
                Guid? ShopID = profileItem.ShopID;
                //Get WorkHistory By Profile
                //var WorkHistoryByProfile = TotalData600.listWorkHistory.Where(m => m.ProfileID == profileItem.ID).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                //if (WorkHistoryByProfile.HasValue())
                //{
                //    ShopID = WorkHistoryByProfile.ShopID ?? Guid.Empty;
                //}

                Sal_RevenueForShopEntity RevenueForShopItem = TotalDataAll.listRevenueForShop.Where(m => m.ShopID == ShopID && m.KPIBonusID == TotalDataAll.listKPIBonus.Where(t => t.IsTotalRevenue == true).FirstOrDefault().ID && m.DateFrom <= CutOffDuration.DateEnd && m.DateTo >= CutOffDuration.DateStart).FirstOrDefault();
                if (RevenueForShopItem != null)
                {
                    item = new ElementFormula(PayrollElement.SAL_COM_TAGET_SHOP.ToString(), RevenueForShopItem.Target, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_COM_ACTUAL_SHOP.ToString(), RevenueForShopItem.Actual, 0);
                    listElementFormula.Add(item);
                    if (RevenueForShopItem.Actual.HasValue && RevenueForShopItem.Actual != 0 && RevenueForShopItem.Target.HasValue && RevenueForShopItem.Target != 0)
                    {
                        item = new ElementFormula(PayrollElement.SAL_COM_PRECENT_REVENUE.ToString(), RevenueForShopItem.Actual / RevenueForShopItem.Target, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_COM_PRECENT_REVENUE.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }

                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_COM_TAGET_SHOP.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_COM_ACTUAL_SHOP.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_COM_PRECENT_REVENUE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Lấy tên cửa hàng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_COM_SHOPNAME.ToString()))
            {
                //[11/06/2016][HienNguyen][68780]
                //Lấy shopName trong History
                var profileHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).OrderByDescending(m => m.DateEffective).FirstOrDefault(m => m.ProfileID == profileItem.ID);
                if (profileHistory != null && profileHistory.ShopName != null)
                {
                    item = new ElementFormula(PayrollElement.SAL_COM_SHOPNAME.ToString(), profileHistory.ShopName, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_COM_SHOPNAME.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Lấy taget & actual của nhân viên
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_COM_TAGET_CUSTOMER.ToString(), PayrollElement.SAL_COM_ACTUAL_CUSTOMER.ToString() }))
            {
                Sal_RevenueForProfileEntity RevenueForProfileItem = new Sal_RevenueForProfileEntity();
                RevenueForProfileItem = TotalDataAll.listRevenueForProfile.Where(m => m.ProfileID == profileItem.ID && m.DateFrom <= CutOffDuration.DateEnd && m.DateTo >= CutOffDuration.DateStart).FirstOrDefault();
                if (RevenueForProfileItem != null)
                {
                    item = new ElementFormula(PayrollElement.SAL_COM_TAGET_CUSTOMER.ToString(), RevenueForProfileItem.Target, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_COM_ACTUAL_CUSTOMER.ToString(), RevenueForProfileItem.Actual, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_COM_TAGET_CUSTOMER.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_COM_ACTUAL_CUSTOMER.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Số tháng làm việc
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_COM_WORKINGMONTH.ToString(), PayrollElement.SAL_COM_WORKINGMONTH_N_1.ToString() }))
            {
                if (profileItem.DateHire != null)
                {
                    double CountMonth = ((CutOffDuration.MonthYear.Year - profileItem.DateHire.Value.Year) * 12) + CutOffDuration.MonthYear.Month - profileItem.DateHire.Value.Month + (profileItem.DateHire.Value.Day < CutOffDuration.DateEnd.Day ? 1 : 0);
                    item = new ElementFormula(PayrollElement.SAL_COM_WORKINGMONTH.ToString(), CountMonth, 0);
                    listElementFormula.Add(item);

                    //Tháng N-1
                    Att_CutOffDurationEntity CutoffDuration_Prev = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutOffDuration.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();
                    if (CutoffDuration_Prev != null)
                    {
                        CountMonth = ((CutoffDuration_Prev.MonthYear.Year - profileItem.DateHire.Value.Year) * 12) + CutoffDuration_Prev.MonthYear.Month - profileItem.DateHire.Value.Month + (profileItem.DateHire.Value.Day < CutoffDuration_Prev.DateEnd.Day ? 1 : 0);
                    }
                    else
                    {
                        CountMonth = 0;
                    }

                    item = new ElementFormula(PayrollElement.SAL_COM_WORKINGMONTH_N_1.ToString(), CountMonth, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_COM_WORKINGMONTH.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_COM_WORKINGMONTH_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Số tháng làm việc theo MonthYear
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.SAL_COM_WORKINGMONTH_FOR_MONTHYEAR.ToString(),
                PayrollElement.SAL_COM_WORKINGMONTH_FOR_MONTHYEAR_N_1.ToString() }))
            {

                if (profileItem.DateHire != null)
                {
                    var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                    double CountMonth = 0;
                    //kiểm tra có bị nghỉ việc và vào làm lại hay ko
                    var StopWorkingByProfile = listStopWorkingByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStop != null && m.DateStop <= CutOffDuration.DateEnd && m.StatusComeBack == HRM.Infrastructure.Utilities.EnumDropDown.StopWorkStatus.E_APPROVED.ToString()).OrderByDescending(m => m.DateStart).FirstOrDefault();

                    if (StopWorkingByProfile != null && StopWorkingByProfile.DateComeBack != null)
                    {
                        CountMonth = ((CutOffDuration.MonthYear.Year - StopWorkingByProfile.DateComeBack.Value.Year) * 12) + CutOffDuration.MonthYear.Month - StopWorkingByProfile.DateComeBack.Value.Month;
                        item = new ElementFormula(PayrollElement.SAL_COM_WORKINGMONTH_FOR_MONTHYEAR.ToString(), CountMonth < 0 ? 0 : CountMonth, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        CountMonth = ((CutOffDuration.MonthYear.Year - profileItem.DateHire.Value.Year) * 12) + CutOffDuration.MonthYear.Month - profileItem.DateHire.Value.Month;
                        item = new ElementFormula(PayrollElement.SAL_COM_WORKINGMONTH_FOR_MONTHYEAR.ToString(), CountMonth, 0);
                        listElementFormula.Add(item);
                    }


                    Att_CutOffDurationEntity CutoffDuration_Prev = TotalDataAll.listCutOffDuration.Where(m => m.MonthYear < CutOffDuration.MonthYear).OrderByDescending(m => m.MonthYear).FirstOrDefault();

                    if (CutoffDuration_Prev != null)
                    {
                        //kiểm tra có bị nghỉ việc và vào làm lại hay ko
                        StopWorkingByProfile = listStopWorkingByProfile.Where(m => m.ProfileID == profileItem.ID && m.DateStop != null && m.DateStop <= CutoffDuration_Prev.DateEnd && m.StatusComeBack == HRM.Infrastructure.Utilities.EnumDropDown.StopWorkStatus.E_APPROVED.ToString()).OrderByDescending(m => m.DateStart).FirstOrDefault();

                        if (StopWorkingByProfile != null && StopWorkingByProfile.DateComeBack != null)
                        {
                            CountMonth = ((CutoffDuration_Prev.MonthYear.Year - StopWorkingByProfile.DateComeBack.Value.Year) * 12) + CutoffDuration_Prev.MonthYear.Month - StopWorkingByProfile.DateComeBack.Value.Month;
                            item = new ElementFormula(PayrollElement.SAL_COM_WORKINGMONTH_FOR_MONTHYEAR_N_1.ToString(), CountMonth < 0 ? 0 : CountMonth, 0);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            CountMonth = ((CutoffDuration_Prev.MonthYear.Year - profileItem.DateHire.Value.Year) * 12) + CutoffDuration_Prev.MonthYear.Month - profileItem.DateHire.Value.Month;
                            item = new ElementFormula(PayrollElement.SAL_COM_WORKINGMONTH_FOR_MONTHYEAR_N_1.ToString(), CountMonth, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.SAL_COM_WORKINGMONTH_FOR_MONTHYEAR_N_1.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_COM_WORKINGMONTH_FOR_MONTHYEAR.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_COM_WORKINGMONTH_FOR_MONTHYEAR_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region tổng số nhân viên của cửa hàng
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_COM_COUNT_SHOPMEMBER.ToString()))
            {
                using (var context = new VnrHrmDataContext())
                {
                    var unitOfWork = (IUnitOfWork)(new UnitOfWork(context));

                    // Tung.Tran [20/05/2019][0105678]: Kaizen xử lý
                    string nameTableGetData = "listProfileByShop";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        if (TotalData600.listProfileSplit != null)
                        {
                            var shopIDs = TotalData600.listProfileSplit.Where(x => x.ShopID != null).Select(x => x.ShopID).ToArray();
                            TotalData600.listProfileByShop = unitOfWork.CreateQueryable<Hre_Profile>(x => shopIDs.Contains(x.ShopID)).ToList();
                        }
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }

                    var countProfileByShop = 0;
                    if (TotalData600.listProfileByShop != null)
                    {
                        countProfileByShop = TotalData600.listProfileByShop.Where(m => m.ShopID == profileItem.ShopID).Count();
                    }

                    item = new ElementFormula(PayrollElement.SAL_COM_COUNT_SHOPMEMBER.ToString(), countProfileByShop, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Chức danh
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_COM_JOBTITLE.ToString()))
            {
                var WorkHistoryByProfile = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID).OrderByDescending(m => m.DateEffective).FirstOrDefault();
                if (WorkHistoryByProfile != null)
                {
                    item = new ElementFormula(PayrollElement.SAL_COM_JOBTITLE.ToString(), WorkHistoryByProfile.PositionCode, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_COM_JOBTITLE.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Số lượng ca trưởng trong cửa hàng
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.SAL_COM_COUNT_SL.ToString(), PayrollElement.SAL_COM_RANK.ToString() }))
            {
                if (profileItem.ShopID != null)
                {
                    var shop = TotalDataAll.listShop.FirstOrDefault(p => p.ID == profileItem.ShopID);
                    if (shop != null)
                    {
                        item = new ElementFormula(PayrollElement.SAL_COM_COUNT_SL.ToString(), shop?.NoShiftLeader ?? 0, 0);
                        listElementFormula.Add(item);

                        //cấp bậc của cửa hàng
                        item = new ElementFormula(PayrollElement.SAL_COM_RANK.ToString(), shop?.Rank ?? "", 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_COM_COUNT_SL.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.SAL_COM_RANK.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Tổng doanh thu của tất cả nhân viên trong shop
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.SAL_TOTAL_ACTUAL_PROFILE_SHOP.ToString()))
            {
                using (var context = new VnrHrmDataContext())
                {
                    var unitOfWork = (IUnitOfWork)(new UnitOfWork(context));

                    // Tung.Tran [20/05/2019][0105678]: Kaizen xử lý
                    string nameTableGetData = "listProfileByShop";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        if (TotalData600.listProfileSplit != null)
                        {
                            var shopIDs = TotalData600.listProfileSplit.Where(x => x.ShopID != null).Select(x => x.ShopID).ToArray();
                            TotalData600.listProfileByShop = unitOfWork.CreateQueryable<Hre_Profile>(x => shopIDs.Contains(x.ShopID)).ToList();
                        }
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }

                    var listProfileInShop = new List<Hre_Profile>();
                    if (TotalData600.listProfileByShop != null)
                    {
                        listProfileInShop = TotalData600.listProfileByShop.Where(m => m.ShopID == profileItem.ShopID).ToList();
                    }

                    var RevenueForProfileInShop = TotalDataAll.listRevenueForProfile.Where(m => listProfileInShop.Any(t => t.ID == m.ProfileID) && m.DateFrom <= CutOffDuration.DateEnd && m.DateTo >= CutOffDuration.DateStart).ToList();
                    item = new ElementFormula(PayrollElement.SAL_TOTAL_ACTUAL_PROFILE_SHOP.ToString(), RevenueForProfileInShop.Sum(m => m.Actual), 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Enum phần tử đánh giá


            //Loại đánh giá
            if (CheckIsExistFormula(listElementFormula, ref formula,
                new string[] { PayrollElement.EVA_PERFORMANCE_TYPE_CODE.ToString(),
                    PayrollElement.EVA_PERFORMANCE_LEVEL_NAME.ToString(),
                    PayrollElement.EVA_PERFORMANCE_NOTE.ToString(),
                    PayrollElement.EVA_PERFORMANCE_TOTALMARK_INMONTH.ToString(),
                }))
            {

                string status = string.Empty;
                dataComputeSer.GetDicPerformance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (_PERFORMANCETYPE_) ";
                    item = new ElementFormula(PayrollElement.EVA_PERFORMANCE_TOTALMARK_INMONTH.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.EVA_PERFORMANCE_LEVEL_NAME.ToString(), "", 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.EVA_PERFORMANCE_NOTE.ToString(), "", 0);
                    listElementFormula.Add(item);

                }
                else
                {
                    var listPerformanceByProfile = TotalData600.dicPerformance.GetValueOrNew(profileItem.ID);

                    var PerformentceProfile = listPerformanceByProfile.Where(m => m.ProfileID == profileItem.ID && m.PeriodFromDate <= CutOffDuration.DateEnd && m.PeriodToDate >= CutOffDuration.DateStart).FirstOrDefault();

                    // Loại đánh giá
                    item = new ElementFormula(PayrollElement.EVA_PERFORMANCE_TYPE_CODE.ToString(), PerformentceProfile != null ? PerformentceProfile.PerformanceTypeCode : "", 0);
                    listElementFormula.Add(item);

                    // Điểm đánh giá
                    item = new ElementFormula(PayrollElement.EVA_PERFORMANCE_TOTALMARK_INMONTH.ToString(), PerformentceProfile != null && PerformentceProfile.TotalMark != null ? PerformentceProfile.TotalMark : 0, 0);
                    listElementFormula.Add(item);

                    //Cấp độ đánh giá
                    item = new ElementFormula(PayrollElement.EVA_PERFORMANCE_LEVEL_NAME.ToString(), PerformentceProfile != null ? PerformentceProfile.Level1Name : "", 0);
                    listElementFormula.Add(item);

                    //Nội dung đánh giá
                    //Lấy nội dung đánh giá dùng cho tính lương cty
                    string _Note1 = string.Empty;
                    if (PerformentceProfile != null && !string.IsNullOrEmpty(PerformentceProfile.Note1))
                    {
                        _Note1 = PerformentceProfile.Note1;
                    }
                    item = new ElementFormula(PayrollElement.EVA_PERFORMANCE_NOTE.ToString(), _Note1, 0);
                    listElementFormula.Add(item);
                }
            }

            //56061
            if (CheckIsExistFormula(listElementFormula, ref formula, CatElementType.Evaluation.ToString().ToUpper() + "_PERFORMANCETYPE_", TotalDataAll.listPerformanceType.Where(p => p.Code != null).Select(p => p.Code).ToArray()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicPerformance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (_PERFORMANCETYPE_) ";
                    foreach (var i in TotalDataAll.listPerformanceType)
                    {
                        item = new ElementFormula(CatElementType.Evaluation.ToString().ToUpper() + "_PERFORMANCETYPE_" + i.Code, "", 0, "null");
                        listElementFormula.Add(item);
                    }

                }

                else
                {
                    var listPerformanceByProfile = TotalData600.dicPerformance.GetValueOrNew(profileItem.ID);

                    //[16122015][bang.nguyen][modify][60715]
                    //Sửa phần tử lương kết quả đánh giá (lấy kết quả đánh giá gần nhất so với kỳ lương bấm tính)
                    var PerformentceByProfile = listPerformanceByProfile.Where(m => m.ProfileID == profileItem.ID && m.YearEvaluation != null && m.YearEvaluation.Value <= CutOffDuration.MonthYear).OrderByDescending(m => m.YearEvaluation).ToList();
                    if (PerformentceByProfile != null)
                    {
                        foreach (var i in TotalDataAll.listPerformanceType)
                        {
                            var PerformentceByProfileAndType = PerformentceByProfile.FirstOrDefault(m => m.PerformanceTypeID == i.ID);
                            if (PerformentceByProfileAndType != null)
                            {
                                item = new ElementFormula(CatElementType.Evaluation.ToString().ToUpper() + "_PERFORMANCETYPE_" + i.Code, PerformentceByProfileAndType.Level1Name != null ? PerformentceByProfileAndType.Level1Name : "", 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(CatElementType.Evaluation.ToString().ToUpper() + "_PERFORMANCETYPE_" + i.Code, "", 0, "null");
                                listElementFormula.Add(item);
                            }
                        }
                    }
                    else
                    {
                        foreach (var i in TotalDataAll.listPerformanceType)
                        {
                            item = new ElementFormula(CatElementType.Evaluation.ToString().ToUpper() + "_PERFORMANCETYPE_" + i.Code, "", 0, "null");
                            listElementFormula.Add(item);
                        }
                    }
                }
            }

            #region Phần tử kết quả đánh giá gần nhất theo ngày cuối kỳ lương
            //[07032016][bang.nguyen][63743][New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.EVA_PERFORMANCE_TOTALMARK.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicPerformance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.EVA_PERFORMANCE_TOTALMARK_CUTOFF.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.EVA_PERFORMANCE_TOTALMARK.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listPerformanceByProfile = TotalData600.dicPerformance.GetValueOrNew(profileItem.ID);

                    double _totalMark = 0;
                    //lần đánh giá gần nhất so với ngày cuối kì lương
                    var objPerformentceByProfile = listPerformanceByProfile.Where(s => s.ProfileID == profileItem.ID
                                                                                            && s.PeriodFromDate <= CutOffDuration.DateEnd
                                                                                            && s.Status == PerformaceEvaStatus.E_APPROVE_END.ToString()).OrderByDescending(s => s.PeriodToDate).FirstOrDefault();
                    if (objPerformentceByProfile != null && objPerformentceByProfile.TotalMark != null && objPerformentceByProfile.TotalMark > 0)
                    {
                        _totalMark = objPerformentceByProfile.TotalMark.Value;
                    }
                    item = new ElementFormula(PayrollElement.EVA_PERFORMANCE_TOTALMARK.ToString(), _totalMark, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            //[26/06/2017][bang.nguyen][83728][Modify Func]
            //diem danh gia theo ky luong
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.EVA_PERFORMANCE_TOTALMARK_CUTOFF.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetDicPerformance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.EVA_PERFORMANCE_TOTALMARK_CUTOFF.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.EVA_PERFORMANCE_TOTALMARK_CUTOFF.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {

                    var listPerformanceByProfile = TotalData600.dicPerformance.GetValueOrNew(profileItem.ID);

                    double _totalMark = 0;
                    //lần đánh giá gần nhất so với ngày cuối kì lương
                    var objPerformentceByProfile = listPerformanceByProfile.Where(s => s.ProfileID == profileItem.ID
                                                                                            && s.DueDate >= CutOffDuration.DateStart
                                                                                            && s.DueDate <= CutOffDuration.DateEnd
                                                                                            ).OrderByDescending(s => s.DueDate).FirstOrDefault();
                    if (objPerformentceByProfile != null && objPerformentceByProfile.TotalMark != null)
                    {
                        _totalMark = objPerformentceByProfile.TotalMark.Value;
                    }
                    item = new ElementFormula(PayrollElement.EVA_PERFORMANCE_TOTALMARK_CUTOFF.ToString(), _totalMark, 0);
                    listElementFormula.Add(item);
                }
            }


            #endregion

            #region Enum phần tử CanTeen

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.CAN_SUMAMOUNT_N_1.ToString(), PayrollElement.CAN_AMOUNTEATNOTSTANDAR_N_1.ToString(), PayrollElement.CAN_AMOUNTCARDMORE_N_1.ToString(), PayrollElement.CAN_AMOUNTNOTWORKHASEAT_N_1.ToString(), PayrollElement.CAN_AMOUNTHDTJOB_N_1.ToString(), PayrollElement.CAN_AMOUNTNOTWORKBUTHASHDT_N_1.ToString(), PayrollElement.CAN_AMOUNTSUBTRACTWRONGSTANDARHDT_N_1.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicSumryMealRecord(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.CAN_SUMAMOUNT_N_1.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.CAN_SUMAMOUNT_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.CAN_AMOUNTEATNOTSTANDAR_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.CAN_AMOUNTCARDMORE_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.CAN_AMOUNTNOTWORKHASEAT_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.CAN_AMOUNTHDTJOB_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.CAN_AMOUNTNOTWORKBUTHASHDT_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.CAN_AMOUNTSUBTRACTWRONGSTANDARHDT_N_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {

                    var listSumryMealRecordByProfile = TotalData600.dicSumryMealRecord.GetValueOrNew(profileItem.ID);

                    DateTime DateStart = CutOffDuration.DateStart.AddMonths(-1);
                    DateTime DateEnd = CutOffDuration.DateEnd.AddMonths(-1);

                    var SumryMealRecordByRrofile = listSumryMealRecordByProfile.Where(m => m.ProfileID == profileItem.ID && (m.DateFrom != null && m.DateTo != null) && m.DateFrom <= DateEnd && m.DateTo >= DateStart).OrderByDescending(m => m.DateFrom).FirstOrDefault();
                    if (SumryMealRecordByRrofile != null)
                    {
                        item = new ElementFormula(PayrollElement.CAN_SUMAMOUNT_N_1.ToString(), SumryMealRecordByRrofile.SumAmount != null ? SumryMealRecordByRrofile.SumAmount : 0, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.CAN_AMOUNTEATNOTSTANDAR_N_1.ToString(), SumryMealRecordByRrofile.AmountEatNotStandar != null ? SumryMealRecordByRrofile.AmountEatNotStandar : 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTCARDMORE_N_1.ToString(), SumryMealRecordByRrofile.SumAmountCardMore != null ? SumryMealRecordByRrofile.SumAmountCardMore : 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTNOTWORKHASEAT_N_1.ToString(), SumryMealRecordByRrofile.AmountNotWorkHasEat != null ? SumryMealRecordByRrofile.AmountNotWorkHasEat : 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTHDTJOB_N_1.ToString(), SumryMealRecordByRrofile.AmountHDTJob != null ? SumryMealRecordByRrofile.AmountHDTJob : 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTNOTWORKBUTHASHDT_N_1.ToString(), SumryMealRecordByRrofile.AmountNotWorkButHasHDT != null ? SumryMealRecordByRrofile.AmountNotWorkButHasHDT : 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTSUBTRACTWRONGSTANDARHDT_N_1.ToString(), SumryMealRecordByRrofile.AmountSubtractWorngStandarHDT != null ? SumryMealRecordByRrofile.AmountSubtractWorngStandarHDT : 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.CAN_SUMAMOUNT_N_1.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTEATNOTSTANDAR_N_1.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTCARDMORE_N_1.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTNOTWORKHASEAT_N_1.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTHDTJOB_N_1.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTNOTWORKBUTHASHDT_N_1.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTSUBTRACTWRONGSTANDARHDT_N_1.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                    }
                }
            }



            if (CheckIsExistFormula(listElementFormula, ref formula,
                new string[] {
                    PayrollElement.CAN_SUMAMOUNT.ToString(),
                    PayrollElement.CAN_AMOUNTEATNOTSTANDAR.ToString(),
                    PayrollElement.CAN_AMOUNTCARDMORE.ToString(),
                    PayrollElement.CAN_AMOUNTNOTWORKHASEAT.ToString(),
                    PayrollElement.CAN_AMOUNTHDTJOB.ToString(),
                    PayrollElement.CAN_AMOUNTNOTWORKBUTHASHDT.ToString(),
                    PayrollElement.CAN_AMOUNTSUBTRACTWRONGSTANDARHDT.ToString() }))
            {

                string status = string.Empty;
                dataComputeSer.GetDicSumryMealRecord(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.CAN_SUMAMOUNT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.CAN_SUMAMOUNT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.CAN_AMOUNTEATNOTSTANDAR.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.CAN_AMOUNTCARDMORE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.CAN_AMOUNTNOTWORKHASEAT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.CAN_AMOUNTHDTJOB.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.CAN_AMOUNTNOTWORKBUTHASHDT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.CAN_AMOUNTSUBTRACTWRONGSTANDARHDT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listSumryMealRecordByProfile = TotalData600.dicSumryMealRecord.GetValueOrNew(profileItem.ID);

                    var SumryMealRecordByRrofile = listSumryMealRecordByProfile.Where(m => m.ProfileID == profileItem.ID && (m.DateFrom != null && m.DateTo != null) && m.DateFrom <= CutOffDuration.DateEnd && m.DateTo >= CutOffDuration.DateStart).OrderByDescending(m => m.DateFrom).FirstOrDefault();
                    if (SumryMealRecordByRrofile != null)
                    {
                        item = new ElementFormula(PayrollElement.CAN_SUMAMOUNT.ToString(), SumryMealRecordByRrofile.SumAmount != null ? SumryMealRecordByRrofile.SumAmount : 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTEATNOTSTANDAR.ToString(), SumryMealRecordByRrofile.AmountEatNotStandar != null ? SumryMealRecordByRrofile.AmountEatNotStandar : 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTCARDMORE.ToString(), SumryMealRecordByRrofile.SumAmountCardMore != null ? SumryMealRecordByRrofile.SumAmountCardMore : 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTNOTWORKHASEAT.ToString(), SumryMealRecordByRrofile.AmountNotWorkHasEat != null ? SumryMealRecordByRrofile.AmountNotWorkHasEat : 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTHDTJOB.ToString(), SumryMealRecordByRrofile.AmountHDTJob != null ? SumryMealRecordByRrofile.AmountHDTJob : 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTNOTWORKBUTHASHDT.ToString(), SumryMealRecordByRrofile.AmountNotWorkButHasHDT != null ? SumryMealRecordByRrofile.AmountNotWorkButHasHDT : 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTSUBTRACTWRONGSTANDARHDT.ToString(), SumryMealRecordByRrofile.AmountSubtractWorngStandarHDT != null ? SumryMealRecordByRrofile.AmountSubtractWorngStandarHDT : 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.CAN_SUMAMOUNT.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTEATNOTSTANDAR.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTCARDMORE.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTNOTWORKHASEAT.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTHDTJOB.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTNOTWORKBUTHASHDT.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.CAN_AMOUNTSUBTRACTWRONGSTANDARHDT.ToString(), 0, 0, "Không có dữ liệu trong kỳ tính lương !");
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region Enum bảo hiểm
            //  Tung.Tran [24/10/2018][0099754]: Thêm phần tử lương lấy ra mã + tên chế độ bảo hiểm
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.CAT_INSURANCEGRADE_CODE.ToString(), ""))
            {
                //Lấy data danh mục Chế độ bảo hiểm nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "ListInsuranceGrade";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.ListInsuranceGrade = dataComputeSer.GetCat_InsuranceGrade(ref status);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }
                //Lấy data Chế độ bảo hiểm theo nhân viên nếu chưa được lấy trước đó
                nameTableGetData = "ListInsuranceGradeByProfile";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.ListInsuranceGradeByProfile = dataComputeSer.GetIns_InsuranceGradeByProfile(TotalData600, CutOffDuration, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                //Trường hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.CAT_INSURANCEGRADE_CODE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.CAT_INSURANCEGRADE_CODE.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {

                    var InsuranceGradeCode = string.Empty;

                    // Lấy danh sách chế độ bảo hiểm của nhân viên đang tính
                    var lstInsuranceGradeByProfile = TotalData600.ListInsuranceGradeByProfile.Where(x => x.ProfileID == profileItem.ID).ToList();
                    if (lstInsuranceGradeByProfile != null && lstInsuranceGradeByProfile.Any())
                    {
                        // Lấy chế độ bảo hiểm mới nhất của nhân viên đó
                        var ogjInsuranceGradeByProfile = lstInsuranceGradeByProfile.OrderByDescending(x => x.MonthOfEffect).FirstOrDefault();
                        if (ogjInsuranceGradeByProfile != null && !Common.IsNullOrGuidEmpty(ogjInsuranceGradeByProfile.InsuranceGradeID))
                        {
                            var objCatInsuranceGrade = TotalData600.ListInsuranceGrade.FirstOrDefault(x => x.ID == ogjInsuranceGradeByProfile.InsuranceGradeID);
                            if (objCatInsuranceGrade != null && !string.IsNullOrEmpty(objCatInsuranceGrade.Code))
                                InsuranceGradeCode = objCatInsuranceGrade.Code;
                        }

                    }

                    item = new ElementFormula(PayrollElement.CAT_INSURANCEGRADE_CODE.ToString(), InsuranceGradeCode, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }
            #region Hien.Le [01/08/2019] 0107513: Thêm phần tử lương lấy số tiền điều chỉnh bảo hiểm
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[]
            {   PayrollElement.INS_INSURANCESALARYPAYBACK_INSSALARYADJUST.ToString(),
                PayrollElement.INS_INSURANCESALARYPAYBACK_SOCIALINSEMPRATE.ToString(),
                PayrollElement.INS_INSURANCESALARYPAYBACK_HEALTHINSEMPRATE.ToString(),
                PayrollElement.INS_INSURANCESALARYPAYBACK_UNEMPLOYEMPRATE.ToString(),
            }))
            {
                //Lấy data bảo hiểm hàng tháng theo nhân viên nếu chưa được lấy trước đó
                string status = string.Empty;
                dataComputeSer.GetListnsurance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_INSURANCESALARYPAYBACK_SOCIALINSEMPRATE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.INS_INSURANCESALARYPAYBACK_SOCIALINSEMPRATE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listInsuranceByProfile = TotalData600.dicInsurance.GetValueOrNew(profileItem.ID);

                    var objInsProfileInsuranceMonthly = listInsuranceByProfile.Where(p => p.MonthYear != null
                           && (new DateTime(p.MonthYear.Value.Year, p.MonthYear.Value.Month, 1) <= new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1))
                           && p.IsPayback == true && p.PaybackID != null).OrderByDescending(p => p.MonthYear).FirstOrDefault();

                    item = new ElementFormula(PayrollElement.INS_INSURANCESALARYPAYBACK_SOCIALINSEMPRATE.ToString(), objInsProfileInsuranceMonthly?.SocialInsEmpAmount ?? 0, 0, string.Empty);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.INS_INSURANCESALARYPAYBACK_HEALTHINSEMPRATE.ToString(), objInsProfileInsuranceMonthly?.HealthInsEmpAmount ?? 0, 0, string.Empty);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.INS_INSURANCESALARYPAYBACK_UNEMPLOYEMPRATE.ToString(), objInsProfileInsuranceMonthly?.UnemployEmpAmount ?? 0, 0, string.Empty);
                    listElementFormula.Add(item);

                    if (objInsProfileInsuranceMonthly != null)
                    {
                        dataComputeSer.GetDicInsuranceSalaryPayback(TotalData600, ref status);
                        //Trường hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                        if (!string.IsNullOrEmpty(status))
                        {
                            TotalData600.statusBugStore += status + " (" + PayrollElement.INS_INSURANCESALARYPAYBACK_INSSALARYADJUST.ToString() + ") ";
                            item = new ElementFormula(PayrollElement.INS_INSURANCESALARYPAYBACK_INSSALARYADJUST.ToString(), 0, 0, string.Empty);
                            listElementFormula.Add(item);
                        }
                        else
                        {
                            var objInsuranceSalaryPayback = TotalData600.listInsuranceSalaryPayback.FirstOrDefault(p => p.ID == objInsProfileInsuranceMonthly.PaybackID);

                            item = new ElementFormula(PayrollElement.INS_INSURANCESALARYPAYBACK_INSSALARYADJUST.ToString(), objInsuranceSalaryPayback?.InsSalaryAdjust ?? 0, 0, string.Empty);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion
            #endregion

            #region Tung.Tran [03/09/2018] [0097916]: Thêm phần tử lương lấy ra tên, mã phòng ban trực thuộc của nhân viên
            //[24/06/2019][Hien.Le][Modify][0106586]: Bổ sung enum trong phần tử tính lương lấy ra “Mã chức danh” của nhân viên được tính lương
            //[25/09/2019][Tung.Tran][Modify][108750]: Thêm 2 enum HRE_WORKHISTORY_ORIGINALDISTRIBUTORCODE + HRE_WORKHISTORY_OTHERDISTRIBUTORS
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[]
            {   PayrollElement.HRE_WORKHISTORY_ORGSTRUCTURE_CODE.ToString(),
                PayrollElement.HRE_WORKHISTORY_ORGSTRUCTURE_NAME.ToString(),
                PayrollElement.HRE_WORKHISTORY_JOBTITLE_CODE.ToString(),
                PayrollElement.HRE_WORKHISTORY_ORIGINALDISTRIBUTORCODE.ToString(),
                PayrollElement.HRE_WORKHISTORY_OTHERDISTRIBUTORS.ToString(),
            }))
            {
                var codeORG = string.Empty;
                var nameORG = string.Empty;
                var codeJobTitle = string.Empty;
                var originalDistributorCode = string.Empty;
                var otherDistributors = string.Empty;

                // Lấy lịch sử mới nhất của nhân viên ứng với kỳ lương đang tính  
                var workHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                   .Where(s => s.ProfileID == profileItem.ID && s.DateEffective <= CutOffDuration.DateEnd && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                   .OrderByDescending(s => s.DateEffective).FirstOrDefault();

                if (workHistory != null)
                {
                    var orgStructure = TotalDataAll.listOrgStructure.Where(x => x.ID == workHistory.OrganizationStructureID).FirstOrDefault();
                    if (orgStructure != null)
                    {
                        codeORG = orgStructure.Code;
                        nameORG = orgStructure.OrgStructureName;
                    }
                    //[24/06/2019] [Hien.Le] [Modify] [0106586] Bổ sung enum trong phần tử tính lương lấy ra “Mã chức danh” của nhân viên được tính lương
                    var catJobTitle = TotalDataAll.listCatJobTitle.FirstOrDefault(p => p.ID == workHistory.JobTitleID);
                    if (catJobTitle != null)
                    {
                        codeJobTitle = catJobTitle.Code;
                    }
                    if (!Common.IsNullOrGuidEmpty(workHistory.OriginalDistributorID))
                    {
                        var objOriginalDistributors = TotalDataAll.ListCat_NameEntity.FirstOrDefault(x => x.ID == workHistory.OriginalDistributorID);
                        originalDistributorCode = objOriginalDistributors?.Code;
                    }
                    otherDistributors = workHistory.OtherDistributors;
                }

                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_OTHERDISTRIBUTORS.ToString(), otherDistributors, 0, string.Empty);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_ORIGINALDISTRIBUTORCODE.ToString(), originalDistributorCode, 0, string.Empty);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_ORGSTRUCTURE_CODE.ToString(), codeORG, 0, string.Empty);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_ORGSTRUCTURE_NAME.ToString(), nameORG, 0, string.Empty);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_JOBTITLE_CODE.ToString(), codeJobTitle, 0, string.Empty);
                listElementFormula.Add(item);
            }
            #endregion

            #region Tung.Tran [11/12/2018][0101794]: Bổ sung phần tử lương nơi làm việc của nhân viên	
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_WORKHISTORY_WORKPLACE_CODE.ToString()))
            {
                //Lấy data danh mục Chế độ bảo hiểm nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listWorkPlace";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listWorkPlace = dataComputeSer.GetWorkPlace(ref status);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }
                //Trường hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_WORKHISTORY_WORKPLACE_CODE.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_WORKPLACE_CODE.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    var codeWorkPlace = string.Empty;
                    // Lấy lịch sử mới nhất của nhân viên ứng với kỳ lương đang tính  
                    var workHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                       .Where(s => s.ProfileID == profileItem.ID && s.DateEffective <= CutOffDuration.DateEnd && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                       .OrderByDescending(s => s.DateEffective).FirstOrDefault();

                    if (workHistory != null && !Common.IsNullOrGuidEmpty(workHistory.WorkPlaceID))
                    {
                        var objWorkPlace = TotalData600.listWorkPlace.Where(x => x.ID == workHistory.WorkPlaceID).FirstOrDefault();
                        if (objWorkPlace != null)
                        {
                            codeWorkPlace = objWorkPlace.Code;
                        }
                    }
                    item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_WORKPLACE_CODE.ToString(), codeWorkPlace, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Tung.Tran [22/12/2018][102060]: Bổ sung phần tử ngày bắt đầu mang thai
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_PREGNANCY_DATEPREGNACY.ToString()))
            {
                //lay data nếu chưa được lấy trước đó
                string status = string.Empty;
                dataComputeSer.GetDicPregnancy(TotalData600, CutOffDuration, ref status);
                //Trường hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_PREGNANCY_DATEPREGNACY.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.ATT_PREGNANCY_DATEPREGNACY.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    DateTime? datePregnacy = null;

                    List<string> listPregnancyType = new List<string>() { PregnancyType.E_LEAVE_EARLY.ToString(), PregnancyType.E_NEW_BORN_CHILD.ToString(), };

                    var listPregnancyByProfile = TotalData600.dicAttPregnancy.GetValueOrNew(profileItem.ID);
                    var objPregnancyByProfile = listPregnancyByProfile.Where(
                        x => x.DatePregnacy != null
                        && listPregnancyType.Contains(x.Type))
                        .OrderByDescending(x => x.DatePregnacy)
                        .FirstOrDefault();
                    if (objPregnancyByProfile != null)
                    {
                        datePregnacy = objPregnancyByProfile.DatePregnacy;
                    }

                    item = new ElementFormula(PayrollElement.ATT_PREGNANCY_DATEPREGNACY.ToString(), datePregnacy, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region Tung.Tran [26/03/2019][103857]: Thêm phần tử lương : lấy lên số tiền nhóm phụ cấp (15 bộ)
            if (CheckIsExistFormula(listElementFormula, ref formula,
                new string[] {
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT1.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT2.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT3.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT4.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT5.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT6.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT7.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT8.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT9.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT10.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT11.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT12.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT13.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT14.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT15.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME1.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME2.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME3.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME4.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME5.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME6.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME7.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME8.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME9.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME10.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME11.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME12.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME13.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME14.ToString(),
                    PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME15.ToString(),
                }))
            {

                //Lấy All dữ liệu danh mục chi tiết thiết bị
                string status = string.Empty;
                var nameTableGetData = "listUsualAllowanceGroup";
                if (!TotalData600.dicTableGetDataCategory.ContainsKey(nameTableGetData))
                {
                    TotalData600.listUsualAllowanceGroup = dataComputeSer.GetUsualAllowanceGroup(ref status);
                    TotalData600.dicTableGetDataCategory.Add(nameTableGetData, "");
                }
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT1.ToString() + ") ";
                }
                else
                {
                    var objWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                                                    .Where(s => s.ProfileID == profileItem.ID && s.DateEffective <= CutOffDuration.DateEnd && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                                    .OrderByDescending(s => s.DateEffective).FirstOrDefault();
                    #region Khai báo
                    double allowanceAmount1 = 0;
                    double allowanceAmount2 = 0;
                    double allowanceAmount3 = 0;
                    double allowanceAmount4 = 0;
                    double allowanceAmount5 = 0;
                    double allowanceAmount6 = 0;
                    double allowanceAmount7 = 0;
                    double allowanceAmount8 = 0;
                    double allowanceAmount9 = 0;
                    double allowanceAmount10 = 0;
                    double allowanceAmount11 = 0;
                    double allowanceAmount12 = 0;
                    double allowanceAmount13 = 0;
                    double allowanceAmount14 = 0;
                    double allowanceAmount15 = 0;
                    string allowanceTypeName1 = string.Empty;
                    string allowanceTypeName2 = string.Empty;
                    string allowanceTypeName3 = string.Empty;
                    string allowanceTypeName4 = string.Empty;
                    string allowanceTypeName5 = string.Empty;
                    string allowanceTypeName6 = string.Empty;
                    string allowanceTypeName7 = string.Empty;
                    string allowanceTypeName8 = string.Empty;
                    string allowanceTypeName9 = string.Empty;
                    string allowanceTypeName10 = string.Empty;
                    string allowanceTypeName11 = string.Empty;
                    string allowanceTypeName12 = string.Empty;
                    string allowanceTypeName13 = string.Empty;
                    string allowanceTypeName14 = string.Empty;
                    string allowanceTypeName15 = string.Empty;
                    #endregion

                    #region Xử lý
                    if (objWorkHistory != null)
                    {
                        if (!Common.IsNullOrGuidEmpty(objWorkHistory.PositionID))
                        {
                            var objPosition = TotalDataAll.listPosition.FirstOrDefault(x => x.ID == objWorkHistory.PositionID);
                            if (objPosition != null && !string.IsNullOrEmpty(objPosition.UsualAllowanceGroupID))
                            {
                                //Tung.Tran [116891]: Thêm kiểm TryParse chung với task 116891 (kaizen)
                                if (Guid.TryParse(objPosition.UsualAllowanceGroupID, out Guid guidTest))
                                {
                                    var sGuidUsualAllowanceGroupID = Guid.Parse(objPosition.UsualAllowanceGroupID);
                                    var objUsualAllowanceGroup = TotalData600.listUsualAllowanceGroup.FirstOrDefault(x => x.ID == sGuidUsualAllowanceGroupID);
                                    if (objUsualAllowanceGroup != null)
                                    {
                                        if (objUsualAllowanceGroup.AllowanceAmount1 != null) allowanceAmount1 = objUsualAllowanceGroup.AllowanceAmount1.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount2 != null) allowanceAmount2 = objUsualAllowanceGroup.AllowanceAmount2.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount3 != null) allowanceAmount3 = objUsualAllowanceGroup.AllowanceAmount3.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount4 != null) allowanceAmount4 = objUsualAllowanceGroup.AllowanceAmount4.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount5 != null) allowanceAmount5 = objUsualAllowanceGroup.AllowanceAmount5.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount6 != null) allowanceAmount6 = objUsualAllowanceGroup.AllowanceAmount6.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount7 != null) allowanceAmount7 = objUsualAllowanceGroup.AllowanceAmount7.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount8 != null) allowanceAmount8 = objUsualAllowanceGroup.AllowanceAmount8.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount9 != null) allowanceAmount9 = objUsualAllowanceGroup.AllowanceAmount9.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount10 != null) allowanceAmount10 = objUsualAllowanceGroup.AllowanceAmount10.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount11 != null) allowanceAmount11 = objUsualAllowanceGroup.AllowanceAmount11.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount12 != null) allowanceAmount12 = objUsualAllowanceGroup.AllowanceAmount12.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount13 != null) allowanceAmount13 = objUsualAllowanceGroup.AllowanceAmount13.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount14 != null) allowanceAmount14 = objUsualAllowanceGroup.AllowanceAmount14.Value;
                                        if (objUsualAllowanceGroup.AllowanceAmount15 != null) allowanceAmount15 = objUsualAllowanceGroup.AllowanceAmount15.Value;

                                        if (objUsualAllowanceGroup.AllowanceTypeID1 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID1);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName1 = objtUsualAllowance.UsualAllowanceName;
                                        }

                                        if (objUsualAllowanceGroup.AllowanceTypeID2 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID2);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName2 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID3 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID3);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName3 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID4 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID4);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName4 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID5 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID5);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName5 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID6 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID6);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName6 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID7 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID7);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName7 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID8 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID8);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName8 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID9 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID9);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName9 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID10 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID10);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName10 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID11 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID11);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName11 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID12 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID12);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName12 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID13 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID13);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName13 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID14 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID14);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName14 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                        if (objUsualAllowanceGroup.AllowanceTypeID15 != null)
                                        {
                                            var objtUsualAllowance = TotalDataAll.listUsualAllowance.FirstOrDefault(x => x.ID == objUsualAllowanceGroup.AllowanceTypeID15);
                                            if (objtUsualAllowance != null && !string.IsNullOrEmpty(objtUsualAllowance.UsualAllowanceName)) allowanceTypeName15 = objtUsualAllowance.UsualAllowanceName;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    #region Gán dữ liệu cho enum
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT1.ToString(), allowanceAmount1, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT2.ToString(), allowanceAmount2, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT3.ToString(), allowanceAmount3, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT4.ToString(), allowanceAmount4, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT5.ToString(), allowanceAmount5, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT6.ToString(), allowanceAmount6, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT7.ToString(), allowanceAmount7, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT8.ToString(), allowanceAmount8, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT9.ToString(), allowanceAmount9, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT10.ToString(), allowanceAmount10, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT11.ToString(), allowanceAmount11, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT12.ToString(), allowanceAmount12, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT13.ToString(), allowanceAmount13, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT14.ToString(), allowanceAmount14, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCEAMOUNT15.ToString(), allowanceAmount15, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME1.ToString(), allowanceTypeName1, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME2.ToString(), allowanceTypeName2, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME3.ToString(), allowanceTypeName3, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME4.ToString(), allowanceTypeName4, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME5.ToString(), allowanceTypeName5, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME6.ToString(), allowanceTypeName6, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME7.ToString(), allowanceTypeName7, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME8.ToString(), allowanceTypeName8, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME9.ToString(), allowanceTypeName9, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME10.ToString(), allowanceTypeName10, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME11.ToString(), allowanceTypeName11, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME12.ToString(), allowanceTypeName12, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME13.ToString(), allowanceTypeName13, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME14.ToString(), allowanceTypeName14, 0));
                    listElementFormula.Add(new ElementFormula(PayrollElement.POSITION_USUALALLOWANCEGROUP_ALLOWANCETYPENAME15.ToString(), allowanceTypeName15, 0));
                    #endregion
                }
            }

            #endregion

            #region [25/12/2018][bang.nguyen][102155][modify Func]: Tổng tiền chi phí bồi hoàn sau đào tạo
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.TRA_SUM_AMOUNTREIMBURSEMENT.ToString() }))
            {
                //lay data nếu chưa được lấy trước đó
                string status = string.Empty;
                string nameTableGetData = "listTra_TrainingCompensationCost";
                if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                {
                    TotalData600.listTra_TrainingCompensationCost = dataComputeSer.GetTrainingCompensationCost(TotalData600, ref status);
                    TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                }
                //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông báo store lỗi
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.TRA_SUM_AMOUNTREIMBURSEMENT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.TRA_SUM_AMOUNTREIMBURSEMENT.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    double sumAmountReimbursement = 0;
                    sumAmountReimbursement = TotalData600.listTra_TrainingCompensationCost.Where(s => s.ProfileID == profileItem.ID && s.AmountReimbursement != null).Sum(s => s.AmountReimbursement.Value);

                    item = new ElementFormula(PayrollElement.TRA_SUM_AMOUNTREIMBURSEMENT.ToString(), sumAmountReimbursement, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [25/09/2019][tung.tran][108750][modify Func]: Đếm số nhân viên được quản lý bởi nhân viên đang tính.
            //[06/07/2020][tung.tran][117185]: BA sửa đổi logic kiểm tra
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HRE_WORKHISTORY_COUNT_SUPERVISOR_BYPROFILE.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetListWorkHistoryFullProfile(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_WORKHISTORY_COUNT_SUPERVISOR_BYPROFILE.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_COUNT_SUPERVISOR_BYPROFILE.ToString(), 0, 0, string.Empty);
                    listElementFormula.Add(item);
                }
                else
                {
                    // Lấy loại điều chuyển nghỉ việc
                    var objTypeOfTransferStop = TotalDataAll.ListCat_NameEntity.FirstOrDefault(x => x.EnumType == Infrastructure.Utilities.EnumDropDown.TypeOfTransfer.E_STOP.ToString());

                    // lấy danh sách lịch sử mới nhất của tất cả nhân viên
                    var listWorkHistory = TotalData600.listWorkHistoryFullProfile
                                        .Where(x =>
                                            x.DateEffective <= CutOffDuration.DateEnd
                                            && x.Status == WorkHistoryStatus.E_APPROVED.ToString())
                                        .OrderByDescending(s => s.DateEffective)
                                        .GroupBy(x => x.ProfileID)
                                        .Select(x => x.FirstOrDefault())
                                        .ToList();
                    var count = 0;
                    if (objTypeOfTransferStop != null)
                    {
                        // Đếm số người được quản lý với logic: loại bỏ những nhân viên đã nghỉ việc trước kỳ công và có người quản lý là nhân viên đang tính
                        count = listWorkHistory.Where(x => x.Supervisor == profileItem.CodeEmp
                                                     && !(x.TypeOfTransferID == objTypeOfTransferStop.ID && x.DateEffective <= CutOffDuration.DateStart)).Count();
                    }

                    item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_COUNT_SUPERVISOR_BYPROFILE.ToString(), count, 0, string.Empty);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Hien.Le [06/01/2020] [0110938] Phần tử lương đếm số tháng không tham gia bảo hiểm thất nghiệp
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.INS_PROFILEINSURANCEMONTHLY_LEAVETYPE14DAYS.ToString(),
                PayrollElement.INS_PROFILEINSURANCEMONTHLY_ISPREGNANT.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetListnsurance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_PROFILEINSURANCEMONTHLY_LEAVETYPE14DAYS.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.INS_PROFILEINSURANCEMONTHLY_LEAVETYPE14DAYS.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listInsuranceByProfile = TotalData600.dicInsurance.GetValueOrNew(profileItem.ID);

                    string leaveType14Days = string.Empty;
                    bool isPregnant = false;
                    var objInsurance = listInsuranceByProfile.Where(s => s.ProfileID == profileItem.ID
                                                                            && (s.IsPayback == null || s.IsPayback == false)
                                                                            && s.MonthYear == CutOffDuration.MonthYear).FirstOrDefault();
                    if (objInsurance != null)
                    {
                        leaveType14Days = objInsurance.LeaveType14Days;
                        isPregnant = objInsurance?.IsPregnant ?? false;
                    }

                    item = new ElementFormula(PayrollElement.INS_PROFILEINSURANCEMONTHLY_LEAVETYPE14DAYS.ToString(), leaveType14Days, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_PROFILEINSURANCEMONTHLY_ISPREGNANT.ToString(), isPregnant, 0);
                    listElementFormula.Add(item);
                }
            }

            #endregion

            #region [17/01/2020][tung.tran][111080][modify Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_IS_STOPWORKING_CUTOFFDURATION.ToString()))
            {
                var isStopWorkingCutOff = false;
                var objStatusQuitConfig = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name != null && m.Name == AppConfig.HRM_HRE_CONFIG_QUITCAL.ToString());

                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);
                var objStopWorking = listStopWorkingByProfile.Where(
                                    s => s.CutOffDurationID != null
                                    && s.CutOffDurationID == CutOffDuration.ID
                                    && ((objStatusQuitConfig == null || string.IsNullOrEmpty(objStatusQuitConfig.Value1)) || (s.Status == objStatusQuitConfig.Value1)))
                                        .FirstOrDefault();

                if (objStopWorking != null)
                {
                    isStopWorkingCutOff = true;
                }

                item = new ElementFormula(PayrollElement.HRE_IS_STOPWORKING_CUTOFFDURATION.ToString(), isStopWorkingCutOff, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Hien.Le [02/03/2020] [0113047] [New Func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_WORKHISTORY_POSITION_ISROOT.ToString()))
            {
                bool isRoot = false;
                var objWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                    .Where(s => s.ProfileID == profileItem.ID && s.DateEffective <= CutOffDuration.DateEnd && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                    .OrderByDescending(s => s.DateEffective).FirstOrDefault();

                if (objWorkHistory != null)
                {
                    var objCatPosition = TotalDataAll.listPosition.FirstOrDefault(p => p.ID == objWorkHistory.PositionID);
                    isRoot = objCatPosition?.IsRoot ?? false;
                }
                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_POSITION_ISROOT.ToString(), isRoot, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Hien.Le [28/03/2020] [113838]: Thêm phần tử lương: Lấy % lương thử việc từ Hợp đồng
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HRE_CONTRACT_PROBATIONPERCENT.ToString(), PayrollElement.HRE_CONTRACT_PROBATIONSALARY.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_CONTRACT_PROBATIONPERCENT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONPERCENT.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);
                    double? probationPercent = 0.0;
                    double? probationSalary = 0.0;
                    //Hre_Contract.DateStart mới nhất
                    var listContracByProfile = listContractByProfileDic.Where(
                                                                  s => s.DateStart <= CutOffDuration.DateEnd
                                                                  && s.DateEnd >= CutOffDuration.DateStart
                                                                  && s.ProfileID == profileItem.ID
                                                                  && s.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                                                  && s.ContractTypeID != null).OrderByDescending(s => s.DateStart).ToList();

                    foreach (var itemContracByProfile in listContracByProfile)
                    {
                        var contractType = TotalDataAll.lstContractType.Where(s => s.ID == itemContracByProfile.ContractTypeID).Select(s => s.Type).FirstOrDefault();
                        if (contractType != EnumDropDown.TypeContract.E_PROBATION.ToString())
                        {
                            continue;
                        }
                        probationPercent = itemContracByProfile.ProbationPercent;
                        probationSalary = itemContracByProfile.ProbationSalary;
                    }
                    item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONPERCENT.ToString(), probationPercent, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONSALARY.ToString(), probationSalary, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Hien.Le [14/04/2020] [114147] Enum Lương BHXH trước khi thay đổi lương đặt công thức tính phần tử lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.SAL_INSURANCESALARY_INSURANCEAMOUNT_BEFORE_CHANGE_SALARY.ToString(),
                PayrollElement.SAL_INSURANCESALARY_INSURANCEAMOUNT_AFTER_CHANGE_SALARY.ToString(),
            }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicInsuaranceSalary(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.SAL_INSURANCESALARY_INSURANCEAMOUNT_BEFORE_CHANGE_SALARY.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.SAL_INSURANCESALARY_INSURANCEAMOUNT_BEFORE_CHANGE_SALARY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_INSURANCESALARY_INSURANCEAMOUNT_AFTER_CHANGE_SALARY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    double insuranceAmountBefore = 0;
                    double insuranceAmountAfter = 0;
                    var listInsuaranceSalaryByProfileDic = TotalData600.dicInsuaranceSalary.GetValueOrNew(profileItem.ID);
                    //Trước thay đổi lương
                    var InsuranceSalaryByProfile = listInsuaranceSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateEffect <= CutOffDuration.DateStart).OrderByDescending(m => m.DateEffect).FirstOrDefault();
                    if (InsuranceSalaryByProfile != null && InsuranceSalaryByProfile.InsuranceAmount != null)
                    {
                        insuranceAmountBefore = InsuranceSalaryByProfile.InsuranceAmount.Value;
                    }
                    //có thay đổi lương
                    var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                    if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                    {
                        InsuranceSalaryByProfile = listInsuaranceSalaryByProfileDic.Where(
                                            m => m.ProfileID == profileItem.ID
                                     && m.DateEffect > CutOffDuration.DateStart
                                     && m.DateEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateEffect).FirstOrDefault();

                        if (InsuranceSalaryByProfile != null && InsuranceSalaryByProfile.InsuranceAmount != null)
                        {
                            insuranceAmountAfter = InsuranceSalaryByProfile.InsuranceAmount.Value;
                        }
                    }

                    item = new ElementFormula(PayrollElement.SAL_INSURANCESALARY_INSURANCEAMOUNT_BEFORE_CHANGE_SALARY.ToString(), insuranceAmountBefore, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.SAL_INSURANCESALARY_INSURANCEAMOUNT_AFTER_CHANGE_SALARY.ToString(), insuranceAmountAfter, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Hien.Le [17/05/2020] [0115664]: [Hotfix source FGL tuần 19] Thêm phần tử lương đếm số người phụ thuộc có tháng kết thúc = tháng tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_DEPENDANT.ToString()))
            {
                string status = string.Empty;
                int numerDependant = 0;
                dataComputeSer.GetListDependantNoStatus(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_DEPENDANT.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_DEPENDANT.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listStatusExclude = new List<string> { EnumDropDown.StatusOT.E_REJECTED.ToString(), EnumDropDown.StatusOT.E_CANCEL.ToString() };
                    var listDependantByProfile = TotalData600.dicDependant.GetValueOrNew(profileItem.ID);
                    listDependantByProfile = listDependantByProfile.Where(
                        p => p.MonthOfEffect <= CutOffDuration.DateEnd
                        && CutOffDuration.DateStart <= p.MonthOfExpiry
                        && p.MonthOfExpiry <= CutOffDuration.DateEnd
                        && !listStatusExclude.Contains(p.Status)).ToList();

                    numerDependant = listDependantByProfile.Count();

                    item = new ElementFormula(PayrollElement.HRE_DEPENDANT.ToString(), numerDependant, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Hien.Le [29/05/2020] [0116112]: [Hotfix_Vinasoy_v8.8.14.01.09.08]Thêm Enum tính phần tử lương: lấy ra mức lương thử việc và mức lương KPI(Trước và sau khi tăng)
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.HRE_CONTRACT_PROBATIONPERCENT_BEFORE_CHANGE_SALARY.ToString(),
                PayrollElement.HRE_CONTRACT_PROBATIONSALARY_BEFORE_CHANGE_SALARY.ToString(),
                PayrollElement.HRE_CONTRACT_PROBATIONPERCENT_AFTER_CHANGE_SALARY.ToString(),
                PayrollElement.HRE_CONTRACT_PROBATIONSALARY_AFTER_CHANGE_SALARY.ToString(),
            }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicContract(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_CONTRACT_PROBATIONPERCENT_BEFORE_CHANGE_SALARY.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONPERCENT_BEFORE_CHANGE_SALARY.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONSALARY_BEFORE_CHANGE_SALARY.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONPERCENT_AFTER_CHANGE_SALARY.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONSALARY_AFTER_CHANGE_SALARY.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    double? probationPercentBefore = 0.0;
                    double? probationSalaryBefore = 0.0;
                    double? probationPercentAfter = 0.0;
                    double? probationSalaryAfer = 0.0;
                    //Kiểm tra có thay đổi lương trong tháng hay không
                    var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                    if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                    {
                        var objBasicSalary = listBasicSalaryByProfileDic.OrderByDescending(p => p.DateOfEffect).FirstOrDefault();
                        if (objBasicSalary != null)
                        {
                            var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);
                            //Trước thay đổi lương
                            var listContractByProfileBefore = listContractByProfileDic.Where(
                                                                          s => s.DateStart < objBasicSalary.DateOfEffect
                                                                          && ((s.DateEnd == null && DateTime.MaxValue > CutOffDuration.DateStart) || s.DateEnd > CutOffDuration.DateStart)
                                                                          && s.ProfileID == profileItem.ID
                                                                          && s.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                                                          && s.ContractTypeID != null).OrderByDescending(s => s.DateStart).ToList();

                            foreach (var itemContracByProfile in listContractByProfileBefore)
                            {
                                var contractType = TotalDataAll.lstContractType.Where(s => s.ID == itemContracByProfile.ContractTypeID).Select(s => s.Type).FirstOrDefault();
                                if (contractType != EnumDropDown.TypeContract.E_PROBATION.ToString())
                                {
                                    continue;
                                }
                                probationPercentBefore = itemContracByProfile?.ProbationPercent ?? 0;
                                probationSalaryBefore = itemContracByProfile?.ProbationSalary ?? 0;
                                break;
                            }
                            //Sau thay đổi lương
                            var listContractByProfileAfter = listContractByProfileDic.Where(
                                                                     s => s.DateStart >= objBasicSalary.DateOfEffect
                                                                     && ((s.DateEnd == null && DateTime.MaxValue >= CutOffDuration.DateStart) || s.DateEnd >= CutOffDuration.DateStart)
                                                                     && s.ProfileID == profileItem.ID
                                                                     && s.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                                                     && s.ContractTypeID != null).OrderByDescending(s => s.DateStart).ToList();

                            foreach (var itemContracByProfile in listContractByProfileAfter)
                            {
                                var contractType = TotalDataAll.lstContractType.Where(s => s.ID == itemContracByProfile.ContractTypeID).Select(s => s.Type).FirstOrDefault();
                                if (contractType != EnumDropDown.TypeContract.E_PROBATION.ToString())
                                {
                                    continue;
                                }
                                probationPercentAfter = itemContracByProfile?.ProbationPercent ?? 0;
                                probationSalaryAfer = itemContracByProfile?.ProbationSalary ?? 0;
                                break;
                            }
                        }
                        item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONPERCENT_BEFORE_CHANGE_SALARY.ToString(), probationPercentBefore, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONSALARY_BEFORE_CHANGE_SALARY.ToString(), probationSalaryBefore, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONPERCENT_AFTER_CHANGE_SALARY.ToString(), probationPercentAfter, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONSALARY_AFTER_CHANGE_SALARY.ToString(), probationSalaryAfer, 0);
                        listElementFormula.Add(item);
                    }
                    //Không thay đổi lương
                    else
                    {
                        var listContractByProfileDic = TotalData600.dicContract.GetValueOrNew(profileItem.ID);
                        var listContracByProfile = listContractByProfileDic.Where(
                                                                      s => s.DateStart <= CutOffDuration.DateEnd
                                                                      && s.DateEnd >= CutOffDuration.DateStart
                                                                      && s.ProfileID == profileItem.ID
                                                                      && s.Status == EnumDropDown.Status.E_APPROVED.ToString()
                                                                      && s.ContractTypeID != null).OrderByDescending(s => s.DateStart).ToList();

                        foreach (var itemContracByProfile in listContracByProfile)
                        {
                            var contractType = TotalDataAll.lstContractType.Where(s => s.ID == itemContracByProfile.ContractTypeID).Select(s => s.Type).FirstOrDefault();
                            if (contractType != EnumDropDown.TypeContract.E_PROBATION.ToString())
                            {
                                continue;
                            }
                            probationPercentBefore = itemContracByProfile?.ProbationPercent ?? 0;
                            probationSalaryBefore = itemContracByProfile?.ProbationSalary ?? 0;
                            break;
                        }

                        item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONPERCENT_BEFORE_CHANGE_SALARY.ToString(), probationPercentBefore, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONSALARY_BEFORE_CHANGE_SALARY.ToString(), probationSalaryBefore, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONPERCENT_AFTER_CHANGE_SALARY.ToString(), 0, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.HRE_CONTRACT_PROBATIONSALARY_AFTER_CHANGE_SALARY.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            //Enum Lương KPI trước khi thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.SAL_BS_KPIAMOUNT_BEFORE_CHANGE_SALARY.ToString(),
                PayrollElement.SAL_BS_KPIAMOUNT_AFTER_CHANGE_SALARY.ToString(),
                PayrollElement.SAL_BS_KPIRANK_BEFORE_CHANGE_SALARY.ToString(),
                PayrollElement.SAL_BS_KPIRANK_AFTER_CHANGE_SALARY.ToString(),
                PayrollElement.SAL_BS_CURRENCYKPI_BEFORE_CHANGE_SALARY.ToString(),
                PayrollElement.SAL_BS_CURRENCYKPI_AFTER_CHANGE_SALARY.ToString()
            }))
            {
                //Kiểm tra có thay đổi lương trong tháng hay không
                string KPIRankNameBefore = string.Empty;
                string currencyNameBefore = string.Empty;
                string KPIRankNameAfter = string.Empty;
                string currencyNameAfter = string.Empty;
                double KPIAmountBefore = 0;
                double KPIAmountAfter = 0;

                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    var objBasicSalary = listBasicSalaryByProfileDic.OrderByDescending(p => p.DateOfEffect).FirstOrDefault();
                    if (objBasicSalary != null)
                    {
                        //Trước thay đổi lương
                        var objSalaryProfileBefore = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID)
                                                        .Where(m => m.DateOfEffect < objBasicSalary.DateOfEffect
                                                        && m.Status == EnumDropDown.Sal_BasicSalaryStatus.E_APPROVED.ToString()).
                                                        OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                        if (objSalaryProfileBefore != null)
                        {
                            var objKPIRankName = TotalDataAll.listKPIRank.FirstOrDefault(x => x.ID == objSalaryProfileBefore.KPIRankID);
                            var objKPICurrency = TotalDataAll.listCurrency.FirstOrDefault(m => m.ID == objSalaryProfileBefore.CurrencyKPIID);
                            if (objKPIRankName != null)
                            {
                                KPIRankNameBefore = objKPIRankName.KPIRankName;
                            }
                            KPIAmountBefore = objSalaryProfileBefore?.KPIAmount ?? 0;

                            if (objKPICurrency != null)
                            {
                                currencyNameBefore = objKPICurrency.CurrencyName;
                            }
                        }
                        //Sau thay đổi lương
                        var objSalaryProfileAfter = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID)
                                                            .Where(m => m.DateOfEffect >= objBasicSalary.DateOfEffect
                                                            && m.DateOfEffect <= CutOffDuration.DateEnd
                                                            && m.Status == EnumDropDown.Sal_BasicSalaryStatus.E_APPROVED.ToString()).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();

                        if (objSalaryProfileAfter != null)
                        {
                            var objKPIRankName = TotalDataAll.listKPIRank.FirstOrDefault(x => x.ID == objSalaryProfileAfter.KPIRankID);
                            var objKPICurrency = TotalDataAll.listCurrency.FirstOrDefault(m => m.ID == objSalaryProfileAfter.CurrencyKPIID);
                            if (objKPIRankName != null)
                            {
                                KPIRankNameAfter = objKPIRankName.KPIRankName;
                            }
                            KPIAmountAfter = objSalaryProfileAfter?.KPIAmount ?? 0;
                            if (objKPICurrency != null)
                            {
                                currencyNameAfter = objKPICurrency.CurrencyName;
                            }
                        }
                    }
                    item = new ElementFormula(PayrollElement.SAL_BS_KPIRANK_BEFORE_CHANGE_SALARY.ToString(), KPIRankNameBefore, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_KPIAMOUNT_BEFORE_CHANGE_SALARY.ToString(), KPIAmountBefore, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_CURRENCYKPI_BEFORE_CHANGE_SALARY.ToString(), currencyNameBefore, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_KPIRANK_AFTER_CHANGE_SALARY.ToString(), KPIRankNameAfter, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_KPIAMOUNT_AFTER_CHANGE_SALARY.ToString(), KPIAmountAfter, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_CURRENCYKPI_AFTER_CHANGE_SALARY.ToString(), currencyNameAfter, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.SAL_BS_KPIRANK_BEFORE_CHANGE_SALARY.ToString(), KPIRankNameBefore, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_KPIAMOUNT_BEFORE_CHANGE_SALARY.ToString(), KPIAmountBefore, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_CURRENCYKPI_BEFORE_CHANGE_SALARY.ToString(), currencyNameBefore, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_KPIRANK_AFTER_CHANGE_SALARY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_KPIAMOUNT_AFTER_CHANGE_SALARY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.SAL_BS_CURRENCYKPI_AFTER_CHANGE_SALARY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Hien.Le [28/07/2020] [0117794] Thêm enum phần tử lương lấy ra Cấp bậc của nhân viên
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.HRE_WORKHISTORY_ABILITYTILE_CODE.ToString(), PayrollElement.HRE_WORKHISTORY_LABORTYPE.ToString() }))
            {
                string abilityTileCode = string.Empty;
                string labortype = string.Empty;
                var objWorkHistory = TotalDataAll.dicWorkHistory.GetValueOrNew(profileItem.ID)
                    .Where(s => s.ProfileID == profileItem.ID && s.DateEffective <= CutOffDuration.DateEnd && s.Status == WorkHistoryStatus.E_APPROVED.ToString())
                    .OrderByDescending(s => s.DateEffective).FirstOrDefault();

                if (objWorkHistory != null && !Common.IsNullOrGuidEmpty(objWorkHistory.AbilityTileID))
                {
                    var objAbilityTile = TotalDataAll.listCat_AbilityTile.FirstOrDefault(p => p.ID == objWorkHistory.AbilityTileID);
                    abilityTileCode = objAbilityTile?.Code ?? string.Empty;
                }

                if (objWorkHistory != null)
                {
                    labortype = objWorkHistory.LaborType;
                }

                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_ABILITYTILE_CODE.ToString(), abilityTileCode, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_LABORTYPE.ToString(), labortype, 0);
                listElementFormula.Add(item);
            }
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_WORKHISTORY_DATESTOP.ToString()))
            {
                DateTime? stopWorkingDateStop = null;
                // Cấu hình nghỉ việc được tính
                var objAllSettingEntity = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name != null && m.Name == AppConfig.HRM_HRE_CONFIG_QUITCAL.ToString());

                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                listStopWorkingByProfile = listStopWorkingByProfile.Where(
                                        p => p.DateStop != null
                                        && p.StopWorkType == EnumDropDown.StopWorkType.E_STOP.ToString()
                                        && p.DateStop <= CutOffDuration.DateEnd
                                        && p.DateStop >= CutOffDuration.DateStart
                                        && ((objAllSettingEntity == null || string.IsNullOrEmpty(objAllSettingEntity.Value1)) || (p.Status == objAllSettingEntity.Value1)))
                                        .OrderByDescending(p => p.DateStop)
                                        .ToList();
                foreach (var itemStopWorkingByProfile in listStopWorkingByProfile)
                {
                    var nameEntityType = TotalDataAll.ListCat_NameEntity.Where(p => p.ID == itemStopWorkingByProfile.TypeOfStopID).Select(p => p.EnumType).FirstOrDefault();
                    if (nameEntityType != EnumDropDown.TypeOfStopType.E_DIE.ToString())
                    {
                        continue;
                    }
                    stopWorkingDateStop = itemStopWorkingByProfile.DateStop;
                }
                item = new ElementFormula(PayrollElement.HRE_WORKHISTORY_DATESTOP.ToString(), stopWorkingDateStop, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Hien.Le [06/08/2020] 0117797: Thêm các enum phần tử lương kỷ luật
            //Enum Số tháng kéo dài tăng lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_DISCIPLINE_SALARYPENALTYMONTHS.ToString()))
            {
                string status = string.Empty;
                dataComputeSer.GetListDiscipline(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.HRE_DISCIPLINE_SALARYPENALTYMONTHS.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.HRE_DISCIPLINE_SALARYPENALTYMONTHS.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listCatDisciplinedTypes = TotalDataAll.listCat_DisciplinedTypes.Where(p => p.IsDelaySalary == true).Select(p => p.ID).ToList();
                    //Lấy Hre_Discipline mới nhất theo điều kiện
                    var disciplineByProfile = TotalData600.dicDiscipline.GetValueOrNew(profileItem.ID)
                                                        .Where(x =>
                                                            x.DateOfEffective <= CutOffDuration.DateEnd
                                                            && (x.DateEndOfViolation >= CutOffDuration.DateStart || x.DateEndOfViolation == null)
                                                            && (x.DisciplineTypeID != null && listCatDisciplinedTypes.Count > 0 && listCatDisciplinedTypes.Contains(x.DisciplineTypeID.Value))
                                                            && x.ApproveStatus == WorkHistoryStatus.E_APPROVED.ToString())
                                                        .OrderByDescending(s => s.DateOfEffective)
                                                        .GroupBy(x => x.ProfileID)
                                                        .Select(x => x.FirstOrDefault())
                                                        .ToList().FirstOrDefault();

                    item = new ElementFormula(PayrollElement.HRE_DISCIPLINE_SALARYPENALTYMONTHS.ToString(), disciplineByProfile?.SalaryPenaltyMonths ?? 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Khoa.nguyen [117796] Thêm enum phần tử lương Tiền đóng, tỷ lệ, lương đóng BH TNLĐ của NLĐ và NSDLĐ 
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.INS_PROFILEINSUARANCEMONTHLY_OADCOMPAMOUNT.ToString(),
            PayrollElement.INS_PROFILEINSUARANCEMONTHLY_OADCOMPRATE.ToString()
            }))
            {
                string status = string.Empty;
                double? oaDCompAmount = 0.0;
                double? oADCompRate = 0.0;
                //  dataComputeSer.GetDicInsProfileInsuranceMonthly(TotalData600, CutOffDuration, ref status);
                dataComputeSer.GetListnsurance(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_PROFILEINSUARANCEMONTHLY_OADCOMPAMOUNT.ToString() + ") ";

                    item = new ElementFormula(PayrollElement.INS_PROFILEINSUARANCEMONTHLY_OADCOMPAMOUNT.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.INS_PROFILEINSUARANCEMONTHLY_OADCOMPRATE.ToString(), string.Empty, 0);
                    listElementFormula.Add(item);

                }
                else
                {
                    var lstInsuranceMonthly = TotalData600.dicInsurance.GetValueOrNew(profileItem.ID).Where(x => x.MonthYear != null && x.MonthYear.Value == CutOffDuration.MonthYear).ToList();
                    var getPeriodMax = lstInsuranceMonthly.Where(x => x.Period != null).Max(x => x.Period);
                    var listInsuaranceMonthPeriodMax = lstInsuranceMonthly.Where(x => x.Period == getPeriodMax).ToList();
                    var objIsPayBack = listInsuaranceMonthPeriodMax.FirstOrDefault(x => x.IsPayback == true);
                    if (objIsPayBack != null)
                    {
                        oaDCompAmount = objIsPayBack.OADCompAmount;
                        oADCompRate = objIsPayBack.OADCompRate;
                    }
                    else
                    {
                        var objAdjusted = listInsuaranceMonthPeriodMax.FirstOrDefault();
                        if (objAdjusted != null)
                        {
                            oaDCompAmount = objAdjusted.OADCompAmount;
                            oADCompRate = objAdjusted.OADCompRate;
                        }
                    }

                    item = new ElementFormula(PayrollElement.INS_PROFILEINSUARANCEMONTHLY_OADCOMPAMOUNT.ToString(), oaDCompAmount, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.INS_PROFILEINSUARANCEMONTHLY_OADCOMPRATE.ToString(), oADCompRate, 0);
                    listElementFormula.Add(item);
                }


            }
            #endregion

            #region Hien.Le [25/08/2020] [0118716]: Thêm phần tử lương lấy ngày sinh nhật từ tính theo dương lịch
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.HRE_PROFILE_DAYOFBIRTH.ToString(),
                PayrollElement.HRE_PROFILE_MONTHOFBIRTH.ToString(),
                PayrollElement.HRE_PROFILE_YEAROFBIRTH.ToString(),
                PayrollElement.HRE_PROFILE_YEAROFBIRTH_DATETIME.ToString(),
                PayrollElement.HRE_PROFILE_ISTRADEUNIONIST.ToString()
            }))
            {
                var dateOfBirth = profileItem.DateOfBirth != null ? profileItem.DateOfBirth.Value.Day : 0;
                var monthOfBirth = profileItem.DateOfBirth != null ? profileItem.DateOfBirth.Value.Month : 0;
                var yearOfBirth = profileItem.DateOfBirth != null ? profileItem.DateOfBirth.Value.Year : 0;
                var yearOfBirthDateTime = profileItem?.DateOfBirth ?? null;
                int isTradeUnionist = 0;
                //Khoa.nguyen 0121553: Thêm phần tử lương kiểm tra tham gia Công đoàn, Đảng không dựa vào ngày tham gia	
                if (profileItem.IsTradeUnionist == true)
                {
                    isTradeUnionist = 1;
                }

                item = new ElementFormula(PayrollElement.HRE_PROFILE_DAYOFBIRTH.ToString(), dateOfBirth, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.HRE_PROFILE_MONTHOFBIRTH.ToString(), monthOfBirth, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.HRE_PROFILE_YEAROFBIRTH.ToString(), yearOfBirth, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.HRE_PROFILE_YEAROFBIRTH_DATETIME.ToString(), yearOfBirthDateTime, 0);
                listElementFormula.Add(item);

                item = new ElementFormula(PayrollElement.HRE_PROFILE_ISTRADEUNIONIST.ToString(), isTradeUnionist, 0);
                listElementFormula.Add(item);

            }
            #endregion
            #region NghiaDang [08/09/2020] [0118937]: 2.1 Thêm phần từ lương màn hình ds bảo hiểm tự nguyện
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.INS_VOLUNTARYINSURANCEINFO_TOTALPAID.ToString(),
                PayrollElement.INS_VOLUNTARYINSURANCEINFO_COMPAID.ToString(),
                PayrollElement.INS_VOLUNTARYINSURANCEINFO_EMPPAID.ToString(),
                PayrollElement.INS_VOLUNTARYINSURANCEINFO_STARTDATE.ToString(),
                PayrollElement.INS_VOLUNTARYINSURANCEINFO_ENDDATE.ToString(),
                PayrollElement.INS_VOLUNTARYINSURANCEINFO_PAIDSTATUS.ToString() }))
            {
                string status = string.Empty;
                dataComputeSer.GetDicVoluntaryInsInfo(TotalData600, CutOffDuration, ref status);
                if (!string.IsNullOrEmpty(status))
                {
                    TotalData600.statusBugStore += status + " (" + PayrollElement.INS_VOLUNTARYINSURANCEINFO_TOTALPAID.ToString() + ") ";
                    item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_TOTALPAID.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    var listVoluntaryInsInfoByProfileDic = TotalData600.dicVoluntaryInsInfo.GetValueOrNew(profileItem.ID);
                    Ins_VoluntaryInsInfoEntity VoluntaryInsInfoByProfile = listVoluntaryInsInfoByProfileDic
                    .Where(m => m.ProfieldID == profileItem.ID && m.StartDate <= CutOffDuration.DateEnd && m.EndDate >= CutOffDuration.DateStart)
                    .OrderByDescending(m => m.StartDate)
                    .FirstOrDefault();
                    if (VoluntaryInsInfoByProfile != null)
                    {
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_TOTALPAID.ToString(), VoluntaryInsInfoByProfile.TotalPaid ?? 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_COMPAID.ToString(), VoluntaryInsInfoByProfile.ComPaid ?? 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_EMPPAID.ToString(), VoluntaryInsInfoByProfile.EmpPaid ?? 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_STARTDATE.ToString(), VoluntaryInsInfoByProfile.StartDate, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_ENDDATE.ToString(), VoluntaryInsInfoByProfile.EndDate, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_PAIDSTATUS.ToString(), VoluntaryInsInfoByProfile.PaidStatus ?? "", 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_TOTALPAID.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_COMPAID.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_EMPPAID.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_STARTDATE.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_ENDDATE.ToString(), null, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.INS_VOLUNTARYINSURANCEINFO_PAIDSTATUS.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }

            }
            #endregion

            #region Khoa.Nguyen [07/10/2020] 119675: Thêm phần tử lương Ngày nộp đơn nghỉ việc
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_STOPWORKING_REQUESRTDATE.ToString()))
            {
                DateTime? requestDate = null;
                // Cấu hình nghỉ việc được tính
                var objAllSettingEntity = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name != null && m.Name == AppConfig.HRM_HRE_CONFIG_QUITCAL.ToString());

                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                var listStopWorking = listStopWorkingByProfile.Where(
                                       p => p.RequestDate != null
                                       && p.StopWorkType == EnumDropDown.StopWorkType.E_STOP.ToString()
                                       && p.RequestDate <= CutOffDuration.DateEnd
                                       && p.RequestDate >= CutOffDuration.DateStart
                                       && ((objAllSettingEntity == null || string.IsNullOrEmpty(objAllSettingEntity.Value1)) || (p.Status == objAllSettingEntity.Value1)))
                                       .OrderByDescending(p => p.RequestDate)
                                       .FirstOrDefault();

                if (listStopWorking != null)
                {
                    requestDate = listStopWorking.RequestDate;
                }

                item = new ElementFormula(PayrollElement.HRE_STOPWORKING_REQUESRTDATE.ToString(), requestDate, 0, string.Empty);
                listElementFormula.Add(item);
            }

            #endregion

            #region Khoa.Nguyen [07/10/2020] 119675: Thêm phần tử lương Ngày nộp đơn nghỉ việc
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_STOPWORKING_ISCOLLECTEMPCARDARREAR.ToString()))
            {
                int isCollectEmpCard = 0;
                // Cấu hình nghỉ việc được tính
                var objAllSettingEntity = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name != null && m.Name == AppConfig.HRM_HRE_CONFIG_QUITCAL.ToString());

                var listStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID);

                var listStopWorking = listStopWorkingByProfile.Where(
                                       p => p.IsCollectEmpCardArrear == true
                                       && p.DateStop <= CutOffDuration.DateEnd
                                       && p.DateStop >= CutOffDuration.DateStart
                                       && ((objAllSettingEntity == null || string.IsNullOrEmpty(objAllSettingEntity.Value1)) || (p.Status == objAllSettingEntity.Value1)))
                                       .ToList();

                if (listStopWorking != null && listStopWorking.Count > 0)
                {
                    isCollectEmpCard = 1;
                }

                item = new ElementFormula(PayrollElement.HRE_STOPWORKING_ISCOLLECTEMPCARDARREAR.ToString(), isCollectEmpCard, 0, string.Empty);
                listElementFormula.Add(item);
            }

            #endregion

            #region Nghia.Dang [18/8/2021] 130265: Thêm phần tử lương từ màn hình NV nghỉ việc
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_STOPWORKING_NUMBEROFDAYVIOLATION.ToString()))
            {
                int _numberOfDayViolation = 0;
                // Cấu hình nghỉ việc được tính
                var objAllSettingEntity = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name != null && m.Name == AppConfig.HRM_HRE_CONFIG_QUITCAL.ToString());

                var objStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID).Where(
                                       p => p.DateStop <= CutOffDuration.DateEnd
                                       && p.DateStop >= CutOffDuration.DateStart
                                       && ((objAllSettingEntity == null || string.IsNullOrEmpty(objAllSettingEntity.Value1)) || (p.Status == objAllSettingEntity.Value1))).OrderByDescending(x => x.DateStop).FirstOrDefault();
                if (objStopWorkingByProfile != null && objStopWorkingByProfile.NumberOfDayViolation != null)
                {
                    _numberOfDayViolation = objStopWorkingByProfile.NumberOfDayViolation.Value;
                }
                item = new ElementFormula(PayrollElement.HRE_STOPWORKING_NUMBEROFDAYVIOLATION.ToString(), _numberOfDayViolation, 0, string.Empty);
                listElementFormula.Add(item);
            }

            #endregion

            #region Nghia.Dang [18/8/2021] 130265: Thêm phần tử lương từ màn hình NV nghỉ việc
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.HRE_STOPWORKING_STOPWORKINGFORM.ToString()))
            {
                string _stopWorkingForm = string.Empty;
                // Cấu hình nghỉ việc được tính
                var objAllSettingEntity = TotalDataAll.listAllSettingEntity.FirstOrDefault(m => m.Name != null && m.Name == AppConfig.HRM_HRE_CONFIG_QUITCAL.ToString());

                var objStopWorkingByProfile = TotalDataAll.dicHre_StopWorking.GetValueOrNew(profileItem.ID).Where(
                                       p => p.DateStop <= CutOffDuration.DateEnd
                                       && p.DateStop >= CutOffDuration.DateStart
                                       && ((objAllSettingEntity == null || string.IsNullOrEmpty(objAllSettingEntity.Value1)) || (p.Status == objAllSettingEntity.Value1))).OrderByDescending(x => x.DateStop).FirstOrDefault();
                if (objStopWorkingByProfile != null && objStopWorkingByProfile.StopWorkingFormID != null)
                {
                    var objWorkingForm = TotalDataAll.ListCat_NameEntity.Where(x => x.ID == objStopWorkingByProfile.StopWorkingFormID.Value).FirstOrDefault();
                    if (objWorkingForm != null)
                    {
                        _stopWorkingForm = objWorkingForm.Code;
                    }
                }
                item = new ElementFormula(PayrollElement.HRE_STOPWORKING_STOPWORKINGFORM.ToString(), _stopWorkingForm, 0, string.Empty);
                listElementFormula.Add(item);
            }

            #endregion

            
        }

        #endregion

        #region Tung.Tran: Nhánh các enum recal
        public void GetStaticValuesRecal(
           ComputePayrollDataModelKZAll TotalDataAll,
           ComputePayrollDataModelKZ TotalData600,
           List<ElementFormula> listElementFormula,
           Hre_ProfileEntity profileItem,
           Att_CutOffDurationEntity CutOffDuration,
           List<string> formula,
           Guid? GradePayrollID,
           Att_AttendanceTableEntity objAttendanceTableProCut,
           Dictionary<Guid, ValueCount> listTmpDeduction,
           Sal_GetDataComputePayrollKZServices dataComputeSer,
           Att_CutOffDurationEntity cutOffDurationPre,
           Att_RecalAttendanceTableEntity objRecalAttendanceTableProCut
           )
        {
            ElementFormula item = new ElementFormula();

            #region Ngày nghỉ không tính lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_RECAL_TOTAL_UNPAID_LEAVEDAY_DAY.ToString()))
            {
                double totalUnpaidLeaveDays = 0;
                var recalAttendanceTableItem = TotalDataAll.dicRecalAttendanceTableItem.GetValueOrNew(objRecalAttendanceTableProCut.ID).Where(x => x.UnpaidLeaveDays != null);
                if (recalAttendanceTableItem != null)
                {
                    totalUnpaidLeaveDays = recalAttendanceTableItem.Sum(x => x.UnpaidLeaveDays.Value);
                }
                item = new ElementFormula(PayrollElement.ATT_RECAL_TOTAL_UNPAID_LEAVEDAY_DAY.ToString(), totalUnpaidLeaveDays, 0);
                listElementFormula.Add(item);

            }
            #endregion  
            #region Số ngày nghỉ có trả lương
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_RECAL_TOTAL_PAID_LEAVEDAY_DAY.ToString()))
            {
                double Total_LeaveDay = 0;
                if (objRecalAttendanceTableProCut != null)
                {
                    var AttendanceTableItem = TotalDataAll.dicRecalAttendanceTableItem.GetValueOrNew(objRecalAttendanceTableProCut.ID);
                    for (int j = 0; j < AttendanceTableItem.Count; j++)
                    {
                        if (AttendanceTableItem[j].LeaveTypeID != null)
                        {
                            var LeaveDay = TotalDataAll.listLeavedayType.Where(m => m.ID == AttendanceTableItem[j].LeaveTypeID).FirstOrDefault();
                            if (LeaveDay != null)
                            {
                                //code củ là so sánh với IsWorkDay
                                if (LeaveDay.IsAnnualLeave || LeaveDay.PaidRate >= 1)
                                {
                                    if (AttendanceTableItem[j].PaidLeaveHours != 0 && AttendanceTableItem[j].AvailableHours != 0)
                                    {
                                        Total_LeaveDay += AttendanceTableItem[j].PaidLeaveHours / AttendanceTableItem[j].AvailableHours;
                                    }
                                }
                            }
                        }
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_RECAL_TOTAL_PAID_LEAVEDAY_DAY.ToString(), Total_LeaveDay, 0);
                listElementFormula.Add(item);

            }
            #endregion

            #region ATT_RECAL_TOTAL_PAID_LEAVEDAY_DAY_1
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_RECAL_TOTAL_PAID_LEAVEDAY_DAY_1.ToString(), PayrollElement.ATT_RECAL_TOTAL_PAID_LEAVEDAY_DAY_2.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                var listAttendanceTableItemByProfileDic = TotalDataAll.dicRecalAttendanceTableItem.GetValueOrNew(objRecalAttendanceTableProCut.ID);
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID) && objRecalAttendanceTableProCut != null)
                {
                    var BasicSalaryIsChange = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect > CutOffDuration.DateStart && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                    var AttendanceTableItem1 = listAttendanceTableItemByProfileDic.Where(m => m.WorkDate < BasicSalaryIsChange.DateOfEffect).ToList();
                    var AttendanceTableItem2 = listAttendanceTableItemByProfileDic.Where(m => m.WorkDate >= BasicSalaryIsChange.DateOfEffect).ToList();

                    double Total_LeaveDay = 0;
                    //[02062016][bang.nguyen][68067][Modify func]
                    //Mỗi ngày nghỉ trả lương được tính bằng lấy giá trị cột PaidLeaveHours chia cho số giờ của ca làm việc trong ngày đó (PaidLeaveHours /AvailableHours)
                    //loc lai dữ liệu trước khi tính
                    AttendanceTableItem1 = AttendanceTableItem1.Where(s => s.PaidLeaveHours != 0 && s.AvailableHours != 0).ToList();
                    for (int j = 0; j < AttendanceTableItem1.Count; j++)
                    {

                        Total_LeaveDay += AttendanceTableItem1[j].PaidLeaveHours / AttendanceTableItem1[j].AvailableHours;
                    }
                    item = new ElementFormula(PayrollElement.ATT_RECAL_TOTAL_PAID_LEAVEDAY_DAY_1.ToString(), Total_LeaveDay, 0);
                    listElementFormula.Add(item);

                    Total_LeaveDay = 0;
                    //[02062016][bang.nguyen][68067][Modify func]
                    //Mỗi ngày nghỉ trả lương được tính bằng lấy giá trị cột PaidLeaveHours chia cho số giờ của ca làm việc trong ngày đó (PaidLeaveHours /AvailableHours)
                    //loc lai dữ liệu trước khi tính
                    AttendanceTableItem2 = AttendanceTableItem2.Where(s => s.PaidLeaveHours != 0 && s.AvailableHours != 0).ToList();
                    for (int j = 0; j < AttendanceTableItem2.Count; j++)
                    {
                        Total_LeaveDay += AttendanceTableItem2[j].PaidLeaveHours / AttendanceTableItem2[j].AvailableHours;
                    }
                    item = new ElementFormula(PayrollElement.ATT_RECAL_TOTAL_PAID_LEAVEDAY_DAY_2.ToString(), Total_LeaveDay, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    //[26/10/2015][hien.nguyen][Modify][58691]
                    //Nếu không có 2 mức lương thì gán giá trị vào enum ATT_TOTAL_PAID_LEAVEDAY_DAY_1
                    double Total_LeaveDay = 0;
                    for (int j = 0; j < listAttendanceTableItemByProfileDic.Count; j++)
                    {
                        if (listAttendanceTableItemByProfileDic[j].PaidLeaveHours > 0)
                        {
                            Total_LeaveDay++;
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_RECAL_TOTAL_PAID_LEAVEDAY_DAY_1.ToString(), Total_LeaveDay, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_TOTAL_PAID_LEAVEDAY_DAY_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] { PayrollElement.ATT_RECAL_WORKING_PAIDLEAVE_DAY_1.ToString(), PayrollElement.ATT_RECAL_WORKING_PAIDLEAVE_DAY_2.ToString() }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    //lấy dòng hiệu lực mới nhất trong tháng (trường hợp thay đổi nhiều lần trong tháng cũng vậy)
                    var objChangeSalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID
                    && m.DateOfEffect > CutOffDuration.DateStart
                    && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                    DateTime dateStart2 = DateTime.Now;
                    if (objChangeSalaryProfile != null)
                    {
                        dateStart2 = objChangeSalaryProfile.DateOfEffect;
                    }

                    //lưu số ngày công tính lương trước và sau khi thay đổi lương
                    double workpaid = 0;
                    double workpaid_after = 0;

                    //lấy dữ liệu công theo cutoff
                    //[11032016][bang.nguyen][64554][mofify]
                    var listRecalAttTableItem = TotalDataAll.dicRecalAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.WorkPaidHours != 0).ToList();
                    var objAttGradeByProfile = TotalDataAll.dicAttGrade.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.MonthStart <= CutOffDuration.DateEnd && m.MonthEnd >= CutOffDuration.DateStart).FirstOrDefault();
                    //sau khi điều chỉnh
                    ////duyệt wa tất cả các dòng
                    foreach (var tableItem in listRecalAttTableItem)
                    {
                        //[11032016][bang.nguyen][64191][mofify]
                        if (tableItem.WorkPaidHours != 0)
                        {
                            var objshift = TotalDataAll.listCat_Shift.Where(s => s.ID == tableItem.ShiftID).FirstOrDefault();
                            double _shiftStdWorkHours = 0;
                            if (objshift != null && objshift.StdWorkHours != null && objshift.StdWorkHours != 0)
                            {
                                _shiftStdWorkHours = objshift.StdWorkHours.Value;
                            }
                            if (tableItem.Shift2ID != null)
                            {
                                double _shift2WorkPaidHours = 0;
                                var objshitf2 = TotalDataAll.listCat_Shift.Where(s => s.ID == tableItem.Shift2ID).FirstOrDefault();
                                if (objshitf2 != null && objshitf2.StdWorkHours != null && objshitf2.StdWorkHours != 0)
                                {
                                    _shift2WorkPaidHours = objshitf2.StdWorkHours.Value;
                                }
                                double sumshiftStdWorkHours = _shiftStdWorkHours + _shift2WorkPaidHours;
                                if (sumshiftStdWorkHours != 0)
                                {
                                    //truoc thay doi luong
                                    if (tableItem.WorkDate < dateStart2)
                                    {
                                        workpaid += tableItem.WorkPaidHours / (sumshiftStdWorkHours / 2);
                                    }
                                    //sau thay doi luong
                                    if (tableItem.WorkDate >= dateStart2)
                                    {
                                        workpaid_after += tableItem.WorkPaidHours / (sumshiftStdWorkHours / 2);
                                    }
                                }
                            }
                            else if (tableItem.Shift2ID == null && tableItem.ShiftID == null)
                            {
                                //[02/11/2016][bang.nguyen][75113][modify]
                                if (objAttGradeByProfile != null && objAttGradeByProfile.HourOnWorkDate != null && objAttGradeByProfile.HourOnWorkDate != 0)
                                {
                                    //truoc thay doi luong
                                    if (tableItem.WorkDate < dateStart2)
                                    {
                                        workpaid += tableItem.WorkPaidHours / objAttGradeByProfile.HourOnWorkDate.Value;
                                    }
                                    //sau thay doi luong
                                    if (tableItem.WorkDate >= dateStart2)
                                    {
                                        workpaid_after += tableItem.WorkPaidHours / objAttGradeByProfile.HourOnWorkDate.Value;
                                    }
                                }
                            }
                            else
                            {
                                if (_shiftStdWorkHours != 0)
                                {
                                    //truoc thay doi luong
                                    if (tableItem.WorkDate < dateStart2)
                                    {
                                        workpaid += tableItem.WorkPaidHours / _shiftStdWorkHours;
                                    }
                                    //sau thay doi luong
                                    if (tableItem.WorkDate >= dateStart2)
                                    {
                                        workpaid_after += tableItem.WorkPaidHours / _shiftStdWorkHours;
                                    }
                                }
                            }
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_PAIDLEAVE_DAY_1.ToString(), workpaid, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_PAIDLEAVE_DAY_2.ToString(), workpaid_after, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_PAIDLEAVE_DAY_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_PAIDLEAVE_DAY_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            #region [17/10/2017][bang.nguyen][88780][new func]
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_RECAL_ATTENDANCETABLE_ACTUALHOURSALLOWANCE.ToString()))
            {
                double _ActualHoursAllowance = 0;

                var objAttendanceTable = TotalDataAll.dicRecalAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();
                if (objAttendanceTable != null)
                {
                    if (objAttendanceTable.ActualHoursAllowance != null)
                    {
                        _ActualHoursAllowance = objAttendanceTable.ActualHoursAllowance.Value;
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_RECAL_ATTENDANCETABLE_ACTUALHOURSALLOWANCE.ToString(), _ActualHoursAllowance, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region Phần tử công tháng hiện tại
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAL_ANNUALLEAVE.ToString(),
                PayrollElement.ATT_RECAL_ATTENDANCETABLE_ATT_STD_DAY.ToString(),
                PayrollElement.ATT_RECAL_TOTAL_ANNUALLEAVE_AVAILABLE.ToString(),
                PayrollElement.ATT_RECAL_WORKING_DAY_FOR_ATTENDANCE.ToString(),
                PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT.ToString(),
            }))
            {
                if (objRecalAttendanceTableProCut != null)
                {
                    item = new ElementFormula(PayrollElement.ATT_RECAL_ANNUALLEAVE.ToString(), objRecalAttendanceTableProCut.AnlDayTaken, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_RECAL_ATTENDANCETABLE_ATT_STD_DAY.ToString(), objRecalAttendanceTableProCut.StdWorkDayCount, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_DAY_FOR_ATTENDANCE.ToString(), objRecalAttendanceTableProCut.RealWorkDayCount, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT.ToString(), objRecalAttendanceTableProCut.NightShiftHours, 0);
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_RECAL_TOTAL_ANNUALLEAVE_AVAILABLE.ToString(), objRecalAttendanceTableProCut.TotalAnlDayAvailable != null ? objRecalAttendanceTableProCut.TotalAnlDayAvailable : 0, 0);
                    listElementFormula.Add(item);
                }
                else
                {

                    item = new ElementFormula(PayrollElement.ATT_RECAL_ANNUALLEAVE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_RECAL_ATTENDANCETABLE_ATT_STD_DAY.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_DAY_FOR_ATTENDANCE.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);

                    item = new ElementFormula(PayrollElement.ATT_RECAL_TOTAL_ANNUALLEAVE_AVAILABLE.ToString(), 0, 0);
                    listElementFormula.Add(item);

                }
            }
            #endregion

            #region Phần tử công tháng trước (N-1)
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAL_ATTENDANCETABLE_ATT_STD_DAY_PREV.ToString(),
                PayrollElement.ATT_RECAL_WORKING_DAY_PREV.ToString()
            }))
            {
                if (TotalDataAll.Att_RecalAttendanceTable_Prev != null)
                {
                    Att_RecalAttendanceTableEntity _tmp = TotalDataAll.Att_RecalAttendanceTable_Prev.Where(m => m.ProfileID == profileItem.ID).FirstOrDefault();
                    if (_tmp != null)
                    {
                        item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_DAY_PREV.ToString(), _tmp.RealWorkDayCount, 0);
                        listElementFormula.Add(item);

                        item = new ElementFormula(PayrollElement.ATT_RECAL_ATTENDANCETABLE_ATT_STD_DAY_PREV.ToString(), _tmp.StdWorkDayCount, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_DAY_PREV.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_RECAL_ATTENDANCETABLE_ATT_STD_DAY_PREV.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_DAY_PREV.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_ATTENDANCETABLE_ATT_STD_DAY_PREV.ToString(), 0, 0, "Null");
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Ngày công đi làm thực tế
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECALATTENDANCETABLE_ATT_WORKING_DAY.ToString(),
            }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);

                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd)
                                .OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(
                    listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(),
                    CutOffDuration.DateStart,
                    CutOffDuration.DateEnd,
                    profileItem.ID))
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                    //lấy dữ liệu công theo cutoff
                    List<Att_RecalAttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicRecalAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                    item = new ElementFormula(PayrollElement.ATT_RECALATTENDANCETABLE_ATT_WORKING_DAY.ToString(), listAttTableItem.Where(m => m.WorkDate >= CutOffDuration.DateStart && m.WorkDate < dateStart2).Count(), 0);
                    listElementFormula.Add(item);
                }
                else if (SalaryProfile.Count > 0)
                {
                    if (objAttendanceTableProCut != null)
                    {
                        item = new ElementFormula(PayrollElement.ATT_RECALATTENDANCETABLE_ATT_WORKING_DAY.ToString(), objAttendanceTableProCut.RealWorkDayCount, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_RECALATTENDANCETABLE_ATT_WORKING_DAY.ToString(), 0, 0, "Null");
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_RECALATTENDANCETABLE_ATT_WORKING_DAY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Số giờ nghỉ không trả lương trước và sau khi thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAL_SUM_UNPAIDLEAVEHOUR_AFTER_CHANGESALARY.ToString(),
                PayrollElement.ATT_RECAL_SUM_UNPAIDLEAVEHOUR_BEFORE_CHANGESALARY.ToString(),
            }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);

                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd)
                                .OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    DateTime dateChange = SalaryProfile.FirstOrDefault().DateOfEffect;

                    //lấy dữ liệu công theo cutoff
                    List<Att_RecalAttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicRecalAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                    item = new ElementFormula(PayrollElement.ATT_RECAL_SUM_UNPAIDLEAVEHOUR_BEFORE_CHANGESALARY.ToString(), listAttTableItem.Where(m => m.WorkDate >= CutOffDuration.DateStart && m.WorkDate < dateChange).Sum(x => x.UnpaidLeaveHours), 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_SUM_UNPAIDLEAVEHOUR_AFTER_CHANGESALARY.ToString(), listAttTableItem.Where(m => m.WorkDate >= dateChange && m.WorkDate <= CutOffDuration.DateEnd).Sum(x => x.UnpaidLeaveHours), 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_RECAL_SUM_UNPAIDLEAVEHOUR_BEFORE_CHANGESALARY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_SUM_UNPAIDLEAVEHOUR_AFTER_CHANGESALARY.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [18/11/2015][hien.nguyen][New][60409]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_COUNT_RECALATTENDANCETABLEITEM_LATEEARLYMINUTE.ToString()
            }))
            {
                var ListAttendancetableitem = TotalDataAll.dicRecalAttendanceTableItem.GetValueOrNew(objRecalAttendanceTableProCut.ID);
                item = new ElementFormula(PayrollElement.ATT_COUNT_RECALATTENDANCETABLEITEM_LATEEARLYMINUTE.ToString(),
                    ListAttendancetableitem.Count(m => m.LateEarlyMinutes > 0), 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region 57190
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES.ToString(),
                PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_AFTER.ToString()
            }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lây bảng công chi tiết theo profile
                var ListAttTableItemByProfile = TotalDataAll.dicRecalAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                //có thay đổi lương
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                    SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                    if (SalaryProfile.Count > 0 && SalaryProfile.FirstOrDefault().DateOfEffect > CutOffDuration.DateStart)
                    {
                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                        DateTime dateStart1 = CutOffDuration.DateStart;
                        DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                        item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES.ToString(), ListAttTableItemByProfile.Where(m => m.WorkDate < dateStart2).Sum(m => m.LateEarlyMinutes), 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_AFTER.ToString(), ListAttTableItemByProfile.Where(m => m.WorkDate >= dateStart2).Sum(m => m.LateEarlyMinutes), 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES.ToString(), ListAttTableItemByProfile.Sum(m => m.LateEarlyMinutes), 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_AFTER.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES.ToString(), ListAttTableItemByProfile.Sum(m => m.LateEarlyMinutes), 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_AFTER.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region ATT_RECAL_COUNT_PAIDLEAVEDAYS_BEFORE
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAL_COUNT_PAIDLEAVEDAYS_BEFORE.ToString(),
                PayrollElement.ATT_RECAL_COUNT_PAIDLEAVEDAYS_AFTER.ToString()
            }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                    //lưu số ngày công tính lương trước và sau khi thay đổi lương
                    double workpaid = 0;
                    double workpaid_after = 0;

                    //lấy dữ liệu công theo cutoff
                    List<Att_RecalAttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicRecalAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                    //duyệt wa tất cả các dòng
                    foreach (var tableItem in listAttTableItem)
                    {
                        if (tableItem.PaidLeaveDays != null)
                        {
                            if (tableItem.WorkDate < dateStart2)//trước khi điều chỉnh
                            {
                                workpaid += (double)tableItem.PaidLeaveDays;
                            }
                            if (tableItem.WorkDate >= dateStart2)//sau khi điều chỉnh
                            {
                                workpaid_after += (double)tableItem.PaidLeaveDays;
                            }
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_PAIDLEAVEDAYS_BEFORE.ToString(), workpaid, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_PAIDLEAVEDAYS_AFTER.ToString(), workpaid_after, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_PAIDLEAVEDAYS_BEFORE.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_PAIDLEAVEDAYS_AFTER.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region ATT_RECAL_LATE_EARLY_DEDUCTION_HOURS
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_RECAL_LATE_EARLY_DEDUCTION_HOURS.ToString()))
            {
                item = new ElementFormula(PayrollElement.ATT_RECAL_LATE_EARLY_DEDUCTION_HOURS.ToString(), objRecalAttendanceTableProCut != null ? objRecalAttendanceTableProCut.LateEarlyDeductionHours : 0, 0, "null");
                listElementFormula.Add(item);
            }
            #endregion

            #region Tổng giờ công thực tế của NV trong tháng [06/09/2015][hien.nguyen][New][72977]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAL_SUM_WORKHOURS_IN_MONTH_N_1.ToString()
            }))
            {

                #region ATT_RECAL_SUM_WORKHOURS_IN_MONTH_N_1
                double sumWorkHoursPre = 0;
                DateTime monthYear = new DateTime(CutOffDuration.MonthYear.Year, CutOffDuration.MonthYear.Month, 1).AddMonths(-1);

                var attendancetableByProfile = TotalDataAll.Att_RecalAttendanceTable_Prev.FirstOrDefault(m => m.IsDelete != true
                                               && m.ProfileID == profileItem.ID
                                               && m.MonthYear == monthYear);

                if (attendancetableByProfile != null)
                {
                    var listAttendanceTableItem_N_1 = TotalDataAll.listRecalAttendanceTableItem_N_1.Where(m => m.RecalAttendanceTableID == attendancetableByProfile.ID).ToList();
                    sumWorkHoursPre = listAttendanceTableItem_N_1.Sum(m => m.WorkHours);
                }
                item = new ElementFormula(PayrollElement.ATT_RECAL_SUM_WORKHOURS_IN_MONTH_N_1.ToString(), sumWorkHoursPre, 0);
                listElementFormula.Add(item);
                #endregion
            }
            #endregion

            #region [25/04/2016][hien.nguyen][New][66716]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAL_TOTAL_LATE_MINUTES_MONTHLY.ToString(),
            }))
            {
                double ATT_RECAL_TOTAL_LATE_MINUTES_MONTHLY = 0;
                var _listAttendancetableItem = TotalDataAll.dicRecalAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);
                foreach (var i in _listAttendancetableItem)
                {
                    ATT_RECAL_TOTAL_LATE_MINUTES_MONTHLY += i.LateInMinutes;
                }
                item = new ElementFormula(PayrollElement.ATT_RECAL_TOTAL_LATE_MINUTES_MONTHLY.ToString(), ATT_RECAL_TOTAL_LATE_MINUTES_MONTHLY, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region ATT_RECAL_WORKING_NIGHTSHIFT_1
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT_1.ToString(),
                PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT_2.ToString(),
                PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT_DAY_1.ToString(),
                PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT_DAY_2.ToString()
            }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                var listAttendanceTableItemByProfileDic = TotalDataAll.dicRecalAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    var BasicSalaryIsChange = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd && m.DateOfEffect >= CutOffDuration.DateStart).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                    var AttendanceItemByProfile1 = listAttendanceTableItemByProfileDic.Where(m => m.WorkDate < BasicSalaryIsChange.DateOfEffect).ToList();
                    var AttendanceItemByProfile2 = listAttendanceTableItemByProfileDic.Where(m => m.WorkDate >= BasicSalaryIsChange.DateOfEffect).ToList();

                    double CountHours = 0;
                    double CountDay = 0;
                    foreach (var i in AttendanceItemByProfile1)
                    {
                        CountHours += i.NightShiftHours;
                        if (i.NightShiftHours > 0)
                        {
                            CountDay++;
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT_1.ToString(), CountHours, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT_DAY_1.ToString(), CountDay, 0);
                    listElementFormula.Add(item);

                    CountHours = 0;
                    CountDay = 0;
                    foreach (var i in AttendanceItemByProfile2)
                    {
                        CountHours += i.NightShiftHours;
                        if (i.NightShiftHours > 0)
                        {
                            CountDay++;
                        }
                    }
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT_2.ToString(), CountHours, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT_DAY_2.ToString(), CountDay, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    //[01/12/2015][hien.nguyen][Modify][61052]
                    var AttendanceItemByProfile1 = TotalDataAll.dicRecalAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT_DAY_1.ToString(), AttendanceItemByProfile1.Count(m => m.NightShiftHours > 0), 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT_DAY_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_NIGHTSHIFT_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAL_WORKING_PAIDLEAVE_DAY.ToString(),
            }))
            {

                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                    //lấy dữ liệu công theo cutoff
                    List<Att_RecalAttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicRecalAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_PAIDLEAVE_DAY.ToString(), listAttTableItem.Where(m => m.WorkDate < dateStart2).Count(), 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_PAIDLEAVE_DAY.ToString(), objRecalAttendanceTableProCut != null ? objRecalAttendanceTableProCut.TotalPaidWorkDayCount ?? 0 : 0, 0);
                    listElementFormula.Add(item);
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAL_WORKING_WORKPAIDHOURS_STDWORKHOURS_DAY_1.ToString(),
                PayrollElement.ATT_RECAL_WORKING_WORKPAIDHOURS_STDWORKHOURS_DAY_2.ToString()
            }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                    //lưu số ngày công tính lương trước và sau khi thay đổi lương
                    double workpaid = 0;
                    double workpaid_after = 0;

                    //lấy dữ liệu công theo cutoff
                    List<Att_RecalAttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicRecalAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID).Where(m => m.WorkPaidHours != 0 && m.StdWorkHours != 0 && m.StdWorkHours != null).ToList();

                    //duyệt wa tất cả các dòng
                    foreach (var tableItem in listAttTableItem)
                    {
                        if (tableItem.WorkPaidHours != 0 && tableItem.StdWorkHours != 0)
                        {
                            if (tableItem.WorkDate < dateStart2)//trước khi điều chỉnh
                            {
                                workpaid += tableItem.WorkPaidHours / (double)tableItem.StdWorkHours;
                            }
                            if (tableItem.WorkDate >= dateStart2)//sau khi điều chỉnh
                            {
                                workpaid_after += tableItem.WorkPaidHours / (double)tableItem.StdWorkHours;
                            }
                        }
                    }

                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_WORKPAIDHOURS_STDWORKHOURS_DAY_1.ToString(), workpaid, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_WORKPAIDHOURS_STDWORKHOURS_DAY_2.ToString(), workpaid_after, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_WORKPAIDHOURS_STDWORKHOURS_DAY_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_WORKING_WORKPAIDHOURS_STDWORKHOURS_DAY_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_RECAL_OVERTIME_", "_HOURS_PREV"))
            {
                if (cutOffDurationPre != null)
                {
                    var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                    string status = string.Empty;
                    string nameTableGetData = "listAttendanceTablePre";

                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        TotalData600.listAttendanceTablePre = dataComputeSer.GetAttendanceTableLastMonth(TotalData600, CutOffDuration, ref status);
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }
                    var status2 = string.Empty;
                    nameTableGetData = "listAttendanceTableItemPre_N_1";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        TotalData600.listAttendanceTableItemPre_N_1 = dataComputeSer.GetAttendanceTableItemLastMonth(TotalData600, cutOffDurationPre, ref status2);
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }

                    if (!string.IsNullOrEmpty(status) && !string.IsNullOrEmpty(status2))
                    {
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            item = new ElementFormula("ATT_RECAL_OVERTIME_" + OTType.Code + "_HOURS_PREV", 0, 0);
                            listElementFormula.Add(item);
                        }
                        TotalData600.statusBugStore += status + " " + status2 + " (" + "ATT_RECAL_OVERTIME_" + ") ";
                    }
                    else
                    {
                        List<Cat_ElementEntity> listElement_OT = new List<Cat_ElementEntity>();
                        //Lấy lương cơ bản của nhân viên
                        List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                        SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= cutOffDurationPre.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                        //Có thay đổi lương trong tháng
                        if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= cutOffDurationPre.DateEnd).ToList(), cutOffDurationPre.DateStart, cutOffDurationPre.DateEnd, profileItem.ID))
                        {
                            #region Có thay đổi lương trong tháng
                            double OtHour = 0;
                            //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                            DateTime dateStart1 = cutOffDurationPre.DateStart;
                            DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                            //lấy dữ liệu công theo cutoff
                            List<Att_AttendanceTableItemEntity> listAttTableItem = TotalData600.listAttendanceTableItemPre_N_1.Where(m => m.ProfileID == profileItem.ID).ToList();

                            if (listAttTableItem != null && listAttTableItem.Count > 0)
                            {
                                listAttTableItem = listAttTableItem.Where(m => m.WorkDate < dateStart2).ToList();
                                //duyệt wa các loại ot
                                foreach (var OTType in TotalDataAll.listOvertimeType)
                                {
                                    OtHour = 0;
                                    //tính số giờ OT của từng loại
                                    foreach (var tableItem in listAttTableItem)
                                    {
                                        if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == OTType.ID)
                                        {
                                            OtHour += tableItem.OvertimeHours;
                                        }
                                        if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == OTType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours;
                                        }
                                        if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == OTType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours2;
                                        }
                                        if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == OTType.ID)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours3;
                                        }
                                        if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == OTType.ID)
                                        {
                                            if (tableItem.ExtraOvertimeHours4 != null)
                                            {
                                                OtHour += tableItem.ExtraOvertimeHours4.Value;
                                            }
                                        }
                                    }
                                    item = new ElementFormula("ATT_RECAL_OVERTIME_" + OTType.Code + "_HOURS_PREV", OtHour, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            else
                            {
                                foreach (var OTType in TotalDataAll.listOvertimeType)
                                {
                                    item = new ElementFormula("ATT_RECAL_OVERTIME_" + OTType.Code + "_HOURS_PREV", 0, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            #endregion
                        }
                        else//không thay đổi lương trong tháng
                        {
                            #region không thay đổi lương trong tháng
                            var prevMonth = CutOffDuration.MonthYear.AddMonths(-1);
                            var attendanceTablePrevProCut = TotalData600.listAttendanceTablePre.Where(m => m.ProfileID == profileItem.ID && m.MonthYear.Value.Month == prevMonth.Month && m.MonthYear.Value.Year == prevMonth.Year).FirstOrDefault();

                            if (attendanceTablePrevProCut != null)
                            {
                                listElement_OT = TotalDataAll.listElement_All.Where(m => m.ElementCode.StartsWith("ATT_RECAL_OVERTIME_") && m.ElementCode.EndsWith("_HOURS_PREV")).ToList();
                                foreach (var OT in listElement_OT)
                                {
                                    var itemOverTime = TotalDataAll.listOvertimeType.Where(m => m.Code == OT.ElementCode.Replace("ATT_RECAL_OVERTIME_", "").Replace("_HOURS_PREV", "")).FirstOrDefault();

                                    double value = 0;
                                    if (itemOverTime != null && attendanceTablePrevProCut != null)
                                    {
                                        if (attendanceTablePrevProCut.Overtime1Type != null && attendanceTablePrevProCut.Overtime1Type == itemOverTime.ID)
                                        {
                                            value += attendanceTablePrevProCut.Overtime1Hours;
                                        }
                                        if (attendanceTablePrevProCut.Overtime2Type != null && attendanceTablePrevProCut.Overtime2Type == itemOverTime.ID)
                                        {
                                            value += attendanceTablePrevProCut.Overtime2Hours;
                                        }
                                        if (attendanceTablePrevProCut.Overtime3Type != null && attendanceTablePrevProCut.Overtime3Type == itemOverTime.ID)
                                        {
                                            value += attendanceTablePrevProCut.Overtime3Hours;
                                        }
                                        if (attendanceTablePrevProCut.Overtime4Type != null && attendanceTablePrevProCut.Overtime4Type == itemOverTime.ID)
                                        {
                                            value += attendanceTablePrevProCut.Overtime4Hours;
                                        }
                                        if (attendanceTablePrevProCut.Overtime5Type != null && attendanceTablePrevProCut.Overtime5Type == itemOverTime.ID)
                                        {
                                            value += attendanceTablePrevProCut.Overtime5Hours;
                                        }
                                        if (attendanceTablePrevProCut.Overtime6Type != null && attendanceTablePrevProCut.Overtime6Type == itemOverTime.ID)
                                        {
                                            value += attendanceTablePrevProCut.Overtime6Hours;
                                        }
                                        //[27/06/2017][bang.nguyen][83774][Modify Func]
                                        if (attendanceTablePrevProCut.Overtime7Type != null && attendanceTablePrevProCut.Overtime7Type == itemOverTime.ID)
                                        {
                                            if (attendanceTablePrevProCut.Overtime7Hours != null)
                                            {
                                                value += attendanceTablePrevProCut.Overtime7Hours.Value;
                                            }
                                        }
                                        if (attendanceTablePrevProCut.Overtime8Type != null && attendanceTablePrevProCut.Overtime8Type == itemOverTime.ID)
                                        {
                                            if (attendanceTablePrevProCut.Overtime8Hours != null)
                                            {
                                                value += attendanceTablePrevProCut.Overtime8Hours.Value;
                                            }
                                        }
                                        if (attendanceTablePrevProCut.Overtime9Type != null && attendanceTablePrevProCut.Overtime9Type == itemOverTime.ID)
                                        {
                                            if (attendanceTablePrevProCut.Overtime9Hours != null)
                                            {
                                                value += attendanceTablePrevProCut.Overtime9Hours.Value;
                                            }
                                        }
                                    }
                                    item = new ElementFormula(OT.ElementCode, value, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            else
                            {
                                foreach (var OTType in TotalDataAll.listOvertimeType)
                                {
                                    item = new ElementFormula("ATT_RECAL_OVERTIME_" + OTType.Code + "_HOURS_PREV", 0, 0);
                                    listElementFormula.Add(item);
                                }
                            }
                            #endregion
                        }
                    }
                }
                else
                {
                    foreach (var OTType in TotalDataAll.listOvertimeType)
                    {
                        item = new ElementFormula("ATT_RECAL_OVERTIME_" + OTType.Code + "_HOURS_PREV", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            //Số ngày nghỉ tháng N-1
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_RECAL_LEAVE_", "_DAY_PREV"))
            {
                var listElement = TotalDataAll.listElement_All.Where(m => m.ElementCode.StartsWith("ATT_RECAL_LEAVE_") && m.ElementCode.EndsWith("_DAY_PREV")).ToList();
                var _tmpAttendanceTable = TotalDataAll.Att_RecalAttendanceTable_Prev.Where(m => m.ProfileID == profileItem.ID).FirstOrDefault();

                foreach (var LD in listElement)
                {
                    var itemLeaveday = TotalDataAll.listLeavedayType.Where(m => m.Code == LD.ElementCode.Replace("ATT_RECAL_LEAVE_", "").Replace("_DAY_PREV", "")).FirstOrDefault();

                    double value = 0;
                    if (itemLeaveday != null && _tmpAttendanceTable != null)
                    {
                        if (_tmpAttendanceTable.LeaveDay1Type != null && _tmpAttendanceTable.LeaveDay1Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay1Days != null ? (double)_tmpAttendanceTable.LeaveDay1Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay2Type != null && _tmpAttendanceTable.LeaveDay2Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay2Days != null ? (double)_tmpAttendanceTable.LeaveDay2Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay3Type != null && _tmpAttendanceTable.LeaveDay3Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay3Days != null ? (double)_tmpAttendanceTable.LeaveDay3Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay4Type != null && _tmpAttendanceTable.LeaveDay4Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay4Days != null ? (double)_tmpAttendanceTable.LeaveDay4Days : 0;
                        }
                        if (_tmpAttendanceTable.LeaveDay5Type != null && _tmpAttendanceTable.LeaveDay5Type == itemLeaveday.ID)
                        {
                            value += _tmpAttendanceTable.LeaveDay5Days != null ? (double)_tmpAttendanceTable.LeaveDay5Days : 0;
                        }
                    }
                    item = new ElementFormula(LD.ElementCode, value, 0);
                    listElementFormula.Add(item);
                }
            }

            #region [17/10/2017][bang.nguyen][88780][new func]
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAL_ATTENDANCETABLE_OTPREGNANCYHOURS.ToString()
            }))
            {
                double _ActualHoursAllowance = 0;
                double _OTPregnancyHours = 0;
                var objAttendanceTable = TotalDataAll.dicRecalAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => s.CutOffDurationID == CutOffDuration.ID).FirstOrDefault();
                if (objAttendanceTable != null)
                {
                    if (objAttendanceTable.ActualHoursAllowance != null)
                    {
                        _ActualHoursAllowance = objAttendanceTable.ActualHoursAllowance.Value;
                    }
                    //[03/11/2017][bang.nguyen][89523][New Func]
                    //Số giờ tăng ca của chế độ con nhỏ 
                    if (objAttendanceTable.OTPregnancyHours != null)
                    {
                        _OTPregnancyHours = objAttendanceTable.OTPregnancyHours.Value;
                    }
                }
                item = new ElementFormula(PayrollElement.ATT_RECAL_ATTENDANCETABLE_OTPREGNANCYHOURS.ToString(), _OTPregnancyHours, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [16/01/2018][bang.nguyen][92094][New Func] giờ công thực tế, trên lệch, dương, âm
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAl_ATTENDANCETABLE_TOTALACTUALWORKHOUR.ToString(),
            }))
            {
                double totalActualWorkHour = 0;
                if (objRecalAttendanceTableProCut != null)
                {
                    if (objRecalAttendanceTableProCut.TotalActualWorkHour != null)
                    {
                        totalActualWorkHour = objRecalAttendanceTableProCut.TotalActualWorkHour.Value;
                    }
                }

                //tổng số giờ công thực tế
                item = new ElementFormula(PayrollElement.ATT_RECAl_ATTENDANCETABLE_TOTALACTUALWORKHOUR.ToString(), totalActualWorkHour, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [29/12/2016][HienNguyen][0077300]: xác định nhân viên có được hưởng chế độ phụ nữ
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_RECAL_ATTENDANCETABLE_IS_WOMAN_POLICY.ToString()))
            {
                item = new ElementFormula(PayrollElement.ATT_RECAL_ATTENDANCETABLE_IS_WOMAN_POLICY.ToString(), objRecalAttendanceTableProCut.IsWomanPolicy ?? false, 0);
                listElementFormula.Add(item);
            }
            #endregion

            #region [Tung.Tran][94825] 10/05/2018 Tổng số lần đi trễ về sớm
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_RECAL_ATTENDANCETABLE_LATEEARLYCOUNT.ToString()))
            {
                double dateLateEarlyCount = 0;
                if (objRecalAttendanceTableProCut != null)
                {
                    if (objRecalAttendanceTableProCut.LateEarlyCount != null)
                    {
                        dateLateEarlyCount = objRecalAttendanceTableProCut.LateEarlyCount.Value;
                    }
                }
                //Tổng ngày theo kỳ ứng công
                item = new ElementFormula(PayrollElement.ATT_RECAL_ATTENDANCETABLE_LATEEARLYCOUNT.ToString(), dateLateEarlyCount, 0);
                listElementFormula.Add(item);

            }
            #endregion

            #region [Tung.Tran][94825] 10/05/2018 Tổng số lần đi trễ 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_RECAL_ATTENDANCETABLE_LATECOUNT.ToString()))
            {
                double dateLateCount = 0;
                if (objRecalAttendanceTableProCut != null)
                {
                    if (objRecalAttendanceTableProCut.LateCount != null)
                    {
                        dateLateCount = objRecalAttendanceTableProCut.LateCount.Value;
                    }
                }
                //Tổng ngày theo kỳ ứng công
                item = new ElementFormula(PayrollElement.ATT_RECAL_ATTENDANCETABLE_LATECOUNT.ToString(), dateLateCount, 0);
                listElementFormula.Add(item);

            }
            #endregion

            #region [Tung.Tran][94825] 10/05/2018 Tổng số lần đi trễ 
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.ATT_RECAL_ATTENDANCETABLE_EARLYCOUNT.ToString()))
            {
                double dateEarlyCount = 0;
                if (objRecalAttendanceTableProCut != null)
                {
                    if (objRecalAttendanceTableProCut.EarlyCount != null)
                    {
                        dateEarlyCount = objRecalAttendanceTableProCut.EarlyCount.Value;
                    }
                }
                //Tổng ngày theo kỳ ứng công
                item = new ElementFormula(PayrollElement.ATT_RECAL_ATTENDANCETABLE_EARLYCOUNT.ToString(), dateEarlyCount, 0);
                listElementFormula.Add(item);

            }
            #endregion

            #region Tung.Tran 0095765: Thêm phần tử lương tháng n-1
            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_PREV.ToString(),
                PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_AFTER_PREV.ToString()
            }))
            {
                string status = string.Empty;
                if (cutOffDurationPre != null)
                {
                    string nameTableGetData = "listRecalAttendanceTableItemPre_N_1";
                    if (!TotalData600.dicTableGetDataByProfileIDs.ContainsKey(nameTableGetData))
                    {
                        TotalData600.listRecalAttendanceTableItemPre_N_1 = dataComputeSer.GetRecalAttendanceTableItemLastMonth(TotalData600, cutOffDurationPre, ref status);
                        TotalData600.dicTableGetDataByProfileIDs.Add(nameTableGetData, "");
                    }
                    //truong hợp store lỗi => các phần tử lấy từ nguồn này sẽ = 0 và thông lưu store lỗi
                    if (!string.IsNullOrEmpty(status))
                    {
                        TotalData600.statusBugStore += status + " (" + PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_PREV.ToString() + ") ";

                        item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_PREV.ToString(), 0, 0);
                        listElementFormula.Add(item);
                        item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_AFTER_PREV.ToString(), 0, 0);
                        listElementFormula.Add(item);
                    }
                    else
                    {
                        var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                        //Lấy bảng công chi tiết theo profile
                        var ListAttTableItemByProfile = TotalData600.listRecalAttendanceTableItemPre_N_1.Where(m => m.ProfileID == profileItem.ID).ToList();

                        //có thay đổi lương
                        if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= cutOffDurationPre.DateEnd).ToList(), cutOffDurationPre.DateStart, cutOffDurationPre.DateEnd, profileItem.ID))
                        {
                            List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                            SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= cutOffDurationPre.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                            if (SalaryProfile.Count > 0 && SalaryProfile.FirstOrDefault().DateOfEffect > cutOffDurationPre.DateStart)//có thay đổi lương trong tháng
                            {
                                //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                                DateTime dateStart1 = cutOffDurationPre.DateStart;
                                DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                                item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_PREV.ToString(), ListAttTableItemByProfile.Where(m => m.WorkDate < dateStart2).Sum(m => m.LateEarlyMinutes), 0);
                                listElementFormula.Add(item);
                                item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_AFTER_PREV.ToString(), ListAttTableItemByProfile.Where(m => m.WorkDate >= dateStart2).Sum(m => m.LateEarlyMinutes), 0);
                                listElementFormula.Add(item);
                            }
                            else
                            {
                                item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_PREV.ToString(), ListAttTableItemByProfile.Sum(m => m.LateEarlyMinutes), 0);
                                listElementFormula.Add(item);
                                item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_AFTER_PREV.ToString(), 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_PREV.ToString(), ListAttTableItemByProfile.Sum(m => m.LateEarlyMinutes), 0);
                            listElementFormula.Add(item);
                            item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_AFTER_PREV.ToString(), 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_PREV.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.ATT_RECAL_COUNT_LATE_EARLY_MINUTES_AFTER_PREV.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region [14/30/2016][HienNguyen][64065]
            //Phần tử phần tử tăng ca trước thay đổi lương 
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_RECAL_OVERTIME_", "_HOURS_BEFORE"))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                //có thay đổi lương trong tháng
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    double OtHour = 0;
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                    //lấy dữ liệu công theo cutoff
                    List<Att_RecalAttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicRecalAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                    if (listAttTableItem != null && listAttTableItem.Count > 0)
                    {
                        listAttTableItem = listAttTableItem.Where(m => m.WorkDate < dateStart2).ToList();
                        //duyệt wa các loại ot
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            OtHour = 0;
                            //tính số giờ OT của từng loại
                            foreach (var tableItem in listAttTableItem)
                            {
                                if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == OTType.ID)
                                {
                                    OtHour += tableItem.OvertimeHours;
                                }
                                if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours;
                                }
                                if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours2;
                                }
                                if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours3;
                                }
                                //[27/06/2017][bang.nguyen][83774][Modify Func]
                                if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == OTType.ID)
                                {
                                    if (tableItem.ExtraOvertimeHours4 != null)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours4.Value;
                                    }
                                }
                            }
                            item = new ElementFormula("ATT_RECAL_OVERTIME_" + OTType.Code + "_HOURS_BEFORE", OtHour, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            item = new ElementFormula("ATT_RECAL_OVERTIME_" + OTType.Code + "_HOURS_BEFORE", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var OTType in TotalDataAll.listOvertimeType)
                    {
                        item = new ElementFormula("ATT_RECAL_OVERTIME_" + OTType.Code + "_HOURS_BEFORE", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }
            #endregion

            #region [08032016][bang.nguyen][64082][Modify]: phần tử số giờ theo loại nghỉ trước khi thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_RECAL_ATTTABLEITEM_SUM_LEAVEHOURS_", "_FIRST"))
            {
                //loc danh sach loai nghi
                var lstLeaveDaytype = TotalDataAll.listLeavedayType.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                if (lstLeaveDaytype.Count > 0)
                {
                    double _LeaveHours = 0;
                    var lstAttendanceTableItem = new List<Att_RecalAttendanceTableItemEntity>();
                    //loc có thay đổi lương trong tháng (lần thay đổi cuối cùng trong kì lương)
                    var objChangeBasisSalary = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(s => s.ProfileID == profileItem.ID
                                                                                    && s.DateOfEffect >= CutOffDuration.DateStart
                                                                                    && s.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();
                    if (objChangeBasisSalary != null)
                    {
                        var objAttendanceTable = TotalDataAll.dicRecalAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => (s.CutOffDurationID == CutOffDuration.ID
                                                                                            || (s.CutOffDurationID == null && s.MonthYear != null && s.MonthYear.Value == CutOffDuration.MonthYear)
                                                                                            )).FirstOrDefault();
                        if (objAttendanceTable != null)
                        {
                            lstAttendanceTableItem = TotalDataAll.dicRecalAttendanceTableItem.GetValueOrNew(objAttendanceTable.ID).Where(s => s.WorkDate >= CutOffDuration.DateStart
                                                                                                && s.WorkDate <= objChangeBasisSalary.DateOfEffect.AddDays(-1)
                                                                                                && s.LeaveTypeID != null).ToList();

                        }
                    }
                    if (lstAttendanceTableItem.Count > 0)
                    {
                        foreach (var objLeaveDaytype in lstLeaveDaytype)
                        {
                            _LeaveHours = 0;
                            //_LeaveHours = lstAttendanceTableItem.Where(s => s.LeaveTypeID == objLeaveDaytype.ID).Select(s => s.LeaveHours).Sum();
                            foreach (var objAttendanceTableItem in lstAttendanceTableItem)
                            {
                                if (objAttendanceTableItem.LeaveTypeID == objLeaveDaytype.ID)
                                {
                                    _LeaveHours += objAttendanceTableItem.LeaveHours;
                                }
                                if (objAttendanceTableItem.LeaveWorkDayType == objLeaveDaytype.ID && objAttendanceTableItem.LeaveWorkDayHour != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.LeaveWorkDayHour.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveTypeID == objLeaveDaytype.ID)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType3ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours3 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours3.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType4ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours4 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours4.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType5ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours5 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours5.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType6ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours6 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours6.Value;
                                }
                            }

                            item = new ElementFormula("ATT_RECAL_ATTTABLEITEM_SUM_LEAVEHOURS_" + objLeaveDaytype.Code + "_FIRST", _LeaveHours, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var objLeaveDaytype in lstLeaveDaytype)
                        {
                            item = new ElementFormula("ATT_RECAL_ATTTABLEITEM_SUM_LEAVEHOURS_" + objLeaveDaytype.Code + "_FIRST", _LeaveHours, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region [08032016][bang.nguyen][64082][Modify]: phần tử số giờ theo loại nghỉ sau khi thay đổi lương
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_RECAL_ATTTABLEITEM_SUM_LEAVEHOURS_", "_LAST"))
            {
                //loc danh sach loai nghi
                var lstLeaveDaytype = TotalDataAll.listLeavedayType.Where(s => s.Code != null && s.Code != string.Empty).ToList();
                if (lstLeaveDaytype.Count > 0)
                {
                    double _LeaveHours = 0;
                    var lstAttendanceTableItem = new List<Att_RecalAttendanceTableItemEntity>();
                    //loc có thay đổi lương trong tháng (lần thay đổi cuối cùng trong kì lương)
                    var objChangeBasisSalary = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID).Where(s => s.ProfileID == profileItem.ID
                                                                                    && s.DateOfEffect >= CutOffDuration.DateStart
                                                                                    && s.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(s => s.DateOfEffect).FirstOrDefault();

                    var objAttendanceTable = TotalDataAll.dicRecalAttendanceTable.GetValueOrNew(profileItem.ID).Where(s => (s.CutOffDurationID == CutOffDuration.ID
                                                                                            || (s.CutOffDurationID == null && s.MonthYear != null && s.MonthYear.Value == CutOffDuration.MonthYear)
                                                                                            )).FirstOrDefault();
                    if (objAttendanceTable != null)
                    {
                        if (objChangeBasisSalary != null)
                        {

                            lstAttendanceTableItem = TotalDataAll.dicRecalAttendanceTableItem.GetValueOrNew(objAttendanceTable.ID).Where(s => s.WorkDate >= objChangeBasisSalary.DateOfEffect
                                                                                                    && s.WorkDate <= CutOffDuration.DateEnd
                                                                                                    && s.LeaveTypeID != null).ToList();
                        }
                        else
                        {
                            lstAttendanceTableItem = TotalDataAll.dicRecalAttendanceTableItem.GetValueOrNew(objAttendanceTable.ID).Where(s => s.WorkDate >= CutOffDuration.DateStart
                                                                                                    && s.WorkDate <= CutOffDuration.DateEnd
                                                                                                    && s.LeaveTypeID != null).ToList();
                        }
                    }

                    if (lstAttendanceTableItem.Count > 0)
                    {
                        foreach (var objLeaveDaytype in lstLeaveDaytype)
                        {
                            _LeaveHours = 0;
                            //_LeaveHours = lstAttendanceTableItem.Where(s => s.LeaveTypeID == objLeaveDaytype.ID).Select(s => s.LeaveHours).Sum();
                            foreach (var objAttendanceTableItem in lstAttendanceTableItem)
                            {
                                if (objAttendanceTableItem.LeaveTypeID == objLeaveDaytype.ID)
                                {
                                    _LeaveHours += objAttendanceTableItem.LeaveHours;
                                }
                                if (objAttendanceTableItem.LeaveWorkDayType == objLeaveDaytype.ID && objAttendanceTableItem.LeaveWorkDayHour != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.LeaveWorkDayHour.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveTypeID == objLeaveDaytype.ID)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType3ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours3 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours3.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType4ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours4 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours4.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType5ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours5 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours5.Value;
                                }
                                if (objAttendanceTableItem.ExtraLeaveType6ID == objLeaveDaytype.ID && objAttendanceTableItem.ExtraLeaveHours6 != null)
                                {
                                    _LeaveHours += objAttendanceTableItem.ExtraLeaveHours6.Value;
                                }
                            }
                            item = new ElementFormula("ATT_RECAL_ATTTABLEITEM_SUM_LEAVEHOURS_" + objLeaveDaytype.Code + "_LAST", _LeaveHours, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var objLeaveDaytype in lstLeaveDaytype)
                        {
                            item = new ElementFormula("ATT_RECAL_ATTTABLEITEM_SUM_LEAVEHOURS_" + objLeaveDaytype.Code + "_LAST", _LeaveHours, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
            }
            #endregion

            #region Tung.Tran [16/05/2019][105482] : Bổ sung cộng dồn column LeaveDay6Days
            //Số ngày nghỉ của từng loại trong tháng
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_RECAL_LEAVE_", "_DAY"))
            {
                var _startWith = "ATT_RECAL_LEAVE_";
                var _endWith = "_DAY";
                List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith) && m.EndsWith(_endWith)).Distinct().ToList();
                foreach (var itemFormula in ListFormula)
                {
                    var itemLeaveday = TotalDataAll.listLeavedayType.Where(m => m.Code == itemFormula.Replace("ATT_RECAL_LEAVE_", "").Replace("_DAY", "")).FirstOrDefault();

                    double value = 0;
                    if (itemLeaveday != null && objRecalAttendanceTableProCut != null)
                    {
                        if (objRecalAttendanceTableProCut.LeaveDay1Type != null && objRecalAttendanceTableProCut.LeaveDay1Type == itemLeaveday.ID && objRecalAttendanceTableProCut.LeaveDay1Days != null)
                        {
                            value += (double)objRecalAttendanceTableProCut.LeaveDay1Days;
                        }
                        if (objRecalAttendanceTableProCut.LeaveDay2Type != null && objRecalAttendanceTableProCut.LeaveDay2Type == itemLeaveday.ID && objRecalAttendanceTableProCut.LeaveDay2Days != null)
                        {
                            value += (double)objRecalAttendanceTableProCut.LeaveDay2Days;
                        }
                        if (objRecalAttendanceTableProCut.LeaveDay3Type != null && objRecalAttendanceTableProCut.LeaveDay3Type == itemLeaveday.ID && objRecalAttendanceTableProCut.LeaveDay3Days != null)
                        {
                            value += (double)objRecalAttendanceTableProCut.LeaveDay3Days;
                        }
                        if (objRecalAttendanceTableProCut.LeaveDay4Type != null && objRecalAttendanceTableProCut.LeaveDay4Type == itemLeaveday.ID && objRecalAttendanceTableProCut.LeaveDay4Days != null)
                        {
                            value += (double)objRecalAttendanceTableProCut.LeaveDay4Days;
                        }
                        if (objRecalAttendanceTableProCut.LeaveDay5Type != null && objRecalAttendanceTableProCut.LeaveDay5Type == itemLeaveday.ID && objRecalAttendanceTableProCut.LeaveDay5Days != null)
                        {
                            value += (double)objRecalAttendanceTableProCut.LeaveDay5Days;
                        }
                        if (objRecalAttendanceTableProCut.LeaveDay6Type != null && objRecalAttendanceTableProCut.LeaveDay6Type == itemLeaveday.ID && objRecalAttendanceTableProCut.LeaveDay6Days != null)
                        {
                            value += (double)objRecalAttendanceTableProCut.LeaveDay6Days;
                        }
                    }
                    item = new ElementFormula(itemFormula, value, 0);
                    listElementFormula.Add(item);
                }
            }
            #endregion

            #region Tăng ca trước khi thay đổi lương và không có thay đổi lương cũng lưu vào phần tử này
            if (CheckIsExistFormula(listElementFormula, ref formula, "ATT_RECAL_OVERTIME_", "_HOURS"))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                List<Cat_ElementEntity> listElement_OT = new List<Cat_ElementEntity>();

                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();

                //có thay đổi lương trong tháng
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {
                    double OtHour = 0;
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                    //lấy dữ liệu công theo cutoff
                    List<Att_RecalAttendanceTableItemEntity> listAttTableItem = TotalDataAll.dicRecalAttendanceTableItemGroupByProfile.GetValueOrNew(profileItem.ID);

                    if (listAttTableItem != null && listAttTableItem.Count > 0)
                    {
                        listAttTableItem = listAttTableItem.Where(m => m.WorkDate < dateStart2).ToList();
                        //duyệt wa các loại ot
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            OtHour = 0;
                            //tính số giờ OT của từng loại
                            foreach (var tableItem in listAttTableItem)
                            {
                                if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == OTType.ID)
                                {
                                    OtHour += tableItem.OvertimeHours;
                                }
                                if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours;
                                }
                                if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours2;
                                }
                                if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == OTType.ID)
                                {
                                    OtHour += tableItem.ExtraOvertimeHours3;
                                }
                                //[27/06/2017][bang.nguyen][83774][Modify Func]
                                if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == OTType.ID)
                                {
                                    if (tableItem.ExtraOvertimeHours4 != null)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours4.Value;
                                    }
                                }
                            }
                            item = new ElementFormula("ATT_RECAL_OVERTIME_" + OTType.Code + "_HOURS", OtHour, 0);
                            listElementFormula.Add(item);
                        }
                    }
                    else
                    {
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            item = new ElementFormula("ATT_RECAL_OVERTIME_" + OTType.Code + "_HOURS", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else//không thay đổi lương trong tháng
                {
                    var _startWith = "ATT_RECAL_OVERTIME_";
                    var _endWith = "_HOURS";
                    List<string> ListFormula = formula.Where(m => m.StartsWith(_startWith) && m.EndsWith(_endWith)).Distinct().ToList();
                    foreach (var itemFormula in ListFormula)
                    {
                        var itemOverTime = TotalDataAll.listOvertimeType.Where(m => m.Code == itemFormula.Replace("ATT_RECAL_OVERTIME_", "").Replace("_HOURS", "")).FirstOrDefault();

                        double value = 0;
                        if (itemOverTime != null && objRecalAttendanceTableProCut != null)
                        {
                            if (objRecalAttendanceTableProCut.Overtime1Type != null && objRecalAttendanceTableProCut.Overtime1Type == itemOverTime.ID)
                            {
                                value += objRecalAttendanceTableProCut.Overtime1Hours;
                            }
                            if (objRecalAttendanceTableProCut.Overtime2Type != null && objRecalAttendanceTableProCut.Overtime2Type == itemOverTime.ID)
                            {
                                value += objRecalAttendanceTableProCut.Overtime2Hours;
                            }
                            if (objRecalAttendanceTableProCut.Overtime3Type != null && objRecalAttendanceTableProCut.Overtime3Type == itemOverTime.ID)
                            {
                                value += objRecalAttendanceTableProCut.Overtime3Hours;
                            }
                            if (objRecalAttendanceTableProCut.Overtime4Type != null && objRecalAttendanceTableProCut.Overtime4Type == itemOverTime.ID)
                            {
                                value += objRecalAttendanceTableProCut.Overtime4Hours;
                            }
                            if (objRecalAttendanceTableProCut.Overtime5Type != null && objRecalAttendanceTableProCut.Overtime5Type == itemOverTime.ID)
                            {
                                value += objRecalAttendanceTableProCut.Overtime5Hours;
                            }
                            if (objRecalAttendanceTableProCut.Overtime6Type != null && objRecalAttendanceTableProCut.Overtime6Type == itemOverTime.ID)
                            {
                                value += objRecalAttendanceTableProCut.Overtime6Hours;
                            }
                            //[27/06/2017][bang.nguyen][83774][Modify Func]
                            if (objRecalAttendanceTableProCut.Overtime7Type != null && objRecalAttendanceTableProCut.Overtime7Type == itemOverTime.ID)
                            {
                                if (objRecalAttendanceTableProCut.Overtime7Hours != null)
                                {
                                    value += objRecalAttendanceTableProCut.Overtime7Hours.Value;
                                }
                            }
                            if (objRecalAttendanceTableProCut.Overtime8Type != null && objRecalAttendanceTableProCut.Overtime8Type == itemOverTime.ID)
                            {
                                if (objRecalAttendanceTableProCut.Overtime8Hours != null)
                                {
                                    value += objRecalAttendanceTableProCut.Overtime8Hours.Value;
                                }
                            }
                            if (objRecalAttendanceTableProCut.Overtime9Type != null && objRecalAttendanceTableProCut.Overtime9Type == itemOverTime.ID)
                            {
                                if (objRecalAttendanceTableProCut.Overtime9Hours != null)
                                {
                                    value += objRecalAttendanceTableProCut.Overtime9Hours.Value;
                                }
                            }
                        }
                        item = new ElementFormula(itemFormula, value, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            #endregion

            #region DYN_RECAL_ATT_ATTENDANCETABLE_COUNT_ACTUALWORKHOUR_
            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.DYN_RECAL_ATT_ATTENDANCETABLE_COUNT_ACTUALWORKHOUR_.ToString(), "_BYFROMANDTO"))
            {
                var strStartsWith = PayrollElement.DYN_RECAL_ATT_ATTENDANCETABLE_COUNT_ACTUALWORKHOUR_.ToString();
                var strEndWith = "_BYFROMANDTO";
                //Các phần tử tính lương tách ra từ 1 chuỗi công thức
                List<string> ListFormula = formula.Where(m => m.StartsWith(strStartsWith) && m.EndsWith(strEndWith)).Distinct().ToList();

                if (objAttendanceTableProCut != null)
                {
                    var listAttendanceTableItem = TotalDataAll.dicRecalAttendanceTableItem.GetValueOrNew(objAttendanceTableProCut.ID);

                    if (listAttendanceTableItem.Count > 0)
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            var _formula = formulaitem;
                            double countActualWorkHour = 0;
                            var strHourFromAndTo = _formula.Replace(strStartsWith, "").Replace(strEndWith, "");
                            if (!string.IsNullOrEmpty(strHourFromAndTo))
                            {
                                var listHourFromAndTo = strHourFromAndTo.Split("_").ToList();
                                if (listHourFromAndTo.Count == 2)
                                {
                                    double valueHourFrom = 0;
                                    double valueHourTo = 0;

                                    if (double.TryParse(listHourFromAndTo[0], out valueHourFrom) && double.TryParse(listHourFromAndTo[1], out valueHourTo))
                                    {
                                        countActualWorkHour = listAttendanceTableItem.Where(s => s.ActualWorkHour >= valueHourFrom && s.ActualWorkHour < valueHourTo).Count();
                                    }
                                }
                            }

                            item = new ElementFormula(_formula, countActualWorkHour, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                    else
                    {
                        foreach (var formulaitem in ListFormula)
                        {
                            item = new ElementFormula(formulaitem, 0, 0);
                            listElementFormula.Add(item);
                            //xoa cac enum da xu ly trong list enum tong
                            formula.Remove(formulaitem);
                        }
                    }
                }
                else
                {
                    foreach (var formulaitem in ListFormula)
                    {
                        item = new ElementFormula(formulaitem, 0, 0);
                        listElementFormula.Add(item);
                        //xoa cac enum da xu ly trong list enum tong
                        formula.Remove(formulaitem);
                    }
                }
            }

            #endregion
        }

        #endregion

        #region Tung.Tran: Nhánh các enum Payback
        public void GetStaticValuesPayBack(
           ComputePayrollDataModelKZAll TotalDataAll,
           ComputePayrollDataModelKZ TotalData600,
           List<ElementFormula> listElementFormula,
           Hre_ProfileEntity profileItem,
           Att_CutOffDurationEntity CutOffDuration,
           Att_CutOffDurationEntity CutOffDurationPayBack,
           List<string> formula,
           Guid? GradePayrollID,
           Att_AttendanceTableEntity objAttendanceTableProCut,
           Dictionary<Guid, ValueCount> listTmpDeduction,
           Sal_GetDataComputePayrollKZServices dataComputeSer,
           Att_CutOffDurationEntity cutOffDurationPre
           )
        {
            ElementFormula item = new ElementFormula();

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.PB_ATT_WORKING_PAIDLEAVE_DAY.ToString(),
            }))
            {
                Att_AttendanceTablePaybackEntity objAttendanceTablePayback = TotalDataAll
                 .dicAttendanceTablePayback
                 .GetValueOrNew(profileItem.ID)
                 .Where(x => x.CutOffDurationID == CutOffDuration.ID)
                 .Where(x => x.PaybackDurationID == CutOffDurationPayBack.ID)
                 .FirstOrDefault();

                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();
                //có thay đổi lương trong tháng
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    DateTime dateStart1 = CutOffDuration.DateStart;
                    DateTime dateStart2 = SalaryProfile.OrderByDescending(m => m.DateOfEffect).FirstOrDefault().DateOfEffect;

                    //lấy dữ liệu công theo cutoff
                    List<Att_AttendanceTablePaybackItemEntity> listAttTableItem = TotalDataAll.dicAttendanceTablePaybackItem.GetValueOrNew(objAttendanceTablePayback.ID);

                    item = new ElementFormula(PayrollElement.PB_ATT_WORKING_PAIDLEAVE_DAY.ToString(), listAttTableItem.Where(m => m.WorkDate < dateStart2).Count(), 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.PB_ATT_WORKING_PAIDLEAVE_DAY.ToString(), objAttendanceTablePayback != null ? objAttendanceTablePayback.TotalPaidWorkDayCount ?? 0 : 0, 0);
                    listElementFormula.Add(item);
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.PB_ATT_COUNT_PAIDLEAVEDAYS.ToString(),
                PayrollElement.PB_ATT_STD_DAY.ToString(),
            }))
            {

                Att_AttendanceTablePaybackEntity objAttendanceTablePayback = TotalDataAll
                 .dicAttendanceTablePayback
                 .GetValueOrNew(profileItem.ID)
                 .Where(x => x.CutOffDurationID == CutOffDuration.ID)
                 .Where(x => x.PaybackDurationID == CutOffDurationPayBack.ID)
                 .FirstOrDefault();

                double sumPaidLeaveDays = 0;
                double StdWorkDayCount = 0;


                if (objAttendanceTablePayback != null)
                {
                    var ListAttendancetableitem = TotalDataAll.dicAttendanceTablePaybackItem.GetValueOrNew(objAttendanceTablePayback.ID);
                    sumPaidLeaveDays = ListAttendancetableitem.Sum(m => m.PaidLeaveDays ?? 0);
                    StdWorkDayCount = objAttendanceTablePayback.StdWorkDayCount;
                }

                item = new ElementFormula(PayrollElement.PB_ATT_COUNT_PAIDLEAVEDAYS.ToString(), sumPaidLeaveDays, 0);
                listElementFormula.Add(item);
                item = new ElementFormula(PayrollElement.PB_ATT_STD_DAY.ToString(), StdWorkDayCount, 0);
                listElementFormula.Add(item);
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, new string[] {
                PayrollElement.PB_ATT_WORKING_PAIDLEAVE_DAY_1.ToString(),
                PayrollElement.PB_ATT_WORKING_PAIDLEAVE_DAY_2.ToString()
            }))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                {
                    //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                    //lấy dòng hiệu lực mới nhất trong tháng (trường hợp thay đổi nhiều lần trong tháng cũng vậy)
                    var objChangeSalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID
                    && m.DateOfEffect > CutOffDuration.DateStart
                    && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).FirstOrDefault();
                    DateTime dateStart2 = DateTime.Now;
                    if (objChangeSalaryProfile != null)
                    {
                        dateStart2 = objChangeSalaryProfile.DateOfEffect;
                    }

                    //lưu số ngày công tính lương trước và sau khi thay đổi lương
                    double workpaid = 0;
                    double workpaid_after = 0;


                    Att_AttendanceTablePaybackEntity objAttendanceTablePayback = TotalDataAll
                     .dicAttendanceTablePayback
                     .GetValueOrNew(profileItem.ID)
                     .Where(x => x.CutOffDurationID == CutOffDuration.ID)
                     .Where(x => x.PaybackDurationID == CutOffDurationPayBack.ID)
                     .FirstOrDefault();

                    if (objAttendanceTablePayback != null)
                    {
                        //lấy dữ liệu công theo cutoff
                        //[11032016][bang.nguyen][64554][mofify]
                        var listAttTableItem = TotalDataAll.dicAttendanceTablePaybackItem.GetValueOrNew(objAttendanceTablePayback.ID).Where(m => m.WorkPaidHours != 0).ToList();
                        var objAttGradeByProfile = TotalDataAll.dicAttGrade.GetValueOrNew(profileItem.ID).Where(m => m.ProfileID == profileItem.ID && m.MonthStart <= CutOffDuration.DateEnd && m.MonthEnd >= CutOffDuration.DateStart).FirstOrDefault();
                        //sau khi điều chỉnh
                        ////duyệt wa tất cả các dòng
                        foreach (var tableItem in listAttTableItem)
                        {
                            //[11032016][bang.nguyen][64191][mofify]
                            if (tableItem.WorkPaidHours != 0)
                            {
                                var objshift = TotalDataAll.listCat_Shift.Where(s => s.ID == tableItem.ShiftID).FirstOrDefault();
                                double _shiftStdWorkHours = 0;
                                if (objshift != null && objshift.StdWorkHours != null && objshift.StdWorkHours != 0)
                                {
                                    _shiftStdWorkHours = objshift.StdWorkHours.Value;
                                }
                                if (tableItem.Shift2ID != null)
                                {
                                    double _shift2WorkPaidHours = 0;
                                    var objshitf2 = TotalDataAll.listCat_Shift.Where(s => s.ID == tableItem.Shift2ID).FirstOrDefault();
                                    if (objshitf2 != null && objshitf2.StdWorkHours != null && objshitf2.StdWorkHours != 0)
                                    {
                                        _shift2WorkPaidHours = objshitf2.StdWorkHours.Value;
                                    }
                                    double sumshiftStdWorkHours = _shiftStdWorkHours + _shift2WorkPaidHours;
                                    if (sumshiftStdWorkHours != 0)
                                    {
                                        //truoc thay doi luong
                                        if (tableItem.WorkDate < dateStart2)
                                        {
                                            workpaid += tableItem.WorkPaidHours / (sumshiftStdWorkHours / 2);
                                        }
                                        //sau thay doi luong
                                        if (tableItem.WorkDate >= dateStart2)
                                        {
                                            workpaid_after += tableItem.WorkPaidHours / (sumshiftStdWorkHours / 2);
                                        }
                                    }
                                }
                                else if (tableItem.Shift2ID == null && tableItem.ShiftID == null)
                                {
                                    //[02/11/2016][bang.nguyen][75113][modify]
                                    if (objAttGradeByProfile != null && objAttGradeByProfile.HourOnWorkDate != null && objAttGradeByProfile.HourOnWorkDate != 0)
                                    {
                                        //truoc thay doi luong
                                        if (tableItem.WorkDate < dateStart2)
                                        {
                                            workpaid += tableItem.WorkPaidHours / objAttGradeByProfile.HourOnWorkDate.Value;
                                        }
                                        //sau thay doi luong
                                        if (tableItem.WorkDate >= dateStart2)
                                        {
                                            workpaid_after += tableItem.WorkPaidHours / objAttGradeByProfile.HourOnWorkDate.Value;
                                        }
                                    }
                                }
                                else
                                {
                                    if (_shiftStdWorkHours != 0)
                                    {
                                        //truoc thay doi luong
                                        if (tableItem.WorkDate < dateStart2)
                                        {
                                            workpaid += tableItem.WorkPaidHours / _shiftStdWorkHours;
                                        }
                                        //sau thay doi luong
                                        if (tableItem.WorkDate >= dateStart2)
                                        {
                                            workpaid_after += tableItem.WorkPaidHours / _shiftStdWorkHours;
                                        }
                                    }
                                }
                            }
                        }
                    }


                    item = new ElementFormula(PayrollElement.PB_ATT_WORKING_PAIDLEAVE_DAY_1.ToString(), workpaid, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.PB_ATT_WORKING_PAIDLEAVE_DAY_2.ToString(), workpaid_after, 0);
                    listElementFormula.Add(item);
                }
                else
                {
                    item = new ElementFormula(PayrollElement.PB_ATT_WORKING_PAIDLEAVE_DAY_1.ToString(), 0, 0);
                    listElementFormula.Add(item);
                    item = new ElementFormula(PayrollElement.PB_ATT_WORKING_PAIDLEAVE_DAY_2.ToString(), 0, 0);
                    listElementFormula.Add(item);
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.PB_ATT_OVERTIME_.ToString(), "_HOURS"))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                List<Cat_ElementEntity> listElement_OT = new List<Cat_ElementEntity>();

                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd)
                    .OrderByDescending(m => m.DateOfEffect)
                    .ToList();

                Att_AttendanceTablePaybackEntity objAttendanceTablePayback = TotalDataAll
                 .dicAttendanceTablePayback
                 .GetValueOrNew(profileItem.ID)
                 .Where(x => x.CutOffDurationID == CutOffDuration.ID)
                 .Where(x => x.PaybackDurationID == CutOffDurationPayBack.ID)
                 .FirstOrDefault();

                if (objAttendanceTablePayback != null)
                {
                    //có thay đổi lương trong tháng
                    if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                    {
                        double OtHour = 0;
                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                        DateTime dateStart1 = CutOffDuration.DateStart;
                        DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                        //lấy dữ liệu công theo cutoff
                        var listAttTableItem = TotalDataAll.dicAttendanceTablePaybackItem.GetValueOrNew(objAttendanceTablePayback.ID);

                        if (listAttTableItem != null && listAttTableItem.Count > 0)
                        {
                            listAttTableItem = listAttTableItem.Where(m => m.WorkDate < dateStart2).ToList();
                            //duyệt wa các loại ot
                            foreach (var OTType in TotalDataAll.listOvertimeType)
                            {
                                OtHour = 0;
                                //tính số giờ OT của từng loại
                                foreach (var tableItem in listAttTableItem)
                                {
                                    if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == OTType.ID)
                                    {
                                        OtHour += tableItem.OvertimeHours;
                                    }
                                    if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == OTType.ID)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours;
                                    }
                                    if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == OTType.ID)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours2;
                                    }
                                    if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == OTType.ID)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours3;
                                    }
                                    //[27/06/2017][bang.nguyen][83774][Modify Func]
                                    if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == OTType.ID)
                                    {
                                        if (tableItem.ExtraOvertimeHours4 != null)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours4.Value;
                                        }
                                    }
                                }
                                item = new ElementFormula(PayrollElement.PB_ATT_OVERTIME_.ToString() + OTType.Code + "_HOURS", OtHour, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            foreach (var OTType in TotalDataAll.listOvertimeType)
                            {
                                item = new ElementFormula(PayrollElement.PB_ATT_OVERTIME_.ToString() + OTType.Code + "_HOURS", 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                    }
                    else//không thay đổi lương trong tháng
                    {
                        listElement_OT = TotalDataAll.listElement_All.Where(m => m.ElementCode.StartsWith(PayrollElement.PB_ATT_OVERTIME_.ToString()) && m.ElementCode.EndsWith("_HOURS")).ToList();
                        foreach (var OT in listElement_OT)
                        {
                            var itemOverTime = TotalDataAll.listOvertimeType.Where(m => m.Code == OT.ElementCode.Replace(PayrollElement.PB_ATT_OVERTIME_.ToString(), "").Replace("_HOURS", "")).FirstOrDefault();

                            double value = 0;
                            if (itemOverTime != null && objAttendanceTablePayback != null)
                            {
                                if (objAttendanceTablePayback.Overtime1Type != null && objAttendanceTablePayback.Overtime1Type == itemOverTime.ID)
                                {
                                    value += objAttendanceTablePayback.Overtime1Hours;
                                }
                                if (objAttendanceTablePayback.Overtime2Type != null && objAttendanceTablePayback.Overtime2Type == itemOverTime.ID)
                                {
                                    value += objAttendanceTablePayback.Overtime2Hours;
                                }
                                if (objAttendanceTablePayback.Overtime3Type != null && objAttendanceTablePayback.Overtime3Type == itemOverTime.ID)
                                {
                                    value += objAttendanceTablePayback.Overtime3Hours;
                                }
                                if (objAttendanceTablePayback.Overtime4Type != null && objAttendanceTablePayback.Overtime4Type == itemOverTime.ID)
                                {
                                    value += objAttendanceTablePayback.Overtime4Hours;
                                }
                                if (objAttendanceTablePayback.Overtime5Type != null && objAttendanceTablePayback.Overtime5Type == itemOverTime.ID)
                                {
                                    value += objAttendanceTablePayback.Overtime5Hours;
                                }
                                if (objAttendanceTablePayback.Overtime6Type != null && objAttendanceTablePayback.Overtime6Type == itemOverTime.ID)
                                {
                                    value += objAttendanceTablePayback.Overtime6Hours;
                                }
                                //[27/06/2017][bang.nguyen][83774][Modify Func]
                                if (objAttendanceTablePayback.Overtime7Type != null && objAttendanceTablePayback.Overtime7Type == itemOverTime.ID)
                                {
                                    if (objAttendanceTablePayback.Overtime7Hours != null)
                                    {
                                        value += objAttendanceTablePayback.Overtime7Hours.Value;
                                    }
                                }
                                if (objAttendanceTablePayback.Overtime8Type != null && objAttendanceTablePayback.Overtime8Type == itemOverTime.ID)
                                {
                                    if (objAttendanceTablePayback.Overtime8Hours != null)
                                    {
                                        value += objAttendanceTablePayback.Overtime8Hours.Value;
                                    }
                                }
                                if (objAttendanceTablePayback.Overtime9Type != null && objAttendanceTablePayback.Overtime9Type == itemOverTime.ID)
                                {
                                    if (objAttendanceTablePayback.Overtime9Hours != null)
                                    {
                                        value += objAttendanceTablePayback.Overtime9Hours.Value;
                                    }
                                }
                            }
                            item = new ElementFormula(OT.ElementCode, value, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var OTType in TotalDataAll.listOvertimeType)
                    {
                        item = new ElementFormula(PayrollElement.PB_ATT_OVERTIME_.ToString() + OTType.Code + "_HOURS", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.PB_ATT_OVERTIME_.ToString(), "_HOURS_AFTER"))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();


                Att_AttendanceTablePaybackEntity objAttendanceTablePayback = TotalDataAll
                  .dicAttendanceTablePayback
                  .GetValueOrNew(profileItem.ID)
                  .Where(x => x.CutOffDurationID == CutOffDuration.ID)
                  .Where(x => x.PaybackDurationID == CutOffDurationPayBack.ID)
                  .FirstOrDefault();

                if (objAttendanceTablePayback != null)
                {
                    if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                    {
                        double OtHour = 0;
                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                        DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                        //lấy dữ liệu công theo cutoff
                        var listAttTableItem = TotalDataAll.dicAttendanceTablePaybackItem.GetValueOrNew(objAttendanceTablePayback.ID);

                        if (listAttTableItem != null && listAttTableItem.Count > 0)
                        {
                            listAttTableItem = listAttTableItem.Where(m => m.WorkDate >= dateStart2).ToList();
                            //duyệt wa các loại ot
                            foreach (var OTType in TotalDataAll.listOvertimeType)
                            {
                                OtHour = 0;
                                //tính số giờ OT của từng loại
                                foreach (var tableItem in listAttTableItem)
                                {
                                    if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == OTType.ID)
                                    {
                                        OtHour += tableItem.OvertimeHours;
                                    }
                                    if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == OTType.ID)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours;
                                    }
                                    if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == OTType.ID)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours2;
                                    }
                                    if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == OTType.ID)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours3;
                                    }
                                    //[27/06/2017][bang.nguyen][83774][Modify Func]
                                    if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == OTType.ID)
                                    {
                                        if (tableItem.ExtraOvertimeHours4 != null)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours4.Value;
                                        }
                                    }
                                }
                                item = new ElementFormula(PayrollElement.PB_ATT_OVERTIME_.ToString() + OTType.Code + "_HOURS_AFTER", OtHour, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            foreach (var OTType in TotalDataAll.listOvertimeType)
                            {
                                item = new ElementFormula(PayrollElement.PB_ATT_OVERTIME_.ToString() + OTType.Code + "_HOURS_AFTER", 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                    }
                    else//không có lương cơ bản hoặc không có thay đổi lương trong tháng
                    {
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            item = new ElementFormula(PayrollElement.PB_ATT_OVERTIME_.ToString() + OTType.Code + "_HOURS_AFTER", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var OTType in TotalDataAll.listOvertimeType)
                    {
                        item = new ElementFormula(PayrollElement.PB_ATT_OVERTIME_.ToString() + OTType.Code + "_HOURS_AFTER", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

            if (CheckIsExistFormula(listElementFormula, ref formula, PayrollElement.PB_ATT_OVERTIME_.ToString(), "_HOURS_BEFORE"))
            {
                var listBasicSalaryByProfileDic = TotalDataAll.dicBasicSalary.GetValueOrNew(profileItem.ID);
                //lấy lương cơ bản của nhân viên
                List<Sal_BasicSalaryEntity> SalaryProfile = new List<Sal_BasicSalaryEntity>();
                SalaryProfile = listBasicSalaryByProfileDic.Where(m => m.ProfileID == profileItem.ID && m.DateOfEffect <= CutOffDuration.DateEnd).OrderByDescending(m => m.DateOfEffect).ToList();


                Att_AttendanceTablePaybackEntity objAttendanceTablePayback = TotalDataAll
                   .dicAttendanceTablePayback
                   .GetValueOrNew(profileItem.ID)
                   .Where(x => x.CutOffDurationID == CutOffDuration.ID)
                   .Where(x => x.PaybackDurationID == CutOffDurationPayBack.ID)
                   .FirstOrDefault();

                if (objAttendanceTablePayback != null)
                {
                    //có thay đổi lương trong tháng
                    if (CheckIsChangeBasicSalary(listBasicSalaryByProfileDic.Where(m => m.DateOfEffect <= CutOffDuration.DateEnd).ToList(), CutOffDuration.DateStart, CutOffDuration.DateEnd, profileItem.ID))//có thay đổi lương trong tháng
                    {
                        double OtHour = 0;
                        //ngày bắt đầu mức lương 1 và ngày bắt đầu mức lương 2
                        DateTime dateStart1 = CutOffDuration.DateStart;
                        DateTime dateStart2 = SalaryProfile.FirstOrDefault().DateOfEffect;

                        //lấy dữ liệu công theo cutoff
                        var listAttTableItem = TotalDataAll.dicAttendanceTablePaybackItem.GetValueOrNew(objAttendanceTablePayback.ID);

                        if (listAttTableItem != null && listAttTableItem.Count > 0)
                        {
                            listAttTableItem = listAttTableItem.Where(m => m.WorkDate < dateStart2).ToList();
                            //duyệt wa các loại ot
                            foreach (var OTType in TotalDataAll.listOvertimeType)
                            {
                                OtHour = 0;
                                //tính số giờ OT của từng loại
                                foreach (var tableItem in listAttTableItem)
                                {
                                    if (tableItem.OvertimeTypeID != null && tableItem.OvertimeTypeID == OTType.ID)
                                    {
                                        OtHour += tableItem.OvertimeHours;
                                    }
                                    if (tableItem.ExtraOvertimeTypeID != null && tableItem.ExtraOvertimeTypeID == OTType.ID)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours;
                                    }
                                    if (tableItem.ExtraOvertimeType2ID != null && tableItem.ExtraOvertimeType2ID == OTType.ID)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours2;
                                    }
                                    if (tableItem.ExtraOvertimeType3ID != null && tableItem.ExtraOvertimeType3ID == OTType.ID)
                                    {
                                        OtHour += tableItem.ExtraOvertimeHours3;
                                    }
                                    //[27/06/2017][bang.nguyen][83774][Modify Func]
                                    if (tableItem.ExtraOvertimeType4ID != null && tableItem.ExtraOvertimeType4ID == OTType.ID)
                                    {
                                        if (tableItem.ExtraOvertimeHours4 != null)
                                        {
                                            OtHour += tableItem.ExtraOvertimeHours4.Value;
                                        }
                                    }
                                }
                                item = new ElementFormula(PayrollElement.PB_ATT_OVERTIME_.ToString() + OTType.Code + "_HOURS_BEFORE", OtHour, 0);
                                listElementFormula.Add(item);
                            }
                        }
                        else
                        {
                            foreach (var OTType in TotalDataAll.listOvertimeType)
                            {
                                item = new ElementFormula(PayrollElement.PB_ATT_OVERTIME_.ToString() + OTType.Code + "_HOURS_BEFORE", 0, 0);
                                listElementFormula.Add(item);
                            }
                        }
                    }
                    else
                    {
                        foreach (var OTType in TotalDataAll.listOvertimeType)
                        {
                            item = new ElementFormula(PayrollElement.PB_ATT_OVERTIME_.ToString() + OTType.Code + "_HOURS_BEFORE", 0, 0);
                            listElementFormula.Add(item);
                        }
                    }
                }
                else
                {
                    foreach (var OTType in TotalDataAll.listOvertimeType)
                    {
                        item = new ElementFormula(PayrollElement.PB_ATT_OVERTIME_.ToString() + OTType.Code + "_HOURS_BEFORE", 0, 0);
                        listElementFormula.Add(item);
                    }
                }
            }

        }


        #endregion
        #endregion


        /// <summary>
        /// Hàm lấy các phần tử là Enum
        /// </summary>
        /// <param name="TotalData">Class chứa tất cả các dữ liệu lấy lên để xử lý</param>
        /// <param name="listElementFormula">Lưu giá trị các thông thức đã tính rồi</param>
        /// <param name="profileItem">Nhân viên hiện tại được tính</param>
        /// <param name="CutOffDuration">Kỳ tính lương</param>
        /// <param name="formula">Công thức tính</param>
        /// <param name="listTmpDeduction">Biến tạm phục vụ cho tiền khấu trừ thâm niên của dự án SCV</param>
        /// <param name="DateClose">Ngày chốt lương</param>
        /// <returns></returns>
        public List<ElementFormula> GetStaticValues(
            ComputePayrollDataModelKZAll TotalDataAll,
            ComputePayrollDataModelKZ TotalData600,
            List<ElementFormula> listElementFormula,
            Hre_ProfileEntity profileItem,
            Att_CutOffDurationEntity CutOffDuration,
            Att_CutOffDurationEntity CutOffDurationPayBack,
            List<string> formula,
            Guid? GradePayrollID,
            Att_AttendanceTableEntity objAttendanceTableProCut,
            Dictionary<Guid, ValueCount> listTmpDeduction,
            Att_RecalAttendanceTableEntity objRecalAttendanceTableProCut
            )
        {
            var preMonth = CutOffDuration.MonthYear.AddMonths(-1);
            var cutOffDurationPre = TotalDataAll.listCutOffDuration.FirstOrDefault(m => m.MonthYear.Month == preMonth.Month && m.MonthYear.Year == preMonth.Year);

            var dataComputeSer = new Sal_GetDataComputePayrollKZServices();
            dataComputeSer.UserLogin = TotalDataAll.UserLogin;

            ElementFormula item = new ElementFormula();
            if (objAttendanceTableProCut == null)
            {
                //lấy bảng công của nv trong tháng tính lương
                objAttendanceTableProCut = TotalDataAll.dicAttendanceTable.GetValueOrNew(profileItem.ID)
                    .Where(m => ((m.CutOffDurationID == CutOffDuration.ID) || (m.CutOffDurationID == null && m.DateStart <= CutOffDuration.DateEnd && m.DateEnd >= CutOffDuration.DateStart)))
                .FirstOrDefault();
                if (objAttendanceTableProCut == null)
                {
                    objAttendanceTableProCut = new Att_AttendanceTableEntity();
                }
            }

            if (objRecalAttendanceTableProCut == null)
            {
                objRecalAttendanceTableProCut = new Att_RecalAttendanceTableEntity();
            }

            if (CutOffDurationPayBack == null)
            {
                CutOffDurationPayBack = new Att_CutOffDurationEntity();
            }

            // Nhánh enum động
            GetStaticValuesDynamic(
                TotalDataAll,
                TotalData600,
                listElementFormula,
                profileItem,
                CutOffDuration,
                formula,
                GradePayrollID,
                objAttendanceTableProCut,
                listTmpDeduction,
                dataComputeSer,
                cutOffDurationPre,
                objRecalAttendanceTableProCut
                );

            // Nhánh enum Lương
            GetStaticValuesSalary(
                TotalDataAll,
                TotalData600,
                listElementFormula,
                profileItem,
                CutOffDuration,
                formula,
                GradePayrollID,
                objAttendanceTableProCut,
                listTmpDeduction,
                dataComputeSer,
                cutOffDurationPre,
                objRecalAttendanceTableProCut
                );

            // Nhánh enum Công
            GetStaticValuesAttendance(
                TotalDataAll,
                TotalData600,
                listElementFormula,
                profileItem,
                CutOffDuration,
                formula,
                GradePayrollID,
                objAttendanceTableProCut,
                listTmpDeduction,
                dataComputeSer,
                cutOffDurationPre,
                objRecalAttendanceTableProCut
                );

            // Nhánh enum Nhân sự, bảo hiểm , canteen, .... 
            GetStaticValuesHR(
              TotalDataAll,
              TotalData600,
              listElementFormula,
              profileItem,
              CutOffDuration,
              formula,
              GradePayrollID,
              objAttendanceTableProCut,
              listTmpDeduction,
              dataComputeSer,
              cutOffDurationPre,
              objRecalAttendanceTableProCut
              );


            // Nhánh enum khác, đặc thù
            GetStaticValuesOther(
              TotalDataAll,
              TotalData600,
              listElementFormula,
              profileItem,
              CutOffDuration,
              formula,
              GradePayrollID,
              objAttendanceTableProCut,
              listTmpDeduction,
              dataComputeSer,
              cutOffDurationPre,
              objRecalAttendanceTableProCut
              );

            // Nhánh enum recal (Att_RecalAttendanceTable - Att_RecalAttendanceTableItem)
            GetStaticValuesRecal(
              TotalDataAll,
              TotalData600,
              listElementFormula,
              profileItem,
              CutOffDuration,
              formula,
              GradePayrollID,
              objAttendanceTableProCut,
              listTmpDeduction,
              dataComputeSer,
              cutOffDurationPre,
              objRecalAttendanceTableProCut
              );

            // Nhánh enum payback (Att_AttendanceTablePayback - Att_AttendanceTablePaybackItem)
            GetStaticValuesPayBack(
              TotalDataAll,
              TotalData600,
              listElementFormula,
              profileItem,
              CutOffDuration,
              CutOffDurationPayBack,
              formula,
              GradePayrollID,
              objAttendanceTableProCut,
              listTmpDeduction,
              dataComputeSer,
              cutOffDurationPre
              );

            return listElementFormula.Distinct().ToList();
        }


        /// <summary>
        /// Kiểm tra xem phần tử có nằm trong công thức hay không
        /// </summary>
        /// <param name="formula"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public bool CheckIsExistFormula(List<ElementFormula> listElementFormula, ref List<string> listFormulaItem, string value)
        {
            //các phần tử cần lấy dữ liệu
            //var FormularByGet = listFormulaItem.Where(m => m.Replace("[", "").Replace("]", "") == value.ReplaceSpace()).ToList();

            var FormularByGet = listFormulaItem.Where(m => m == value.ReplaceSpace()).ToList();
            FormularByGet = FormularByGet.Where(m => !listElementFormula.Any(t => t.VariableName == m)).ToList();

            //lọc ra các phần tử cần lấy dữ liệu và chưa có dữ liệu trong list tổng
            FormularByGet = FormularByGet.Where(m => !listElementFormula.Any(t => t.VariableName.ReplaceSpace() == value.ReplaceSpace())).ToList();

            if (FormularByGet.Count > 0)
            {
                if (FormularByGet.Any(m => m.StartsWith("[DYN_ATT_COUNTLUNCHDAYOVERT")
                                            || m.StartsWith("DYN_ATT_COUNTLUNCHDAYOVERT")
                                            || m.StartsWith("[DYN_ATT_OVERTIME_INPUTHOUR_")
                                            || m.StartsWith("DYN_ATT_OVERTIME_INPUTHOUR_")
                                            || m.StartsWith(PayrollElement.DYN_HRE_COUNT_RELATIVE_.ToString())
                                           ))
                {
                    return true;
                }

                //loại bỏ các phần tử sẻ lấy dữ liệu trong list phần tử cần lấy
                listFormulaItem.RemoveRange(FormularByGet);
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Kiểm tra xem phần tử có nằm trong công thức hay không
        /// </summary>
        /// <param name="formula"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public bool CheckIsExistFormula(List<ElementFormula> listElementFormula, ref List<string> listFormulaItem, string[] value)
        {
            //các phần tử cần lấy dữ liệu
            //var FormularByGet = listFormulaItem.Where(m => value.Any(t => t == m.Replace("[", "").Replace("]", ""))).ToList();
            var FormularByGet = listFormulaItem.Where(m => value.Any(t => t == m)).ToList();
            FormularByGet = FormularByGet.Where(m => !listElementFormula.Any(t => t.VariableName == m)).ToList();

            //lọc ra các phần tử cần lấy dữ liệu và chưa có dữ liệu trong list tổng
            //FormularByGet = FormularByGet.Where(m => !listElementFormula.Any(t => t.VariableName == m.Replace("[", "").Replace("]", ""))).ToList();

            if (FormularByGet.Count > 0)
            {
                if (FormularByGet.Any(m => m.StartsWith("[DYN_ATT_COUNTLUNCHDAYOVERT")
                                            || m.StartsWith("DYN_ATT_COUNTLUNCHDAYOVERT")
                                            || m.StartsWith("[DYN_ATT_OVERTIME_INPUTHOUR_")
                                           || m.StartsWith("DYN_ATT_OVERTIME_INPUTHOUR_")))
                {
                    return true;
                }
                //loại bỏ các phần tử sẻ lấy dữ liệu trong list phần tử cần lấy
                listFormulaItem.RemoveRange(FormularByGet);
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        ///  Kiểm tra xem phần tử có nằm trong công thức hay không
        /// </summary>
        /// <param name="listElementFormula"></param>
        /// <param name="formula"></param>
        /// <param name="StartsWith"></param>
        /// <param name="EndsWith"></param>
        /// <returns></returns>
        public bool CheckIsExistFormula(List<ElementFormula> listElementFormula, ref List<string> listFormulaItem, string StartsWith, string EndsWith)
        {
            //lấy các phần tử cần lấy dữ liệu
            var FormularByGet = listFormulaItem.Where(m => m.StartsWith(StartsWith) && m.EndsWith(EndsWith)).ToList();
            FormularByGet = FormularByGet.Where(m => !listElementFormula.Any(t => t.VariableName == m)).ToList();

            //lấy các phần tử cần lấy dữ liệu
            //var FormularByGet = listFormulaItem.Where(m => m.Replace("[", "").Replace("]", "").StartsWith(StartsWith) && m.Replace("[", "").Replace("]", "").EndsWith(EndsWith)).ToList();

            //lọc ra các dữ liệu cần lấy mà chưa có dữ liệu trong list tổng
            //FormularByGet = FormularByGet.Where(m => !listElementFormula.Any(t => t.VariableName == m.Replace("[", "").Replace("]", ""))).ToList();


            if (FormularByGet.Count > 0)
            {
                if (FormularByGet.Any(m => m.StartsWith("[DYN_ATT_COUNTLUNCHDAYOVERT")
                                           || m.StartsWith("DYN_ATT_COUNTLUNCHDAYOVERT")
                                           || m.StartsWith("[DYN_ATT_OVERTIME_INPUTHOUR_")
                                           || m.StartsWith("DYN_ATT_OVERTIME_INPUTHOUR_")
                                           || m.StartsWith("DYN_HRE_COUNT_RELATIVE_")
                                           || m.StartsWith("[DYN_HRE_COUNT_RELATIVE_")
                                           || m.StartsWith("DYN_ATT_LEAVEDAY_COUNT_LEAVEDAYS_BEFORE_QUIT_")
                                           || m.StartsWith("[DYN_ATT_LEAVEDAY_COUNT_LEAVEDAYS_BEFORE_QUIT_")
                                           //Lương nhóm theo ngày
                                           || (m.StartsWith(PayrollElementGroupByDay.ELEMENT_GROUP_DYN1_COUNT_PROFILE_BYJOBTYPECODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementGroupByDay.ELEMENT_GROUP_DYN1_COUNT_PROFILE_BYJOBTYPECODE_.ToString()))
                                           || (m.StartsWith(PayrollElementGroupByDay.ELEMENT_GROUP_DYN2_SUM_OVERTIMEHOURS_GROUPBY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementGroupByDay.ELEMENT_GROUP_DYN2_SUM_OVERTIMEHOURS_GROUPBY_.ToString()))
                                           || (m.StartsWith(PayrollElementGroupByDay.ELEMENT_GROUP_DYN3_SAL_PERFORMANCEALLOWANCE_ISFOLLOWDAY_BYCODEUNUSUALALLOWANCECFG_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementGroupByDay.ELEMENT_GROUP_DYN3_SAL_PERFORMANCEALLOWANCE_ISFOLLOWDAY_BYCODEUNUSUALALLOWANCECFG_.ToString()))
                                           || (m.StartsWith(PayrollElementGroupByDay.ELEMENT_GROUP_DYN4_TIMESHEET_SHIFT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementGroupByDay.ELEMENT_GROUP_DYN4_TIMESHEET_SHIFT_.ToString()))
                                           //End
                                           || (m.StartsWith(PayrollElement.DYN_ATT_ATTENDANCETABLEITEM_SUM_WORKHOURS_.ToString()) && m.EndsWith("_BYCODESHIFT"))
                                           || (m.StartsWith("[" + PayrollElement.DYN_ATT_ATTENDANCETABLEITEM_SUM_WORKHOURS_.ToString()) && m.EndsWith("_BYCODESHIFT]"))
                                           || (m.StartsWith(PayrollElement.DYN_ATT_ATTENDANCETABLE_SUM_LEAVEWORKDAY_DAYS_.ToString()) && m.EndsWith("_BYCODELEAVEDAYTYPE"))
                                           || (m.StartsWith("[" + PayrollElement.DYN_ATT_ATTENDANCETABLE_SUM_LEAVEWORKDAY_DAYS_.ToString()) && m.EndsWith("_BYCODELEAVEDAYTYPE]"))
                                           || (m.StartsWith(PayrollElement.DYN_ATT_ATTENDANCETABLE_SUM_LEAVEWORKDAY_HOUR_.ToString()) && m.EndsWith("_BYCODELEAVEDAYTYPE"))
                                           || (m.StartsWith("[" + PayrollElement.DYN_ATT_ATTENDANCETABLE_SUM_LEAVEWORKDAY_HOUR_.ToString()) && m.EndsWith("_BYCODELEAVEDAYTYPE]"))
                                           || (m.StartsWith(PayrollElement.DYN_ATT_ATTENDANCETABLE_COUNT_ACTUALWORKHOUR_.ToString()) && m.EndsWith("_BYFROMANDTO"))
                                           || (m.StartsWith("[" + PayrollElement.DYN_ATT_ATTENDANCETABLE_COUNT_ACTUALWORKHOUR_.ToString()) && m.EndsWith("_BYFROMANDTO]"))
                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN_SAL_PERFORMANCEALLOWANCE_AMOUNT_.ToString()) && m.EndsWith("_BYCODEUNUSUALALLOWANCECFG"))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN_SAL_PERFORMANCEALLOWANCE_AMOUNT_.ToString()) && m.EndsWith("_BYCODEUNUSUALALLOWANCECFG]"))
                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN_ATT_ATTENDANCETABLEITEM_OVERTIMETYPE_.ToString()) && m.EndsWith("_BYOVERTIMETYPE"))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN_ATT_ATTENDANCETABLEITEM_OVERTIMETYPE_.ToString()) && m.EndsWith("_BYOVERTIMETYPE]"))
                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN_TOTALACTUAL_WORKINGINMONTH_.ToString()) && m.EndsWith(""))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN_TOTALACTUAL_WORKINGINMONTH_.ToString()) && m.EndsWith("]"))
                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN_SUMVALUE_HOURACTUAL_BYCODEUNUSUALALLOWANCE_.ToString()) && m.EndsWith(""))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN_SUMVALUE_HOURACTUAL_BYCODEUNUSUALALLOWANCE_.ToString()) && m.EndsWith("]"))
                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN_SUMLEAVEHOURS_BYCODEUNUSUALALLOWANCEANDLEAVEDAYTYPE_.ToString()) && m.EndsWith(""))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN_SUMLEAVEHOURS_BYCODEUNUSUALALLOWANCEANDLEAVEDAYTYPE_.ToString()) && m.EndsWith("]"))
                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN_SUMLEAVEWORKDAYDAYS_BYCODEUNUSUALALLOWANCE_.ToString()) && m.EndsWith(""))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN_SUMLEAVEWORKDAYDAYS_BYCODEUNUSUALALLOWANCE_.ToString()) && m.EndsWith("]"))
                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN_SUMWORKDAY_ON_SATURDAY_BYCODEUNUSUALALLOWANCE_.ToString()) && m.EndsWith(""))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN_SUMWORKDAY_ON_SATURDAY_BYCODEUNUSUALALLOWANCE_.ToString()) && m.EndsWith("]"))
                                           || (m.StartsWith("GROUP_DYN_SUM_") && m.EndsWith("_BYCODEELEMENTGROUP"))
                                           || (m.StartsWith("[GROUP_DYN_SUM_") && m.EndsWith("_BYCODEELEMENTGROUP]"))
                                           || (m.StartsWith(PayrollElement.DYN2_ATT_LEAVEDAYITEM_SUM_COST_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN2_ATT_LEAVEDAYITEM_SUM_COST_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN7_ATT_LEAVEDAYITEM_SUM_COST_PREV_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN7_ATT_LEAVEDAYITEM_SUM_COST_PREV_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN4_ATT_ROSTER_COUNT_.ToString()) && m.EndsWith("_BYCODESHIFT"))
                                           || (m.StartsWith("[" + PayrollElement.DYN4_ATT_ROSTER_COUNT_.ToString()) && m.EndsWith("_BYCODESHIFT]"))
                                           || (m.StartsWith(PayrollElement.DYN5_ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_.ToString()) && m.EndsWith("_BYCODESHIFT"))
                                           || (m.StartsWith("[" + PayrollElement.DYN5_ATT_ATTENDANCETABLEITEM_SUM_WORKPAIDHOURS_.ToString()) && m.EndsWith("_BYCODESHIFT]"))
                                           || (m.StartsWith(PayrollElement.DYN6_ATT_OVERTIME_COUNTPAYBACK_.ToString()) && m.EndsWith("_BYOVERTIMETYPE"))
                                           || (m.StartsWith("[" + PayrollElement.DYN6_ATT_OVERTIME_COUNTPAYBACK_.ToString()) && m.EndsWith("_BYOVERTIMETYPE]"))
                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN1_CAT_ALLOWANCECFGAREAPOSTJOBWORK_AMOUNT_.ToString()) && m.EndsWith("_GROUP"))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN1_CAT_ALLOWANCECFGAREAPOSTJOBWORK_AMOUNT_.ToString()) && m.EndsWith("_GROUP]"))
                                           || (m.StartsWith(PayrollElementByDay.DYN9_SUM_LEAVEDAY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN9_SUM_LEAVEDAY_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.PB_DYN9_SUM_LEAVEDAY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.PB_DYN9_SUM_LEAVEDAY_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN10_SUM_OVERTIMEHOURS_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN10_SUM_OVERTIMEHOURS_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN10_HRE_COUNT_RELATIVE_.ToString()) && m.EndsWith("_BYRELATIVETYPE"))
                                           || (m.StartsWith("[" + PayrollElement.DYN10_HRE_COUNT_RELATIVE_.ToString()) && m.EndsWith("_BYRELATIVETYPE]"))
                                           || (m.StartsWith(PayrollElementByDay.DYN12_SUM_ACTUALHOURS_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN12_SUM_ACTUALHOURS_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN13_UNUSUALALLOWANCE_SUM_AMOUNT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN13_UNUSUALALLOWANCE_SUM_AMOUNT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN14_HRE_FACILITYISSUE_SUM_NOTEVICTAMOUNT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN14_HRE_FACILITYISSUE_SUM_NOTEVICTAMOUNT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN15_HRE_FACILITYITEM_AMOUNTLIMIT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN15_HRE_FACILITYITEM_AMOUNTLIMIT_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN16_POSITION_USUALALLOWANCEGROUP_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN16_POSITION_USUALALLOWANCEGROUP_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN17_SAL_PRODUCTIVE_PRODUCTITEMCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN17_SAL_PRODUCTIVE_PRODUCTITEMCODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN18_SAL_PRODUCTIVE_PRODUCTITEMNAME_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN18_SAL_PRODUCTIVE_PRODUCTITEMNAME_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN19_SAL_PRODUCTIVE_PRODUCTITEMNOTE1_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN19_SAL_PRODUCTIVE_PRODUCTITEMNOTE1_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN20_SAL_PRODUCTIVE_SUMQUANTITY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN20_SAL_PRODUCTIVE_SUMQUANTITY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN21_SAL_PRODUCTIVE_UNITPRICE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN21_SAL_PRODUCTIVE_UNITPRICE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN22_SAL_PRODUCTIVE_SUMPRICESUBSIDY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN22_SAL_PRODUCTIVE_SUMPRICESUBSIDY_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN23_SUMLEAVEDAYNIGHT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN23_SUMLEAVEDAYNIGHT_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN24_SUMLEAVEDAYDAY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN24_SUMLEAVEDAYDAY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN26_ATT_LEAVE_MEDICALDOCUMENT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN26_ATT_LEAVE_MEDICALDOCUMENT_.ToString()) && m.EndsWith("_DAY"))
                                           || (m.StartsWith(PayrollElement.DYN27_COUNT_HRE_RELATIVE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN27_COUNT_HRE_RELATIVE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN28_SAL_UNUSUALALLOWANCE_PLACEFROM_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN28_SAL_UNUSUALALLOWANCE_PLACEFROM_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN29_SAL_UNUSUALALLOWANCE_PLACETO_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN29_SAL_UNUSUALALLOWANCE_PLACETO_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN30_EXIST_ATT_LEAVEDAY_DATESTART_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN30_EXIST_ATT_LEAVEDAY_DATESTART_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN31_EXIST_ATT_LEAVEDAY_DATEEND_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN31_EXIST_ATT_LEAVEDAY_DATEEND_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN32_COUNT_ATT_ROSTER_ADPAY_.ToString()) && m.EndsWith("_BYCODESHIFT"))
                                           || (m.StartsWith("[" + PayrollElement.DYN32_COUNT_ATT_ROSTER_ADPAY_.ToString()) && m.EndsWith("_BYCODESHIFT"))
                                           || (m.StartsWith(PayrollElement.DYN33_COUNT_ATT_ROSTER_BACKPAY_.ToString()) && m.EndsWith("_BYCODESHIFT"))
                                           || (m.StartsWith("[" + PayrollElement.DYN33_COUNT_ATT_ROSTER_BACKPAY_.ToString()) && m.EndsWith("_BYCODESHIFT"))
                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN2_ATT_ATTENDANCETABLE_SUMLEAVEHOURS_.ToString()) && m.EndsWith("_GROUP"))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN2_ATT_ATTENDANCETABLE_SUMLEAVEHOURS_.ToString()) && m.EndsWith("_GROUP]"))

                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_OVERTIMHOURS_BEFORE_BY_.ToString()) && m.EndsWith("_GROUP"))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_OVERTIMHOURS_BEFORE_BY_.ToString()) && m.EndsWith("_GROUP]"))
                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_OVERTIMHOURS_AFTER_BY_.ToString()) && m.EndsWith("_GROUP"))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_OVERTIMHOURS_AFTER_BY_.ToString()) && m.EndsWith("_GROUP]"))
                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_LEAVEHOURS_BEFORE_BY_.ToString()) && m.EndsWith("_GROUP"))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_LEAVEHOURS_BEFORE_BY_.ToString()) && m.EndsWith("_GROUP]"))
                                           || (m.StartsWith(PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_LEAVEHOURS_AFTER_BY_.ToString()) && m.EndsWith("_GROUP"))
                                           || (m.StartsWith("[" + PayrollElementGroup.ELEMENT_GROUP_DYN3_SUM_ATT_LEAVEHOURS_AFTER_BY_.ToString()) && m.EndsWith("_GROUP]"))


                                           || (m.StartsWith(PayrollElementByDay.DYN34_SUM_ATT_OVERTIME_HOURS_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN34_SUM_ATT_OVERTIME_HOURS_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN35_COUNT_ATT_OVERTIME_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN35_COUNT_ATT_OVERTIME_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN36_SAL_COUNTDAYS_AFTER_CHANGESALARY_ADPAYDURATION_.ToString()) && m.EndsWith("_BYCODESHIFT"))
                                           || (m.StartsWith("[" + PayrollElement.DYN36_SAL_COUNTDAYS_AFTER_CHANGESALARY_ADPAYDURATION_.ToString()) && m.EndsWith("_BYCODESHIFT"))
                                           || (m.StartsWith(PayrollElement.DYN37_SAL_COUNTDAYS_BEFORE_CHANGESALARY_ADPAYDURATION_.ToString()) && m.EndsWith("_BYCODESHIFT"))
                                           || (m.StartsWith("[" + PayrollElement.DYN37_SAL_COUNTDAYS_BEFORE_CHANGESALARY_ADPAYDURATION_.ToString()) && m.EndsWith("_BYCODESHIFT"))
                                           || (m.StartsWith(PayrollElement.DYN38_ATT_ATTENDANCETABLEITEM_SUMLEAVEHOURS_.ToString()) && m.EndsWith("_BYUNUSUALPAY"))
                                           || (m.StartsWith("[" + PayrollElement.DYN38_ATT_ATTENDANCETABLEITEM_SUMLEAVEHOURS_.ToString()) && m.EndsWith("_BYUNUSUALPAY"))
                                           || (m.StartsWith(PayrollElement.DYN38_ATTI_SUMLEAVEHOURS_DAYKEEP_UNUSUALPAY_.ToString()) && m.EndsWith("_BYUNUSUALPAY"))
                                           || (m.StartsWith("[" + PayrollElement.DYN38_ATTI_SUMLEAVEHOURS_DAYKEEP_UNUSUALPAY_.ToString()) && m.EndsWith("_BYUNUSUALPAY"))
                                           || (m.StartsWith(PayrollElement.DYN39_COUNT_HRE_RELATIVE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN39_COUNT_HRE_RELATIVE_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN40_COUNT_ATT_OVERTIME_BYCONFIRMHOURS_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN40_COUNT_ATT_OVERTIME_BYCONFIRMHOURS_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN41_COUNT_ATT_OVERTIME_HOURS_INSHIFT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN41_COUNT_ATT_OVERTIME_HOURS_INSHIFT_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN42_COUNT_ATT_OVERTIME_HOURS_OUTSHIFT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN42_COUNT_ATT_OVERTIME_HOURS_OUTSHIFT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN43_COUNT_ATT_ADPAYDURATION_LEAVEDAY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN43_COUNT_ATT_ADPAYDURATION_LEAVEDAY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN56_SUM_VALUE_ELEMENT_CODE_PAYROLLGROUP_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN56_SUM_VALUE_ELEMENT_CODE_PAYROLLGROUP_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN57_SUM_AMOUNT_CAT_UNUSUALALLOWANCECFG_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN57_SUM_AMOUNT_CAT_UNUSUALALLOWANCECFG_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN58_ATT_OVERTIME_SUM_REGISTERHOURS_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN58_ATT_OVERTIME_SUM_REGISTERHOURS_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN59_ATT_OVERTIME_SUM_REGISTERHOUR_BEFORE_CHANGEBASICSALARY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN59_ATT_OVERTIME_SUM_REGISTERHOUR_BEFORE_CHANGEBASICSALARY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN60_ATT_OVERTIME_SUM_REGISTERHOUR_AFTER_CHANGEBASICSALARY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN60_ATT_OVERTIME_SUM_REGISTERHOUR_AFTER_CHANGEBASICSALARY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN61_UNUSUALALLOWANCECFG_AMOUNT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN61_UNUSUALALLOWANCECFG_AMOUNT_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN61_ATT_ATTENDANCETABLEITEM_BUSINESSTRAVELDAY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN61_ATT_ATTENDANCETABLEITEM_BUSINESSTRAVELDAY_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.PB_DYN61_ATT_ATTENDANCETABLEITEM_BUSINESSTRAVELDAY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.PB_DYN61_ATT_ATTENDANCETABLEITEM_BUSINESSTRAVELDAY_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN62_ATT_ATTENDANCETABLEITEM_BUSINESSTRAVELHOURS_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN62_ATT_ATTENDANCETABLEITEM_BUSINESSTRAVELHOURS_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN63_ATT_ATTENDANCETABLEITEM_BY_LEAVEDAYTYPE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN63_ATT_ATTENDANCETABLEITEM_BY_LEAVEDAYTYPE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN63_ATT_PREGNANCY_DATESTART_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN63_ATT_PREGNANCY_DATESTART_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN64_ATT_PREGNANCY_DATEEND_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN64_ATT_PREGNANCY_DATEEND_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN65_SAL_PAYROLLTABLEITEM_VALUE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN65_SAL_PAYROLLTABLEITEM_VALUE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN66_INS_VOLUNTARYINSINFO_SUM_EMPPAID_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN66_INS_VOLUNTARYINSINFO_SUM_EMPPAID_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN67_INS_VOLUNTARYINSINFO_SUM_COMPAID_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN67_INS_VOLUNTARYINSINFO_SUM_COMPAID_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN68_INS_VOLUNTARYINSINFO_SUM_MONTH_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN68_INS_VOLUNTARYINSINFO_SUM_MONTH_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN69_INS_VOLUNTARYINSINFO_SUM_MONTHLYPAID_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN69_INS_VOLUNTARYINSINFO_SUM_MONTHLYPAID_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN43_SUM_ACTUALHOURS_PROFILETIMESHEET_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN43_SUM_ACTUALHOURS_PROFILETIMESHEET_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN44_SUM_OT_PROFILETIMESHEET_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN44_SUM_OT_PROFILETIMESHEET_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN_RECAL_ATT_ATTENDANCETABLE_COUNT_ACTUALWORKHOUR_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN_RECAL_ATT_ATTENDANCETABLE_COUNT_ACTUALWORKHOUR_.ToString()))
                                           || (m.StartsWith("ATT_RECAL_LEAVE_"))
                                           || (m.StartsWith("[" + "ATT_RECAL_LEAVE_"))
                                           || (m.StartsWith("ATT_RECAL_ATTTABLEITEM_SUM_LEAVEHOURS_"))
                                           || (m.StartsWith("[" + "ATT_RECAL_ATTTABLEITEM_SUM_LEAVEHOURS_"))
                                           || (m.StartsWith("ATT_RECAL_OVERTIME_"))
                                           || (m.StartsWith("[" + "ATT_RECAL_OVERTIME_"))
                                           || (m.StartsWith(PayrollElement.DYN70_ATT_CUTOFFDURATION_COUNT_BYCODESHIFT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN70_ATT_CUTOFFDURATION_COUNT_BYCODESHIFT_.ToString()))
                                           || (m.StartsWith(PayrollElementByDayReCall.DYN9_RECAL_SUM_LEAVEDAY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDayReCall.DYN9_RECAL_SUM_LEAVEDAY_.ToString()))
                                           || (m.StartsWith(PayrollElementByDayReCall.DYN10_RECAL_SUM_OVERTIMEHOURS_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDayReCall.DYN10_RECAL_SUM_OVERTIMEHOURS_.ToString()))
                                           || (m.StartsWith(PayrollElementByDayReCall.DYN13_RECAL_UNUSUALALLOWANCE_SUM_AMOUNT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDayReCall.DYN13_RECAL_UNUSUALALLOWANCE_SUM_AMOUNT_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN45_HRE_REWARD_REWARDEDTYPE_CODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN45_HRE_REWARD_REWARDEDTYPE_CODE_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN46_HRE_DISCIPLINE_DISCIPLINE_REASON_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN46_HRE_DISCIPLINE_DISCIPLINE_REASON_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN47_SUM_ACTUALHOURS_ATT_PROFILETIMESHEET_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN47_SUM_ACTUALHOURS_ATT_PROFILETIMESHEET_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN48_SUM_WORKHOURS_ATT_PROFILETIMESHEET_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN48_SUM_WORKHOURS_ATT_PROFILETIMESHEET_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN72_SUM_QUANTITY_SAL_PRODUCTIVE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN72_SUM_QUANTITY_SAL_PRODUCTIVE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN73_PRODUCTIONTIME_CAT_PRODUCT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN73_PRODUCTIONTIME_CAT_PRODUCT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN74_BONUSPERUNIT_CAT_PRODUCT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN74_BONUSPERUNIT_CAT_PRODUCT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN75_SUM_ANLVALUE_ANNUALLEAVEMONTHBYTYPE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN75_SUM_ANLVALUE_ANNUALLEAVEMONTHBYTYPE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN76_SUM_UNUSUALALLOWANCE_AMOUNT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN76_SUM_UNUSUALALLOWANCE_AMOUNT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN77_CAT_AMOUNTOFSALARYRANK_SALARY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN77_CAT_AMOUNTOFSALARYRANK_SALARY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN78_CAT_AMOUNTOFSALARYRANK_SALARY_BEFORECHANGESALARY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN78_CAT_AMOUNTOFSALARYRANK_SALARY_BEFORECHANGESALARY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN79_CAT_AMOUNTOFSALARYRANK_SALARY_AFTERCHANGESALARY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN79_CAT_AMOUNTOFSALARYRANK_SALARY_AFTERCHANGESALARY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN80_ATT_LEAVEDAY_DATERETURNTOWORK_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN80_ATT_LEAVEDAY_DATERETURNTOWORK_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN81_HRE_DISCIPLINE_COUNT_DISCIPLINERESON_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN81_HRE_DISCIPLINE_COUNT_DISCIPLINERESON_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN82_HRE_DISCIPLINE_SUM_PERCENTDEDUCTION_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN82_HRE_DISCIPLINE_SUM_PERCENTDEDUCTION_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN83_HRE_DISCIPLINE_SUM_ALLOWANCE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN83_HRE_DISCIPLINE_SUM_ALLOWANCE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN84_HRE_DISCIPLINE_COUNT_IN_YEAR_DISCIPLINERESON_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN84_HRE_DISCIPLINE_COUNT_IN_YEAR_DISCIPLINERESON_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN49_COUNT_ATT_OVERTIME_ISMEALREGISTRATION_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN49_COUNT_ATT_OVERTIME_ISMEALREGISTRATION_.ToString()) && m.EndsWith("_BYDAY"))
                                           || (m.StartsWith(PayrollElement.DYN85_HRE_REWARA_SUM_REWARDVALUE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN85_HRE_REWARA_SUM_REWARDVALUE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN86_HRE_REWARA_COUNT_REWARDOBJ_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN86_HRE_REWARA_COUNT_REWARDOBJ_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN87_CAT_OVERTIMETYPE_RATEOFCASHWITHTIMEOFF_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN87_CAT_OVERTIMETYPE_RATEOFCASHWITHTIMEOFF_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN88_CAT_LEAVEDAYTYPE_PAIDRATE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN88_CAT_LEAVEDAYTYPE_PAIDRATE_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN50_SAL_PRODUCTSALARYOVEROFFSET_TOTALAMOUNT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN50_SAL_PRODUCTSALARYOVEROFFSET_TOTALAMOUNT_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN54_SAL_PRODUCTSALARYOVEROFFSET_SUMQUANTITY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN54_SAL_PRODUCTSALARYOVEROFFSET_SUMQUANTITY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN89_ATT_LEAVEDAY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN89_ATT_LEAVEDAY_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN51_ATT_PROFILETIMESHEET_SUM_NIGHTACTUALHOURS_BY_SHIFTCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN51_ATT_PROFILETIMESHEET_SUM_NIGHTACTUALHOURS_BY_SHIFTCODE_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN52_ATT_PROFILETIMESHEET_SUM_NIGHTACTUALHOURS_BY_JOBTYPECODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN52_ATT_PROFILETIMESHEET_SUM_NIGHTACTUALHOURS_BY_JOBTYPECODE_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN53_SUM_ATT_OVERTIME_ISNOTCHECKINOUT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN53_SUM_ATT_OVERTIME_ISNOTCHECKINOUT_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN55_ATT_TIMESHEET_COUNT_BYJOBTYPE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN55_ATT_TIMESHEET_COUNT_BYJOBTYPE_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN56_ATT_TIMESHEET_SUM_BYJOBTYPE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN56_ATT_TIMESHEET_SUM_BYJOBTYPE_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN57_ATT_TIMESHEET_SUM_BYSHOPTRANS_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN57_ATT_TIMESHEET_SUM_BYSHOPTRANS_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN58_ATT_OVERTIME_SUM_HOURS_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN58_ATT_OVERTIME_SUM_HOURS_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN59_ATT_LEAVEDAY_TYPE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN59_ATT_LEAVEDAY_TYPE_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN60_ATT_LEAVEDAY_MISSIONCOSTTYPE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN60_ATT_LEAVEDAY_MISSIONCOSTTYPE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN90_SAL_PRODUCTIVEBUSINESS_SUMTARGETQTY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN90_SAL_PRODUCTIVEBUSINESS_SUMTARGETQTY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN91_SAL_PRODUCTIVEBUSINESS_SUMACTUALQTY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN91_SAL_PRODUCTIVEBUSINESS_SUMACTUALQTY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN92_SAL_PRODUCTIVEBUSINESS_SUMOVERQTY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN92_SAL_PRODUCTIVEBUSINESS_SUMOVERQTY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN93_SAL_PRODUCTIVEBUSINESS_PRODUCTNAME_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN93_SAL_PRODUCTIVEBUSINESS_PRODUCTNAME_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN94_SAL_PRODUCTIVEBUSINESS_PRODUCTCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN94_SAL_PRODUCTIVEBUSINESS_PRODUCTCODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN95_SAL_SALARYBUSINESS_AMOUNT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN95_SAL_SALARYBUSINESS_AMOUNT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN96_ATT_FINALIZELEAVE_SUM_AVAILABLETRANSFER_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN96_ATT_FINALIZELEAVE_SUM_AVAILABLETRANSFER_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN97_ATT_LEAVE_SUM_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN97_ATT_LEAVE_SUM_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN98_ALLOWANCE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN98_ALLOWANCE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN99_PERFORMANCE_TOTALMARK_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN99_PERFORMANCE_TOTALMARK_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN100_SUM_ATTI_OT_BEFORE_CHANGESALARY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN100_SUM_ATTI_OT_BEFORE_CHANGESALARY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN101_SUM_ATTI_OT_AFTER_CHANGESALARY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN101_SUM_ATTI_OT_AFTER_CHANGESALARY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN103_SAL_SUM_AMOUNT_UNUSUALALLOWANCE_BY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN103_SAL_SUM_AMOUNT_UNUSUALALLOWANCE_BY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN104_SAL_PAYROLLTABLEITEM_VALUE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN104_SAL_PAYROLLTABLEITEM_VALUE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN105_SUM_AFTER_ATT_OVERTIME_OVERTIMETYPE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN105_SUM_AFTER_ATT_OVERTIME_OVERTIMETYPE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN105_SUM_BEFORE_ATT_OVERTIME_OVERTIMETYPE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN105_SUM_BEFORE_ATT_OVERTIME_OVERTIMETYPE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN106_SUM_HRE_PROFILECARD_COSTLEVEL_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN106_SUM_HRE_PROFILECARD_COSTLEVEL_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN107_SUM_SAL_PAYMENTCOST_COSTAMOUNT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN107_SUM_SAL_PAYMENTCOST_COSTAMOUNT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN108_SUM_ATT_ATTENDANCEITEM_OT_STDWORKHOURS_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN108_SUM_ATT_ATTENDANCEITEM_OT_STDWORKHOURS_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN109_HRE_WORKHISTORY_DATEEFFECTIVE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN109_HRE_WORKHISTORY_DATEEFFECTIVE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN110_SAL_PAYROLLGROUPTABLEITEM_BYCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN110_SAL_PAYROLLGROUPTABLEITEM_BYCODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN111_ATT_BUSSINESSTRAVELTRANSFER_SUM_HOURSTOTAL_BYCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN111_ATT_BUSSINESSTRAVELTRANSFER_SUM_HOURSTOTAL_BYCODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN112_CAT_CARDTYPE_COSTLEVEL_BYCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN112_CAT_CARDTYPE_COSTLEVEL_BYCODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN113_SAL_COUNT_TOTALMONTH_RANKRATE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN113_SAL_COUNT_TOTALMONTH_RANKRATE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN114_HRE_STOPWORKING_WORKLIST_EXPENSE_BYCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN114_HRE_STOPWORKING_WORKLIST_EXPENSE_BYCODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN115_ATT_LEAVEDAY_DATESTART_BYLEAVEDAYTYPECODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN115_ATT_LEAVEDAY_DATESTART_BYLEAVEDAYTYPECODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN116_ATT_LEAVEDAY_DATEEND_BYLEAVEDAYTYPECODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN116_ATT_LEAVEDAY_DATEEND_BYLEAVEDAYTYPECODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN122_CAT_ALLOWANCECFGAREAPOSTJOBWORK_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN122_CAT_ALLOWANCECFGAREAPOSTJOBWORK_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN123_CAT_UNUSUALALLOWANCECFG_ISCHARGEPIT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN123_CAT_UNUSUALALLOWANCECFG_ISCHARGEPIT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN123_CAT_UNUSUALALLOWANCECFG_TAXLIMIT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN123_CAT_UNUSUALALLOWANCECFG_TAXLIMIT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN124_CAT_UNUSUALALLOWANCE_ISCHARGEPIT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN124_CAT_UNUSUALALLOWANCE_ISCHARGEPIT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN124_CAT_UNUSUALALLOWANCE_TAXLIMIT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN124_CAT_UNUSUALALLOWANCE_TAXLIMIT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN125_SAL_SEVERANCEALLOWANCEITEM_VALUE_BYCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN125_SAL_SEVERANCEALLOWANCEITEM_VALUE_BYCODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN126_SAL_PAYROLLPAYBACKITEM_VALUE_BYCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN126_SAL_PAYROLLPAYBACKITEM_VALUE_BYCODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN127_CAT_PAYMENTAMOUNT_ISCHARGEPIT_BYCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN127_CAT_PAYMENTAMOUNT_ISCHARGEPIT_BYCODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN128_UNUSUAL_BYFAMILYBUSINESSTYPE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN128_UNUSUAL_BYFAMILYBUSINESSTYPE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN129_SUM_PAYMENTCOST_AMOUNT_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN129_SUM_PAYMENTCOST_AMOUNT_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN131_SAL_HOLIDAYBONUS_CHILDRENSDAY_BYAGE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN131_SAL_HOLIDAYBONUS_CHILDRENSDAY_BYAGE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN132_EVA_PERFORMANCETYPE_BYCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN132_EVA_PERFORMANCETYPE_BYCODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN133_SAL_UNUSUALALLOWANCE_ISCOUNTBYWORKDAY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN133_SAL_UNUSUALALLOWANCE_ISCOUNTBYWORKDAY_.ToString())) 
                                           || (m.StartsWith(PayrollElement.DYN134_SAL_UNUSUALALLOWANCE_ISCOMPUTEPAYROLLCOMPANY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN134_SAL_UNUSUALALLOWANCE_ISCOMPUTEPAYROLLCOMPANY_.ToString())) 
                                           || (m.StartsWith(PayrollElement.DYN135_SAL_UNUSUALALLOWANCE_ISPAYROLLINPERIOD_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN135_SAL_UNUSUALALLOWANCE_ISPAYROLLINPERIOD_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN136_SAL_ELEMENTBONUS_BYCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN136_SAL_ELEMENTBONUS_BYCODE_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN137_CAT_UNUSUALALLOWANCE_ISCOMPUTEINS_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN137_CAT_UNUSUALALLOWANCE_ISCOMPUTEINS_.ToString()))
                                           || (m.StartsWith(PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_BUSSINESSTRAVELHOURS_BYUNUSUALPAY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.ATT_ATTENDANCETABLEITEM_SUM_BUSSINESSTRAVELHOURS_BYUNUSUALPAY_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN64_SUM_OVERTIME_BY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN64_SUM_OVERTIME_BY_.ToString()))
                                            || (m.StartsWith(PayrollElementByDay.DYN65_SAL_REVENUEFORPROFILE_TARGET_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN65_SAL_REVENUEFORPROFILE_TARGET_.ToString()))
                                            || (m.StartsWith(PayrollElementByDay.DYN66_SAL_REVENUEFORPROFILE_ACTUALLY_ACHIEVED_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN66_SAL_REVENUEFORPROFILE_ACTUALLY_ACHIEVED_.ToString()))

                                                || (m.StartsWith(PayrollElementByDay.DYN115_SUM_ATT_OVERTIME_GROUPBYOVERTIMEOFFTYPEID_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN115_SUM_ATT_OVERTIME_GROUPBYOVERTIMEOFFTYPEID_.ToString()))
                                           || (m.StartsWith(PayrollElement.SAL_ISCOMMUNISTPARTYMEMBER_CHECK.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.SAL_ISCOMMUNISTPARTYMEMBER_CHECK.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN68_ATT_OVERTIME_SUM_HOUROT_BY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN68_ATT_OVERTIME_SUM_HOUROT_BY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN117_PROFILE_COUNT_INTRODUCER_BY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN117_PROFILE_COUNT_INTRODUCER_BY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN118_SAL_IS_LEAVEDAY_CONTINUOUS_BY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN118_SAL_IS_LEAVEDAY_CONTINUOUS_BY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN119_PRODUCTSALARY_SUMAMOUNT_BY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN119_PRODUCTSALARY_SUMAMOUNT_BY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN120_PRODUCTSALARY_SUMAMOUNTINCENTIVE_BY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN120_PRODUCTSALARY_SUMAMOUNTINCENTIVE_BY_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN121_COUNT_ORGCHILD_BY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN121_COUNT_ORGCHILD_BY_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN69_BASICSALARY_SUMAMOUNT_BY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN69_BASICSALARY_SUMAMOUNT_BY_.ToString()))
                                           || (m.StartsWith(PayrollElementByDay.DYN70_CAT_ORGUNIT_BY_.ToString()))
                                           || (m.StartsWith("[" + PayrollElementByDay.DYN70_CAT_ORGUNIT_BY_.ToString()))
                                           || (m.StartsWith(PayrollElement.PB_ATT_OVERTIME_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.PB_ATT_OVERTIME_.ToString()))
                                           || (m.StartsWith(PayrollElement.DYN130_SAL_REPAYROLLTABLEITEM_VALUE_BYCODE_.ToString()))
                                           || (m.StartsWith("[" + PayrollElement.DYN130_SAL_REPAYROLLTABLEITEM_VALUE_BYCODE_.ToString()))
                                            ))
                {
                    return true;
                }
                //loại bỏ các phần tử sẻ lấy dữ liệu trong list phần tử cần lấy
                listFormulaItem.RemoveRange(FormularByGet);
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool CheckIsExistFormula(List<ElementFormula> listElementFormula, ref List<string> listFormulaItem, string StartsWith, string[] ArrayEndsWith)
        {
            foreach (var EndsWith in ArrayEndsWith)
            {

                //lấy các phần tử cần lấy dữ liệu
                var FormularByGet = listFormulaItem.Where(m => m.StartsWith(StartsWith) && m.EndsWith(EndsWith)).ToList();
                FormularByGet = FormularByGet.Where(m => !listElementFormula.Any(t => t.VariableName == m)).ToList();

                //lấy các phần tử cần lấy dữ liệu
                //var FormularByGet = listFormulaItem.Where(m => m.Replace("[", "").Replace("]", "").StartsWith(StartsWith) && m.Replace("[", "").Replace("]", "").EndsWith(EndsWith)).ToList();

                //lọc ra các dữ liệu cần lấy mà chưa có dữ liệu trong list tổng
                //FormularByGet = FormularByGet.Where(m => !listElementFormula.Any(t => t.VariableName == m.Replace("[", "").Replace("]", ""))).ToList();

                if (FormularByGet.Count > 0)
                {
                    if (FormularByGet.Any(m => m.StartsWith("[DYN_ATT_COUNTLUNCHDAYOVERT")
                                                || m.StartsWith("DYN_ATT_COUNTLUNCHDAYOVERT")
                                                || m.StartsWith("[DYN_ATT_OVERTIME_INPUTHOUR_")
                                                || m.StartsWith("DYN_ATT_OVERTIME_INPUTHOUR_")
                                                || m.StartsWith("ATT_ATTTABLEITEM_SUM_LEAVEDAYS_")
                                                || m.StartsWith("[ATT_ATTTABLEITEM_SUM_LEAVEDAYS_")
                                                || m.StartsWith("DYN_ATT_COUNTLUNCHDAY_")
                                                || m.StartsWith("[DYN_ATT_COUNTLUNCHDAY_")
                                                || (m.StartsWith("[DYN_SALREUSE_") && ArrayEndsWith.Any(s => m.EndsWith(s + "]")))
                                                || (m.StartsWith("DYN_SALREUSE_") && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith("[" + PayrollElement.DYN3_HR_COUNT_DISCIPLINE_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s + "]")))
                                                || (m.StartsWith(PayrollElement.DYN3_HR_COUNT_DISCIPLINE_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || m.StartsWith(PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString())
                                                || m.StartsWith("[" + PayrollElement.DYN9_ATT_OVERTIME_COUNTPAYBACK_.ToString())
                                                || (m.StartsWith("[" + PayrollElement.DYN23_INS_VOLUNTARYINSINFO_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s + "]")))
                                                || (m.StartsWith(PayrollElement.DYN23_INS_VOLUNTARYINSINFO_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN25_ATT_PAYMENTLEAVE_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN51_SAL_BASIC_SALARY_GROSSAMOUNT.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN52_SAL_BASIC_SALARY_ALLOWANCES_AMOUNT_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN53_SAL_BASIC_SALARY_GROSSAMOUNT.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN54_SAL_BASIC_SALARY_ALLOWANCES_AMOUNT_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN55_ATT_OVERTIME_PAYBACK_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN62_RECALL_ELEMENT_ADVANCE_AMOUNT_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN71_ATT_LEAVE_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN72_SUM_QUANTITY_SAL_PRODUCTIVE_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN73_PRODUCTIONTIME_CAT_PRODUCT_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN74_BONUSPERUNIT_CAT_PRODUCT_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN110_SAL_PAYROLLGROUPTABLEITEM_BYCODE_.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                || (m.StartsWith(PayrollElement.DYN102_SAL_SUM_DISCIPLINE_AMOUNTOFFINE_INMONTH.ToString()) && ArrayEndsWith.Any(s => m.EndsWith(s)))
                                                ))
                    {
                        return true;
                    }
                    //loại bỏ các phần tử sẻ lấy dữ liệu trong list phần tử cần lấy
                    listFormulaItem.RemoveRange(FormularByGet);
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Hàm kiểm tra loại phần tử lương cấu hình truyền động giá trị cuối cùng (như số ngày, số giờ, ngày tháng ...)
        /// </summary>
        /// <param name="listElementFormula"></param>
        /// <param name="listFormulaItem"></param>
        /// <param name="StartsWith"></param>
        /// <param name="Type">Loại enum truyền vào (dùng bộ enum ElementDataType)</param>
        /// <returns></returns>
        public bool CheckIsExistFormula(List<ElementFormula> listElementFormula, ref List<string> listFormulaItem, string StartsWith, EnumDropDown.ElementDataType DataType)
        {
            //lấy các phần tử cần lấy dữ liệu
            var lstFormular = listFormulaItem.Where(m => m.StartsWith(StartsWith)).ToList();
            if (lstFormular.Count > 0)
            {
                var lstFormularNotCompute = new List<string>();
                //kiểm tra loại giá trị truyền vào (thường là giá trị cuối trong mỗi phần tử)
                var lstValue = new List<double>();
                var isCheck = false;
                if (DataType == EnumDropDown.ElementDataType.Double)
                {
                    foreach (var item in lstFormular)
                    {
                        //gia tri được truyền vào từ công thức
                        var lstTemp = item.Replace("[", "").Replace("]", "").Split('_').ToList();
                        var _strvalue = lstTemp[lstTemp.Count() - 1].ToString();
                        //giá trị có thỏa loại dữ liệu không (nếu không thỏa thì phần tử sẽ không dc tính)
                        double _valueOutPut = 0;
                        if (!double.TryParse(_strvalue, out _valueOutPut))
                        {
                            //những phần tử không thỏa
                            lstFormularNotCompute.Add(item);
                        }
                        else
                        {
                            //có ít nhất 1 phần tử lương thỏa thì mới vào tính
                            isCheck = true;
                        }
                    }
                }
                // lọc những phần tử không thỏa
                if (lstFormularNotCompute.Count > 0)
                {
                    listFormulaItem.RemoveRange(lstFormularNotCompute);
                }
                if (listFormulaItem.Count > 0 && isCheck == true)
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Hàm tìm kiếm chế độ lương
        /// </summary>
        /// <param name="listGrade">List Chế độ lương</param>
        /// <param name="ProfileID">ID Profile</param>
        /// <param name="GradePayrollID">GradePayrollID</param>
        /// <param name="MondthYear">Ngày trong kỳ lương</param>
        /// <returns></returns>
        public Sal_GradeEntity FindGradePayrollByProfileAndMonthYear(Dictionary<Guid, List<Sal_GradeEntity>> dicGrade, Guid ProfileID, DateTime DateStart, DateTime DateEnd)
        {
            List<Sal_GradeEntity> listModel = dicGrade.GetValueOrNew(ProfileID).OrderByDescending(m => m.MonthStart).ToList();
            if (listModel.Count > 0)
            {
                return listModel.FirstOrDefault();
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Khởi tạo ngày tháng theo ngày chốt
        /// </summary>
        /// <param name="DateStart"></param>
        /// <param name="DateEnd"></param>
        /// <param name="Grade"></param>
        /// <returns></returns>
        public DateTime InitDateForDayClose(DateTime DateStart, DateTime DateEnd, Sal_GradeEntity Grade)
        {
            DateTime dateClose = DateEnd;
            if (Grade != null && Grade.SalaryDayClose != null)
            {
                try
                {
                    dateClose = new DateTime(DateStart.Year, DateEnd.Month, Grade.SalaryDayClose.Value);
                }
                catch (Exception)
                {

                    dateClose = DateEnd;
                }
            }
            return dateClose;
        }

        /// <summary>
        /// Hàm tính tổng số ngày tạm hoãn công việc tính từ cuối kỳ lương trở về trước
        /// </summary>
        /// <param name="listModel"></param>
        /// <param name="dateTo"></param>
        /// <returns></returns>
        public double SumStopWorkingDay(List<Hre_StopWorkingEntity> listModel, DateTime dateTo)
        {
            List<Hre_StopWorkingEntity> Result = new List<Hre_StopWorkingEntity>();
            double TotalDay = 0;
            //lọc ra các record đã được duyệt và ngày bắt đầu dừng công việc nằm trước ngày cuối cùng của kỳ lương
            Result = listModel.Where(m => m.Status == HRM.Infrastructure.Utilities.EnumDropDown.StopWorkStatus.E_APPROVED.ToString() && m.DateStop != null && m.DateStop <= dateTo).ToList();

            if (Result != null && Result.Count > 0)
            {
                for (int i = 0; i < Result.Count; i++)
                {
                    //nếu ngày quay lại làm được duyệt
                    if (Result[i].StatusComeBack == HRM.Infrastructure.Utilities.EnumDropDown.StopWorkStatus.E_APPROVED.ToString())
                    {
                        TimeSpan span = (DateTime)Result[i].DateComeBack - (DateTime)Result[i].DateStop;
                        TotalDay += span.TotalDays;
                    }
                    else
                    {
                        TimeSpan span = dateTo - (DateTime)Result[i].DateStop;
                        TotalDay += span.TotalDays;
                        break;
                    }
                }
                return TotalDay;
            }
            else
            {
                return TotalDay;
            }
        }

        /// <summary>
        /// Get số người phụ thuộc trong kỳ tính lương của nhân viên
        /// </summary>
        /// <param name="listDependant"></param>
        /// <param name="ProfileID"></param>
        /// <param name="CutOffduration_Datefrom"></param>
        /// <param name="CutOffduration_DateTo"></param>
        /// <returns></returns>
        public List<Hre_DependantEntity> GetDependantNumber(List<Hre_DependantEntity> listDependant, Guid ProfileID, DateTime CutOffduration_Datefrom, DateTime CutOffduration_DateTo)
        {
            List<Hre_DependantEntity> result = new List<Hre_DependantEntity>();
            DateTime from = new DateTime(CutOffduration_Datefrom.Year, CutOffduration_Datefrom.Month, 1);
            DateTime to = new DateTime(CutOffduration_DateTo.Year, CutOffduration_DateTo.Month, 1);
            listDependant = listDependant.Where(m => m.ProfileID == ProfileID && m.MonthOfEffect != null).ToList();

            for (int i = 0; i < listDependant.Count; i++)
            {
                listDependant[i].MonthOfEffect = new DateTime(listDependant[i].MonthOfEffect.Value.Year, listDependant[i].MonthOfEffect.Value.Month, 1);
                if (listDependant[i].MonthOfExpiry != null)
                {
                    listDependant[i].MonthOfExpiry = new DateTime(listDependant[i].MonthOfExpiry.Value.Year, listDependant[i].MonthOfExpiry.Value.Month, 1);
                }
            }
            result = listDependant.Where(m => m.MonthOfEffect <= CutOffduration_DateTo && (m.MonthOfExpiry == null || m.MonthOfExpiry >= CutOffduration_Datefrom)).ToList();

            return result;
        }

        #region Kiểm tra có thay đổi lương trong tháng hay ko
        /// <summary>
        /// Có thay đổi lương trong tháng
        /// </summary>
        /// <param name="ListBasicSalary"></param>
        /// <param name="DateForm"></param>
        /// <param name="DateTo"></param>
        /// <param name="ProfileID"></param>
        /// <returns></returns>
        public bool CheckIsChangeBasicSalary(List<Sal_BasicSalaryEntity> ListBasicSalary, DateTime DateForm, DateTime DateTo, Guid ProfileID)
        {
            var ListBasicSalaryByProfile = ListBasicSalary.Where(m => m.DateOfEffect <= DateTo && m.ProfileID == ProfileID).ToList();
            if (ListBasicSalaryByProfile.Count < 2)
            {
                return false;
            }
            else
            {
                if (ListBasicSalaryByProfile.Any(m => m.DateOfEffect > DateForm && m.DateOfEffect <= DateTo))
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// HienNguyen
        /// Hàm kiểm tra xem có thay đổi theo lần trong tháng hay không
        /// Nếu có thay đổi thì trả về dòng thay đổi tương ứng
        /// </summary>
        /// <param name="ListBasicSalary"></param>
        /// <param name="DateForm"></param>
        /// <param name="DateTo"></param>
        /// <param name="ProfileID"></param>
        /// <param name="_numberChange"></param>
        /// <returns>Trả về khoản thời gian thay đổi lương</returns>
        public DateTime[] CheckIsChangeBasicSalary(List<Sal_BasicSalaryEntity> ListBasicSalary, DateTime DateForm, DateTime DateTo, Guid ProfileID, int _numberChange)
        {
            var ListBasicSalaryByProfile = ListBasicSalary.Where(m => m.DateOfEffect > DateForm && m.DateOfEffect <= DateTo && m.ProfileID == ProfileID).OrderBy(m => m.DateOfEffect).ToList();

            //Nếu số dòng lương cơ bản nhỏ hơn hoặc = số lần thay đổi truyền vào return null
            if (ListBasicSalaryByProfile.Count == 0 || ListBasicSalaryByProfile.Count + 1 < _numberChange)
            {
                return null;
            }
            else
            {
                ListBasicSalaryByProfile = ListBasicSalaryByProfile.OrderBy(m => m.DateOfEffect).ToList();
                if (_numberChange <= 1)
                {
                    return new DateTime[] { DateForm, ListBasicSalaryByProfile[_numberChange - 1].DateOfEffect.AddDays(-1) };
                }
                else if (_numberChange == ListBasicSalaryByProfile.Count + 1)
                {
                    return new DateTime[] { ListBasicSalaryByProfile.LastOrDefault().DateOfEffect, DateTo };
                }
                else
                {
                    return new DateTime[] { ListBasicSalaryByProfile[_numberChange - 2].DateOfEffect < DateForm ? DateForm : ListBasicSalaryByProfile[_numberChange - 2].DateOfEffect, ListBasicSalaryByProfile[_numberChange - 1].DateOfEffect.AddDays(-1) };
                }
            }
        }

        /// <summary>
        /// HienNguyen
        /// Hàm kiểm tra xem có thay đổi theo lần trong tháng hay không
        /// Nếu có thay đổi thì trả về dòng thay đổi tương ứng
        /// </summary>
        /// <param name="ListBasicSalary"></param>
        /// <param name="DateForm"></param>
        /// <param name="DateTo"></param>
        /// <param name="ProfileID"></param>
        /// <param name="_numberChange"></param>
        /// <returns></returns>
        public Sal_BasicSalaryEntity GetBasicSalaryIsChange(List<Sal_BasicSalaryEntity> ListBasicSalary, DateTime DateForm, DateTime DateTo, Guid ProfileID, int _numberChange)
        {
            var ListBasicSalaryByProfile = ListBasicSalary.Where(m => m.DateOfEffect > DateForm && m.DateOfEffect <= DateTo && m.ProfileID == ProfileID).OrderBy(m => m.DateOfEffect).ToList();
            //Nếu số dòng lương cơ bản nhỏ hơn hoặc = số lần thay đổi truyền vào return null
            if (ListBasicSalaryByProfile.Count < _numberChange)
            {
                return null;
            }
            else
            {
                return ListBasicSalaryByProfile[_numberChange - 1];
            }
        }
        #endregion

        /// <summary>
        /// 26/06/2019 [Tung.Tran]: 106626
        /// Chuyển sang dictionary
        /// </summary>
        public void ConvertDictionaryOfData(ComputePayrollDataModelKZAll TotalDataAll)
        {
            var _basicSalaryService = new Sal_BasicSalaryServices();

            #region Chuyển sang dictionary

            //[28/01/2016][hien.nguyen][Modify][63301]
            //Lọc lại các BasicSalary trùng ngày hiệu lực
            if (TotalDataAll.listBasicSalary != null)
            {
                TotalDataAll.listBasicSalary = _basicSalaryService.FilterBasicSalaryDuplicateDateOfEffect(TotalDataAll.listBasicSalary);
            }
            if (TotalDataAll.listBasicSalaryT3 != null)
            {
                TotalDataAll.listBasicSalaryT3 = _basicSalaryService.FilterBasicSalaryDuplicateDateOfEffect(TotalDataAll.listBasicSalaryT3);
            }
            if (TotalDataAll.listHre_StopWorking != null) TotalDataAll.dicHre_StopWorking = TotalDataAll.listHre_StopWorking.Where(x => x.ProfileID != null).GroupBy(x => x.ProfileID.Value).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listSal_SeveranceAllowance != null) TotalDataAll.dicSal_SeveranceAllowance = TotalDataAll.listSal_SeveranceAllowance.Where(x => x.ProfileID != null).GroupBy(x => x.ProfileID.Value).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listSal_SeveranceAllowanceItem != null) TotalDataAll.dicSal_SeveranceAllowanceItem = TotalDataAll.listSal_SeveranceAllowanceItem.Where(x => x.SeveranceAllowanceID != null).GroupBy(x => x.SeveranceAllowanceID.Value).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listSal_HoldSalary != null) TotalDataAll.dicHoldSalary = TotalDataAll.listSal_HoldSalary.Where(x => x.ProfileID != null).GroupBy(x => x.ProfileID.Value).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listRoster != null) TotalDataAll.dicRoster = TotalDataAll.listRoster.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listGrade != null) TotalDataAll.dicGrade = TotalDataAll.listGrade.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listBasicSalary != null) TotalDataAll.dicBasicSalary = TotalDataAll.listBasicSalary.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listBasicSalaryT3 != null) TotalDataAll.dicBasicSalaryT3 = TotalDataAll.listBasicSalaryT3.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listWorkHistory != null) TotalDataAll.dicWorkHistory = TotalDataAll.listWorkHistory.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listSalaryInformation != null) TotalDataAll.dicSalaryInformation = TotalDataAll.listSalaryInformation.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listOverTime != null) TotalDataAll.dicOverTime = TotalDataAll.listOverTime.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listOverTimeByCutOffBackPay != null) TotalDataAll.dicOverTimeByCutOffBackPay = TotalDataAll.listOverTimeByCutOffBackPay.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listLeaveDayNotStatus != null) TotalDataAll.dicLeaveDayNotStatus = TotalDataAll.listLeaveDayNotStatus.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listLeaveDay != null) TotalDataAll.dicLeaveDay = TotalDataAll.listLeaveDay.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.ListProductive != null) TotalDataAll.dicProductive = TotalDataAll.ListProductive.Where(x => x.ProfileID != null).GroupBy(x => x.ProfileID.Value).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.ListAttGrade != null) TotalDataAll.dicAttGrade = TotalDataAll.ListAttGrade.Where(x => x.ProfileID != null).GroupBy(x => x.ProfileID.Value).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.ListInsuranceForPayrollMonthly != null) TotalDataAll.dicInsuranceForPayrollMonthly = TotalDataAll.ListInsuranceForPayrollMonthly.Where(x => x.ProfileID != null).GroupBy(x => x.ProfileID.Value).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.ListAtt_ProfileTimeSheet != null) TotalDataAll.dicAtt_ProfileTimeSheet = TotalDataAll.ListAtt_ProfileTimeSheet.Where(x => x.ProfileID != null).GroupBy(x => x.ProfileID.Value).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.ListPerformanceAllowance != null) TotalDataAll.dicPerformanceAllowance = TotalDataAll.ListPerformanceAllowance.Where(x => x.ProfileID != null).GroupBy(x => x.ProfileID.Value).ToDictionary(x => x.Key, x => x.ToList());
            if (TotalDataAll.listAttendanceTableItem != null)
            {
                TotalDataAll.dicAttendanceTableItem = TotalDataAll.listAttendanceTableItem.GroupBy(x => x.AttendanceTableID).ToDictionary(x => x.Key, x => x.ToList());
                TotalDataAll.dicAttendanceTableItemGroupByProfile = TotalDataAll.listAttendanceTableItem.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            }
            if (TotalDataAll.listAttendanceTable != null)
            {
                TotalDataAll.dicAttendanceTable = TotalDataAll.listAttendanceTable.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            }

            if (TotalDataAll.listRecalAttendanceTable != null)
            {
                TotalDataAll.dicRecalAttendanceTable = TotalDataAll.listRecalAttendanceTable.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            }
            if (TotalDataAll.listRecalAttendanceTableItem != null)
            {
                TotalDataAll.dicRecalAttendanceTableItem = TotalDataAll.listRecalAttendanceTableItem.GroupBy(x => x.RecalAttendanceTableID).ToDictionary(x => x.Key, x => x.ToList());
                TotalDataAll.dicRecalAttendanceTableItemGroupByProfile = TotalDataAll.listRecalAttendanceTableItem.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            }
            if (TotalDataAll.listAttendanceTablePaybackItem != null)
            {
                TotalDataAll.dicAttendanceTablePaybackItem = TotalDataAll.listAttendanceTablePaybackItem
                    .GroupBy(x => x.AttendanceTableID).ToDictionary(x => x.Key, x => x.ToList());
            }
            if (TotalDataAll.listAttendanceTablePayback != null)
            {
                TotalDataAll.dicAttendanceTablePayback = TotalDataAll.listAttendanceTablePayback.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            }
            if (TotalDataAll.listPayrollTablePayBackItem != null)
            {
                TotalDataAll.dicPayrollTablePayBackItem = TotalDataAll.listPayrollTablePayBackItem.GroupBy(x => x.ProfileID).ToDictionary(x => x.Key, x => x.ToList());
            }

            #endregion
        }
    }
}
